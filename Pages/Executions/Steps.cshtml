@page
@model EtlManager.Pages.Executions.StepsModel

@{
    ViewData["Title"] = "Executions";
}

<div class="btn-group btn-group-sm">
    <a class="btn btn-outline-secondary" asp-page="./Jobs">Jobs</a>
    <a class="btn btn-outline-secondary active">Steps</a>
</div>
<p />
<form>
    <div class="form-row">
        <div class="form-group col-md-2">
            <label>Status</label>
            <select asp-for="Status" asp-items="Model.Statuses" class="form-control">
                <option value="">ALL</option>
            </select>
        </div>
        <div class="form-group col-md-4">
            <label>Job</label>
            <select asp-for="JobName" asp-items="Model.JobNames" class="form-control">
                <option value="">All</option>
            </select>
        </div>
        <div class="form-group col-md-4">
            <label>Step</label>
            <select asp-for="StepName" asp-items="Model.StepNames" class="form-control">
                <option value="">All</option>
            </select>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-3">
            <label>Date & time until</label>
            <input asp-for="DateTimeUntil" class="form-control" type="datetime-local">
        </div>
        <div class="form-group col-md-1">
            <label>Interval (h)</label>
            <input asp-for="IntervalHours" class="form-control">
        </div>
    </div>
    <div class="form-row">
        <input type="submit" value="Refresh" class="btn btn-primary" />
    </div>
</form>

<p />

<table class="table table-sm table-hover">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Executions[0].StepName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Executions[0].StartDateTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Executions[0].EndDateTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Executions[0].ExecutionStatus)
            </th>
            <th>
                Duration
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Executions)
        {
            <tr style="cursor: pointer;" data-toggle="modal" data-target="#modal_@item.StepExecutionId">
                <td>
                    @Html.DisplayFor(modelItem => item.StepName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StartDateTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EndDateTime)
                </td>
                <td>
                    @{
                        switch (item.ExecutionStatus)
                        {
                            case "COMPLETED":
                                <span class="badge badge-success">@Html.DisplayFor(modelItem => item.ExecutionStatus)</span>
                                break;
                            case "SKIPPED":
                            case "FAILED":
                                <span class="badge badge-danger">@Html.DisplayFor(modelItem => item.ExecutionStatus)</span>
                                break;
                            case "AWAIT RETRY":
                                <span class="badge badge-warning">@Html.DisplayFor(modelItem => item.ExecutionStatus)</span>
                                break;
                            case "RUNNING":
                                <span class="badge badge-primary">@Html.DisplayFor(modelItem => item.ExecutionStatus)</span>
                                break;
                            default:
                                <span class="badge badge-secondary">@Html.DisplayFor(modelItem => item.ExecutionStatus)</span>
                                break;
                        }
                    }
                </td>
                <td>
                    <text>@item.GetDurationInReadableFormat()</text>
                </td>
            </tr>
        }
    </tbody>
</table>


@*Generate modal popup windows to display step execution details*@
@foreach (var item in Model.Executions)
{
    <div class="modal fade" id="modal_@item.StepExecutionId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@item.StepName</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.ExecutionId)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.ExecutionId)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.JobId)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.JobId)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.JobName)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.JobName)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.StepId)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.StepId)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.StepName)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.StepName)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.StepType)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.StepType)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.CreatedDateTime)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.CreatedDateTime)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.StartDateTime)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.StartDateTime)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.EndDateTime)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.EndDateTime)
                        </dd>
                        <dt class="col-sm-2">
                            <text>Duration</text>
                        </dt>
                        <dd class="col-sm-10">
                            <text>@item.GetDurationInReadableFormat()</text>
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.ExecutionStatus)
                        </dt>
                        <dd class="col-sm-10">
                            @{
                                switch (item.ExecutionStatus)
                                {
                                    case "COMPLETED":
                                        <span class="badge badge-success">@Html.DisplayFor(model => item.ExecutionStatus)</span>
                                        break;
                                    case "SKIPPED":
                                    case "FAILED":
                                        <span class="badge badge-danger">@Html.DisplayFor(model => item.ExecutionStatus)</span>
                                        break;
                                    case "AWAIT RETRY":
                                        <span class="badge badge-warning">@Html.DisplayFor(model => item.ExecutionStatus)</span>
                                        break;
                                    case "RUNNING":
                                        <span class="badge badge-primary">@Html.DisplayFor(model => item.ExecutionStatus)</span>
                                        break;
                                    default:
                                        <span class="badge badge-primary">@Html.DisplayFor(model => item.ExecutionStatus)</span>
                                        break;
                                }
                            }
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.ErrorMessage)
                        </dt>
                        <dd class="col-sm-10">
                            <text class="text-danger" style="white-space: pre-wrap">@item.ErrorMessage</text>
                        </dd>
                        @if (item.StepType == "SQL")
                        {
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => item.SqlStatement)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => item.SqlStatement)
                            </dd>
                        }
                        else if (item.StepType == "SSIS")
                        {
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => item.PackagePath)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => item.PackagePath)
                            </dd>
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => item.ExecuteIn32BitMode)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => item.ExecuteIn32BitMode)
                            </dd>
                        }
                    </dl>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
