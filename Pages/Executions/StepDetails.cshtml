@page
@model EtlManager.Pages.Executions.StepDetailsModel

@{
    ViewData["Title"] = "Details";
}

<div>
    <h4>Details</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Execution.JobName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Execution.JobName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Execution.StepName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Execution.StepName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Execution.StepType)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Execution.StepType)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Execution.CreatedDateTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Execution.CreatedDateTime)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Execution.StartDateTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Execution.StartDateTime)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Execution.EndDateTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Execution.EndDateTime)
        </dd>
        <dt class="col-sm-2">
            <text>Duration</text>
        </dt>
        <dd class="col-sm-10">
            <text>@Model.Execution.GetDurationInReadableFormat()</text>
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Execution.ExecutionStatus)
        </dt>
        <dd class="col-sm-10">
            @{
                switch (Model.Execution.ExecutionStatus)
                {
                    case "COMPLETED":
                        <span class="badge badge-success">@Html.DisplayFor(model => model.Execution.ExecutionStatus)</span>
                        break;
                    case "FAILED":
                        <span class="badge badge-danger">@Html.DisplayFor(model => model.Execution.ExecutionStatus)</span>
                        break;
                    case "SKIPPED":
                        <span class="badge badge-warning">@Html.DisplayFor(model => model.Execution.ExecutionStatus)</span>
                        break;
                    default:
                        <span class="badge badge-primary">@Html.DisplayFor(model => model.Execution.ExecutionStatus)</span>
                        break;
                }
            }
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Execution.ErrorMessage)
        </dt>
        <dd class="col-sm-10">
            <text class="text-danger" style="white-space: pre-wrap">@Model.Execution.ErrorMessage</text>
        </dd>
        @if (Model.Execution.StepType == "SQL")
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Execution.SqlStatement)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Execution.SqlStatement)
            </dd>
        }
        else if (Model.Execution.StepType == "SSIS")
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Execution.PackagePath)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Execution.PackagePath)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Execution.ExecuteIn32BitMode)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Execution.ExecuteIn32BitMode)
            </dd>
        }
    </dl>
</div>
