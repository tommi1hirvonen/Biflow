@page
@model EtlManager.Pages.Executions.JobDetailsGraphModel

@{
    ViewData["Title"] = "Details";
}

<p></p>
<div class="btn-toolbar" role="toolbar">
    <div class="btn-group btn-group-sm mr-2" role="group">
        <a class="btn btn-secondary btn-sm" style="color: white;" asp-page="./JobDetails" asp-route-id="@Model.ExecutionId">Table</a>
        <a class="btn btn-secondary btn-sm active" style="color: white;">Graph</a>
    </div>
    <div class="btn-group btn-group-sm mr-2" role="group">
        @if (Model.Collapsed == false)
        {
            <a class="btn btn-secondary btn-sm active" style="color: white;">Expanded</a>
            <a class="btn btn-secondary btn-sm" style="color: white;" asp-page="./JobDetailsGraph" asp-route-id="@Model.ExecutionId" asp-route-collapsed="true">Collapsed</a>
        }
        else
        {
            <a class="btn btn-secondary btn-sm" style="color: white;" asp-page="./JobDetailsGraph" asp-route-id="@Model.ExecutionId" asp-route-collapsed="false">Expanded</a>
            <a class="btn btn-secondary btn-sm active" style="color: white;">Collapsed</a>
        }
    </div>
</div>
<p></p>
<div>
    <svg viewBox="0 0 @(Model.ChartWidth+20) @Model.ChartHeight">
        <g transform="translate(@Model.ChartPaddingLeft,@Model.ChartPaddingTop)">
            <g transform="translate(0,@(Model.ChartHeight-Model.ChartPaddingTop-25))">
                <g transform="translate(0,0)">
                    <line y2="6" x2="0" style="stroke: #000;"></line>
                    <text dy=".71em" y="9" x="0" style="text-anchor: middle; font-size: 13px;">@Model.MinTime.ToString("HH:mm")</text>
                </g>
            </g>
            <g transform="translate(@(Model.ChartWidth-Model.ChartPaddingLeft),@(Model.ChartHeight-Model.ChartPaddingTop-25))">
                <g transform="translate(0,0)">
                    <line y2="6" x2="0" style="stroke: #000;"></line>
                    <text dy=".71em" y="9" x="0" style="text-anchor: middle; font-size: 13px;">@Model.MaxTime.ToString("HH:mm")</text>
                </g>
            </g>
            @foreach (var execution in Model.Executions)
            {
                <g transform="translate(0,@(Model.ChartElements[execution.StepExecutionId].LabelYLocation))">
                    <text dy=".32em" x="-9" y="0" style="text-anchor: end; font-size: 13px;">@execution.StepName</text>
                </g>
            }
            @foreach (var execution in Model.Executions)
            {
                <rect style="fill: @GetFillFromStatus(execution.ExecutionStatus);"
                        y="@(Model.ChartElements[execution.StepExecutionId].BarYLocation)"
                        height="@(Model.BarHeight.ToString().Replace(',', '.'))"
                        x="@(Model.ChartElements[execution.StepExecutionId].BarXLocation)"
                        width="@(Model.ChartElements[execution.StepExecutionId].BarWidth)">
                    <title>@execution.StepName - @execution.GetDurationInReadableFormat()</title>
                </rect>
            }
        </g>
    </svg>
</div>

@functions {
    public string GetFillFromStatus(string status)
    {
        switch (status)
        {
            case "COMPLETED":
                return "#28a745"; // green
            case "FAILED":
                return "#dc3545"; // red
            case "SKIPPED":
                return "#ffc107"; // orange
            case "RUNNING":
            default:
                return "#007bff"; // blue
        }
    }
}
