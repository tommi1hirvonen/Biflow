@page
@model EtlManager.Pages.Executions.JobDetailsModel

@{
    ViewData["Title"] = "Details";
}


<h4>@Model.JobExecution.JobName</h4>
<p></p>
<div class="btn-toolbar" role="toolbar">
    <div class="btn-group btn-group-sm mr-2" role="group">
        <a id="button_refresh" class="btn btn-primary btn-sm" asp-page="./JobDetails" asp-route-id="@Model.JobExecution.ExecutionId" asp-route-graph="@Model.Graph" asp-route-collapsed="@Model.Collapsed">
            Refresh
        </a>
    </div>
    <div class="btn-group btn-group-sm mr-2" role="group">
        <button class="btn btn-outline-secondary btn-sm" type="button" data-toggle="collapse" data-target="#jobDetails" aria-expanded="false" aria-controls="jobDetails">
            Job details
        </button>
    </div>
    <div class="btn-group btn-group-sm mr-2" role="group">
        <button id="button_toggle_table" class="btn btn-outline-secondary @(Model.Graph ? "" : "active")" onclick="toggleTable()">Table</button>
        <button id="button_toggle_graph" class="btn btn-outline-secondary @(Model.Graph ? "active" : "")" onclick="toggleGraph()">Graph</button>
    </div>
    <div id="button_group_graph" style="@(Model.Graph ? "" : "display: none;")" class="btn-group btn-group-sm mr-2" role="group">
        <button id="button_toggle_expanded" class="btn btn-outline-secondary btn-sm @(Model.Collapsed ? "" : "active")" onclick="toggleGraphExpanded()">Expanded</button>
        <button id="button_toggle_collapsed" class="btn btn-outline-secondary btn-sm @(Model.Collapsed ? "active" : "")" onclick="toggleGraphCollapsed()">Collapsed</button>
    </div>
</div>

<p />
<div class="collapse" id="jobDetails">
    <div class="card card-body">
        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.JobExecution.ExecutionId)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.JobExecution.ExecutionId)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.JobExecution.JobId)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.JobExecution.JobId)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.JobExecution.DependencyMode)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.JobExecution.DependencyMode)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.JobExecution.CreatedDateTime)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.JobExecution.CreatedDateTime)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.JobExecution.StartDateTime)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.JobExecution.StartDateTime)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.JobExecution.EndDateTime)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.JobExecution.EndDateTime)
            </dd>
            <dt class="col-sm-2">
                Number of steps
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.JobExecution.NumberOfSteps)
            </dd>
            <dt class="col-sm-2">
                Success percent
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.JobExecution.SuccessPercent)
            </dd>
            <dt class="col-sm-2">
                Duration
            </dt>
            <dd class="col-sm-10">
                <text>@Model.JobExecution.GetDurationInReadableFormat()</text>
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.JobExecution.ExecutionStatus)
            </dt>
            <dd class="col-sm-10">
                @{
                    switch (Model.JobExecution.ExecutionStatus)
                    {
                        case "COMPLETED":
                            <span class="badge badge-success">@Html.DisplayFor(model => model.JobExecution.ExecutionStatus)</span>
                            break;
                        case "FAILED":
                            <span class="badge badge-danger">@Html.DisplayFor(model => model.JobExecution.ExecutionStatus)</span>
                            break;
                        case "WARNING":
                            <span class="badge badge-warning">@Html.DisplayFor(model => model.JobExecution.ExecutionStatus)</span>
                            break;
                        case "RUNNING":
                            <span class="badge badge-primary">@Html.DisplayFor(model => model.JobExecution.ExecutionStatus)</span>
                            break;
                        default:
                            <span class="badge badge-secondary">@Html.DisplayFor(model => model.JobExecution.ExecutionStatus)</span>
                            break;
                    }
                }
            </dd>
        </dl>
    </div>
</div>



<table id="steps_table" class="table table-sm table-hover" style="@(Model.Graph ? "display: none;" : "")">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Executions[0].StepName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Executions[0].StartDateTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Executions[0].EndDateTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Executions[0].ExecutionStatus)
            </th>
            <th>
                Duration
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Executions)
        {
            <tr style="cursor: pointer;" data-toggle="modal" data-target="#modal_@item.StepExecutionId">
                <td>
                    @Html.DisplayFor(modelItem => item.StepName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StartDateTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EndDateTime)
                </td>
                <td>
                    @{
                        switch (item.ExecutionStatus)
                        {
                            case "COMPLETED":
                                <span class="badge badge-success">@Html.DisplayFor(modelItem => item.ExecutionStatus)</span>
                                break;
                            case "FAILED":
                                <span class="badge badge-danger">@Html.DisplayFor(modelItem => item.ExecutionStatus)</span>
                                break;
                            case "SKIPPED":
                            case "AWAIT RETRY":
                                <span class="badge badge-warning">@Html.DisplayFor(modelItem => item.ExecutionStatus)</span>
                                break;
                            case "RUNNING":
                                <span class="badge badge-primary">@Html.DisplayFor(modelItem => item.ExecutionStatus)</span>
                                break;
                            default:
                                <span class="badge badge-secondary">@Html.DisplayFor(modelItem => item.ExecutionStatus)</span>
                                break;
                        }
                    }
                </td>
                <td>
                    <text>@item.GetDurationInReadableFormat()</text>
                </td>
            </tr>
        }
    </tbody>
</table>



<div id="steps_graph" style="@(Model.Graph ? "" : "display: none;")">
    <div id="graph_expanded" style="@(Model.Collapsed ? "display: none;" : "")">
        <svg viewBox="0 0 @(Model.ChartWidth+20) @Model.ChartHeight">
            <g transform="translate(@Model.ChartPaddingLeft,@Model.ChartPaddingTop)">
                <g transform="translate(0,@(Model.ChartHeight-Model.ChartPaddingTop-25))">
                    <g transform="translate(0,0)">
                        <line y2="6" x2="0" style="stroke: #000;"></line>
                        <text dy=".71em" y="9" x="0" style="text-anchor: middle; font-size: 13px;">@Model.MinTime.ToString("HH:mm")</text>
                    </g>
                </g>
                <g transform="translate(@(Model.ChartWidth-Model.ChartPaddingLeft),@(Model.ChartHeight-Model.ChartPaddingTop-25))">
                    <g transform="translate(0,0)">
                        <line y2="6" x2="0" style="stroke: #000;"></line>
                        <text dy=".71em" y="9" x="0" style="text-anchor: middle; font-size: 13px;">@Model.MaxTime.ToString("HH:mm")</text>
                    </g>
                </g>

                @foreach (var label in Model.ChartLabels)
                {
                    <g transform="translate(0,@label.LabelYLocation)">
                        <text dy=".32em" x="-9" y="0" style="text-anchor: end; font-size: 13px;">@label.StepName</text>
                    </g>

                    <line x1="0" x2="@(Model.ChartWidth-Model.ChartPaddingLeft)" y1="@label.LabelYLocation" y2="@label.LabelYLocation" style="stroke-dasharray: 5,5; stroke: rgb(210,210,210); stroke-width: 1;"></line>
                }

                @foreach (var chartElement in Model.ChartElements)
                {
                    <rect status="@chartElement.ExecutionStatus"
                          style="fill: @GetFillFromStatus(chartElement.ExecutionStatus); cursor: pointer;"
                          y="@chartElement.BarYLocation"
                          height="@(Model.BarHeight.ToString().Replace(',', '.'))"
                          x="@chartElement.BarXLocation"
                          width="@chartElement.BarWidth"
                          data-toggle="modal" data-target="#modal_@chartElement.StepExecutionId">
                    </rect>
                }
            </g>
        </svg>
    </div>
    
    <div id="graph_collapsed" style="@(Model.Collapsed ? "" : "display: none;")">
        <svg viewBox="0 0 @(Model.ChartWidth+20) @Model.ChartHeightCollapsed">
            <g transform="translate(@Model.ChartPaddingLeft,@Model.ChartPaddingTop)">
                <g transform="translate(0,@(Model.ChartHeightCollapsed-Model.ChartPaddingTop-25))">
                    <g transform="translate(0,0)">
                        <line y2="6" x2="0" style="stroke: #000;"></line>
                        <text dy=".71em" y="9" x="0" style="text-anchor: middle; font-size: 13px;">@Model.MinTime.ToString("HH:mm")</text>
                    </g>
                </g>
                <g transform="translate(@(Model.ChartWidth-Model.ChartPaddingLeft),@(Model.ChartHeightCollapsed-Model.ChartPaddingTop-25))">
                    <g transform="translate(0,0)">
                        <line y2="6" x2="0" style="stroke: #000;"></line>
                        <text dy=".71em" y="9" x="0" style="text-anchor: middle; font-size: 13px;">@Model.MaxTime.ToString("HH:mm")</text>
                    </g>
                </g>

                @foreach (var label in Model.ChartLabels)
                {
                    <g transform="translate(0,@label.LabelYLocationCollapsed)">
                        <text dy=".32em" x="-9" y="0" style="text-anchor: end; font-size: 13px;">@label.StepName</text>
                    </g>

                    <line x1="0" x2="@(Model.ChartWidth-Model.ChartPaddingLeft)" y1="@label.LabelYLocationCollapsed" y2="@label.LabelYLocationCollapsed" style="stroke-dasharray: 5,5; stroke: rgb(210,210,210); stroke-width: 1;"></line>
                }

                @foreach (var chartElement in Model.ChartElements)
                {
                    <rect status="@chartElement.ExecutionStatus"
                            style="fill: @GetFillFromStatus(chartElement.ExecutionStatus); cursor: pointer;"
                            y="@chartElement.BarYLocationCollapsed"
                            height="@(Model.BarHeightCollapsed.ToString().Replace(',', '.'))"
                            x="@chartElement.BarXLocation"
                            width="@chartElement.BarWidth"
                            data-toggle="modal" data-target="#modal_@chartElement.StepExecutionId">
                    </rect>
                }
            </g>
        </svg>
    </div>
</div>









@functions {
    public string GetFillFromStatus(string status)
    {
        switch (status)
        {
            case "COMPLETED":
                return "#28a745"; // green
            case "FAILED":
                return "#dc3545"; // red
            case "SKIPPED":
            case "AWAIT RETRY":
                return "#ffc107"; // orange
            case "RUNNING":
            default:
                return "#007bff"; // blue
        }
    }
}

@section Scripts {
    <script type="text/javascript">
        var executionId = "@Model.JobExecution.ExecutionId";
        var graph = @(Model.Graph ? "true" : "false");
        var collapsed = @(Model.Collapsed ? "true" : "false");

        function updateRefreshLink() {
            $('#button_refresh').attr('href', "/Executions/JobDetails?id=" + executionId + "&graph=" + graph + "&collapsed=" + collapsed);
        }

        function toggleTable() {
            $('#steps_graph').hide();
            $('#steps_table').show();
            $('#button_toggle_graph').removeClass('active');
            $('#button_toggle_table').addClass('active');
            $('#button_group_graph').hide();
            graph = false;
            updateRefreshLink();
        }

        function toggleGraph() {
            $('#steps_table').hide();
            $('#steps_graph').show();
            $('#button_toggle_table').removeClass('active');
            $('#button_toggle_graph').addClass('active');
            $('#button_group_graph').show();
            graph = true;
            updateRefreshLink();
        }

        function toggleGraphExpanded() {
            $('#graph_collapsed').hide();
            $('#graph_expanded').show();
            $('#button_toggle_expanded').addClass('active');
            $('#button_toggle_collapsed').removeClass('active');
            collapsed = false;
            updateRefreshLink();
        }

        function toggleGraphCollapsed() {
            $('#graph_expanded').hide();
            $('#graph_collapsed').show();
            $('#button_toggle_expanded').removeClass('active');
            $('#button_toggle_collapsed').addClass('active');
            collapsed = true;
            updateRefreshLink();
        }


        // Function to darken the rect elements when mouse hovering over them
        $(function () {
            $('rect').mouseenter(function () {
                var status = $(this).attr('status');
                $(this).css({ 'fill': getDarkerColorByStatus(status) });
            });
            $('rect').mouseleave(function () {
                var status = $(this).attr('status');
                $(this).css({ 'fill': getColorByStatus(status) });
            });
        });

        function getColorByStatus(status) {
            switch (status) {
                case "COMPLETED":
                    return "#28a745"; // green
                case "FAILED":
                    return "#dc3545"; // red
                case "SKIPPED":
                case "AWAIT RETRY":
                    return "#ffc107"; // orange
                case "RUNNING":
                default:
                    return "#007bff"; // blue
            }
        }

        function getDarkerColorByStatus(status) {
            switch (status) {
                case "COMPLETED":
                    return "#088725"; // green
                case "FAILED":
                    return "#bc1525"; // red
                case "SKIPPED":
                case "AWAIT RETRY":
                    return "#dfa100"; // orange
                case "RUNNING":
                default:
                    return "#005bdf"; // blue
            }
        }
    </script>
}




@*Generate modal popup windows to display step execution details*@
@foreach (var item in Model.Executions)
{
    <div class="modal fade" id="modal_@item.StepExecutionId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@item.StepName</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.ExecutionId)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.ExecutionId)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.JobId)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.JobId)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.JobName)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.JobName)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.StepId)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.StepId)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.StepName)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.StepName)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.StepType)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.StepType)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.CreatedDateTime)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.CreatedDateTime)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.StartDateTime)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.StartDateTime)
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.EndDateTime)
                        </dt>
                        <dd class="col-sm-10">
                            @Html.DisplayFor(model => item.EndDateTime)
                        </dd>
                        <dt class="col-sm-2">
                            <text>Duration</text>
                        </dt>
                        <dd class="col-sm-10">
                            <text>@item.GetDurationInReadableFormat()</text>
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.ExecutionStatus)
                        </dt>
                        <dd class="col-sm-10">
                            @{
                                switch (item.ExecutionStatus)
                                {
                                    case "COMPLETED":
                                        <span class="badge badge-success">@Html.DisplayFor(model => item.ExecutionStatus)</span>
                                        break;
                                    case "FAILED":
                                        <span class="badge badge-danger">@Html.DisplayFor(model => item.ExecutionStatus)</span>
                                        break;
                                    case "SKIPPED":
                                    case "AWAIT RETRY":
                                        <span class="badge badge-warning">@Html.DisplayFor(model => item.ExecutionStatus)</span>
                                        break;
                                    case "RUNNING":
                                        <span class="badge badge-primary">@Html.DisplayFor(model => item.ExecutionStatus)</span>
                                        break;
                                    default:
                                        <span class="badge badge-secondary">@Html.DisplayFor(model => item.ExecutionStatus)</span>
                                        break;
                                }
                            }
                        </dd>
                        <dt class="col-sm-2">
                            @Html.DisplayNameFor(model => item.ErrorMessage)
                        </dt>
                        <dd class="col-sm-10">
                            <text class="text-danger" style="white-space: pre-wrap">@item.ErrorMessage</text>
                        </dd>
                        @if (item.StepType == "SQL")
                        {
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => item.SqlStatement)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => item.SqlStatement)
                            </dd>
                        }
                        else if (item.StepType == "SSIS")
                        {
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => item.PackagePath)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => item.PackagePath)
                            </dd>
                            <dt class="col-sm-2">
                                @Html.DisplayNameFor(model => item.ExecuteIn32BitMode)
                            </dt>
                            <dd class="col-sm-10">
                                @Html.DisplayFor(model => item.ExecuteIn32BitMode)
                            </dd>
                        }
                    </dl>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
