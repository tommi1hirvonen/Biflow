@page
@model EtlManager.Pages.DashboardModel
@{
    ViewData["Title"] = "Dashboard";
}

<h3>Dashboard</h3>
<hr />
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h5>Avg. execution duration</h5>
            <canvas class="my-4 w-100" id="myChart1" width="900" height="380"></canvas>
        </div>
        <div class="col">
            <h5>Job success rate</h5>
            <canvas class="my-4 w-100" id="myChart2" width="900" height="380"></canvas>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <h5># of executions</h5>
            <canvas class="my-4 w-100" id="myChart3" width="900" height="380"></canvas>
        </div>
        <div class="col">
            <h5>Top 5 failing steps</h5>
            <div class="row mt-4">
                <table class="table table-striped table-sm">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Step</th>
                            <th>Job</th>
                            <th>Success %</th>
                            <th># of executions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.TopFailedSteps.Count; i++)
                        {
                            <tr>
                                <td>@(i+1)</td>
                                <td>
                                    <a class="text-dark" asp-page="/Jobs/JobDetails/StepDetails/Edit" asp-route-id="@Model.TopFailedSteps[i].StepId">
                                        @Model.TopFailedSteps[i].StepName
                                    </a>
                                </td>
                                <td>
                                    <a class="text-dark" asp-page="/Jobs/JobDetails/History" asp-route-id="@Model.TopFailedSteps[i].JobId">
                                        @Model.TopFailedSteps[i].JobName
                                    </a>
                                </td>
                                <td>@Html.DisplayFor(item => Model.TopFailedSteps[i].SuccessPercent)</td>
                                <td>@Model.TopFailedSteps[i].NoOfExecutions</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@functions {
    public string GetDurationDatasetString()
    {
        return string.Join(',',
            Model.TimeSeriesItems.Select(e =>
                "{label: '" + e.Key + "', fill: false, backgroundColor: stringToColour('" + e.Key + "'), borderColor: stringToColour('" + e.Key + "'), data: [" +
                    string.Join(',', e.Value.Select(v => @"{t: new Date(""" + v.Date.ToString("yyyy-M-d")?.Replace('.', ':') + @"""), y: " + v.DurationInMinutes.ToString().Replace(',', '.') + @"}")) +
                "]}")
            );
    }

    public string GetNoOfExecutionsDatasetString()
    {
        return string.Join(',',
            Model.TimeSeriesItems.Select(e =>
                "{label: '" + e.Key + "', fill: false, backgroundColor: stringToColour('" + e.Key + "'), borderColor: stringToColour('" + e.Key + "'), data: [" +
                    string.Join(',', e.Value.Select(v => @"{t: new Date(""" + v.Date.ToString("yyyy-M-d")?.Replace('.', ':') + @"""), y: " + v.NumberOfExecutions + @"}")) +
                "]}")
            );
    }
}

@section Scripts {
    <script src="~/lib/Chart.js/Chart.min.js"></script>
    <script src="~/lib/Chart.js/Chart.bundle.js"></script>
    <script type="text/javascript">

        var stringToColour = function (str) {
            var hash = 0;
            for (var i = 0; i < str.length; i++) {
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }
            var colour = '#';
            for (var i = 0; i < 3; i++) {
                var value = (hash >> (i * 8)) & 0xFF;
                colour += ('00' + value.toString(16)).substr(-2);
            }
            return colour;
        }

        $(function () {

            // Average execution duration in minutes by date
            var datasets1 = [
                    @Html.Raw(GetDurationDatasetString())
            ];

            var ctx1 = document.getElementById('myChart1')

            var myChart1 = new Chart(ctx1, {
                type: 'line',
                data: {
                    datasets: datasets1
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            },
                            scaleLabel: {
                                display: true,
                                labelString: 'min'
                            }
                        }],
                        xAxes: [{
                            type: 'time'
                        }]
                    }
                }
            })

            // Job success rates
            var ctx2 = document.getElementById('myChart2')
            var myChart2 = new Chart(ctx2, {
                type: 'horizontalBar',
                data: {
                    labels: [
                        @Html.Raw(string.Join(',', Model.Jobs.Select(job => "'" + job.JobName + "'")))
                    ],
                    datasets: [{
                        data: [
                            @string.Join(',', Model.Jobs.Select(job => decimal.Round(job.SuccessPercent, 2).ToString().Replace(',', '.')))
                        ],
                        lineTension: 0,
                        backgroundColor: [
                            @Html.Raw(string.Join(',', Model.Jobs.Select(job => "stringToColour('" + job.JobName + "')")))
                        ]
                    }]
                },
                options: {
                    scales: {
                        xAxes: [{
                            ticks: {
                                beginAtZero: true,
                                max: 100,
                                min: 0,
                                stepSize: 10,
                                callback: function (value, index, values) {
                                    return value + '%';
                                }
                            }
                        }]
                    },
                    legend: {
                        display: false
                    }
                }
            })


            // Number of job executions by date
            var datasets3 = [
                    @Html.Raw(GetNoOfExecutionsDatasetString())
            ];

            var ctx3 = document.getElementById('myChart3')

            var myChart3 = new Chart(ctx3, {
                type: 'line',
                data: {
                    datasets: datasets3
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                stepSize: 1
                            }
                        }],
                        xAxes: [{
                            type: 'time'
                        }]
                    }
                }
            })

        })




    </script>
}