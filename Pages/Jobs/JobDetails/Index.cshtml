@page
@model EtlManager.Pages.Jobs.JobDetails.IndexModel
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment WebHostEnvironment
@{
    ViewData["Title"] = "Job Steps";
}

<h3>Jobs</h3>
<hr />
<partial name="_JobDetailsNavigationPartial"
         model="@(new EtlManager.Pages.Shared._JobDetailsNavigationPartialModel { Job = Model.Job, Jobs = Model.Jobs, RedirectPage = "./Index" })" />
<p></p>
<div class="container-fluid">
    <div class="row align-items-center">

        <div class="col">
            <button type="button" class="btn btn-success" data-toggle="modal" data-target="#modal_create">
                New step
            </button>
        </div>

        <div class="col">
            <div class="custom-control custom-switch">
                <input type="checkbox" class="custom-control-input" id="dependency_mode_toggle" asp-for="@Model.Job.UseDependencyMode" onchange="toggleDependencyMode(this)" data-job-id="@Model.Job.JobId">
                <label class="custom-control-label" style="cursor: pointer;" for="dependency_mode_toggle">Dependency mode</label>
            </div>
        </div>

        <div class="col">
            <div class="btn-group">
                <button id="button_execute" type="button" class="btn btn-outline-primary" data-toggle="modal" data-target="#modal_execute">
                    Execute...
                </button>
            </div>
            <text>&nbsp;&nbsp;&nbsp;&nbsp;</text>
            <div id="spinner_starting" class="spinner-border text-primary align-middle" hidden role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>

    </div>
</div>
<p />
<div id="alert_execution">

</div>
<div id="alert_execution_error" style="display: none;" class="alert alert-danger" role="alert">
    Alert message set in jQuery
</div>

<div class="row col-4 mt-4 mb-4">
    <div class="input-group">
        <div class="input-group-prepend">
            <div class="input-group-text">
                @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
            </div>
        </div>
        <input type="text" id="steps_search_input" class="form-control" onkeyup="filterSteps('steps_search_input', 'steps_table', 0)" placeholder="Search" />
    </div>
</div>

<table id="steps_table" class="table table-sm table-hover">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Steps[0].StepName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Steps[0].ExecutionPhase)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Steps[0].StepType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Steps[0].IsEnabled)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Steps)
        {
            <tr>
                <td class="align-middle">
                    <a class="text-dark" asp-page="./StepDetails/Edit" asp-route-id="@item.StepId">@item.StepName</a>
                </td>
                <td class="align-middle">
                    @Html.DisplayFor(modelItem => item.ExecutionPhase)
                </td>
                <td class="align-middle">
                    @if (item.StepType == "SQL")
                    {
                        @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/material/code-black-48dp.svg")))
                    }
                    else if (item.StepType == "SSIS")
                    {
                        @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/material/meditation-black-48dp.svg")))
                    }
                </td>
                <td class="align-middle">
                    <form>
                        <div class="custom-control custom-switch">
                            <input type="checkbox" class="custom-control-input" id="@item.StepId" asp-for="@item.IsEnabled" onchange="toggleEnabled(this)" data-step-id="@item.StepId">
                            <label class="custom-control-label" style="cursor: pointer;" for="@item.StepId"></label>
                        </div>
                    </form>
                </td>
                <td align="center">
                    @*Open corresponding modal popup to display step execution details*@
                    <button type="button" class="btn btn-outline-primary btn-sm" data-toggle="modal" data-target="#modal_@item.StepId">
                        Details
                    </button>
                    &nbsp;
                    <a class="btn btn-sm btn-outline-primary" asp-page="./StepDetails/StepHistory" asp-route-id="@item.StepId">
                        History
                    </a>
                    &nbsp;
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Copy to
                        </button>
                        <div class="dropdown-menu">
                            <form method="post">
                                <button class="dropdown-item" asp-page-handler="Copy" asp-route-stepId="@item.StepId" asp-route-targetJobId="@item.JobId" asp-route-sourceJobId="@item.JobId">
                                    here
                                </button>
                            </form>
                            <div class="dropdown-divider"></div>
                            @foreach (var job in Model.Jobs.Where(job => job.JobId != Model.Job.JobId))
                            {
                                <form method="post">
                                    <button class="dropdown-item" asp-page-handler="Copy" asp-route-stepId="@item.StepId" asp-route-targetJobId="@job.JobId" asp-route-sourceJobId="@item.JobId">
                                        @job.JobName
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                    &nbsp;
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-danger btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Delete
                        </button>
                        <div class="dropdown-menu">
                            <button class="dropdown-item" onclick="deleteStep(this, '@item.StepId')">Confirm</button>
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>



@*EXECUTE MODAL*@
<div class="modal fade" id="modal_execute" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Execute steps</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col mx-5">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
                                </div>
                            </div>
                            <input type="text" id="executable_steps_search_input" class="form-control" onkeyup="filterSteps('executable_steps_search_input', 'table_executable_steps', 1)" placeholder="Search" autocomplete="off" />
                        </div>
                        <table class="table" id="table_executable_steps">
                            <thead>
                                <tr>
                                    <th class="align-top">
                                        <input type="checkbox" class="form-check-input" id="execute_check_all">
                                    </th>
                                    <th>Step name</th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.Steps[0].ExecutionPhase)
                                    </th>
                                    <th>
                                        @Html.DisplayNameFor(model => model.Steps[0].StepType)
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var step in Model.Job.Steps.OrderBy(step => step.ExecutionPhase).ThenBy(step => step.StepName))
                                {
                                    <tr id="executable_step_@step.StepId">
                                        <td>
                                            <input type="checkbox" class="form-check-input" name="execute_checkbox" id="@step.StepId">
                                        </td>
                                        <td>
                                            @step.StepName
                                        </td>
                                        <td class="align-middle">
                                            @Html.DisplayFor(modelItem => step.ExecutionPhase)
                                        </td>
                                        <td class="align-middle">
                                            @if (step.StepType == "SQL")
                                            {
                                                @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/material/code-black-48dp.svg")))
                                            }
                                            else if (step.StepType == "SSIS")
                                            {
                                                @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/material/meditation-black-48dp.svg")))
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <input id="button_execute" type="button" class="btn btn-primary" data-dismiss="modal" onclick="startExecution()" value="Execute" />
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>


@*NEW STEP MODAL*@
<div class="modal fade" id="modal_create" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" asp-page-handler="Create" autocomplete="off">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">New step</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col mx-3">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <input type="hidden" asp-for="NewStep.JobId" />
                            <input type="hidden" asp-for="NewStep.IsEnabled" value="true" />
                            <div class="form-group">
                                <label asp-for="NewStep.StepName" class="control-label"></label>
                                <input asp-for="NewStep.StepName" class="form-control" />
                                <span asp-validation-for="NewStep.StepName" class="text-danger"></span>
                            </div>
                            <div class="form-row">
                                <div class="form-group col">
                                    <label asp-for="NewStep.ExecutionPhase" class="control-label"></label>
                                    <input asp-for="NewStep.ExecutionPhase" class="form-control" />
                                    <span asp-validation-for="NewStep.ExecutionPhase" class="text-danger"></span>
                                </div>
                                <div class="form-group col">
                                    <label asp-for="NewStep.StepType" class="control-label"></label>
                                    <select asp-for="NewStep.StepType" class="form-control" id="step_type" onchange="stepTypeSelected()">
                                        <option>SQL</option>
                                        <option>SSIS</option>
                                    </select>
                                    <span asp-validation-for="NewStep.StepType" class="text-danger"></span>
                                </div>
                                <div class="form-group col">
                                    <label asp-for="NewStep.RetryAttempts" class="control-label"></label>
                                    <input asp-for="NewStep.RetryAttempts" class="form-control" />
                                    <span asp-validation-for="NewStep.RetryAttempts" class="text-danger"></span>
                                </div>
                                <div class="form-group col">
                                    <label asp-for="NewStep.RetryIntervalMinutes" class="control-label"></label>
                                    <input asp-for="NewStep.RetryIntervalMinutes" class="form-control" />
                                    <span asp-validation-for="NewStep.RetryIntervalMinutes" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="form-group" id="sql_statement_div">
                                <label asp-for="NewStep.SqlStatement" class="control-label"></label>
                                <textarea asp-for="NewStep.SqlStatement" id="sql_input" class="form-control" style="font-family:monospace;" rows="3"></textarea>
                                <span asp-validation-for="NewStep.SqlStatement" class="text-danger"></span>
                            </div>
                            <div class="form-row">
                                <div class="form-group col" id="server_div">
                                    <label asp-for="NewStep.ServerName" class="control-label"></label>
                                    <input asp-for="NewStep.ServerName" id="server_input" class="form-control" />
                                    <span asp-validation-for="NewStep.ServerName" class="text-danger"></span>
                                </div>
                                <div class="form-group col" id="folder_div">
                                    <label asp-for="NewStep.FolderName" class="control-label"></label>
                                    <input asp-for="NewStep.FolderName" id="folder_input" class="form-control" />
                                    <span asp-validation-for="NewStep.FolderName" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col" id="project_div">
                                    <label asp-for="NewStep.ProjectName" class="control-label"></label>
                                    <input asp-for="NewStep.ProjectName" id="project_input" class="form-control" />
                                    <span asp-validation-for="NewStep.ProjectName" class="text-danger"></span>
                                </div>
                                <div class="form-group col" id="package_div">
                                    <label asp-for="NewStep.PackageName" class="control-label"></label>
                                    <input asp-for="NewStep.PackageName" id="package_input" class="form-control" />
                                    <span asp-validation-for="NewStep.PackageName" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="form-group form-check" id="32_bit_mode_div">
                                <label class="form-check-label">
                                    <input class="form-check-input" asp-for="NewStep.ExecuteIn32BitMode" /> @Html.DisplayNameFor(model => model.NewStep.ExecuteIn32BitMode)
                                </label>
                            </div>

                            <text id="sql_error" class="text-danger" style="display: none;">SQL statement cannot be empty</text>
                            <text id="ssis_error" class="text-danger" style="display: none;">Folder, project and package names cannot be empty</text>

                            <p />
                            <div id="parameters_div">
                                <p />
                                <h5>Parameters</h5>
                                <p />
                                <table id="parameters_table" class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th>Name</th>
                                            <th>Value</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>@*Dummy row needed for the JS remove logic to work when there are no actual rows left*@</tr>
                                    </tbody>
                                </table>
                                <div id="duplicate_parameter_error" style="display: none;">
                                    <text class="text-danger">Duplicate parameter names</text>
                                    <p />
                                </div>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addParameter()">Add</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input id="button_submit" type="submit" class="btn btn-success" value="Create" />
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

@*Generate modal popup windows to display step details*@
@foreach (var item in Model.Steps)
{
    <div class="modal fade" id="modal_@item.StepId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@item.StepName</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-3">
                            @Html.DisplayNameFor(model => item.JobId)
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => item.JobId)
                        </dd>
                        <dt class="col-sm-3">
                            @Html.DisplayNameFor(model => item.StepId)
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => item.StepId)
                        </dd>
                        <dt class="col-sm-3">
                            @Html.DisplayNameFor(model => item.StepName)
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => item.StepName)
                        </dd>
                        <dt class="col-sm-3">
                            @Html.DisplayNameFor(model => item.CreatedDateTime)
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => item.CreatedDateTime)
                        </dd>
                        <dt class="col-sm-3">
                            @Html.DisplayNameFor(model => item.LastModifiedDateTime)
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => item.LastModifiedDateTime)
                        </dd>

                        <dt class="col-sm-3">
                            @Html.DisplayNameFor(model => item.ExecutionPhase)
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => item.ExecutionPhase)
                        </dd>
                        <dt class="col-sm-3">
                            @Html.DisplayNameFor(model => item.StepType)
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => item.StepType)
                        </dd>
                        <dt class="col-sm-3">
                            @Html.DisplayNameFor(model => item.RetryAttempts)
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => item.RetryAttempts)
                        </dd>
                        <dt class="col-sm-3">
                            @Html.DisplayNameFor(model => item.RetryIntervalMinutes)
                        </dt>
                        <dd class="col-sm-9">
                            @Html.DisplayFor(model => item.RetryIntervalMinutes)
                        </dd>
                        @if (item.StepType == "SQL")
                        {
                            <dt class="col-sm-3">
                                @Html.DisplayNameFor(model => item.SqlStatement)
                            </dt>
                            <dd class="col-sm-9">
                                <pre><code>@item.SqlStatement</code></pre>
                            </dd>
                        }
                        else if (item.StepType == "SSIS")
                        {
                            <dt class="col-sm-3">
                                @Html.DisplayNameFor(model => item.ServerName)
                            </dt>
                            <dd class="col-sm-9">
                                @Html.DisplayFor(model => item.ServerName)
                            </dd>
                            <dt class="col-sm-3">
                                @Html.DisplayNameFor(model => item.FolderName)
                            </dt>
                            <dd class="col-sm-9">
                                @Html.DisplayFor(model => item.FolderName)
                            </dd>
                            <dt class="col-sm-3">
                                @Html.DisplayNameFor(model => item.ProjectName)
                            </dt>
                            <dd class="col-sm-9">
                                @Html.DisplayFor(model => item.ProjectName)
                            </dd>
                            <dt class="col-sm-3">
                                @Html.DisplayNameFor(model => item.PackageName)
                            </dt>
                            <dd class="col-sm-9">
                                @Html.DisplayFor(model => item.PackageName)
                            </dd>
                            <dt class="col-sm-3">
                                @Html.DisplayNameFor(model => item.ExecuteIn32BitMode)
                            </dt>
                            <dd class="col-sm-9">
                                @Html.DisplayFor(model => item.ExecuteIn32BitMode)
                            </dd>
                        }
                    </dl>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}



@section Scripts {

    <script type="text/javascript">

        function filterSteps(inputId, tableId, searchColumnIndex) {
            // Declare variables
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById(inputId);
            filter = input.value.toUpperCase();
            table = document.getElementById(tableId);
            tr = table.getElementsByTagName("tr");

            // Loop through all table rows, and hide those who don't match the search query
            for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName("td")[searchColumnIndex];
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            }
        }

        function toggleDependencyMode(elem) {
            var id_ = $(elem).data('job-id');

            $.ajax({
                url: "./JobDetails/Index?handler=ToggleDependencyMode",
                method: "POST",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: {
                    id: id_
                },
                success: function (response) {
                    if (!response.success) {
                        alert(response.responseText);
                    }
                },
                error: function (response) {
                    alert("AJAX error, try logging in again");
                }
            });
        }

        function toggleEnabled(elem) {
            var id_ = $(elem).data('step-id');
            //alert(id);

            $.ajax({
                url: "./JobDetails/Index?handler=ToggleEnabled",
                method: "POST",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: {
                    id: id_
                },
                success: function (response) {
                    if (!response.success) {
                        alert(response.responseText);
                    }
                },
                error: function (response) {
                    alert("AJAX error, try logging in again");
                }
            });
        }


        function deleteStep(element, id) {
            $.ajax({
                url: "./JobDetails/Index?handler=Delete",
                method: "POST",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: {
                    id: id
                },
                success: function (response) {
                    if (response.success) {
                        $(element).closest('tr').remove();
                        $('#executable_step_' + id).remove();
                    } else {
                        alert(response.responseText);
                    }
                },
                error: function (response) {
                    alert("AJAX error, try logging in again");
                }
            });
        }



        function startExecution() {
            var jobId = "@Model.Job.JobId";

            var stepsToExecute = [];
            $("input[name=execute_checkbox]:checked").each(function () {
                var element = $(this).closest('tr');
                if (element.css('display') != 'none') {
                    // Skip steps that have filtered and hidden using the search input
                    stepsToExecute.push(this.id);
                }
                $(this).prop('checked', false);
            });

            $('#execute_check_all').prop('checked', false);

            if (stepsToExecute.length == 0) {
                return;
            }

            var stepList = stepsToExecute.join(",");

            $('#button_execute').attr("disabled", "true");
            $('#spinner_starting').removeAttr("hidden");

            $.ajax({
                url: "./JobDetails/Index?handler=Execute",
                method: "POST",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: {
                    id: jobId,
                    stepIds: stepList
                },
                success: function (response) {
                    if (response.success) {
                        $('#button_execute').removeAttr("disabled");
                        $('#spinner_starting').attr("hidden", "hidden");

                        $('#alert_execution').empty();
                        $('#alert_execution').append(`
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                              Job started successfully - <a class="alert-link" href="/Executions/JobDetails?id=` + response.executionId + `" target="_blank">monitor execution</a>
                              <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                              </button>
                            </div>
                            `);
                    } else {
                        $('#button_execute').removeAttr("disabled");
                        $('#spinner_starting').attr("hidden", "hidden");

                        $('#alert_execution').empty();
                        $('#alert_execution').append(`
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                              ` + response.responseText + `
                              <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                              </button>
                            </div>
                            `);
                    }
                },
                error: function (response) {
                    $('#button_execute').removeAttr("disabled");
                    $('#spinner_starting').attr("hidden", "hidden");

                    $('#alert_execution').empty();
                    $('#alert_execution').append(`
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                              Error starting job: AJAX error, try logging in again
                              <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                              </button>
                            </div>
                            `);
                }
            });
        }

        $(function () {
            $('#execute_check_all').change(function () {
                var value = $(this).prop('checked');
                $("input[name=execute_checkbox]").prop('checked', value);
            });
        });



        $(document).ready(function () { stepTypeSelected(); });

        function stepTypeSelected() {
            var stepType = document.getElementById('step_type').value;
            if (stepType == "SQL") {
                $('#sql_statement_div').show();
                $('#server_div').hide();
                $('#folder_div').hide();
                $('#project_div').hide();
                $('#package_div').hide();
                $('#32_bit_mode_div').hide();
                $('#parameters_div').hide();
            } else if (stepType == "SSIS") {
                $('#sql_statement_div').hide();
                $('#server_div').show();
                $('#folder_div').show();
                $('#project_div').show();
                $('#package_div').show();
                $('#32_bit_mode_div').show();
                $('#parameters_div').show();
            }
        }



        $(function () {
            $("#button_submit").click(function () {
                var stepType = document.getElementById('step_type').value;
                var sql = document.getElementById('sql_input').value;
                var server = document.getElementById('server_input').value;
                var folder = document.getElementById('folder_input').value;
                var project = document.getElementById('project_input').value;
                var package = document.getElementById('package_input').value;
                if (stepType == "SQL" && sql.length == 0) {
                    $('#sql_error').show();
                    return false;
                } else if (stepType == "SSIS" && (server.length == 0 || folder.length == 0 || project.length == 0 || package.length == 0)) {
                    $('#ssis_error').show();
                    return false;
                }
                return true;
            });
        });

        $(function () {
            $('#step_type').change(function () { hideErrors(); });
            $('#sql_input').on('input', function () { hideErrors(); });
            $('#server_input').on('input', function () { hideErrors(); });
            $('#folder_input').on('input', function () { hideErrors(); });
            $('#project_input').on('input', function () { hideErrors(); });
            $('#package_input').on('input', function () { hideErrors(); });
        });

        function hideErrors() {
            $('#ssis_error').hide();
            $('#sql_error').hide();
        }



        var parameterCount = @Model.Parameters.Count;

        function addParameter() {
            @*Remove the validator from the form...*@
            $('#form').removeData("validator");
            $('#form').removeData("unobtrusiveValidation");
            $('#parameters_table tr:last').after(`
                <tr>
                    <td>
                        <input id="input_isdeleted" type="hidden" value="false" data-val="true" data-val-required="The IsDeleted field is required." name="Parameters[` + parameterCount + `].IsDeleted">
                    </td>
                        <td>
                        <input id="input_parameter_name" class="form-control form-control-sm" type="text" data-val="true" data-val-maxlength="The field Name must be a string or array type with a maximum length of '128'." data-val-maxlength-max="128" data-val-required="The Name field is required." maxlength="128" name="Parameters[` + parameterCount + `].ParameterName">
                        <span class="text-danger field-validation-valid" data-valmsg-for="Parameters[` + parameterCount + `].ParameterName" data-valmsg-replace="true"></span>
                    </td>
                        <td>
                        <input id="input_parameter_value" class="form-control form-control-sm" type="text" data-val="true" data-val-required="The Value field is required." name="Parameters[` + parameterCount + `].ParameterValue">
                        <span class="text-danger field-validation-valid" data-valmsg-for="Parameters[` + parameterCount + `].ParameterValue" data-valmsg-replace="true"></span>
                    </td>
                    <td>
                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeParameter(this)">Remove</button>
                    </td>
                </tr>
                `);
            parameterCount += 1;
            @*...and add it again to include the newly added fields in the validator.*@
            $.validator.unobtrusive.parse("form");
            return false;
        }

        function removeParameter(element) {
            $(element).closest('tr').find("#input_isdeleted").val(true);
            $(element).closest('tr').find("#input_parameter_name").val("_"); @*Set the input values to strings of length = 1 to prevent jQuery validation errors*@
            $(element).closest('tr').find("#input_parameter_value").val("_");
            $(element).closest('tr').hide();
        }



        $('#button_submit').click(
            function () {
                var parameterNames = [];
                $("input[id=input_parameter_name]").each(function () {
                    parameterNames.push(this.value);
                });
                parameterNames = parameterNames.sort();
                for (var i = 0; i < parameterNames.length - 1; i++) {
                    if (parameterNames[i + 1] == parameterNames[i]) {
                        $('#duplicate_parameter_error').show();
                        return false;
                    }
                }
                return true;
            });

        $(function () {
            $("#parameters_div").on('input', function () {
                $('#duplicate_parameter_error').hide();
            });
        });
    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

}