@page
@model EtlManager.Pages.Jobs.IndexModel
@using EtlManager;
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment WebHostEnvironment

@{
    ViewData["Title"] = "Jobs";
}

<h3>Jobs</h3>
<hr />
@if (Model.IsEditor)
{
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modal_create">
    New job
</button>
}

<p />

<table class="table table-hover">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Jobs[0].JobName)
            </th>
            <th></th>
            <th>
                Dependency mode
            </th>
            <th>
                Last execution
            </th>
            <th>
                Next execution
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Jobs)
        {
            <tr>
                <td class="align-middle">
                    <a class="font-weight-bold text-decoration-none" asp-page="./JobDetails/Index" asp-route-id="@item.JobId">@item.JobName</a>
                </td>
                <td class="align-middle">
                    <text>@item.Steps.Count steps</text>
                </td>
                <td class="align-middle">
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="dependency_mode_@item.JobId" asp-for="@item.UseDependencyMode" disabled>
                        <label class="custom-control-label" for="dependency_mode_@item.JobId"></label>
                    </div>
                </td>
                <td class="align-middle">
                    @GetMaxStartTime(item)
                </td>
                <td>
                    @GetNextStartTime(item)
                </td>
                <td class="align-middle" align="center">
                    @if (Model.IsEditor)
                    {
                        <form method="post">
                            <button type="button" class="btn btn-light btn-sm" data-toggle="modal" data-target="#modal_edit_@item.JobId">
                                @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-2.svg")))
                            </button>
                            <div class="btn-group ml-1">
                                <button type="button" class="btn btn-light btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/copy.svg")))
                                </button>
                                <div class="dropdown-menu">
                                    <button class="dropdown-item" asp-page-handler="Copy" asp-route-id="@item.JobId">Copy</button>
                                </div>
                            </div>
                            <div class="btn-group ml-1">
                                <button type="button" class="btn btn-light btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                                </button>
                                <div class="dropdown-menu">
                                    <button class="dropdown-item" asp-page-handler="Delete" asp-route-id="@item.JobId">Delete</button>
                                </div>
                            </div>
                        </form>
                    }

                </td>
            </tr>
        }
    </tbody>
</table>

@if (Model.IsEditor)
{
    @*NEW JOB MODAL*@
    <div class="modal fade" id="modal_create" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form method="post" autocomplete="off">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">New job</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-10 mx-auto">
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <div class="form-group">
                                    <label asp-for="NewJob.JobName" class="control-label"></label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-3.svg")))
                                            </div>
                                        </div>
                                        <input asp-for="NewJob.JobName" class="form-control" />
                                    </div>
                                    <span asp-validation-for="NewJob.JobName" class="text-danger"></span>
                                </div>
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="dependency_mode_new" asp-for="NewJob.UseDependencyMode">
                                    <label class="custom-control-label" style="cursor: pointer;" for="dependency_mode_new">@Html.DisplayNameFor(model => model.NewJob.UseDependencyMode)</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" asp-page-handler="Create">Create</button>
                        <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    @*GENERATE EDIT MODALS*@
    @foreach (var item in Model.Jobs)
    {
        <div class="modal fade" id="modal_edit_@item.JobId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form method="post" autocomplete="off">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Edit</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-10 mx-auto">
                                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                    <input type="hidden" asp-for="EditJob.JobId" value="@item.JobId" />
                                    <input type="hidden" asp-for="EditJob.CreatedDateTime" value="@item.CreatedDateTime" />
                                    <input type="hidden" asp-for="EditJob.LastModifiedDateTime" value="@item.LastModifiedDateTime" />
                                    <input type="hidden" asp-for="EditJob.LastModifiedBy" value="@item.LastModifiedBy" />
                                    <input type="hidden" asp-for="EditJob.CreatedBy" value="@item.CreatedBy" />
                                    <div class="form-group">
                                        <label asp-for="EditJob.JobName" class="control-label"></label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-3.svg")))
                                                </div>
                                            </div>
                                            <input asp-for="EditJob.JobName" class="form-control" value="@item.JobName" />
                                        </div>
                                        <span asp-validation-for="EditJob.JobName" class="text-danger"></span>
                                    </div>
                                    <div class="custom-control custom-switch">
                                        <input type="checkbox" checked="@(item.UseDependencyMode ? "checked" : null)" class="custom-control-input" id="dependency_mode_edit_@item.JobId" asp-for="EditJob.UseDependencyMode">
                                        <label class="custom-control-label" style="cursor: pointer;" for="dependency_mode_edit_@item.JobId">@Html.DisplayNameFor(model => model.NewJob.UseDependencyMode)</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-primary" asp-page-handler="Edit">Save</button>
                            <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }
}


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

@functions {
    public DateTime? GetMaxStartTime(EtlManager.Models.Job job)
    {
        DateTime? dt;
        Model.LastExecutions.TryGetValue(job.JobId, out dt);
        return dt;
    }

    public DateTime? GetNextStartTime(EtlManager.Models.Job job)
    {
        IEnumerable<DateTime> dateTimes = GetPossibleDateTimes(job.Schedules);
        dateTimes = dateTimes.Where(dt => dt > DateTime.Now);
        return dateTimes.Any() ? dateTimes.Min() : null as DateTime?;
    }

    public List<DateTime> GetPossibleDateTimes(ICollection<EtlManager.Models.Schedule> schedules)
    {
        List<DateTime> dateTimes = new List<DateTime>();
        foreach (var schedule in schedules.Where(schedule => schedule.IsEnabled))
        {
            List<DateTime> dateTimesTemp = new List<DateTime>();
            DateTime startOfWeek = DateTime.Now.StartOfWeek(DayOfWeek.Monday);
            startOfWeek = startOfWeek.AddHours(schedule.TimeHours).AddMinutes(schedule.TimeMinutes);
            if (schedule.Monday) dateTimesTemp.Add(startOfWeek);
            if (schedule.Tuesday) dateTimesTemp.Add(startOfWeek.AddDays(1));
            if (schedule.Wednesday) dateTimesTemp.Add(startOfWeek.AddDays(2));
            if (schedule.Thursday) dateTimesTemp.Add(startOfWeek.AddDays(3));
            if (schedule.Friday) dateTimesTemp.Add(startOfWeek.AddDays(4));
            if (schedule.Saturday) dateTimesTemp.Add(startOfWeek.AddDays(5));
            if (schedule.Sunday) dateTimesTemp.Add(startOfWeek.AddDays(6));
            // Current week
            dateTimesTemp.ForEach(dt => dateTimes.Add(dt));
            // Add next week in case current has no match
            dateTimesTemp.ForEach(dt => dateTimes.Add(dt.AddDays(7)));
        }
        return dateTimes;
    }

}