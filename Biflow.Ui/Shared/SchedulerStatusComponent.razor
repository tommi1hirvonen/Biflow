@inject ISchedulerService SchedulerService

@code {
    [Parameter] public EventCallback<string?> OnStatusMessageResolved { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get the scheduler service status and notify the user of a possible error.
            try
            {
                (var running, var error) = await SchedulerService.GetStatusAsync();
                if (!running)
                {
                    await OnStatusMessageResolved.InvokeAsync("Scheduler service not detected. Make sure the service is installed and running correctly.");
                }
                else if (error)
                {
                    await OnStatusMessageResolved.InvokeAsync("Scheduler service failed reading schedules from the database");
                }
            }
            catch (Exception ex)
            {
                await OnStatusMessageResolved.InvokeAsync($"Error getting scheduler service status: {ex.Message}");
            }
        }
    }
}
