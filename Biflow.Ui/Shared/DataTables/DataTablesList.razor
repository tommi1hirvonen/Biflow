@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject IMediator Mediator

<h4>Data Tables</h4>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.DataTableMaintainer}")">
    <div class="row mt-3">
        <div class="col-auto">
            <HxButtonToolbar>
                <HxButton Color="ThemeColor.Success"
                          Enabled="Connections?.Any() ?? false"
                          OnClick="() => _editModal.LetAsync(x => x.SetEditContextAsync(null))"
                          Spinner="false">
                    Add table
                </HxButton>
                <HxButton Color="ThemeColor.Secondary"
                          CssClass="ms-3"
                          Enabled="Connections?.Any() ?? false"
                          OnClick="() => _categoryEditModal.LetAsync(x => x.ShowAsync())"
                          Spinner="false">
                    Add category
                </HxButton>
            </HxButtonToolbar>
        </div>
        <div class="col text-end">
            <HxButton Color="ThemeColor.None" CssClass="btn-auto" OnClick="async () => await _helpOffcanvas.LetAsync(x => x.ShowAsync())">
                <SvgIcon Icon="FeatherIcon.HelpCircle" />
            </HxButton>
        </div>
    </div>
</AuthorizeView>

<div class="row mt-3">
    <div class="col-xxl-5 col-xl-7 col-md-8 col-sm-9">
        <div class="input-group input-group-sm me-3">
            <div class="input-group-text">
                <SvgIcon Icon="FeatherIcon.Filter" />
                Filter by
            </div>
            <input type="search" class="form-control" @bind-value="_tableNameFilter" @bind-value:event="oninput" placeholder="Name" />
            <input type="search" class="form-control" @bind-value="_targetTableNameFilter" @bind-value:event="oninput" placeholder="Target table" />
        </div>
    </div>
        
    <div class="col-sm-3 mt-3 mt-sm-0">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="() =>
                {
                    _targetTableNameFilter = string.Empty;
                    _tableNameFilter = string.Empty;
                }">
                <SvgIcon Icon="FeatherIcon.X" />
                Clear
            </HxButton>
        </HxButtonGroup>
    </div>  
</div>

<ul class="list-group mt-3 mb-4">
    @if (Tables is null || Categories is null)
    {
        <li class="list-group-item text-center">
            <HxSpinner Color="ThemeColor.Secondary" />
        </li>
    }
    else if (!Tables.Any() && !Categories.Any())
    {
        <li class="list-group-item">
            No tables
        </li>
    }
    else
    {
        <li class="list-group-item list-group-header">
            <div class="row align-items-center">
                <div class="col">
                    <span class="pointer small hover-underline" title="Collapse all" @onclick="CollapseAll">
                        <SvgIcon Icon="FeatherIcon.ChevronsUp" />
                        Collapse all
                    </span>
                    <span class="ms-3 pointer small hover-underline" title="Expand all" @onclick="ExpandAll">
                        <SvgIcon Icon="FeatherIcon.ChevronsDown" />
                        Expand all
                    </span>
                </div>
            </div>
            
        </li>
        foreach (var category in Categories.Append(null))
        {
            var state = category is not null
                ? UserState.DataTableCategoryExpandStatuses.GetOrCreate(category.CategoryId)
                : UserState.DataTableCategoryExpandStatuses.GetOrCreate(Guid.Empty);
            var tables = Tables
                .Where(t => t.CategoryId == category?.CategoryId)
                .Where(t => t.DataTableName.ContainsIgnoreCase(_tableNameFilter))
                .Where(t => $"{t.TargetSchemaName}.{t.TargetTableName}".ContainsIgnoreCase(_targetTableNameFilter));
            
            var filtersApplied = _tableNameFilter.Any() || _targetTableNameFilter.Any();
            /*
            Show all categories even if they do not have tables in them. But hide them, if filters are applied.
            Show "No category" only if it has tables
            */
            if ((category is null || filtersApplied) && !tables.Any())
            {
                continue;
            }
            <li class="list-group-item list-group-header fw-bold py-1">
                <div class="row align-items-center">
                    <div class="col my-1">
                        @if (state.IsExpanded)
                        {
                            <span class="pointer hover-underline" title="Collapse" @onclick="() => state.IsExpanded = false">
                                <SvgIcon Icon="FeatherIcon.ChevronDown" />
                                @(category?.CategoryName ?? "No category")
                            </span>
                        }
                        else
                        {
                            <span class="pointer hover-underline" title="Expand" @onclick="() => state.IsExpanded = true">
                                <SvgIcon Icon="FeatherIcon.ChevronRight" />
                                @(category?.CategoryName ?? "No category")
                            </span>
                        }
                    </div>
                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.DataTableMaintainer}")">
                        @if (category is not null)
                        {
                            <div class="col-auto">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                        OnClick="() => _categoryEditModal.LetAsync(x => x.ShowAsync(category))">
                                    <SvgIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                        <SvgIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete category?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteCategoryAsync(category)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </div>
                        }                      
                    </AuthorizeView>
                </div>
            </li>
            @if (!state.IsExpanded && !filtersApplied)
            {
                continue;
            }
            foreach (var table in tables)
            {
                <li class="list-group-item list-group-item-action py-1">
                    <div class="row align-items-center">
                        <div class="col my-1">
                            <a href="datatables/edit/@table.DataTableId" class="text-body ms-5">
                                <HighlightableText PartToHighlight="@_tableNameFilter" Text="@table.DataTableName" />
                            </a>
                        </div>
                        <div class="col">
                            <HighlightableText PartToHighlight="@_targetTableNameFilter" Text="@($"{table.TargetSchemaName}.{table.TargetTableName}")" />
                        </div>
                        <div class="col">
                            @{
                                var lookups = Tables
                                    .SelectMany(t => t.Lookups)
                                    .Where(l => l.LookupTableId == table.DataTableId)
                                    .OrderBy(l => l.Table.DataTableName)
                                    .ThenBy(l => l.ColumnName)
                                    .Select(l => $"- [{l.Table.DataTableName}].[{l.ColumnName}]")
                                    .ToList();
                            }
                            @if (lookups.Any())
                            {
                                var content = string.Join("<br />", lookups);
                                <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@content">
                                    <a href="javascript:void(0)" class="text-body">
                                        @lookups.Count() dependent lookup(s)
                                    </a>
                                </HxPopover>
                            }
                        </div>
                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.DataTableMaintainer}")">
                            <div class="col-auto">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                            OnClick="async () => await _editModal.LetAsync(x => x.SetEditContextAsync(table))">
                                    <SvgIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                        <SvgIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete table?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="async () => await DeleteTableAsync(table)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </div>
                        </AuthorizeView>
                    </div>
                </li>
            }
        }
    }
</ul>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.DataTableMaintainer}")">
    <DataTableEditModal @ref="_editModal" OnTableSubmitted="OnTableSubmitted" />

    <CategoryEditModal @ref="_categoryEditModal" OnCategorySubmitted="OnCategorySubmitted" />

    <DataTableHelpOffcanvas @ref="_helpOffcanvas" />
</AuthorizeView>

@code {
    [Parameter] public List<MasterDataTable>? Tables { get; set; }

    [Parameter] public List<MasterDataTableCategory>? Categories { get; set; }

    [Parameter] public List<MsSqlConnection>? Connections { get; set; }

    [CascadingParameter] public UserState UserState { get; set; } = new();

    private DataTableHelpOffcanvas? _helpOffcanvas;
    private DataTableEditModal? _editModal;
    private CategoryEditModal? _categoryEditModal;
    private string _tableNameFilter = "";
    private string _targetTableNameFilter = "";    

    private void OnTableSubmitted(MasterDataTable table)
    {
        var toRemove = Tables?.FirstOrDefault(t => t.DataTableId == table.DataTableId);
        if (toRemove is not null)
        {
            Tables?.Remove(toRemove);
        }
        Tables?.Add(table);
        Tables?.SortBy(x => x.DataTableName);

        foreach (var lookup in Tables?.SelectMany(t => t.Lookups) ?? [])
        {
            if (lookup.LookupTableId == table.DataTableId)
            {
                lookup.LookupTable = table;
            }
        }
    }

    private async Task DeleteTableAsync(MasterDataTable table)
    {
        try
        {
            await Mediator.SendAsync(new DeleteDataTableCommand(table.DataTableId));
            Tables?.Remove(table);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting data table", message);
        }
    }

    private async Task DeleteCategoryAsync(MasterDataTableCategory category)
    {
        try
        {
            await Mediator.SendAsync(new DeleteDataTableCategoryCommand(category.CategoryId));
            Categories?.Remove(category);
            foreach (var table in Tables?.Where(t => t.CategoryId == category.CategoryId) ?? [])
            {
                table.CategoryId = null;
            }
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error deleting category", ex.Message);
        }
    }

    private void OnCategorySubmitted(MasterDataTableCategory category)
    {
        var remove = Categories?.FirstOrDefault(c => c.CategoryId == category.CategoryId);
        if (remove is not null)
        {
            Categories?.Remove(remove);
        }
        Categories?.Add(category);
        Categories?.SortBy(x => x.CategoryName);
    }

    private void ExpandAll()
    {
        var states =
            from c in Categories ?? []
            select UserState.DataTableCategoryExpandStatuses.GetOrCreate(c.CategoryId);
        foreach (var state in states)
        {
            state.IsExpanded = true;
        }
        var noCategoryState = UserState.DataTableCategoryExpandStatuses.GetOrCreate(Guid.Empty);
        noCategoryState.IsExpanded = true;
    }

    private void CollapseAll()
    {
        var states =
            from c in Categories ?? []
            select UserState.DataTableCategoryExpandStatuses.GetOrCreate(c.CategoryId);
        foreach (var state in states)
        {
            state.IsExpanded = false;
        }
        var noCategoryState = UserState.DataTableCategoryExpandStatuses.GetOrCreate(Guid.Empty);
        noCategoryState.IsExpanded = false;
    }

}
