@inject SqlServerHelperService SqlServerHelper
@inject IHxMessengerService Messenger

<HxOffcanvas @ref="offcanvas" Title="Select table" Size="OffcanvasSize.Large" OnClosed="OnClosed" ScrollingEnabled="true">
    <BodyTemplate>
        <div class="row">
            <div class="col-2">
                <label class="form-label">Filter by</label>
            </div>
            <div class="col-10">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <CxIcon Icon="FeatherIcon.Filter" />
                    </div>
                    <input type="search" class="form-control" @bind-value="schemaFilter" @bind-value:event="oninput" placeholder="Schema" />
                    <input type="search" class="form-control" @bind-value="tableFilter" @bind-value:event="oninput" placeholder="Table" />
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <table class="table table-sm table-hover small">
                    <thead>
                        <tr>
                            <th>Schema</th>
                            <th>Table</th>
                            <th>Has PK</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (tables is null)
                        {
                            <tr>
                                <td colspan="3" class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td>
                            </tr>
                        }
                        else if (!tables.Any())
                        {
                            <tr>
                                <td colspan="3">No tables</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var table in FilteredTables)
                            {
                                var className = selectedTable?.Equals(table) ?? false ? "bg-body-tertiary fw-bold" : null;
                                <tr class="@className" style="cursor: pointer;" @onclick="() => selectedTable = table">
                                    <td><HighlightableText Text="@table.Schema" PartToHighlight="@schemaFilter" /></td>
                                    <td><HighlightableText Text="@table.Table" PartToHighlight="@tableFilter" /></td>
                                    <td class="@(table.HasPrimaryKey ? null : "text-danger")">@table.HasPrimaryKey</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectTableAsync" Enabled="selectedTable is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public EventCallback<DatabaseTableSelectedResult> OnTableSelected { get; set; }

    private HxOffcanvas? offcanvas;
    private Guid connectionId;
    private IEnumerable<DbTable>? tables;
    private DbTable? selectedTable;
    private string schemaFilter = string.Empty;
    private string tableFilter = string.Empty;

    private IEnumerable<DbTable> FilteredTables =>
        tables?
        .Where(o => o.Schema.ContainsIgnoreCase(schemaFilter))
        .Where(o => o.Table.ContainsIgnoreCase(tableFilter))
        ?? Enumerable.Empty<DbTable>();

    private async Task SelectTableAsync()
    {
        if (selectedTable is null)
        {
            return;
        }
        await OnTableSelected.InvokeAsync(new (selectedTable.Schema, selectedTable.Table));
        await offcanvas.LetAsync(x => x.HideAsync());
    }

    private void OnClosed()
    {
        selectedTable = null;
        schemaFilter = "";
        tableFilter = "";
    }

    public async Task ShowAsync(Guid connectionId)
    {
        if (this.connectionId != connectionId)
        {
                tables = null;
            this.connectionId = connectionId;
            try
            {
                    tables = await SqlServerHelper.GetDatabaseTablesAsync(this.connectionId);
            }
            catch (Exception ex)
            {
                    Messenger.AddError("Error loading tables", ex.Message);
            }
        }
        await offcanvas.LetAsync(x => x.ShowAsync());
    }
}
