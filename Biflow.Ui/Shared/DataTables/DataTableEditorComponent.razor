
<div class="row">
    <div class="col">
        <div>
            <a href="datatables">
                All data tables
            </a>
            <span>&nbsp;/&nbsp;</span>
            @if (Table?.Category is not null)
            {
                <span>@Table.Category.CategoryName /&nbsp;</span>
            }
            <strong>@Table?.DataTableName</strong>
        </div>
    </div>
</div>

@if (Table is null) return;

<div class="row mt-3">
    <div class="col-auto">
        <HxButtonToolbar>
            <HxButtonGroup Size="ButtonGroupSize.Small">

                <HxButton Color="ThemeColor.Secondary" Size="ButtonSize.Small"
                          Enabled="FilterSet is not null"
                          CssClass="@(FilterSet?.Filters.Values.Any(v => v.Enabled1) ?? false ? "fw-bold" : null)"
                          OnClick="async () => await FilterSetOffcanvas.LetAsync(x => x.ShowAsync())">
                    <CxIcon Icon="FeatherIcon.Filter" />
                    Filters
                </HxButton>

                <FilterDropdown FilterSet="ColumnSelections"
                                Items="TableData?.Columns.Select(c => c.Name) ?? Enumerable.Empty<string>()"
                                OnChange="StateHasChanged"
                                TitleCssClass="btn-secondary">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Columns" />
                        Columns
                    </TitleTemplate>
                </FilterDropdown>

                <HxDropdownButtonGroup>
                    <HxDropdownToggleButton Spinner="Exporting" Color="ThemeColor.Secondary" Size="ButtonSize.Small" Enabled="!Exporting">
                        <CxIcon Icon="FeatherIcon.Download" />
                        Export
                    </HxDropdownToggleButton>
                    <HxDropdownMenu>
                        <HxDropdownHeader>
                            Export to Excel
                        </HxDropdownHeader>
                        <HxDropdownItem OnClick="async () => await DownloadExportAsync(true)">
                            Filtered data
                        </HxDropdownItem>
                        <HxDropdownItem OnClick="async () => await DownloadExportAsync(false)">
                            All data
                        </HxDropdownItem>
                    </HxDropdownMenu>
                </HxDropdownButtonGroup>

                @{
                    var isNotEditable = !TableData?.IsEditable ?? true;
                    var importDisabled = isNotEditable || !Table.AllowImport;
                }
                <a class="btn btn-sm btn-secondary @(importDisabled ? "disabled" : null)" href="/datatables/import/@Table.DataTableId">
                    <CxIcon Icon="FeatherIcon.Upload" />
                    Import
                </a>

                <HxButton Color="ThemeColor.Secondary" Size="ButtonSize.Small"
                          Enabled="!string.IsNullOrEmpty(Table.DataTableDescription)"
                          OnClick="async () => await TableInfoOffcanvas.LetAsync(x => x.ShowAsync())">
                    <CxIcon Icon="FeatherIcon.Info" />
                    Table info
                </HxButton>

            </HxButtonGroup>
        </HxButtonToolbar>
    </div>
</div>

<div class="row mt-3">
    <div class="col-auto">
        <HxButtonToolbar>
            <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small"
                      OnClick="async () => await ReloadDataAsync()">
                <CxIcon Icon="FeatherIcon.RefreshCw" />
                Reload
            </HxButton>

            <HxButton Color="ThemeColor.Success" Size="ButtonSize.Small"
                      CssClass="ms-3"
                      Enabled="TableData is not null && TableData.IsEditable"
                      OnClick="SaveChangesAsync">
                <CxIcon Icon="FeatherIcon.Save" />
                Save changes
            </HxButton>

            @if (Table.AllowInsert)
            {
                <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" Size="ButtonSize.Small"
                      Enabled="TableData is not null && TableData.IsEditable"
                      OnClick="() => TableData?.AddRow()">
                    <CxIcon Icon="FeatherIcon.Plus" />
                    Add record
                </HxButton>
            }
        </HxButtonToolbar>
    </div>
    <div class="col-xl mt-xl-0 mt-3">
        <div class="row">
            <div class="col-auto d-inline-flex align-items-center">
                <label>Limit rows</label>
                <form @onsubmit="ReloadDataAsync">
                    <input class="form-control form-control-sm ms-3" type="number" @bind-value="TopRows" style="max-width: 100px;" />
                </form>
            </div>
            <div class="col-auto align-items-center">
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="editmode_radio"
                           disabled="@(!TableData?.IsEditable ?? true)"
                           checked="@(EditModeEnabled)"
                           @onchange="() => { EditModeEnabled = true; }">
                    <label class="form-check-label" for="editmode_radio">Edit mode</label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="viewmode_radio"
                           disabled="@(!TableData?.IsEditable ?? true)"
                           checked="@(!EditModeEnabled)"
                           @onchange="() => { EditModeEnabled = false; }">
                    <label class="form-check-label" for="viewmode_radio">View mode</label>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row my-3">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                @{
                    var rows = GetOrderedRowRecords();
                }
                @if (rows?.Any() ?? false)
                {
                    <span class="px-3">
                        <small class="text-secondary">@rows.Length record(s)</small>
                        @if (TableData?.HasMoreRows ?? false)
                        {
                            <span class="text-warning ms-2" style="cursor: pointer;">
                                <HxPopover Trigger="PopoverTrigger.Hover" Content="Table contains more records with applied filters than is currently shown. Increase row limit to show more records.">
                                    <CxIcon Icon="FeatherIcon.AlertCircle" />
                                </HxPopover>
                            </span>
                        }
                    </span>
                }
                @if (!TableData?.IsEditable ?? false)
                {
                    <small class="text-secondary px-3">Table is not editable</small>
                }
                @if (TableData is not null && rows is not null)
                {
                    var columns = TableData.Columns
                        .Where(c => IsColumnSelected(c.Name) && !c.IsHidden)
                        .OrderBy(c => !Table.ColumnOrder.Contains(c.Name))
                        .ThenBy(c => Table.ColumnOrder.IndexOf(c.Name));
                    @if (TableData.HasChanges)
                    {
                        <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
                    }
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                @foreach (var column in columns)
                                {
                                    var orderBy = OrderBy.FirstOrDefault(o => o.Column == column.Name);
                                    <th @onclick="() => ToggleOrderBy(column.Name)" title="@column.DbDatatypeDescription">
                                        <span style="cursor: pointer;">@column.Name</span>
                                        @if (column.IsPrimaryKey)
                                        {
                                            <span class="ms-2" title="Primary key column">
                                                <CxIcon Icon="FeatherIcon.Key" />
                                            </span>
                                        }
                                        @if (column.IsComputed)
                                        {
                                            <span class="ms-2" title="Computed column">
                                                <CxIcon Icon="LucideIcon.Calculator" />
                                            </span>
                                        }
                                        @if (orderBy.Column is not null)
                                        {
                                            <span class="ms-2"> 
                                                @if (orderBy.Descending)
                                                {
                                                    <CxIcon Icon="FeatherIcon.ArrowUp" />
                                                }
                                                else
                                                {
                                                    <CxIcon Icon="FeatherIcon.ArrowDown" />
                                                }
                                            </span>
                                        }
                                    </th>
                                }
                                @if (TableData.IsEditable && EditModeEnabled && Table.AllowDelete)
                                {
                                    <th></th>    
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <Virtualize Items="rows" Context="row" SpacerElement="tr" ItemSize="39.5f">
                                <tr>
                                    @foreach (var columnInfo in columns)
                                    {
                                        var isLocked = !row.IsUpdateable || columnInfo.IsLocked;
                                        var column = columnInfo.Name;
                                        var datatype = columnInfo.Datatype;
                                        var lookupValues = columnInfo.Lookup?.Values;
                                        <td>
                                            @if (TableData.IsEditable && EditModeEnabled)
                                            {
                                                @if (!columnInfo.IsEditable)
                                                {
                                                    <text>@row.Values[column]</text>
                                                }

                                                else if (datatype == typeof(byte))
                                                {
                                                    <input class="form-control form-control-sm" type="number" disabled=@isLocked @bind-value="row.ByteIndexer[column]" />
                                                }

                                                else if (datatype == typeof(short) && lookupValues is not null)
                                                {
                                                    <select @bind="row.ShortIndexer[column]" class="form-select form-select-sm" disabled=@isLocked>
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(short))
                                                {
                                                    <input class="form-control form-control-sm" type="number" disabled=@isLocked @bind-value="row.ShortIndexer[column]" />
                                                }

                                                else if (datatype == typeof(int) && lookupValues is not null)
                                                {
                                                    <select @bind="row.IntIndexer[column]" disabled=@isLocked class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(int))
                                                {
                                                    <input class="form-control form-control-sm" type="number" disabled=@isLocked @bind-value="row.IntIndexer[column]" />
                                                }

                                                else if (datatype == typeof(long) && lookupValues is not null)
                                                {
                                                    <select @bind="row.LongIndexer[column]" disabled=@isLocked class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(long))
                                                {
                                                    <input class="form-control form-control-sm" type="number" disabled=@isLocked @bind-value="row.LongIndexer[column]" />
                                                }

                                                else if (datatype == typeof(decimal) && lookupValues is not null)
                                                {
                                                    <select @bind="row.DecimalIndexer[column]" disabled=@isLocked class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(decimal))
                                                {
                                                    <input class="form-control form-control-sm" type="number" disabled=@isLocked @bind-value="row.DecimalIndexer[column]" />
                                                }

                                                else if (datatype == typeof(double))
                                                {
                                                    <input class="form-control form-control-sm" type="number" disabled=@isLocked @bind-value="row.DoubleIndexer[column]" />
                                                }
                                                else if (datatype == typeof(float))
                                                {
                                                    <input class="form-control form-control-sm" type="number" disabled=@isLocked @bind-value="row.FloatIndexer[column]" />
                                                }

                                                else if (datatype == typeof(string) && lookupValues is not null)
                                                {
                                                    <select @bind="row.StringIndexer[column]" disabled=@isLocked class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(string))
                                                {
                                                    <input class="form-control form-control-sm" type="text" disabled=@isLocked @bind-value="row.StringIndexer[column]" />
                                                }

                                                else if (datatype == typeof(bool))
                                                {
                                                    var id = Guid.NewGuid();
                                                    <div class="form-check">
                                                        <input type="checkbox" disabled=@isLocked class="form-check-input" id="@id"
                                                        checked=@row.BooleanIndexer[column] @bind-value="row.BooleanIndexer[column]">
                                                        <label class="form-check-label" for="@id"></label>
                                                    </div>
                                                }

                                                else if (datatype == typeof(DateTime) && lookupValues is not null)
                                                {
                                                    <select @bind="row.DateTimeIndexer[column]" disabled=@isLocked class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(DateTime))
                                                {
                                                    <input class="form-control form-control-sm" type="datetime-local" disabled=@isLocked @bind-value="row.DateTimeIndexer[column]" />
                                                }
                                                else
                                                {
                                                    <text>@row.Values[column]</text>
                                                }
                                            }
                                            else
                                            {
                                                <text>@row.Values[column]</text>
                                            }
                                        </td>
                                    }
                                    @if (TableData.IsEditable && EditModeEnabled && Table.AllowDelete)
                                    {
                                        <td>
                                            <button class="btn btn-sm btn-auto text-danger" @onclick="row.Delete">
                                                <CxIcon Icon="FeatherIcon.Delete" />
                                            </button>
                                        </td>
                                    }
                                </tr>
                            </Virtualize>
                        </tbody>
                    </table>
                }
                else if (Table is not null)
                {
                    <p class="px-3">Loading data...</p>
                }
            </div>
        </div>
    </div>
</div>

<HxOffcanvas @ref="TableInfoOffcanvas" Title="@Table?.DataTableName" Size="OffcanvasSize.Small" Backdrop="OffcanvasBackdrop.False" ScrollingEnabled="true">
    <BodyTemplate>
        <p>
            @Table?.DataTableDescription
        </p>
    </BodyTemplate>
</HxOffcanvas>

<FilterSetOffcanvas @ref="FilterSetOffcanvas" Filters="FilterSet" />
