@typeparam TValue

<HxAutosuggest TValue="TValue"
               TItem="LookupValue"
               Delay="0"
               MinimumLength="0"
               InputSize="InputSize.Small"
               Placeholder="null"
               Value="Value"
               ValueExpression="() => Value"
               ValueChanged="ValueChanged"
               TextSelector="l => l.DisplayValue as string"
               ValueSelector="l => l.Value is null ? default(TValue) : (TValue)l.Value"
               DataProvider="GetSuggestionsAsync"
               ItemFromValueResolver="ResolveItemFromValueAsync"
               Enabled="!Disabled"
               autocomplete="off">
    <ItemTemplate Context="item">
        <span class="small">@item.DisplayValue</span>
    </ItemTemplate>
</HxAutosuggest>

@code {
    [Parameter] public TValue? Value { get; set; }

    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }

    [Parameter] public IEnumerable<LookupValue> LookupValues { get; set; } = [];

    [Parameter] public bool Disabled { get; set; }

    private Task<LookupValue?> ResolveItemFromValueAsync(TValue value)
    {
        return Task.FromResult(LookupValues.FirstOrDefault(v => v.Value?.Equals(value) == true));
    }

    private Task<AutosuggestDataProviderResult<LookupValue>> GetSuggestionsAsync(AutosuggestDataProviderRequest request)
    {
        return Task.FromResult(new AutosuggestDataProviderResult<LookupValue>
        {
            Data = LookupValues.Where(v =>
                string.IsNullOrEmpty(request.UserInput)
                || v.DisplayValue?.ToString()?.ContainsIgnoreCase(request.UserInput) == true)
        });
    }
}
