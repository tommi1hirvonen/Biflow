@using System.Runtime.CompilerServices;

@implements IDisposable

@inject IHxMessengerService Messenger
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime JS
@inject DataTableValidator DataTableValidator

@{
    var title = editTable switch
    {
        not null => editTable.DataTableId != Guid.Empty ? $"Edit {editTable.DataTableName}" : "New data table",
        null => ""
    };
}

<HxModal @ref="modal" Fullscreen="ModalFullscreen.XxlDown" Size="ModalSize.ExtraLarge" Title="@title" Scrollable="true">
    <BodyTemplate>
        @if (editTable is not null && categories is not null)
        {
            <EditForm id="table_edit_form" Model="editTable" OnValidSubmit="SubmitEditTableAsync">
                <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
                <div class="row">
                     <div class="col">
                         <ul class="nav nav-tabs mb-3">
                             <li class="nav-item">
                                 <span class="nav-link @(currentView == TableEditView.Settings ? "active" : null)"
                                 @onclick="() => currentView = TableEditView.Settings">
                                     <CxIcon Icon="FeatherIcon.Settings" />
                                     Settings
                                 </span>
                             </li>
                             <li class="nav-item">
                                 <span class="nav-link @(currentView == TableEditView.ColumnOrder ? "active" : null)"
                                 @onclick="() => currentView = TableEditView.ColumnOrder">
                                     <CxIcon Icon="FeatherIcon.Columns" />
                                     Column Order
                                 </span>
                             </li>
                             <li class="nav-item">
                                 <span class="nav-link @(currentView == TableEditView.Lookups ? "active" : null)"
                                 @onclick="() => currentView = TableEditView.Lookups">
                                     <CxIcon Icon="FeatherIcon.Search" />
                                     Lookup Columns
                                 </span>
                             </li>
                         </ul>
                         <ObjectGraphDataAnnotationsValidator />
                         <ValidationSummary />
                         <FluentValidationValidator Validator="DataTableValidator" />
                     </div>
                </div>
                 @if (currentView == TableEditView.Settings)
                {
                    <div class="row">
                        <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                            <label class="form-label mb-lg-0">Data table name</label>
                        </div>
                        <div class="col-md-6">
                            <InputText form="" class="form-control form-control-sm" autocomplete="off" @bind-Value="editTable.DataTableName" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                            <label class="form-label mb-lg-0">Category</label>
                        </div>
                        <div class="col-md-6">
                            <InputSelect class="form-select form-select-sm" @bind-Value="editTable.CategoryId">
                                <option value="">No category</option>
                                @foreach (var cat in categories)
                                {
                                    <option value="@cat.CategoryId">@cat.CategoryName</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                            <label class="form-label mb-lg-0">Connection</label>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-sm">
                                <select class="form-select form-select-sm" @onchange="ConnectionChanged">
                                    @foreach (var connection in connections ?? Enumerable.Empty<SqlConnectionInfo>())
                                    {
                                        <option value="@connection.ConnectionId"
                                                selected="@(connection.ConnectionId == editTable.Connection.ConnectionId)">
                                            @connection.ConnectionName
                                        </option>
                                    }
                                </select>
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                          OnClick="async () => await offcanvas.LetAsync(x => x.ShowAsync(editTable.Connection.ConnectionId))">
                                    <CxIcon Icon="FeatherIcon.MoreHorizontal" />
                                    Select table
                                </HxButton>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                            <label class="form-label mb-lg-0">Target schema and table</label>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-sm">
                                <InputText class="form-control form-control-sm" disabled placeholder="Schema" autocomplete="off" @bind-Value="editTable.TargetSchemaName" />
                                <InputText class="form-control form-control-sm" disabled placeholder="Table" autocomplete="off" @bind-Value="editTable.TargetTableName" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex justify-content-end">
                            <label class="form-label mb-lg-0">Description</label>
                        </div>
                        <div class="col-md-6">
                            <InputTextArea class="form-control form-control-sm" rows="4" @bind-Value="editTable.DataTableDescription" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex justify-content-end">
                            <label class="form-label mb-lg-0"></label>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check form-check-inline">
                                <input type="checkbox" class="form-check-input" id="allow_insert"
                                       checked=@editTable.AllowInsert
                                       @bind-value="editTable.AllowInsert">
                                <label class="form-check-label" for="allow_insert">Allow insert</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input type="checkbox" class="form-check-input" id="allow_delete"
                                       checked=@editTable.AllowDelete
                                       @bind-value="editTable.AllowDelete">
                                <label class="form-check-label" for="allow_delete">Allow delete</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input type="checkbox" class="form-check-input" id="allow_update"
                                       checked=@editTable.AllowUpdate
                                       @bind-value="editTable.AllowUpdate">
                                <label class="form-check-label" for="allow_update">Allow update</label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex justify-content-end">
                            <label class="form-label mb-lg-0"></label>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check form-check-inline">
                                <input type="checkbox" class="form-check-input" id="allow_import"
                                       checked=@editTable.AllowImport
                                       @bind-value="editTable.AllowImport">
                                <label class="form-check-label" for="allow_import">Allow import</label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex justify-content-end">
                            <label class="form-label mb-lg-0">
                                Locked columns
                                <HxPopover Trigger="PopoverTrigger.Hover" Content="Define a list of locked columns to prevent editing. If the table has a column with a matching name, the column's edit fields will be disabled.">
                                    <CxIcon Icon="FeatherIcon.Info" />
                                </HxPopover>
                            </label>
                        </div>
                        <div class="col-md-6">
                            <HxInputTags Delimiters="new()"
                                        InputSize="InputSize.Small"
                                        SuggestDelay="0"
                                        SuggestMinimumLength="0"
                                        TagBadgeSettings="new BadgeSettings { Color = ThemeColor.Secondary }"
                                        DataProvider="GetLockedColumnSuggestions"
                                        @bind-Value="editTable.LockedColumns" />
                            <div class="form-check form-check-inline mt-1">
                                <input type="checkbox" class="form-check-input" id="locked_columns_exclude"
                                       checked=@editTable.LockedColumnsExcludeMode
                                       @bind-value="editTable.LockedColumnsExcludeMode">
                                <label class="form-check-label" for="locked_columns_exclude">
                                    Exclude mode
                                    <HxPopover Trigger="PopoverTrigger.Hover" Content="When enabled, columns not listed will be locked.">
                                        <CxIcon Icon="FeatherIcon.Info" />
                                    </HxPopover>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex justify-content-end">
                            <label class="form-label mb-lg-0">
                                Hidden columns
                                <HxPopover Trigger="PopoverTrigger.Hover" Content="Define a list of hidden columns. If a hidden column is part of the primary key and 'allow import' is enabled, the column will still be included in Excel exports.">
                                    <CxIcon Icon="FeatherIcon.Info" />
                                </HxPopover>
                            </label>
                        </div>
                        <div class="col-md-6">
                            <HxInputTags Delimiters="new()"
                                         InputSize="InputSize.Small"
                                         SuggestDelay="0"
                                         SuggestMinimumLength="0"
                                         TagBadgeSettings="new BadgeSettings { Color = ThemeColor.Secondary }"
                                         DataProvider="GetHiddenColumnSuggestions"
                                         @bind-Value="editTable.HiddenColumns" />
                        </div>
                    </div>
                }
                else if (currentView == TableEditView.ColumnOrder)
                {
                    <div class="row justify-content-center">
                        <div class="col-auto mx-4">
                            <div class="row">
                                <div class="col">
                                    <HxButton Color="ThemeColor.None" CssClass="btn-auto" OnClick="ImportColumnOrderColumnsAsync">
                                        Import columns
                                    </HxButton>
                                </div>
                            </div>
                            <div class="row mt-5">
                                <div class="col">
                                    <HxButtonGroup Orientation="ButtonGroupOrientation.Vertical">
                                        <HxButton Color="ThemeColor.None" CssClass="btn-auto" OnClick="PromoteSelectedColumn">
                                            <CxIcon Icon="FeatherIcon.ChevronUp" />
                                            Promote
                                        </HxButton>
                                        <HxButton Color="ThemeColor.None" CssClass="btn-auto" OnClick="DemoteSelectedColumn">
                                            <CxIcon Icon="FeatherIcon.ChevronDown" />
                                            Demote
                                        </HxButton>
                                    </HxButtonGroup>
                                </div>
                            </div> 
                        </div>
                        <div class="col-auto">
                            @if (!editTable?.ColumnOrder.Any() ?? false)
                            {
                                <span class="text-muted"><em>Import columns to define column ordering</em></span>
                            }
                            <ul class="list-group list-group-numbered">
                                @foreach (var column in editTable?.ColumnOrder ?? Enumerable.Empty<string>())
                                {
                                    <li class="list-group-item list-group-item-action @(column == columnOrderSelected ? "active" : null)"
                                        style="cursor: pointer;"
                                        @onclick="() => columnOrderSelected = columnOrderSelected != column ? column : string.Empty">
                                        @column
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
                else if (currentView == TableEditView.Lookups)
                {
                    <div class="row">
                        <div class="col">
                            <button type="button" class="btn btn-sm btn-auto @(string.IsNullOrEmpty(editTable.TargetSchemaName) || string.IsNullOrEmpty(editTable.TargetTableName) ? "disabled" : null)"
                            @onclick="() => editTable.Lookups.Add(new())">
                                <CxIcon Icon="FeatherIcon.Plus" />
                                Add lookup
                            </button>
                        </div>
                    </div>
                    <table class="table table-sm mb-5">
                        <thead>
                            <tr>
                                <th>Column</th>
                                <th>Lookup table</th>
                                <th>Lookup value</th>
                                <th>Lookup description</th>
                                <th>Show</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!editTable.Lookups.Any())
                            {
                                <tr>
                                    <td colspan="6">No lookups</td>
                                </tr>
                            }
                            else
                            {
                                foreach (var lookup in editTable.Lookups)
                                {
                                    <tr>
                                        <td>
                                            <HxAutosuggest TItem="string"
                                                           TValue="string"
                                                           DataProvider="GetColumnSuggestions"
                                            @bind-Value="lookup.ColumnName"
                                                           MinimumLength="0"
                                                           ValidationMessageMode="ValidationMessageMode.None"
                                                           InputSize="InputSize.Small" />
                                        </td>
                                        <td>
                                            <HxAutosuggest CssClass="@(string.IsNullOrEmpty(lookup.ColumnName) ? "d-none" : null)"
                                                           TItem="MasterDataTable"
                                                           TValue="MasterDataTable"
                                                           DataProvider="GetLookupTableSuggestions"
                                                           ValueChanged="table => SetLookupTable(table, lookup)"
                                                           Value="lookup.LookupTable"
                                                           ValueExpression="() => lookup.LookupTable"
                                                           TextSelector="table => table.DataTableName"
                                                           MinimumLength="0"
                                                           ValidationMessageMode="ValidationMessageMode.None"
                                                           InputSize="InputSize.Small">
                                                <ItemTemplate Context="item">
                                                    <sup>@item.Category?.CategoryName</sup><small>@item.DataTableName</small>
                                                </ItemTemplate>
                                            </HxAutosuggest>
                                        </td>
                                        <td>
                                            <HxAutosuggest CssClass="@(string.IsNullOrEmpty(lookup.ColumnName) || lookup.LookupTableId == Guid.Empty ? "d-none" : null)"
                                                           TItem="string"
                                                           TValue="string"
                                                           DataProvider="request => GetLookupColumnSuggestions(request, lookup)"
                                            @bind-Value="lookup.LookupValueColumn"
                                                           MinimumLength="0"
                                                           ValidationMessageMode="ValidationMessageMode.None"
                                                           InputSize="InputSize.Small" />
                                        </td>
                                        <td>
                                            <HxAutosuggest CssClass="@(string.IsNullOrEmpty(lookup.ColumnName) || lookup.LookupTableId == Guid.Empty ? "d-none" : null)"
                                                           TItem="string"
                                                           TValue="string"
                                                           DataProvider="request => GetLookupColumnSuggestions(request, lookup)"
                                            @bind-Value="lookup.LookupDescriptionColumn"
                                                           MinimumLength="0"
                                                           ValidationMessageMode="ValidationMessageMode.None"
                                                           InputSize="InputSize.Small" />
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(lookup.ColumnName) && lookup.LookupTableId != Guid.Empty)
                                            {
                                                <select @bind="lookup.LookupDisplayType" class="form-select form-select-sm">
                                                    @foreach (var type in Enum.GetValues<LookupDisplayType>())
                                                    {
                                                        <option>@type</option>
                                                    }
                                                </select>
                                            }
                                        </td>
                                        <td>
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" title="Delete lookup"
                                                      OnClick="() => { editTable.Lookups.Remove(lookup); StateHasChanged(); }">
                                                <CxIcon Icon="FeatherIcon.Delete" />
                                            </HxButton>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
            </EditForm>

            <DatabaseTableSelectOffcanvas @ref="offcanvas" OnTableSelected="OnTableSelected" />
        }
        else
        {
            <div class="row my-3">
                <div class="col text-center">
                    <HxSpinner Color="ThemeColor.Secondary" />
                </div>
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit FormId="table_edit_form" Color="ThemeColor.Success">
            <CxIcon Icon="FeatherIcon.Save" />
            Save
        </HxSubmit>
        <HxButton Color="ThemeColor.Secondary" OnClick="EndEditContext" Spinner="false">
            <CxIcon Icon="FeatherIcon.X" />
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>


@code {
    [Parameter] public EventCallback<MasterDataTable> OnTableSubmitted { get; set; }

    private readonly ConditionalWeakTable<MasterDataTableLookup, IEnumerable<string>> lookupColumns = new();

    private HxModal? modal;
    private DatabaseTableSelectOffcanvas? offcanvas;
    private AppDbContext? editContext;
    private MasterDataTable? editTable;
    private TableEditView currentView = TableEditView.Settings;
    private IEnumerable<MasterDataTable>? tables;
    private IEnumerable<SqlConnectionInfo>? connections;
    private IEnumerable<MasterDataTableCategory>? categories;
    private IEnumerable<string>? columns;
    private string columnOrderSelected = "";

    private enum TableEditView { Settings, ColumnOrder, Lookups }

    public async Task SetEditContextAsync(MasterDataTable? table = null)
    {
        currentView = TableEditView.Settings;
        columnOrderSelected = "";
        await modal.LetAsync(x => x.ShowAsync());
        editContext?.Dispose();
        editContext = DbContextFactory.CreateDbContext();
        connections = await editContext.SqlConnections
            .OrderBy(c => c.ConnectionName)
            .ToListAsync();
        categories = await editContext.MasterDataTableCategories
            .OrderBy(c => c.CategoryName)
            .ToListAsync();
        tables = await editContext.MasterDataTables
            .Include(t => t.Connection)
            .Include(t => t.Category)
            .OrderBy(t => t.Category!.CategoryName)
            .ThenBy(t => t.DataTableName)
            .ToListAsync();
        if (table is null)
        {
            // New table
            editTable = new()
            {
                Connection = connections.First(),
                Lookups = new List<MasterDataTableLookup>()
            };
            editTable.ConnectionId = connections!.First().ConnectionId;
        }
        else
        {
            editTable = await editContext.MasterDataTables
                .Include(t => t.Connection)
                .Include(t => t.Lookups)
                .ThenInclude(l => l.LookupTable)
                .FirstAsync(t => t.DataTableId == table.DataTableId);
            columns = await editTable.GetColumnNamesAsync();

            foreach (var lookup in editTable.Lookups)
            {
                lookupColumns.AddOrUpdate(lookup, await lookup.LookupTable.GetColumnNamesAsync());
            }
        }
        StateHasChanged();
    }

    private void ConnectionChanged(ChangeEventArgs args)
    {
        var guid = Guid.Parse(args.Value!.ToString()!);
        var connection = connections!.First(c => c.ConnectionId == guid);
        editTable!.ConnectionId = guid;
        editTable!.Connection = connection;
    }

    private async void SetLookupTable(MasterDataTable? dataTable, MasterDataTableLookup lookup)
    {
        try
        {
            lookup.LookupValueColumn = "";
            lookup.LookupDescriptionColumn = "";
            if (dataTable is null)
            {
                lookup.LookupTable = null!;
                lookup.LookupTableId = Guid.Empty;
                lookupColumns.Remove(lookup);
                return;
            }
            lookup.LookupTableId = dataTable.DataTableId;
            lookup.LookupTable = dataTable;
            lookupColumns.AddOrUpdate(lookup, await lookup.LookupTable.GetColumnNamesAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error selecting lookup table", ex.Message);   
        }
    }

    private async Task EndEditContext()
    {
        await modal.LetAsync(x => x.HideAsync());
        editContext?.Dispose();
        await Task.Delay(500);
        editTable = null;
        columns = null;
        StateHasChanged();
    }

    private Task<AutosuggestDataProviderResult<string>> GetColumnSuggestions(AutosuggestDataProviderRequest request)
    {
        return Task.FromResult(new AutosuggestDataProviderResult<string>
        {
            Data = columns?.Where(c => c.ContainsIgnoreCase(request.UserInput)) ?? Enumerable.Empty<string>()
        });
    }

    private async Task<InputTagsDataProviderResult> GetLockedColumnSuggestions(InputTagsDataProviderRequest request)
    {
        await Task.Delay(100); // small delay to make the tag input dropdown behave more consistently
        return new InputTagsDataProviderResult
        {
            Data = columns?.Where(c => c.ContainsIgnoreCase(request.UserInput) && (!editTable?.LockedColumns.Contains(c) ?? true))
                ?? Enumerable.Empty<string>()
        };
    }

    private async Task<InputTagsDataProviderResult> GetHiddenColumnSuggestions(InputTagsDataProviderRequest request)
    {
        await Task.Delay(100); // small delay to make the tag input dropdown behave more consistently
        return new InputTagsDataProviderResult
        {
            Data = columns?.Where(c => c.ContainsIgnoreCase(request.UserInput) && (!editTable?.HiddenColumns.Contains(c) ?? true))
                ?? Enumerable.Empty<string>()
        };
    }

    private Task<AutosuggestDataProviderResult<MasterDataTable>> GetLookupTableSuggestions(AutosuggestDataProviderRequest request)
    {
        return Task.FromResult(new AutosuggestDataProviderResult<MasterDataTable>
        {
            Data = tables
                ?.Where(t => t.DataTableName.ContainsIgnoreCase(request.UserInput) || (t.Category?.CategoryName.ContainsIgnoreCase(request.UserInput) ?? false))
                ?? Enumerable.Empty<MasterDataTable>()
        });
    }

    private Task<AutosuggestDataProviderResult<string>> GetLookupColumnSuggestions(AutosuggestDataProviderRequest request, MasterDataTableLookup lookup)
    {
        return Task.FromResult(new AutosuggestDataProviderResult<string>
        {
            Data = lookupColumns.GetValueOrDefault(lookup)?.Where(c => c.ContainsIgnoreCase(request.UserInput)) ?? Enumerable.Empty<string>()
        });
    }

    private async Task SubmitEditTableAsync()
    {
        if (editContext is null || editTable is null)
        {
            return;
        }

        if (editTable.Lookups.Any(lookup => lookup.LookupTable.ConnectionId != editTable.ConnectionId))
        {
            Messenger.AddError("Validation error", "All lookup tables must use the same connection as the main table.");
            return;
        }

        try
        {
            if (editTable.DataTableId == Guid.Empty)
            {
                editContext.MasterDataTables.Add(editTable);
            }
            else
            {
                // Force update of ColumnOrder as EF may not consider it modified if items only change places.
                editContext.Entry(editTable).Property(p => p.ColumnOrder).IsModified = true;
            }
            await editContext.SaveChangesAsync();
            await OnTableSubmitted.InvokeAsync(editTable);
            await EndEditContext();
        }
        catch (DbUpdateConcurrencyException)
        {
            Messenger.AddError("Concurrency error", "The data table was modified outside of this session. Reload the page to view the most recent values.");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error updating data table", ex.Message);
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }

    private async Task ImportColumnOrderColumnsAsync()
    {
        ArgumentNullException.ThrowIfNull(editTable);
        columns = await editTable.GetColumnNamesAsync();
        if (!columns.Any())
        {
            Messenger.AddWarning($"No columns found for table [{editTable.TargetSchemaName}].[{editTable.TargetTableName}]");
            return;
        }
        editTable.ColumnOrder.Clear();
        editTable.ColumnOrder.AddRange(columns);
    }

    private void DemoteSelectedColumn()
    {
        ArgumentNullException.ThrowIfNull(editTable);
        var oldIndex = editTable.ColumnOrder.IndexOf(columnOrderSelected);
        if (oldIndex >= 0 && oldIndex < editTable.ColumnOrder.Count - 1)
        {
            editTable.ColumnOrder.RemoveAt(oldIndex);
            editTable.ColumnOrder.Insert(oldIndex + 1, columnOrderSelected);
        }
    }

    private void PromoteSelectedColumn()
    {
        ArgumentNullException.ThrowIfNull(editTable);
        var oldIndex = editTable.ColumnOrder.IndexOf(columnOrderSelected);
        if (oldIndex >= 1)
        {
            editTable.ColumnOrder.RemoveAt(oldIndex);
            editTable.ColumnOrder.Insert(oldIndex - 1, columnOrderSelected);
        }
    }

    private async Task OnTableSelected(DatabaseTableSelectedResult table)
    {
        if (editTable is null) return;
        (editTable.TargetSchemaName, editTable.TargetTableName) = table;
        columns = await editTable.GetColumnNamesAsync();
    }

    public void Dispose() => editContext?.Dispose();
}
