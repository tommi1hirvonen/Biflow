@{
    var title = _editTable switch
    {
        not null => _editTable.DataTableId != Guid.Empty ? $"Edit {_editTable.DataTableName}" : "New data table",
        null => ""
    };
}

<HxModal @ref="_modal"
         Fullscreen="ModalFullscreen.XxlDown"
         Size="ModalSize.ExtraLarge"
         Title="@title"
         Scrollable="true"
         OnShown="() => _nameInput?.Element?.FocusAsync()">
    <BodyTemplate>
        @if (_editTable is not null && _categories is not null)
        {
            <EditForm id="table_edit_form" Model="_editTable" OnValidSubmit="SubmitEditTableAsync">
                <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
                <div class="row">
                     <div class="col">
                         <ul class="nav nav-underline mb-3">
                             <li class="nav-item">
                                 <span class="nav-link @(_currentView == TableEditView.Settings ? "active" : null)"
                                 @onclick="() => _currentView = TableEditView.Settings">
                                     <SvgIcon Icon="LucideIcon.Settings" />
                                     Settings
                                 </span>
                             </li>
                             <li class="nav-item">
                                 <span class="nav-link @(_currentView == TableEditView.ColumnOrder ? "active" : null)"
                                 @onclick="() => _currentView = TableEditView.ColumnOrder">
                                     <SvgIcon Icon="LucideIcon.Columns3" />
                                     Column Order
                                 </span>
                             </li>
                             <li class="nav-item">
                                 <span class="nav-link @(_currentView == TableEditView.Lookups ? "active" : null)"
                                 @onclick="() => _currentView = TableEditView.Lookups">
                                     <SvgIcon Icon="LucideIcon.Search" />
                                     Lookup Columns
                                 </span>
                             </li>
                         </ul>
                         <ObjectGraphDataAnnotationsValidator />
                         <ValidationSummary />
                         <FluentValidationValidator Validator="_dataTableValidator" />
                     </div>
                </div>
                 @if (_currentView == TableEditView.Settings)
                {
                    <div class="row">
                        <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                            <label class="form-label mb-lg-0">Data table name</label>
                        </div>
                        <div class="col-md-6">
                            <InputText form=""
                                       @ref="_nameInput"
                                       class="form-control form-control-sm"
                                       autocomplete="off"
                                       @bind-Value="_editTable.DataTableName" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                            <label class="form-label mb-lg-0">Category</label>
                        </div>
                        <div class="col-md-6">
                            <InputSelect class="form-select form-select-sm" @bind-Value="_editTable.CategoryId">
                                <option value="">No category</option>
                                @foreach (var cat in _categories)
                                {
                                    <option value="@cat.CategoryId">@cat.CategoryName</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                            <label class="form-label mb-lg-0">Connection</label>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-sm">
                                <select class="form-select form-select-sm" @onchange="ConnectionChanged">
                                    @foreach (var connection in _connections ?? [])
                                    {
                                        <option value="@connection.ConnectionId"
                                                selected="@(connection.ConnectionId == _editTable.Connection.ConnectionId)">
                                            @connection.ConnectionName
                                        </option>
                                    }
                                </select>
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                          OnClick="async () => await _offcanvas.LetAsync(x => x.ShowAsync(_editTable.Connection))">
                                    <SvgIcon Icon="LucideIcon.Ellipsis" />
                                    Select table
                                </HxButton>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                            <label class="form-label mb-lg-0">Target schema and table</label>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group input-group-sm">
                                <InputText class="form-control form-control-sm" disabled placeholder="Schema" autocomplete="off" @bind-Value="_editTable.TargetSchemaName" />
                                <InputText class="form-control form-control-sm" disabled placeholder="Table" autocomplete="off" @bind-Value="_editTable.TargetTableName" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex justify-content-end">
                            <label class="form-label mb-lg-0">Description</label>
                        </div>
                        <div class="col-md-6">
                            <InputTextArea class="form-control form-control-sm" rows="4" @bind-Value="_editTable.DataTableDescription" />
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                            <label class="form-label mb-lg-0">
                                Default editor row limit
                                <HxPopover Trigger="PopoverTrigger.Hover" Content="Initial query row limit when opening the data table editor">
                                    <SvgIcon Icon="LucideIcon.Info" />
                                </HxPopover>
                            </label>
                        </div>
                        <div class="col-md-2">
                            <InputNumber class="form-control form-control-sm" autocomplete="off" @bind-Value="_editTable.DefaultEditorRowLimit" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex justify-content-end">
                            <label class="form-label mb-lg-0"></label>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check form-check-inline">
                                <input type="checkbox" class="form-check-input" id="allow_insert"
                                       checked=@_editTable.AllowInsert
                                       @bind-value="_editTable.AllowInsert">
                                <label class="form-check-label" for="allow_insert">Allow insert</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input type="checkbox" class="form-check-input" id="allow_delete"
                                       checked=@_editTable.AllowDelete
                                       @bind-value="_editTable.AllowDelete">
                                <label class="form-check-label" for="allow_delete">Allow delete</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input type="checkbox" class="form-check-input" id="allow_update"
                                       checked=@_editTable.AllowUpdate
                                       @bind-value="_editTable.AllowUpdate">
                                <label class="form-check-label" for="allow_update">Allow update</label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex justify-content-end">
                            <label class="form-label mb-lg-0"></label>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check form-check-inline">
                                <input type="checkbox" class="form-check-input" id="allow_import"
                                       checked=@_editTable.AllowImport
                                       @bind-value="_editTable.AllowImport">
                                <label class="form-check-label" for="allow_import">Allow import</label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex justify-content-end">
                            <label class="form-label mb-lg-0">
                                Locked columns
                                <HxPopover Trigger="PopoverTrigger.Hover" Content="Define a list of locked columns to prevent editing. If the table has a column with a matching name, the column's edit fields will be disabled.">
                                    <SvgIcon Icon="LucideIcon.Info" />
                                </HxPopover>
                            </label>
                        </div>
                        <div class="col-md-6">
                            <HxInputTags Delimiters="[]"
                                        InputSize="InputSize.Small"
                                        SuggestDelay="0"
                                        SuggestMinimumLength="0"
                                        TagBadgeSettings="new BadgeSettings { Color = ThemeColor.Secondary }"
                                        DataProvider="GetLockedColumnSuggestions"
                                        @bind-Value="_editTable.LockedColumns" />
                            <div class="form-check form-check-inline mt-1">
                                <input type="checkbox" class="form-check-input" id="locked_columns_exclude"
                                       checked=@_editTable.LockedColumnsExcludeMode
                                       @bind-value="_editTable.LockedColumnsExcludeMode">
                                <label class="form-check-label" for="locked_columns_exclude">
                                    Exclude mode
                                    <HxPopover Trigger="PopoverTrigger.Hover" Content="When enabled, columns not listed will be locked.">
                                        <SvgIcon Icon="LucideIcon.Info" />
                                    </HxPopover>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 d-md-flex justify-content-end">
                            <label class="form-label mb-lg-0">
                                Hidden columns
                                <HxPopover Trigger="PopoverTrigger.Hover" Content="Define a list of hidden columns. If a hidden column is part of the primary key and 'allow import' is enabled, the column will still be included in Excel exports.">
                                    <SvgIcon Icon="LucideIcon.Info" />
                                </HxPopover>
                            </label>
                        </div>
                        <div class="col-md-6">
                            <HxInputTags Delimiters="[]"
                                         InputSize="InputSize.Small"
                                         SuggestDelay="0"
                                         SuggestMinimumLength="0"
                                         TagBadgeSettings="new BadgeSettings { Color = ThemeColor.Secondary }"
                                         DataProvider="GetHiddenColumnSuggestions"
                                         @bind-Value="_editTable.HiddenColumns" />
                        </div>
                    </div>
                }
                else if (_currentView == TableEditView.ColumnOrder)
                {
                    <div class="row justify-content-center">
                        <div class="col-auto mx-4">
                            <div class="row">
                                <div class="col">
                                    <HxButton Color="ThemeColor.None" CssClass="btn-auto" OnClick="ImportColumnOrderColumnsAsync">
                                        Import columns
                                    </HxButton>
                                </div>
                            </div>
                            <div class="row mt-5">
                                <div class="col">
                                    <HxButtonGroup Orientation="ButtonGroupOrientation.Vertical">
                                        <HxButton Color="ThemeColor.None" CssClass="btn-auto" OnClick="PromoteSelectedColumn">
                                            <SvgIcon Icon="LucideIcon.ChevronUp" />
                                            Promote
                                        </HxButton>
                                        <HxButton Color="ThemeColor.None" CssClass="btn-auto" OnClick="DemoteSelectedColumn">
                                            <SvgIcon Icon="LucideIcon.ChevronDown" />
                                            Demote
                                        </HxButton>
                                    </HxButtonGroup>
                                </div>
                            </div> 
                        </div>
                        <div class="col-auto">
                            @if (!_editTable?.ColumnOrder.Any() ?? false)
                            {
                                <span class="text-muted"><em>Import columns to define column ordering</em></span>
                            }
                            <ul class="list-group list-group-numbered">
                                @foreach (var column in _editTable?.ColumnOrder ?? Enumerable.Empty<string>())
                                {
                                    <li class="list-group-item list-group-item-action cursor-pointer @(column == _columnOrderSelected ? "active" : null)"
                                        @onclick="() => _columnOrderSelected = _columnOrderSelected != column ? column : string.Empty">
                                        @column
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
                else if (_currentView == TableEditView.Lookups)
                {
                    <div class="row">
                        <div class="col">
                            <button type="button" class="btn btn-sm btn-auto @(string.IsNullOrEmpty(_editTable.TargetSchemaName) || string.IsNullOrEmpty(_editTable.TargetTableName) ? "disabled" : null)"
                            @onclick="() => _editTable.Lookups.Add(new())">
                                <SvgIcon Icon="LucideIcon.Plus" />
                                Add lookup
                            </button>
                        </div>
                    </div>
                    <table class="table table-sm" style="margin-bottom: 20rem;">
                        <thead>
                            <tr>
                                <th>Column</th>
                                <th>Lookup table</th>
                                <th>Lookup value</th>
                                <th>Lookup description</th>
                                <th>Show</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!_editTable.Lookups.Any())
                            {
                                <tr>
                                    <td colspan="6">No lookups</td>
                                </tr>
                            }
                            else
                            {
                                foreach (var lookup in _editTable.Lookups)
                                {
                                    <tr>
                                        <td>
                                            <HxAutosuggest TItem="string"
                                                           TValue="string"
                                                           DataProvider="GetColumnSuggestions"
                                                           @bind-Value="lookup.ColumnName"
                                                           MinimumLength="0"
                                                           ValidationMessageMode="ValidationMessageMode.None"
                                                           InputSize="InputSize.Small"
                                                           autocomplete="off" />
                                        </td>
                                        <td>
                                            <HxAutosuggest CssClass="@(string.IsNullOrEmpty(lookup.ColumnName) ? "d-none" : null)"
                                                           TItem="MasterDataTable"
                                                           TValue="MasterDataTable"
                                                           DataProvider="GetLookupTableSuggestions"
                                                           ValueChanged="table => SetLookupTable(table, lookup)"
                                                           Value="lookup.LookupTable"
                                                           ValueExpression="() => lookup.LookupTable"
                                                           TextSelector="table => table.DataTableName"
                                                           MinimumLength="0"
                                                           ValidationMessageMode="ValidationMessageMode.None"
                                                           InputSize="InputSize.Small"
                                                           autocomplete="off" >
                                                <ItemTemplate Context="item">
                                                    <sup>@item.Category?.CategoryName</sup><small>@item.DataTableName</small>
                                                </ItemTemplate>
                                            </HxAutosuggest>
                                        </td>
                                        <td>
                                            <HxAutosuggest CssClass="@(string.IsNullOrEmpty(lookup.ColumnName) || lookup.LookupTableId == Guid.Empty ? "d-none" : null)"
                                                           TItem="string"
                                                           TValue="string"
                                                           DataProvider="request => GetLookupColumnSuggestions(request, lookup)"
                                                           @bind-Value="lookup.LookupValueColumn"
                                                           MinimumLength="0"
                                                           ValidationMessageMode="ValidationMessageMode.None"
                                                           InputSize="InputSize.Small"
                                                           autocomplete="off" />
                                        </td>
                                        <td>
                                            <HxAutosuggest CssClass="@(string.IsNullOrEmpty(lookup.ColumnName) || lookup.LookupTableId == Guid.Empty ? "d-none" : null)"
                                                           TItem="string"
                                                           TValue="string"
                                                           DataProvider="request => GetLookupColumnSuggestions(request, lookup)"
                                                           @bind-Value="lookup.LookupDescriptionColumn"
                                                           MinimumLength="0"
                                                           ValidationMessageMode="ValidationMessageMode.None"
                                                           InputSize="InputSize.Small"
                                                           autocomplete="off" />
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(lookup.ColumnName) && lookup.LookupTableId != Guid.Empty)
                                            {
                                                <select @bind="lookup.LookupDisplayType" class="form-select form-select-sm">
                                                    @foreach (var type in Enum.GetValues<LookupDisplayType>())
                                                    {
                                                        <option>@type</option>
                                                    }
                                                </select>
                                            }
                                        </td>
                                        <td>
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" title="Delete lookup"
                                                      OnClick="() => { _editTable.Lookups.Remove(lookup); StateHasChanged(); }">
                                                <SvgIcon Icon="LucideIcon.Delete" />
                                            </HxButton>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
            </EditForm>

            <DatabaseTableSelectOffcanvas @ref="_offcanvas" OnTableSelected="OnTableSelected" />
        }
        else
        {
            <div class="row my-3">
                <div class="col text-center">
                    <HxSpinner Color="ThemeColor.Secondary" />
                </div>
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit FormId="table_edit_form" Color="ThemeColor.Success">
            <SvgIcon Icon="LucideIcon.Save" />
            Save
        </HxSubmit>
        <HxButton Color="ThemeColor.Secondary" OnClick="HideAsync" Spinner="false">
            <SvgIcon Icon="LucideIcon.X" />
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>