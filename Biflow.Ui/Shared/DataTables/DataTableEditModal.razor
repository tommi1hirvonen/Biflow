@using System.Runtime.CompilerServices;

@implements IDisposable

@inject IHxMessengerService Messenger
@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject IJSRuntime JS

@{
    var title = EditTable switch
    {
        not null => EditTable.DataTableId != Guid.Empty ? $"Edit {EditTable.DataTableName}" : "New data table",
        null => ""
    };
}

<HxModal @ref="Modal" Fullscreen="ModalFullscreen.XxlDown" Size="ModalSize.ExtraLarge" Title="@title" Scrollable="true">
    <BodyTemplate>
        @if (EditTable is not null && Categories is not null)
        {
            <EditForm id="table_edit_form" Model="EditTable" OnValidSubmit="SubmitEditTableAsync">
                <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
                <div class="row my-3">
                    <div class="col">
                        <ObjectGraphDataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col">
                                <div class="row">
                                    <div class="col">
                                        <label class="form-label">Data table name</label>
                                        <InputText form="" class="form-control form-control-sm" autocomplete="off" @bind-Value="EditTable.DataTableName" />
                                    </div>
                                    <div class="col">
                                        <label class="form-label">Category</label>
                                        <InputSelect class="form-select form-select-sm" @bind-Value="EditTable.CategoryId">
                                            <option value="">No category</option>
                                            @foreach (var cat in Categories)
                                            {
                                                <option value="@cat.CategoryId">@cat.CategoryName</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="row mt-3 align-items-end">
                                    <div class="col">
                                        <label class="form-label">Connection</label>
                                        <select class="form-select form-select-sm" @onchange="ConnectionChanged">
                                            @foreach (var connection in Connections ?? Enumerable.Empty<SqlConnectionInfo>())
                                            {
                                                <option value="@connection.ConnectionId"
                                                        selected="@(connection.ConnectionId == EditTable.Connection.ConnectionId)">
                                                    @connection.ConnectionName
                                                </option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-auto">
                                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              OnClick="async () => await Offcanvas.LetAsync(x => x.ShowAsync(EditTable.Connection.ConnectionId))">
                                            <CxIcon Icon="FeatherIcon.MoreHorizontal" />
                                            Select table
                                        </HxButton>
                                    </div>
                                </div>
                                <div class="row mt-3">
                                    <div class="col">
                                        <label class="form-label">Target schema and table</label>
                                        <div class="input-group input-group-sm">
                                            <InputText class="form-control form-control-sm" disabled placeholder="Schema" autocomplete="off" @bind-Value="EditTable.TargetSchemaName" />
                                            <InputText class="form-control form-control-sm" disabled placeholder="Table" autocomplete="off" @bind-Value="EditTable.TargetTableName" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="row">
                                    <div class="col">
                                        <label class="form-label">Description</label>
                                        <InputTextArea class="form-control form-control-sm" rows="8" @bind-Value="EditTable.DataTableDescription" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="row">
                            <div class="col">
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="allow_insert"
                                           checked=@EditTable.AllowInsert
                                    @bind-value="EditTable.AllowInsert">
                                    <label class="form-check-label" for="allow_insert">Allow insert</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="allow_delete"
                                           checked=@EditTable.AllowDelete
                                    @bind-value="EditTable.AllowDelete">
                                    <label class="form-check-label" for="allow_delete">Allow delete</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="allow_update"
                                           checked=@EditTable.AllowUpdate
                                    @bind-value="EditTable.AllowUpdate">
                                    <label class="form-check-label" for="allow_update">Allow update</label>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col">
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="allow_import"
                                           checked=@EditTable.AllowImport
                                    @bind-value="EditTable.AllowImport">
                                    <label class="form-check-label" for="allow_import">Allow import</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="row">
                            <div class="col">
                                <label class="form-label">
                                    Locked columns
                                    <HxPopover Trigger="PopoverTrigger.Hover" Content="Define a list of locked columns to prevent editing. If the table has a column with a matching name, the column's edit fields will be disabled.">
                                        <CxIcon Icon="FeatherIcon.Info" />
                                    </HxPopover>
                                </label>
                                <HxInputTags Delimiters="new()"
                                             InputSize="InputSize.Small"
                                             TagBadgeSettings="new BadgeSettings { Color = ThemeColor.Secondary }"
                                @bind-Value="EditTable.LockedColumns" />
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col">
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="locked_columns_exclude"
                                           checked=@EditTable.LockedColumnsExcludeMode
                                    @bind-value="EditTable.LockedColumnsExcludeMode">
                                    <label class="form-check-label" for="locked_columns_exclude">
                                        Exclude mode
                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="When enabled, columns not listed will be locked.">
                                            <CxIcon Icon="FeatherIcon.Info" />
                                        </HxPopover>
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <button type="button" class="btn btn-sm btn-auto @(string.IsNullOrEmpty(EditTable.TargetSchemaName) || string.IsNullOrEmpty(EditTable.TargetTableName) ? "disabled" : null)"
                                @onclick="() => EditTable.Lookups.Add(new())">
                            <CxIcon Icon="FeatherIcon.Search" />
                            Add lookup
                        </button>
                    </div>
                </div>
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Column</th>
                            <th>Lookup table</th>
                            <th>Lookup value</th>
                            <th>Lookup description</th>
                            <th>Show</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!EditTable.Lookups.Any())
                        {
                            <tr>
                                <td colspan="6">No lookups</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var lookup in EditTable.Lookups)
                            {
                                <tr>
                                    <td>
                                        <HxAutosuggest TItem="string"
                                           TValue="string"
                                           DataProvider="GetColumnSuggestions"
                                           @bind-Value="lookup.ColumnName"
                                           MinimumLength="0"
                                           ValidationMessageMode="ValidationMessageMode.None"
                                           InputSize="InputSize.Small" />
                                    </td>
                                    <td>
                                        <HxAutosuggest CssClass="@(string.IsNullOrEmpty(lookup.ColumnName) ? "d-none" : null)"
                                           TItem="MasterDataTable"
                                           TValue="MasterDataTable"
                                           DataProvider="GetLookupTableSuggestions"
                                           ValueChanged="table => SetLookupTable(table, lookup)"
                                           Value="lookup.LookupTable"
                                           ValueExpression="() => lookup.LookupTable"
                                           TextSelector="table => table.DataTableName"
                                           MinimumLength="0"
                                           ValidationMessageMode="ValidationMessageMode.None"
                                           InputSize="InputSize.Small">
                                           <ItemTemplate Context="item">
                                               <small>@item.DataTableName</small><sup>@item.Category?.CategoryName</sup>
                                           </ItemTemplate>
                                       </HxAutosuggest>
                                    </td>
                                    <td>
                                        <HxAutosuggest CssClass="@(string.IsNullOrEmpty(lookup.ColumnName) || lookup.LookupTableId == Guid.Empty ? "d-none" : null)"
                                           TItem="string"
                                           TValue="string"
                                           DataProvider="request => GetLookupColumnSuggestions(request, lookup)"
                                           @bind-Value="lookup.LookupValueColumn"
                                           MinimumLength="0"
                                           ValidationMessageMode="ValidationMessageMode.None"
                                           InputSize="InputSize.Small" />
                                    </td>
                                    <td>
                                        <HxAutosuggest CssClass="@(string.IsNullOrEmpty(lookup.ColumnName) || lookup.LookupTableId == Guid.Empty ? "d-none" : null)"
                                            TItem="string"
                                            TValue="string"
                                            DataProvider="request => GetLookupColumnSuggestions(request, lookup)"
                                            @bind-Value="lookup.LookupDescriptionColumn"
                                            MinimumLength="0"
                                            ValidationMessageMode="ValidationMessageMode.None"
                                            InputSize="InputSize.Small" />
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(lookup.ColumnName) && lookup.LookupTableId != Guid.Empty)
                                        {
                                            <select @bind="lookup.LookupDisplayType" class="form-select form-select-sm">
                                                @foreach (var type in Enum.GetValues<LookupDisplayType>())
                                                {
                                                    <option>@type</option>
                                                }
                                            </select>
                                        }
                                    </td>
                                    <td>
                                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" title="Delete lookup"
                                                OnClick="() => { EditTable.Lookups.Remove(lookup); StateHasChanged(); }">
                                            <CxIcon Icon="FeatherIcon.Delete" />
                                        </HxButton>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </EditForm>

            <DatabaseTableSelectOffcanvas @ref="Offcanvas" OnTableSelected="OnTableSelected" />
        }
        else
        {
            <div class="row my-3">
                <div class="col text-center">
                    <HxSpinner Color="ThemeColor.Secondary" />
                </div>
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit FormId="table_edit_form" Color="ThemeColor.Success">
            <CxIcon Icon="FeatherIcon.Save" />
            Save
        </HxSubmit>
        <HxButton Color="ThemeColor.Secondary" OnClick="EndEditContext" Spinner="false">
            <CxIcon Icon="FeatherIcon.X" />
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>


@code {
    [Parameter] public EventCallback<MasterDataTable> OnTableSubmitted { get; set; }

    private HxModal? Modal { get; set; }

    private DatabaseTableSelectOffcanvas? Offcanvas { get; set; }

    private BiflowContext? EditContext { get; set; }

    private MasterDataTable? EditTable { get; set; }

    private IEnumerable<MasterDataTable>? Tables { get; set; }
    private IEnumerable<SqlConnectionInfo>? Connections { get; set; }
    private IEnumerable<MasterDataTableCategory>? Categories { get; set; }
    private IEnumerable<string>? Columns { get; set; }
    private ConditionalWeakTable<MasterDataTableLookup, IEnumerable<string>> LookupColumns = new();

    public async Task SetEditContextAsync(MasterDataTable? table = null)
    {
        await Modal.LetAsync(x => x.ShowAsync());
        EditContext?.Dispose();
        EditContext = DbContextFactory.CreateDbContext();
        Connections = await EditContext.SqlConnections
            .OrderBy(c => c.ConnectionName)
            .ToListAsync();
        Categories = await EditContext.MasterDataTableCategories
            .OrderBy(c => c.CategoryName)
            .ToListAsync();
        Tables = await EditContext.MasterDataTables
            .Include(t => t.Connection)
            .Include(t => t.Category)
            .OrderBy(t => t.Category!.CategoryName)
            .ThenBy(t => t.DataTableName)
            .ToListAsync();
        if (table is null)
        {
            // New table
            EditTable = new()
            {
                Connection = Connections.First(),
                Lookups = new List<MasterDataTableLookup>()
            };
            EditTable.ConnectionId = Connections!.First().ConnectionId;
        }
        else
        {
            EditTable = await EditContext.MasterDataTables
                .Include(t => t.Connection)
                .Include(t => t.Lookups)
                .ThenInclude(l => l.LookupTable)
                .FirstAsync(t => t.DataTableId == table.DataTableId);
            Columns = await EditTable.GetColumnNamesAsync();
            foreach (var lookup in EditTable.Lookups)
            {
                LookupColumns.AddOrUpdate(lookup, await lookup.LookupTable.GetColumnNamesAsync());
            }
        }
        StateHasChanged();
    }

    private void ConnectionChanged(ChangeEventArgs args)
    {
        var guid = Guid.Parse(args.Value!.ToString()!);
        var connection = Connections!.First(c => c.ConnectionId == guid);
        EditTable!.ConnectionId = guid;
        EditTable!.Connection = connection;
    }

    private async void SetLookupTable(MasterDataTable? dataTable, MasterDataTableLookup lookup)
    {
        try
        {
            lookup.LookupValueColumn = "";
            lookup.LookupDescriptionColumn = "";
            if (dataTable is null)
            {
                lookup.LookupTable = null!;
                lookup.LookupTableId = Guid.Empty;
                LookupColumns.Remove(lookup);
                return;
            }
            lookup.LookupTableId = dataTable.DataTableId;
            lookup.LookupTable = dataTable;
            LookupColumns.AddOrUpdate(lookup, await lookup.LookupTable.GetColumnNamesAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error selecting lookup table", ex.Message);   
        }
    }

    private async Task EndEditContext()
    {
        await Modal.LetAsync(x => x.HideAsync());
        EditContext?.Dispose();
        await Task.Delay(500);
        EditTable = null;
        Columns = null;
        StateHasChanged();
    }

    private Task<AutosuggestDataProviderResult<string>> GetColumnSuggestions(AutosuggestDataProviderRequest request)
    {
        return Task.FromResult(new AutosuggestDataProviderResult<string>
        {
            Data = Columns?.Where(c => c.ContainsIgnoreCase(request.UserInput)) ?? Enumerable.Empty<string>()
        });
    }

    private Task<AutosuggestDataProviderResult<MasterDataTable>> GetLookupTableSuggestions(AutosuggestDataProviderRequest request)
    {
        return Task.FromResult(new AutosuggestDataProviderResult<MasterDataTable>
        {
            Data = Tables
                ?.Where(t => t.DataTableName.ContainsIgnoreCase(request.UserInput) || (t.Category?.CategoryName.ContainsIgnoreCase(request.UserInput) ?? false))
                ?? Enumerable.Empty<MasterDataTable>()
        });
    }

    private Task<AutosuggestDataProviderResult<string>> GetLookupColumnSuggestions(AutosuggestDataProviderRequest request, MasterDataTableLookup lookup)
    {
        return Task.FromResult(new AutosuggestDataProviderResult<string>
        {
            Data = LookupColumns.GetValueOrDefault(lookup)?.Where(c => c.ContainsIgnoreCase(request.UserInput)) ?? Enumerable.Empty<string>()
        });
    }

    private async Task SubmitEditTableAsync()
    {
        if (EditContext is null || EditTable is null)
        {
            return;
        }

        if (EditTable.Lookups.Any(lookup => lookup.LookupTable.ConnectionId != EditTable.ConnectionId))
        {
            Messenger.AddError("Validation error", "All lookup tables must use the same connection as the main table.");
            return;
        }

        try
        {
            if (EditTable.DataTableId == Guid.Empty)
            {
                EditContext.MasterDataTables.Add(EditTable);
            }
            await EditContext.SaveChangesAsync();
            await OnTableSubmitted.InvokeAsync(EditTable);
            await EndEditContext();
        }
        catch (DbUpdateConcurrencyException)
        {
            Messenger.AddError("Concurrency error", "The data table was modified outside of this session. Reload the page to view the most recent values.");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error updating data table", ex.Message);
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }

    private async Task OnTableSelected(DatabaseTableSelectedResult table)
    {
        if (EditTable is null) return;
        (EditTable.TargetSchemaName, EditTable.TargetTableName) = table;
        Columns = await EditTable.GetColumnNamesAsync();
    }

    public void Dispose() => EditContext?.Dispose();
}
