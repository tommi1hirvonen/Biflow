@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject IMediator Mediator

@{
    var title = _category.CategoryId == Guid.Empty ? "New category" : $"Edit {_category.CategoryName}";
}

<HxOffcanvas @ref="_modal"
             Title="@title"
             Size="OffcanvasSize.Regular"
             OnShown="() => _nameInput?.Element?.FocusAsync()">
    <BodyTemplate>
        <EditForm id="category_edit_form" Model="_category" OnValidSubmit="SubmitAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label class="form-label">Category name</label>
                <InputText @ref="_nameInput" class="form-control" @bind-Value="_category.CategoryName"></InputText>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit FormId="category_edit_form" Color="ThemeColor.Success">
            Save
        </HxSubmit>
        <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" OnClick="() => _modal.LetAsync(x => x.HideAsync())" Spinner="false">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public EventCallback<MasterDataTableCategory> OnCategorySubmitted { get; set; }

    private HxOffcanvas? _modal;
    private MasterDataTableCategory _category = new();
    private InputText? _nameInput;

    public async Task ShowAsync(MasterDataTableCategory? category = null)
    {
        if (category is null)
        {
            _category = new();
            await _modal.LetAsync(x => x.ShowAsync());
            return;
        }

        await using var context = await DbContextFactory.CreateDbContextAsync();
        _category = await context.MasterDataTableCategories.FirstAsync(c => c.CategoryId == category.CategoryId);
        await _modal.LetAsync(x => x.ShowAsync());
    }

    public async Task SubmitAsync()
    {
        try
        {
            if (_category.CategoryId == Guid.Empty)
            {
                var command = new CreateDataTableCategoryCommand(_category.CategoryName);
                var category = await Mediator.SendAsync(command);
                await OnCategorySubmitted.InvokeAsync(category);
            }
            else
            {
                var command = new UpdateDataTableCategoryCommand(_category.CategoryId, _category.CategoryName);
                _ = await Mediator.SendAsync(command);
                await OnCategorySubmitted.InvokeAsync(_category);
            }
            await _modal.LetAsync(x => x.HideAsync());
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error saving category", ex.Message);
        }
    }
}
