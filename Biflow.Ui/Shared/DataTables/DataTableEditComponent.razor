@using System.Text
@using System.Text.RegularExpressions
@inject IHxMessengerService Messenger
@inject MarkupHelperService MarkupHelper
@inject IJSRuntime JS

<div class="row">
    <div class="col">
        <HxDropdownButtonGroup>
            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" Enabled="Tables?.Any() ?? false" Spinner="Tables is null">
                @if (SelectedTable is not null)
                {
                    @SelectedTable.DataTableName
                }
                else if (Tables is null)
                {
                    <text>Loading</text>
                }
                else if (Tables.Any())
                {
                    <text>Select table</text>
                }
                else
                {
                    <text>No tables</text>
                }
            </HxDropdownToggleButton>
            <HxDropdownMenu>
                @foreach (var table in Tables ?? Enumerable.Empty<DataTable>())
                {
                    <HxDropdownItem OnClick="async () => await ReloadDataAsync(table)">
                        @table.DataTableName
                    </HxDropdownItem>
                }
            </HxDropdownMenu>
        </HxDropdownButtonGroup>
    </div>
</div>

<div class="row mt-3">
    <div class="col-auto">
        <HxButtonToolbar>

            <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small"
                      Enabled="Dataset is not null && Dataset.IsEditable"
                      OnClick="SaveChangesAsync">
                @MarkupHelper.FromFile("icons/feather/save.svg")
                Save changes
            </HxButton>

            <HxButton CssClass="ms-3" Color="ThemeColor.Success" Size="ButtonSize.Small"
                      Enabled="Dataset is not null && Dataset.IsEditable"
                      OnClick="() => Dataset?.AddRecord()">
                @MarkupHelper.FromFile("icons/feather/plus.svg")
                Add record
            </HxButton>

            <HxButtonGroup CssClass="ms-3" Size="ButtonGroupSize.Small">

                <HxButton Color="ThemeColor.Secondary" Size="ButtonSize.Small"
                    Enabled="SelectedTable is not null"
                    OnClick="async () => await ReloadDataAsync()">
                    @MarkupHelper.FromFile("icons/feather/refresh-cw.svg")
                    Reload
                </HxButton>

                <HxButton Color="ThemeColor.Secondary" Size="ButtonSize.Small"
                    Enabled="FilterSet is not null"
                    OnClick="async () => await FilterSetOffcanvas.LetAsync(x => x.ShowAsync())">
                    @MarkupHelper.FromFile("icons/feather/filter.svg")
                    Filters
                </HxButton>

                <HxButton Color="ThemeColor.Secondary" Size="ButtonSize.Small"
                    Enabled="ColumnSelections is not null"
                    OnClick="async () => await SelectColumnsOffcanvas.LetAsync(x => x.ShowAsync())">
                    @MarkupHelper.FromFile("icons/feather/columns.svg")
                    Columns
                </HxButton>

                <HxDropdownButtonGroup>
                    <HxDropdownToggleButton Spinner="Exporting" Color="ThemeColor.Secondary" Size="ButtonSize.Small" Enabled="SelectedTable is not null && !Exporting">
                        @MarkupHelper.FromFile("icons/feather/download.svg")
                        Export
                    </HxDropdownToggleButton>
                    <HxDropdownMenu>
                        <HxDropdownItem OnClick="async () => await DownloadExportAsync(true)">
                            Filtered data
                        </HxDropdownItem>
                        <HxDropdownItem OnClick="async () => await DownloadExportAsync(false)">
                            All data
                        </HxDropdownItem>
                    </HxDropdownMenu>
                </HxDropdownButtonGroup>

                <a class="btn btn-sm btn-secondary @(SelectedTable is null ? "disabled" : null)" href="/datatables/import/@SelectedTable?.DataTableId">
                    @MarkupHelper.FromFile("icons/feather/upload.svg")
                    Import
                </a>

                <HxButton Color="ThemeColor.Secondary" Size="ButtonSize.Small"
                          Enabled="!string.IsNullOrEmpty(SelectedTable?.DataTableDescription)"
                          OnClick="async () => await TableInfoOffcanvas.LetAsync(x => x.ShowAsync())">
                    @MarkupHelper.FromFile("icons/feather/info.svg")
                    Table info
                </HxButton>

            </HxButtonGroup>
        </HxButtonToolbar>
    </div>
</div>

<div class="row mt-3">
    <div class="col-auto d-inline-flex align-items-center">
        <label>Limit rows</label>
        <input class="form-control form-control-sm ms-3" type="number" @bind-value="TopRows" style="max-width: 100px;" />
    </div>
    <div class="col-auto align-items-center">
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="editmode_radio"
                    disabled="@(!Dataset?.IsEditable ?? true)"
                    checked="@(EditModeEnabled)"
                    @onchange="() => { EditModeEnabled = true; }">
            <label class="form-check-label" for="editmode_radio">Edit mode</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="viewmode_radio"
                    disabled="@(!Dataset?.IsEditable ?? true)"
                    checked="@(!EditModeEnabled)"
                    @onchange="() => { EditModeEnabled = false; }">
            <label class="form-check-label" for="viewmode_radio">View mode</label>
        </div>
    </div>
</div>

<div class="row my-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                @{
                    var records = GetOrderedRowRecords();
                }
                @if (records?.Any() ?? false)
                {
                    <small class="text-secondary px-3">@records.Count record(s)</small>
                }
                @if (!Dataset?.IsEditable ?? false)
                {
                    <small class="text-secondary px-3">Table is not editable</small>
                }
                @if (Dataset is not null && records is not null)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                @foreach (var column in Dataset.Columns.Where(c => IsColumnSelected(c.Name)))
                                {
                                    var orderBy = OrderBy.FirstOrDefault(o => o.Column == column.Name);
                                    <th @onclick="() => ToggleOrderBy(column.Name)" title="@column.DbDatatypeDescription">
                                        @column.Name
                                        @if (column.IsPrimaryKey)
                                        {
                                            <span class="ms-2">
                                                @MarkupHelper.FromFile("icons/feather/key.svg")
                                            </span>
                                        }
                                        @if (column.IsComputed)
                                        {
                                            <span class="ms-2">
                                                @MarkupHelper.FromFile("icons/feather/code.svg")
                                            </span>
                                        }
                                        @if (orderBy.Column is not null)
                                        {
                                            <span class="ms-2"> 
                                                @if (orderBy.Descending)
                                                {
                                                    @MarkupHelper.FromFile("icons/feather/arrow-up.svg")
                                                }
                                                else
                                                {
                                                    @MarkupHelper.FromFile("icons/feather/arrow-down.svg")
                                                }
                                            </span>
                                        }
                                    </th>
                                }
                                @if (Dataset.IsEditable && EditModeEnabled)
                                {
                                    <th></th>    
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <Virtualize Items="records" Context="row" SpacerElement="tr">
                                <tr>
                                    @foreach (var columnInfo in Dataset.Columns.Where(c => IsColumnSelected(c.Name)))
                                    {
                                        var column = columnInfo.Name;
                                        var datatype = columnInfo.Datatype;
                                        var lookupValues = columnInfo.Lookup?.Values;
                                        <td>
                                            @if (Dataset.IsEditable && EditModeEnabled)
                                            {
                                                @if (!columnInfo.IsEditable)
                                                {
                                                    <text>@row.WorkingValues[column]</text>
                                                }

                                                else if (datatype == typeof(byte))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.ByteIndexer[column]" />
                                                }

                                                else if (datatype == typeof(short) && lookupValues is not null)
                                                {
                                                    <select @bind="row.ShortIndexer[column]" class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(short))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.ShortIndexer[column]" />
                                                }

                                                else if (datatype == typeof(int) && lookupValues is not null)
                                                {
                                                    <select @bind="row.IntIndexer[column]" class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(int))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.IntIndexer[column]" />
                                                }

                                                else if (datatype == typeof(long) && lookupValues is not null)
                                                {
                                                    <select @bind="row.LongIndexer[column]" class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(long))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.LongIndexer[column]" />
                                                }

                                                else if (datatype == typeof(decimal) && lookupValues is not null)
                                                {
                                                    <select @bind="row.DecimalIndexer[column]" class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(decimal))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.DecimalIndexer[column]" />
                                                }

                                                else if (datatype == typeof(double))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.DoubleIndexer[column]" />
                                                }
                                                else if (datatype == typeof(float))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.FloatIndexer[column]" />
                                                }

                                                else if (datatype == typeof(string) && lookupValues is not null)
                                                {
                                                    <select @bind="row.StringIndexer[column]" class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(string))
                                                {
                                                    <input class="form-control form-control-sm" type="text" @bind-value="row.StringIndexer[column]" />
                                                }

                                                else if (datatype == typeof(bool))
                                                {
                                                    var id = Guid.NewGuid();
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" id="@id"
                                               checked=@row.BooleanIndexer[column] @bind-value="row.BooleanIndexer[column]">
                                                        <label class="form-check-label" for="@id"></label>
                                                    </div>
                                                }

                                                else if (datatype == typeof(DateTime) && lookupValues is not null)
                                                {
                                                    <select @bind="row.DateTimeIndexer[column]" class="form-select form-select-sm">
                                                        <option value="">null</option>
                                                        @foreach (var lookup in lookupValues)
                                                        {
                                                            <option value="@lookup.Value">@lookup.DisplayValue</option>
                                                        }
                                                    </select>
                                                }
                                                else if (datatype == typeof(DateTime))
                                                {
                                                    <input class="form-control form-control-sm" type="datetime-local" @bind-value="row.DateTimeIndexer[column]" />
                                                }
                                                else
                                                {
                                                    <text>@row.WorkingValues[column]</text>
                                                }
                                            }
                                            else
                                            {
                                                <text>@row.WorkingValues[column]</text>
                                            }
                                        </td>
                                    }
                                    @if (Dataset.IsEditable && EditModeEnabled)
                                    {
                                        <td>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => row.ToBeDeleted = true">
                                                @MarkupHelper.FromFile("icons/feather/delete.svg")
                                            </button>
                                        </td>
                                    }
                                </tr>
                            </Virtualize>
                        </tbody>
                    </table>
                }
                else if (SelectedTable is not null)
                {
                    <p class="px-3">Loading data...</p>
                }
                else if (Tables is null)
                {
                    <p class="px-3">Loading tables...</p>
                }
                else if (Tables.Any())
                {
                    <p class="px-3">Select a table to edit data</p>
                }
                else
                {
                    <p class="px-3">No tables</p>
                }
            </div>
        </div>
    </div>
</div>

<HxOffcanvas @ref="TableInfoOffcanvas" Title="@SelectedTable?.DataTableName" Size="OffcanvasSize.Small" Backdrop="OffcanvasBackdrop.False" ScrollingEnabled="true">
    <BodyTemplate>
        <p>
            @SelectedTable?.DataTableDescription
        </p>
    </BodyTemplate>
</HxOffcanvas>

<FilterSetOffcanvas @ref="FilterSetOffcanvas" Filters="FilterSet" />

<SelectColumnsOffcanvas @ref="SelectColumnsOffcanvas" ColumnSelections="ColumnSelections" OnSelectionsChanged="StateHasChanged" />

@code {
    [Parameter] public List<DataTable>? Tables { get; set; }

    private DataTable? SelectedTable { get; set; }

    private Dataset? Dataset { get; set; }

    private int TopRows
    {
        get => _topRows;
        set => _topRows = value > 0 ? value : _topRows;
    }

    private int _topRows = 100;

    private List<(string Column, bool Descending)> OrderBy { get; } = new();

    private FilterSet? FilterSet { get; set; }

    private Dictionary<string, bool>? ColumnSelections { get; set; }

    private bool IsColumnSelected(string column) => (ColumnSelections?.ContainsKey(column) ?? false) && ColumnSelections[column];

    private FilterSetOffcanvas? FilterSetOffcanvas { get; set; }

    private HxOffcanvas? TableInfoOffcanvas { get; set; }

    private SelectColumnsOffcanvas? SelectColumnsOffcanvas { get; set; }

    private bool EditModeEnabled { get; set; } = true;

    private bool Exporting { get; set; } = false;

    private List<RowRecord>? GetOrderedRowRecords()
    {
        var records = Dataset?.RowRecords;
        foreach (var orderBy in OrderBy)
        {
            if (orderBy.Descending)
            {
                records = records?.OrderByDescending(r => r.WorkingValues[orderBy.Column]);
            }
            else
            {
                records = records?.OrderBy(r => r.WorkingValues[orderBy.Column]);
            }
        }
        return records?.ToList();
    }

    private void ToggleOrderBy(string column)
    {
        // ascending (false) => descending (true) => removed
        var index = OrderBy.FindIndex(o => o.Column == column);
        if (index >= 0)
        {
            var orderBy = OrderBy[index];
            OrderBy.Remove(orderBy);
            if (!orderBy.Descending)
            {
                OrderBy.Insert(index, (column, true));   
            }
        }
        else
        {
            OrderBy.Insert(0, (column, false));
        }
    }

    private async Task ReloadDataAsync(DataTable? table = null)
    {
        Dataset = null;
        StateHasChanged();

        if (table is not null)
        {
            OrderBy.Clear();
            FilterSet = null;
            ColumnSelections = null;
            SelectedTable = table;
        }

        if (SelectedTable is null)
        {
            Messenger.AddError("Error loading data", $"Selected table was null.");
            return;
        }

        try
        {
            Dataset = await SelectedTable.LoadDataAsync(TopRows, FilterSet);
            FilterSet ??= Dataset.EmptyFilterSet;
            ColumnSelections ??= Dataset.Columns.ToDictionary(x => x.Name, x => true);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error loading data", ex.Message);
        }
    }

    private async Task SaveChangesAsync()
    {
        if (Dataset is null)
        {
            Messenger.AddError("Error saving changes", $"Table editor dataset object was null.");
            return;
        }

        try
        {
            var (inserted, updated, deleted) = await Dataset.SaveChangesAsync();
            var message = new StringBuilder();
            if (inserted == 0 && updated == 0 && deleted == 0)
            {
                message.Append("No changes detected");
            }
            if (inserted > 0)
            {
                message.Append("Inserted ").Append(inserted).Append(" record(s)").AppendLine();
            }
            if (updated > 0)
            {
                message.Append("Updated ").Append(updated).Append(" record(s)").AppendLine();
            }
            if (deleted > 0)
            {
                message.Append("Deleted ").Append(deleted).Append(" record(s)").AppendLine();
            }
            Messenger.AddInformation("Changes saved", message.ToString());
            var dataset = await SelectedTable.LetAsync(x => x.LoadDataAsync(TopRows, FilterSet));
            Dataset = await SelectedTable.LetAsync(x => x.LoadDataAsync(TopRows, FilterSet)) ?? Dataset;
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error saving changes", $"Error while committing changes to the database. No changes were made.{System.Environment.NewLine}{ex.Message}");
        }
    }

    private async Task DownloadExportAsync(bool filtered)
    {
        Exporting = true;
        try
        {
            ArgumentNullException.ThrowIfNull(SelectedTable);
            var filterSet = filtered ? FilterSet : null;
            var dataset = await SelectedTable.LoadDataAsync(top: int.MaxValue, filters: filterSet);
            using var stream = dataset.GetExcelExportStream();

            var regexSearch = new string(Path.GetInvalidFileNameChars());
            var regex = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
            var tableName = SelectedTable is not null ? regex.Replace(SelectedTable.DataTableName, "") : "export";
            var fileName = $"{tableName}.xlsx";
            using var streamRef = new DotNetStreamReference(stream: stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error exporting", ex.Message);
        }
        finally
        {
            Exporting = false;
        }
    }

}
