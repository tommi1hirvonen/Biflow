@using System.Text
@inject IHxMessengerService Messenger

<HxDropdown>
    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" Enabled="Tables?.Any() ?? false" Spinner="Tables is null">
        @if (SelectedTable is not null)
        {
            @SelectedTable.DataTableName
        }
        else if (Tables is null)
        {
            <text>Loading</text>
        }
        else if (Tables.Any())
        {
            <text>Select table</text>
        }
        else
        {
            <text>No tables</text>
        }
    </HxDropdownToggleButton>
    <HxDropdownMenu>
        @foreach (var table in Tables ?? Enumerable.Empty<DataTable>())
        {
            <HxDropdownItem OnClick="async () => await ReloadDataAsync(table)">
                @table.DataTableName
            </HxDropdownItem>
        }
    </HxDropdownMenu>
</HxDropdown>

<HxButton CssClass="ms-3" Color="ThemeColor.Primary" Size="ButtonSize.Small" Enabled="Editor is not null" OnClick="SaveChangesAsync">
    Save changes
</HxButton>

<HxButton CssClass="ms-3" Color="ThemeColor.Success" Size="ButtonSize.Small" Enabled="Editor is not null" OnClick="() => Editor?.AddRecord()">
    Add record
</HxButton>

<HxButton CssClass="ms-3" Color="ThemeColor.Secondary" Size="ButtonSize.Small" Enabled="Editor is not null" OnClick="async () => await ReloadDataAsync()">
    Reset/reload
</HxButton>

<div class="row mt-3">
    <div class="col-xxl-1 col-xl-2 col-lg-3 col-md-3 col-4">
        <label>Limit rows</label>
        <input class="form-control form-control-sm" type="number" @bind-value="TopRows" />
    </div>
</div>

<div class="row my-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                @if (Editor?.RowRecords.Any() ?? false)
                {
                    <small class="text-secondary px-3">@Editor.RowRecords.Count() record(s)</small>
                }
                @if (Editor?.IsInitialized ?? false)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                @foreach (var column in Editor.Columns)
                                {
                                    var name = column.IsPrimaryKey ? $"{column.ColumnName} (PK)" : column.ColumnName;
                                    <th>@name</th>
                                }
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in Editor.RowRecords)
                            {
                                <tr>
                                    @foreach (var columns in row.Columns)
                                    {
                                        var column = columns.ColumnName;
                                        var datatype = columns.Datatype;
                                        <td>
                                            @if (datatype == typeof(byte))
                                            {
                                                <input class="form-control form-control-sm" type="number" @bind-value="row.ByteValues[column]" />
                                            }
                                            else if (datatype == typeof(short))
                                            {
                                                <input class="form-control form-control-sm" type="number" @bind-value="row.ShortValues[column]" />
                                            }
                                            else if (datatype == typeof(int))
                                            {
                                                <input class="form-control form-control-sm" type="number" @bind-value="row.IntValues[column]" />
                                            }
                                            else if (datatype == typeof(long))
                                            {
                                                <input class="form-control form-control-sm" type="number" @bind-value="row.LongValues[column]" />
                                            }
                                            else if (datatype == typeof(decimal))
                                            {
                                                <input class="form-control form-control-sm" type="number" @bind-value="row.DecimalValues[column]" />
                                            }
                                            else if (datatype == typeof(double))
                                            {
                                                <input class="form-control form-control-sm" type="number" @bind-value="row.DoubleValues[column]" />
                                            }
                                            else if (datatype == typeof(float))
                                            {
                                                <input class="form-control form-control-sm" type="number" @bind-value="row.FloatValues[column]" />
                                            }
                                            else if (datatype == typeof(string))
                                            {
                                                <input class="form-control form-control-sm" type="text" @bind-value="row.StringValues[column]" />
                                            }
                                            else if (datatype == typeof(bool))
                                            {
                                                var id = Guid.NewGuid();
                                                <div class="form-check">
                                                    <input type="checkbox" class="form-check-input" id="@id"
                                                            checked=@row.BooleanValues[column] @bind-value="row.BooleanValues[column]">
                                                    <label class="form-check-label" for="@id"></label>
                                                </div>
                                            }
                                            else if (datatype == typeof(DateTime))
                                            {
                                                <input class="form-control form-control-sm" type="datetime-local" @bind-value="row.DateTimeValues[column]" />
                                            }
                                            else
                                            {
                                                <text>@row.UnsupportedValues[column]</text>
                                            }
                                        </td>
                                    }
                                    <td>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => row.ToBeDeleted = true">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else if (Editor is not null)
                {
                    <p class="px-3">Loading data...</p>
                }
                else if (Tables is null)
                {
                    <p class="px-3">Loading tables...</p>
                }
                else if (Tables.Any())
                {
                    <p class="px-3">Select a table to edit data</p>
                }
                else
                {
                    <p class="px-3">No tables</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<DataTable>? Tables { get; set; }

    private DataTable? SelectedTable { get; set; }

    private TableEditorHelper? Editor { get; set; }

    private int TopRows
    {
        get => _topRows;
        set => _topRows = value > 0 ? value : _topRows;
    }

    private int _topRows = 100;

    private async Task ReloadDataAsync(DataTable? table = null)
    {
        if (table is not null)
        {
            SelectedTable = table;
            Editor = new(table.Connection.ConnectionString, table.TargetSchemaName, table.TargetTableName);
        }
        if (Editor is null)
        {
            Messenger.AddError("Error loading data", $"Table editor helper object was null.");
            return;
        }

        try
        {
            await Editor.LoadDataAsync(TopRows);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error loading data", ex.Message);
        }
    }

    private async Task SaveChangesAsync()
    {
        if (Editor is null)
        {
            Messenger.AddError("Error saving changes", $"Table editor helper object was null.");
            return;
        }

        try
        {
            var (inserted, updated, deleted) = await Editor.SaveChangesAsync();
            var message = new StringBuilder();
            if (inserted == 0 && updated == 0 && deleted == 0)
            {
                message.Append("No changes detected");
            }
            if (inserted > 0)
            {
                message.Append("Inserted ").Append(inserted).Append(" record(s)").AppendLine();
            }
            if (updated > 0)
            {
                message.Append("Updated ").Append(updated).Append(" record(s)").AppendLine();
            }
            if (deleted > 0)
            {
                message.Append("Deleted ").Append(deleted).Append(" record(s)").AppendLine();
            }
            Messenger.AddInformation("Changes saved", message.ToString());
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error saving changes", $"Error while committing changes to the database. No changes were made.{System.Environment.NewLine}{ex.Message}");
        }
    }
}
