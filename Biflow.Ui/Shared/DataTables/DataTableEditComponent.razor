@using System.Text
@inject IHxMessengerService Messenger
@inject MarkupHelperService MarkupHelper

<div class="row">
    <div class="col-auto">
        <HxButtonToolbar>
            <HxDropdownButtonGroup>
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" Enabled="Tables?.Any() ?? false" Spinner="Tables is null">
                    @if (SelectedTable is not null)
                    {
                        @SelectedTable.DataTableName
                    }
                    else if (Tables is null)
                    {
                        <text>Loading</text>
                    }
                    else if (Tables.Any())
                    {
                        <text>Select table</text>
                    }
                    else
                    {
                        <text>No tables</text>
                    }
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    @foreach (var table in Tables ?? Enumerable.Empty<DataTable>())
                    {
                        <HxDropdownItem OnClick="async () => await ReloadDataAsync(table)">
                            @table.DataTableName
                        </HxDropdownItem>
                    }
                </HxDropdownMenu>
            </HxDropdownButtonGroup>

            <HxButton CssClass="ms-3" Color="ThemeColor.Primary" Size="ButtonSize.Small" Enabled="Editor is not null && Editor.IsEditable" OnClick="SaveChangesAsync">
                @MarkupHelper.FromFile("icons/feather/save.svg")
                Save changes
            </HxButton>

            <HxButton CssClass="ms-3" Color="ThemeColor.Success" Size="ButtonSize.Small" Enabled="Editor is not null && Editor.IsEditable" OnClick="() => Editor?.AddRecord()">
                @MarkupHelper.FromFile("icons/feather/plus.svg")
                Add record
            </HxButton>

            <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" Size="ButtonSize.Small" Enabled="Editor is not null" OnClick="async () => await ReloadDataAsync()">
                @MarkupHelper.FromFile("icons/feather/refresh-cw.svg")
                Reload
            </HxButton>

            <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" Size="ButtonSize.Small" Enabled="FilterSet is not null" OnClick="async () => await FilterSetOffcanvas.ShowAsync()">
                @MarkupHelper.FromFile("icons/feather/filter.svg")
                Filters
            </HxButton>

            <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" Size="ButtonSize.Small" Enabled="ColumnSelections is not null" OnClick="SelectColumnsOffcanvas.ShowAsync">
                @MarkupHelper.FromFile("icons/feather/columns.svg")
                Columns
            </HxButton>

            <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" Size="ButtonSize.Small" Enabled="!string.IsNullOrEmpty(SelectedTable?.DataTableDescription)" OnClick="TableInfoOffcanvas.ShowAsync">
                @MarkupHelper.FromFile("icons/feather/info.svg")
                Table info
            </HxButton>
            
        </HxButtonToolbar>
    </div>
</div>
<div class="row mt-3">
    <div class="col-auto d-inline-flex align-items-center">
        <label>Limit rows</label>
        <input class="form-control form-control-sm ms-3" type="number" @bind-value="TopRows" style="max-width: 100px;" />
    </div>
    <div class="col-auto align-items-center">
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="editmode_radio"
                    disabled="@(!Editor?.IsEditable ?? true)"
                    checked="@(EditModeEnabled)"
                    @onchange="() => { EditModeEnabled = true; }">
            <label class="form-check-label" for="editmode_radio">Edit mode</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="viewmode_radio"
                    disabled="@(!Editor?.IsEditable ?? true)"
                    checked="@(!EditModeEnabled)"
                    @onchange="() => { EditModeEnabled = false; }">
            <label class="form-check-label" for="viewmode_radio">View mode</label>
        </div>
    </div>
</div>

<div class="row my-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                @{
                    var records = GetOrderedRowRecords();
                }
                @if (records?.Any() ?? false)
                {
                    <small class="text-secondary px-3">@records.Count record(s)</small>
                }
                @if (!Editor?.IsEditable ?? false)
                {
                    <small class="text-secondary px-3">Table is not editable</small>
                }
                @if ((Editor?.IsInitialized ?? false) && records is not null)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                @foreach (var column in Editor.Columns.Where(c => IsColumnSelected(c.ColumnName)))
                                {
                                    var orderBy = OrderBy.FirstOrDefault(o => o.Column == column.ColumnName);
                                    <th @onclick="() => ToggleOrderBy(column.ColumnName)" title="@column.DataType.DisplayDataType">
                                        @column.ColumnName
                                        @if (column.IsPrimaryKey)
                                        {
                                            <span class="ms-2">
                                                @MarkupHelper.FromFile("icons/feather/key.svg")
                                            </span>
                                        }
                                        @if (orderBy.Column is not null)
                                        {
                                            <span class="ms-2"> 
                                                @if (orderBy.Descending)
                                                {
                                                    @MarkupHelper.FromFile("icons/feather/arrow-up.svg")
                                                }
                                                else
                                                {
                                                    @MarkupHelper.FromFile("icons/feather/arrow-down.svg")
                                                }
                                            </span>
                                        }
                                    </th>
                                }
                                @if (Editor.IsEditable && EditModeEnabled)
                                {
                                    <th></th>    
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in records)
                            {
                                <tr>
                                    @foreach (var (column, datatype) in row.Columns.Where(c => IsColumnSelected(c.ColumnName)))
                                    {
                                        <td>
                                            @if (Editor.IsEditable && EditModeEnabled)
                                            {
                                                @if (datatype == typeof(byte))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.ByteIndexer[column]" />
                                                }
                                                else if (datatype == typeof(short))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.ShortIndexer[column]" />
                                                }
                                                else if (datatype == typeof(int))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.IntIndexer[column]" />
                                                }
                                                else if (datatype == typeof(long))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.LongIndexer[column]" />
                                                }
                                                else if (datatype == typeof(decimal))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.DecimalIndexer[column]" />
                                                }
                                                else if (datatype == typeof(double))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.DoubleIndexer[column]" />
                                                }
                                                else if (datatype == typeof(float))
                                                {
                                                    <input class="form-control form-control-sm" type="number" @bind-value="row.FloatIndexer[column]" />
                                                }
                                                else if (datatype == typeof(string))
                                                {
                                                    <input class="form-control form-control-sm" type="text" @bind-value="row.StringIndexer[column]" />
                                                }
                                                else if (datatype == typeof(bool))
                                                {
                                                    var id = Guid.NewGuid();
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" id="@id"
                                                                checked=@row.BooleanIndexer[column] @bind-value="row.BooleanIndexer[column]">
                                                        <label class="form-check-label" for="@id"></label>
                                                    </div>
                                                }
                                                else if (datatype == typeof(DateTime))
                                                {
                                                    <input class="form-control form-control-sm" type="datetime-local" @bind-value="row.DateTimeIndexer[column]" />
                                                }
                                                else
                                                {
                                                    <text>@row.WorkingValues[column]</text>
                                                }
                                            }
                                            else
                                            {
                                                <text>@row.WorkingValues[column]</text>
                                            }
                                        </td>
                                    }
                                    @if (Editor.IsEditable && EditModeEnabled)
                                    {
                                        <td>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => row.ToBeDeleted = true">
                                                Delete
                                            </button>
                                        </td>   
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else if (Editor is not null)
                {
                    <p class="px-3">Loading data...</p>
                }
                else if (Tables is null)
                {
                    <p class="px-3">Loading tables...</p>
                }
                else if (Tables.Any())
                {
                    <p class="px-3">Select a table to edit data</p>
                }
                else
                {
                    <p class="px-3">No tables</p>
                }
            </div>
        </div>
    </div>
</div>

<HxOffcanvas @ref="TableInfoOffcanvas" Title="@SelectedTable?.DataTableName" Size="OffcanvasSize.Small" BackdropEnabled="false" ScrollingEnabled="true">
    <BodyTemplate>
        <p>
            @SelectedTable?.DataTableDescription
        </p>
    </BodyTemplate>
</HxOffcanvas>

<FilterSetOffcanvas @ref="FilterSetOffcanvas" Filters="FilterSet" />

<SelectColumnsOffcanvas @ref="SelectColumnsOffcanvas" ColumnSelections="ColumnSelections" OnSelectionsChanged="StateHasChanged" />

@code {
    [Parameter] public List<DataTable>? Tables { get; set; }

    private DataTable? SelectedTable { get; set; }

    private TableEditorHelper? Editor { get; set; }

    private int TopRows
    {
        get => _topRows;
        set => _topRows = value > 0 ? value : _topRows;
    }

    private int _topRows = 100;

    private List<(string Column, bool Descending)> OrderBy { get; } = new();

    private FilterSet? FilterSet { get; set; }

    private Dictionary<string, bool>? ColumnSelections { get; set; }

    private bool IsColumnSelected(string column) => (ColumnSelections?.ContainsKey(column) ?? false) && ColumnSelections[column];

    private FilterSetOffcanvas FilterSetOffcanvas { get; set; } = null!;

    private HxOffcanvas TableInfoOffcanvas { get; set; } = null!;

    private SelectColumnsOffcanvas SelectColumnsOffcanvas { get; set; } = null!;

    private bool EditModeEnabled { get; set; } = true;

    private List<RowRecord>? GetOrderedRowRecords()
    {
        var records = Editor?.RowRecords;
        foreach (var orderBy in OrderBy)
        {
            if (orderBy.Descending)
            {
                records = records?.OrderByDescending(r => r.WorkingValues[orderBy.Column]);
            }
            else
            {
                records = records?.OrderBy(r => r.WorkingValues[orderBy.Column]);
            }
        }
        return records?.ToList();
    }

    private void ToggleOrderBy(string column)
    {
        // ascending (false) => descending (true) => removed
        var index = OrderBy.FindIndex(o => o.Column == column);
        if (index >= 0)
        {
            var orderBy = OrderBy[index];
            OrderBy.Remove(orderBy);
            if (!orderBy.Descending)
            {
                OrderBy.Insert(index, (column, true));   
            }
        }
        else
        {
            OrderBy.Insert(0, (column, false));
        }
    }

    private async Task ReloadDataAsync(DataTable? table = null)
    {
        if (table is not null)
        {
            OrderBy.Clear();
            FilterSet = null;
            ColumnSelections = null;
            SelectedTable = table;
            Editor = new(table.Connection.ConnectionString, table.TargetSchemaName, table.TargetTableName);
        }

        if (Editor is null)
        {
            Messenger.AddError("Error loading data", $"Table editor helper object was null.");
            return;
        }

        try
        {
            await Editor.LoadDataAsync(TopRows, FilterSet);
            FilterSet ??= Editor.EmptyFilterSet;
            ColumnSelections ??= Editor.Columns.ToDictionary(x => x.ColumnName, x => true);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error loading data", ex.Message);
        }
    }

    private async Task SaveChangesAsync()
    {
        if (Editor is null)
        {
            Messenger.AddError("Error saving changes", $"Table editor helper object was null.");
            return;
        }

        try
        {
            var (inserted, updated, deleted) = await Editor.SaveChangesAsync();
            var message = new StringBuilder();
            if (inserted == 0 && updated == 0 && deleted == 0)
            {
                message.Append("No changes detected");
            }
            if (inserted > 0)
            {
                message.Append("Inserted ").Append(inserted).Append(" record(s)").AppendLine();
            }
            if (updated > 0)
            {
                message.Append("Updated ").Append(updated).Append(" record(s)").AppendLine();
            }
            if (deleted > 0)
            {
                message.Append("Deleted ").Append(deleted).Append(" record(s)").AppendLine();
            }
            Messenger.AddInformation("Changes saved", message.ToString());
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error saving changes", $"Error while committing changes to the database. No changes were made.{System.Environment.NewLine}{ex.Message}");
        }
    }
}
