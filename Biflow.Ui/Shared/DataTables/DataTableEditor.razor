@using System.Security.Cryptography
@using System.Text

<div class="row">
    <div class="col">
        <div>
            <a href="datatables">
                All data tables
            </a>
            <span>&nbsp;/&nbsp;</span>
            @if (Table?.Category is not null)
            {
                <span>@Table.Category.CategoryName /&nbsp;</span>
            }
            <strong>@Table?.DataTableName</strong>
        </div>
    </div>
</div>

@if (Table is null) return;

<div class="row mt-3">
    <div class="col-auto">
        <HxButtonToolbar>
            <HxButtonGroup Size="ButtonGroupSize.Small">

                <HxButton Color="ThemeColor.None" Size="ButtonSize.Small"
                          Enabled="_filterSet is not null"
                          CssClass="@(_filterSet?.Filters.Values.Any(v => v.Enabled1) ?? false ? "fw-bold btn-auto" : "btn-auto")"
                          OnClick="async () => await _filterSetOffcanvas.LetAsync(x => x.ShowAsync())">
                    <SvgIcon Icon="LucideIcon.Filter" />
                    Query filters
                </HxButton>

                <FilterDropdown FilterSet="_columnSelections"
                                Items="_tableData?.Columns.Select(c => c.Name) ?? []"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <SvgIcon Icon="LucideIcon.Columns3" />
                        Columns
                    </TitleTemplate>
                </FilterDropdown>

                <HxDropdownButtonGroup>
                    <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small">
                        Row limit
                        <span class="badge rounded-pill bg-secondary mx-1">
                            @TopRows
                        </span>
                    </HxDropdownToggleButton>
                    <HxDropdownMenu>
                        <HxDropdownItem @onclick="async () => { TopRows = 100; await ReloadDataAsync(); }">100</HxDropdownItem>
                        <HxDropdownItem @onclick="async () => { TopRows = 500; await ReloadDataAsync(); }">500</HxDropdownItem>
                        <HxDropdownItem @onclick="async () => { TopRows = 1000; await ReloadDataAsync(); }">1000</HxDropdownItem>
                        <HxDropdownItem @onclick="async () => { TopRows = 5000; await ReloadDataAsync(); }">5000</HxDropdownItem>
                        <HxDropdownItem @onclick="async () => { TopRows = 10000; await ReloadDataAsync(); }">10000</HxDropdownItem>
                        <HxDropdownDivider />
                        <form @onsubmit="ReloadDataAsync" class="d-block ms-3">
                            <label class="form-label">Custom</label>
                            <input class="form-control form-control-sm" type="number" @bind-value="TopRows" style="max-width: 100px;" />
                        </form>
                    </HxDropdownMenu>
                </HxDropdownButtonGroup>

                <HxDropdownButtonGroup>
                    <HxDropdownToggleButton Spinner="_exporting" Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" Enabled="!_exporting">
                        <SvgIcon Icon="LucideIcon.Download" />
                        Export
                    </HxDropdownToggleButton>
                    <HxDropdownMenu>
                        <HxDropdownHeader>
                            Export to Excel
                        </HxDropdownHeader>
                        <HxDropdownItem OnClick="async () => await DownloadExportAsync(true)">
                            Filtered data
                        </HxDropdownItem>
                        <HxDropdownItem OnClick="async () => await DownloadExportAsync(false)">
                            All data
                        </HxDropdownItem>
                    </HxDropdownMenu>
                </HxDropdownButtonGroup>

                @{
                    var isNotEditable = !_tableData?.IsEditable ?? true;
                    var importDisabled = isNotEditable || !Table.AllowImport;
                }
                <a class="btn btn-sm btn-auto @(importDisabled ? "disabled" : null)" href="/datatables/import/@Table.DataTableId">
                    <SvgIcon Icon="LucideIcon.Upload" />
                    Import
                </a>

                <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small"
                          Enabled="!string.IsNullOrEmpty(Table.DataTableDescription)"
                          OnClick="async () => await _tableInfoOffcanvas.LetAsync(x => x.ShowAsync())">
                    <SvgIcon Icon="LucideIcon.Info" />
                    Table info
                </HxButton>

            </HxButtonGroup>
        </HxButtonToolbar>
    </div>
</div>

<div class="row mt-3">
    <div class="col-auto">
        <HxButtonToolbar>
            <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small"
                      OnClick="async () => await ReloadDataAsync()">
                <SvgIcon Icon="LucideIcon.RefreshCw" />
                Reload
            </HxButton>

            <HxButton Color="ThemeColor.Success" Size="ButtonSize.Small"
                      CssClass="ms-3"
                      Enabled="_tableData is not null && _tableData.IsEditable && (Table.AllowInsert || Table.AllowUpdate || Table.AllowDelete)"
                      OnClick="SaveChangesAsync">
                <SvgIcon Icon="LucideIcon.Save" />
                Save changes
            </HxButton>

            @if (Table.AllowInsert)
            {
                <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" Size="ButtonSize.Small"
                      Enabled="_tableData is not null && _tableData.IsEditable"
                      OnClick="() => _tableData?.AddRow()">
                    <SvgIcon Icon="LucideIcon.Plus" />
                    Add record
                </HxButton>
            }
        </HxButtonToolbar>
    </div>
    <div class="col-xl mt-xl-0 mt-3">
        <div class="row">
            <div class="col-auto align-items-center">
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="editmode_radio"
                           disabled="@(!_tableData?.IsEditable ?? true)"
                           checked="@(_editModeEnabled)"
                           @onchange="() => { _editModeEnabled = true; }">
                    <label class="form-check-label" for="editmode_radio">Edit mode</label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="viewmode_radio"
                           disabled="@(!_tableData?.IsEditable ?? true)"
                           checked="@(!_editModeEnabled)"
                           @onchange="() => { _editModeEnabled = false; }">
                    <label class="form-check-label" for="viewmode_radio">View mode</label>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row my-3">
    <div class="col">
        <div class="card">
            <div class="card-body px-0">
                @{
                    var rows = GetOrderedRowRecords();
                }
                @if (rows?.Any() ?? false)
                {
                    <span class="px-3">
                        <small class="text-secondary">@rows.Length record(s)</small>
                        @if (_tableData?.HasMoreRows ?? false)
                        {
                            <span class="text-warning ms-2 cursor-pointer">
                                <HxPopover Trigger="PopoverTrigger.Hover" Content="Table contains more records with applied filters than is currently shown. Increase row limit to show more records.">
                                    <SvgIcon Icon="LucideIcon.CircleAlert" />
                                </HxPopover>
                            </span>
                        }
                    </span>
                }
                @if (!_tableData?.IsEditable ?? false)
                {
                    <small class="text-secondary px-3">Table is not editable</small>
                }
                @if (_tableData is not null && rows is not null)
                {
                    var columns = _tableData.Columns
                        .Where(c => IsColumnSelected(c.Name) && !c.IsHidden)
                        .OrderBy(c => !Table.ColumnOrder.Contains(c.Name))
                        .ThenBy(c => Table.ColumnOrder.IndexOf(c.Name));
                    @if (_tableData.HasChanges)
                    {
                        <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
                    }
                    <ResizableTable CssClass="table-sm" ColumnWidthSet="x => _columnWidths[x.ColumnHeaderElementId] = x.Width">
                        <thead>
                            <tr>
                                @foreach (var column in columns)
                                {
                                    // Use an MD5 hash of the column name as the column header element id.
                                    // It remains the same between reloads of the table.
                                    // We can tie the column width logic around these unchanging ids.
                                    var bytes = Encoding.UTF8.GetBytes(column.Name);
                                    var hash = MD5.HashData(bytes);
                                    var id = Convert.ToHexString(hash);
                                    var width = _columnWidths.GetValueOrDefault(id) is { } s ? $"width: {s};" : null;
                                    var orderBy = _orderBy.FirstOrDefault(o => o.Column == column.Name);
                                    var filterSet = _quickFilters.GetOrCreate(column.Name);
                                    <th id="@id" class="fw-normal" title="@column.DbDatatypeDescription" style="@width">
                                        <div class="row g-0">
                                            <div class="col d-flex">
                                                <span class="fw-bold cursor-pointer" @onclick="() => ToggleOrderBy(column.Name)">@column.Name</span>
                                                @if (column.IsPrimaryKey)
                                                {
                                                    <span class="ms-2" title="Primary key column">
                                                        <SvgIcon Icon="LucideIcon.Key" />
                                                    </span>
                                                }
                                                @if (column.IsComputed)
                                                {
                                                    <span class="ms-2" title="Computed column">
                                                        <SvgIcon Icon="LucideIcon.Calculator" />
                                                    </span>
                                                }
                                                @if (orderBy.Column is not null)
                                                {
                                                    <span class="ms-2">
                                                        @if (orderBy.Descending)
                                                        {
                                                            <SvgIcon Icon="LucideIcon.MoveUp" />
                                                        }
                                                        else
                                                        {
                                                            <SvgIcon Icon="LucideIcon.MoveDown" />
                                                        }
                                                    </span>
                                                }
                                                <div class="btn-group btn-group-sm ms-auto position-static">
                                                    @if (filterSet.Count > 0)
                                                    {
                                                        <button class="btn btn-sm btn-auto" @onclick="filterSet.Clear" title="Clear filter">
                                                            <SvgIcon Icon="LucideIcon.FilterX" />
                                                        </button>
                                                    }
                                                    <FilterDropdown TItem="object"
                                                                    FilterSet="filterSet"
                                                                    OnChange="StateHasChanged"
                                                                    Items="GetColumnValues(column)"
                                                                    title="Show filter"
                                                                    ShowPill="false"
                                                                    IsSearchable
                                                                    CssClass="position-static">
                                                        <TitleTemplate>
                                                            <SvgIcon Icon="LucideIcon.Filter" />
                                                        </TitleTemplate>
                                                    </FilterDropdown>
                                                </div>
                                            </div>
                                        </div>
                                        
                                    </th>
                                }
                                @if (_tableData.IsEditable && _editModeEnabled)
                                {
                                    <th></th>    
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <Virtualize Items="rows" Context="row" SpacerElement="tr" ItemSize="39.5f">
                                <tr class="@(row.IsNewRow || row.HasChanges ? "table-row-highlight" : null)">
                                    @foreach (var columnInfo in columns)
                                    {
                                        var isLocked = !row.IsUpdateable || columnInfo.IsLocked;
                                        var column = columnInfo.Name;
                                        var datatype = columnInfo.Datatype;
                                        var lookupValues = columnInfo.Lookup?.Values;
                                        <td>
                                            @if (_tableData.IsEditable && _editModeEnabled)
                                            {
                                                @if (!columnInfo.IsEditable)
                                                {
                                                    <text>@row.Values[column]</text>
                                                }

                                                else if (datatype == typeof(byte))
                                                {
                                                    <input class="form-control form-control-sm" type="number" autocomplete="off" disabled=@isLocked @bind-value="row.ByteIndexer[column]" />
                                                }

                                                else if (datatype == typeof(short) && lookupValues is not null)
                                                {
                                                    <LookupAutosuggest TValue="short?" LookupValues="lookupValues" @bind-Value="row.ShortIndexer[column]" Disabled="@isLocked" />
                                                }
                                                else if (datatype == typeof(short))
                                                {
                                                    <input class="form-control form-control-sm" type="number" autocomplete="off" disabled=@isLocked @bind-value="row.ShortIndexer[column]" />
                                                }

                                                else if (datatype == typeof(int) && lookupValues is not null)
                                                {
                                                    <LookupAutosuggest TValue="int?" LookupValues="lookupValues" @bind-Value="row.IntIndexer[column]" Disabled="@isLocked" />
                                                }
                                                else if (datatype == typeof(int))
                                                {
                                                    <input class="form-control form-control-sm" type="number" autocomplete="off" disabled=@isLocked @bind-value="row.IntIndexer[column]" />
                                                }

                                                else if (datatype == typeof(long) && lookupValues is not null)
                                                {
                                                    <LookupAutosuggest TValue="long?" LookupValues="lookupValues" @bind-Value="row.LongIndexer[column]" Disabled="@isLocked" />
                                                }
                                                else if (datatype == typeof(long))
                                                {
                                                    <input class="form-control form-control-sm" type="number" autocomplete="off" disabled=@isLocked @bind-value="row.LongIndexer[column]" />
                                                }

                                                else if (datatype == typeof(decimal) && lookupValues is not null)
                                                {
                                                    <LookupAutosuggest TValue="decimal?" LookupValues="lookupValues" @bind-Value="row.DecimalIndexer[column]" Disabled="@isLocked" />
                                                }
                                                else if (datatype == typeof(decimal))
                                                {
                                                    <input class="form-control form-control-sm" type="number" autocomplete="off" disabled=@isLocked @bind-value="row.DecimalIndexer[column]" />
                                                }

                                                else if (datatype == typeof(double))
                                                {
                                                    <input class="form-control form-control-sm" type="number" autocomplete="off" disabled=@isLocked @bind-value="row.DoubleIndexer[column]" />
                                                }
                                                else if (datatype == typeof(float))
                                                {
                                                    <input class="form-control form-control-sm" type="number" autocomplete="off" disabled=@isLocked @bind-value="row.FloatIndexer[column]" />
                                                }

                                                else if (datatype == typeof(string) && lookupValues is not null)
                                                {
                                                    <LookupAutosuggest TValue="string" LookupValues="lookupValues" @bind-Value="row.StringIndexer[column]" Disabled="@isLocked" />
                                                }
                                                else if (datatype == typeof(string))
                                                {
                                                    <input class="form-control form-control-sm" type="text" autocomplete="off" disabled=@isLocked @bind-value="row.StringIndexer[column]" />
                                                }

                                                else if (datatype == typeof(bool))
                                                {
                                                    var id = Guid.NewGuid();
                                                    <div class="form-check">
                                                        <input type="checkbox" disabled=@isLocked class="form-check-input" id="@id"
                                                        checked=@row.BooleanIndexer[column] @bind-value="row.BooleanIndexer[column]">
                                                        <label class="form-check-label" for="@id"></label>
                                                    </div>
                                                }

                                                else if (datatype == typeof(DateTime) && lookupValues is not null)
                                                {
                                                    <LookupAutosuggest TValue="DateTime?" LookupValues="lookupValues" @bind-Value="row.DateTimeIndexer[column]" Disabled="@isLocked" />
                                                }
                                                else if (datatype == typeof(DateTime))
                                                {
                                                    <input class="form-control form-control-sm" type="datetime-local" disabled=@isLocked @bind-value="row.DateTimeIndexer[column]" />
                                                }

                                                else if (datatype == typeof(DateOnly) && lookupValues is not null)
                                                {
                                                    <LookupAutosuggest TValue="DateOnly?" LookupValues="lookupValues" @bind-Value="row.DateIndexer[column]" Disabled="@isLocked" />
                                                }
                                                else if (datatype == typeof(DateOnly))
                                                {
                                                    <input class="form-control form-control-sm" type="date" disabled=@isLocked @bind-value="row.DateIndexer[column]" />
                                                }

                                                else if (datatype == typeof(TimeOnly) && lookupValues is not null)
                                                {
                                                    <LookupAutosuggest TValue="TimeOnly?" LookupValues="lookupValues" @bind-Value="row.TimeIndexer[column]" Disabled="@isLocked" />
                                                }
                                                else if (datatype == typeof(TimeOnly))
                                                {
                                                    <input class="form-control form-control-sm" type="time" disabled=@isLocked @bind-value="row.TimeIndexer[column]" />
                                                }

                                                else
                                                {
                                                    <text>@row.Values[column]</text>
                                                }
                                            }
                                            else
                                            {
                                                <text>@row.Values[column]</text>
                                            }
                                        </td>
                                    }
                                    @if (_tableData.IsEditable && _editModeEnabled)
                                    {
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-sm btn-auto" @onclick="row.RevertChanges" title="Revert changes" disabled=@(!row.HasChanges)>
                                                    <SvgIcon Icon="LucideIcon.Undo2" />
                                                </button>
                                                @if (Table.AllowInsert)
                                                {
                                                    <button class="btn btn-sm btn-auto" @onclick="() => _tableData.AddRow(row)" title="Copy record">
                                                        <SvgIcon Icon="LucideIcon.Copy" />
                                                    </button>
                                                }
                                                @if (Table.AllowDelete)
                                                {
                                                    <button class="btn btn-sm btn-auto btn-delete-record" @onclick="row.Delete" title="Delete record">
                                                        <SvgIcon Icon="LucideIcon.Delete" />
                                                    </button>
                                                }
                                            </div>
                                            
                                        </td>
                                    }
                                </tr>
                            </Virtualize>
                        </tbody>
                    </ResizableTable>
                }
                else if (Table is not null)
                {
                    <p class="px-3">Loading data...</p>
                }
            </div>
        </div>
    </div>
</div>

<HxOffcanvas @ref="_tableInfoOffcanvas" Title="@Table?.DataTableName" Size="OffcanvasSize.Small" Backdrop="OffcanvasBackdrop.False" ScrollingEnabled="true">
    <BodyTemplate>
        <p>
            @Table?.DataTableDescription
        </p>
    </BodyTemplate>
</HxOffcanvas>

<FilterSetOffcanvas @ref="_filterSetOffcanvas" Filters="_filterSet" />
