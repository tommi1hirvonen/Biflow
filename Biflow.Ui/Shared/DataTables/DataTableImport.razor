@using System.Data;
@using System.Text;
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster

@if (table is null)
{
    <div class="row mt-5">
        <div class="col">
            <HxSpinner Color="ThemeColor.Secondary" />
        </div>
    </div>
    return;
}

<div class="row">
    <div class="col">
        <div>
            <a href="datatables">
                All data tables
            </a>
            <span>&nbsp;/&nbsp;</span>
            @if (table.Category is not null)
            {
                <span>@table.Category.CategoryName /&nbsp;</span>
            }
            <a href="datatables/edit/@table.DataTableId">
                @table.DataTableName
            </a>
            <span>&nbsp;/</span>
            <strong>Import data</strong>
        </div>
    </div>
</div>

@if (!table.AllowImport)
{
    <div class="row mt-3">
        <div class="col">
            <div class="alert alert-secondary">
                This data table does not allow importing data.
            </div>
        </div>
    </div>
    return;
}

<div class="row mt-3">
    <div class="col" style="max-width: 40rem;">
        <div>
            <label for="formFile" class="form-label">Select Excel file to import</label>
            <InputFile @ref="inputFile" class="form-control form-control-sm" OnChange="LoadFileAsync" />
        </div>
    </div>
</div>

<div class="row align-items-center mt-3">
    <div class="col-auto">
        <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="UploadAsync" Enabled="upload is not null">
            <CxIcon Icon="FeatherIcon.Save" />
            Save
        </HxButton>
    </div>
    <div class="col-auto ms-3">
        <label class="col-form-label">Upload type</label>
    </div>
    <div class="col-auto">
        <div>
            <select @bind="uploadType" class="form-select form-select-sm">
                @foreach (var type in uploadTypes)
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>
    </div>
</div>

@{
    var columns =
        upload?.Columns
        ?? builder?.Columns.Where(c => !c.IsHidden && !c.IsLocked || c.IsPrimaryKey)
        ?? Enumerable.Empty<Column>();
}

<div class="row mt-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                @if (upload is not null)
                {
                    <small class="text-secondary px-3">@upload.Data.Count record(s)</small>
                }
                <table class="table table-sm">
                    <thead>
                        <tr>
                            @foreach (var column in columns)
                            {
                                <th>
                                    @column.Name
                                    @if (column.IsPrimaryKey)
                                    {
                                        <span class="ms-2" title="Primary key column">
                                            <CxIcon Icon="FeatherIcon.Key" />
                                        </span>
                                    }
                                    @if (column.IsLocked && !column.IsPrimaryKey)
                                    {
                                        <span class="ms-2 text-warning" title="Locked column excluded from final import">
                                            <CxIcon Icon="FeatherIcon.Lock" />
                                        </span>
                                    }
                                    @if (column.IsHidden && !column.IsPrimaryKey)
                                    {
                                        <span class="ms-2 text-warning" title="Hidden column excluded from final import">
                                            <CxIcon Icon="FeatherIcon.EyeOff" />
                                        </span>
                                    }
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (upload is null)
                        {
                            var count = columns.Count();
                            var colspan = count > 0 ? count : 1;
                            <tr>
                                <td colspan="@colspan" class="@(loading ? "text-center" : null)">
                                    @if (loading)
                                    {
                                        <HxSpinner Color="ThemeColor.Secondary" />
                                    }
                                    else
                                    {
                                        <em>Upload file to preview data</em>
                                    }
                                </td>
                            </tr>
                        }
                        else
                        {
                            <Virtualize Items="upload.Data" Context="row" SpacerElement="tr"> 
                                <tr>
                                    @foreach (var column in upload.Columns)
                                    {
                                        <td>@row[column.Name]</td>
                                    }
                                </tr>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Guid? TableId { get; set; }

    private MasterDataTable? table;
    private InputFile? inputFile;
    private bool loading = false;
    private List<UploadType> uploadTypes = new();
    private UploadType uploadType;
    private UploadBuilder? builder;
    private Upload? upload;

    protected override async Task OnParametersSetAsync()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        table = await context.MasterDataTables
            .Include(t => t.Category)
            .Include(t => t.Connection)
            .FirstAsync(t => t.DataTableId == TableId);

        // Protect users against an incorrect upload type selection by filtering them
        // based on what is allowed with the current data table.
        var uploadTypes = new List<UploadType>();
        if (table.AllowInsert)
        {
            uploadTypes.Add(UploadType.Upsert);
            uploadTypes.Add(UploadType.InsertNew);
        }
        uploadTypes.Add(UploadType.UpdateExisting);
        if (table.AllowDelete)
        {
            uploadTypes.Add(UploadType.DeleteMissing);
        }
        if (table.AllowInsert && table.AllowDelete)
        {
            uploadTypes.Add(UploadType.Full);
        }
        this.uploadTypes = uploadTypes;
        uploadType = this.uploadTypes.First();

        builder = await UploadBuilder.FromTableAsync(table);
    }

    private async Task LoadFileAsync(InputFileChangeEventArgs e)
    {
        loading = true;
        try
        {
            ArgumentNullException.ThrowIfNull(builder);
            using var stream = new MemoryStream();
            await e.File.OpenReadStream().CopyToAsync(stream);
            stream.Position = 0;
            upload = builder.BuildFromExcelStream(stream);
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading Excel file", ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task UploadAsync()
    {
        if (upload is null)
        {
            Toaster.AddError("Upload object was null");
            return;
        }
        try
        {
            var (inserted, updated, deleted) = await upload.SaveUploadToDbAsync(uploadType);
            var message = new StringBuilder();
            if (inserted == 0 && updated == 0 && deleted == 0)
            {
                message.Append("No changes detected");
            }
            if (inserted > 0)
            {
                message.Append("Inserted ").Append(inserted).Append(" record(s)").AppendLine();
            }
            if (updated > 0)
            {
                message.Append("Updated ").Append(updated).Append(" record(s)").AppendLine();
            }
            if (deleted > 0)
            {
                message.Append("Deleted ").Append(deleted).Append(" record(s)").AppendLine();
            }
            Toaster.AddSuccess("Data updated successfully", message.ToString());
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error updating data", ex.Message);
        }
    }
}
