@inject MarkupHelperService MarkupHelper
@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject IHxMessengerService Messenger

<h4>Data Tables</h4>

<AuthorizeView Roles="Admin, Editor">
    <div class="row mt-3">
        <div class="col">
            <HxButtonToolbar>
                <HxButton Color="ThemeColor.Success"
                          Enabled="Connections?.Any() ?? false"
                          OnClick="() => EditModal.LetAsync(x => x.SetEditContextAsync(null))"
                          Spinner="false">
                    Add table
                </HxButton>
                <HxButton Color="ThemeColor.Secondary"
                          CssClass="ms-3"
                          Enabled="Connections?.Any() ?? false"
                          OnClick="() => CategoryEditModal.LetAsync(x => x.ShowAsync())"
                          Spinner="false">
                    Add category
                </HxButton>
            </HxButtonToolbar>
        </div>
        <div class="col text-end">
            <HxButton Color="ThemeColor.Light" OnClick="async () => await HelpOffcanvas.LetAsync(x => x.ShowAsync())">
                @MarkupHelper.FromFile("icons/feather/help-circle.svg")
            </HxButton>
        </div>
    </div>
</AuthorizeView>

<ul class="list-group shadow-sm mt-3">
    @if (Tables is null || Categories is null)
    {
        <li class="list-group-item text-center">
            <HxSpinner Color="ThemeColor.Secondary" />
        </li>
    }
    else if (!Tables.Any() && !Categories.Any())
    {
        <li class="list-group-item">
            No tables
        </li>
    }
    else
    {
        foreach (var category in Categories.Append(null))
        {
            var tables = Tables.Where(t => t.CategoryId == category?.CategoryId);

            /* Show all categories even if they do not have tables in them. Show "No category" only if it has tables */
            if (category is not null || tables.Any())
            {
                <li class="list-group-item fw-bold" style="background-color: #f7f7f7">
                    <div class="row">
                        <div class="col">
                            @(category?.CategoryName ?? "No category")
                        </div>
                        <AuthorizeView Roles="Admin, Editor">
                            @if (category is not null)
                            {
                                <div class="col-auto btn-row">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                            OnClick="() => CategoryEditModal.LetAsync(x => x.ShowAsync(category))">
                                        @MarkupHelper.FromFile("icons/feather/edit-3.svg")
                                    </HxButton>
                                    <HxDropdownButtonGroup>
                                        <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                            @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                        </HxDropdownToggleButton>
                                        <HxDropdownMenu>
                                            <HxDropdownHeader>Delete?</HxDropdownHeader>
                                            <HxDropdownItem @onclick="() => DeleteCategoryAsync(category)">Confirm</HxDropdownItem>
                                        </HxDropdownMenu>
                                    </HxDropdownButtonGroup>
                                </div>
                            }                      
                        </AuthorizeView>
                    </div>
                </li>
                @foreach (var table in tables)
                {
                    <li class="list-group-item list-group-item-table">
                        <div class="row align-items-center">
                            <div class="col">
                                <a href="datatables/edit/@table.DataTableId" class="text-dark">
                                    @table.DataTableName
                                </a>
                            </div>
                            <div class="col">
                                @table.TargetSchemaName.@table.TargetTableName
                            </div>
                            <AuthorizeView Roles="Admin, Editor">
                                <div class="col-auto btn-row">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                              OnClick="async () => await EditModal.LetAsync(x => x.SetEditContextAsync(table))">
                                        @MarkupHelper.FromFile("icons/feather/edit-3.svg")
                                    </HxButton>
                                    <HxDropdownButtonGroup>
                                        <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                            @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                        </HxDropdownToggleButton>
                                        <HxDropdownMenu>
                                            <HxDropdownHeader>Delete?</HxDropdownHeader>
                                            <HxDropdownItem @onclick="async () => await DeleteTableAsync(table)">Confirm</HxDropdownItem>
                                        </HxDropdownMenu>
                                    </HxDropdownButtonGroup>
                                </div>
                            </AuthorizeView>
                        </div>
                    </li>
                }
            }
        }
    }
</ul>

<AuthorizeView Roles="Admin, Editor">
    <DataTableEditModal @ref="EditModal" OnTableSubmitted="OnTableSubmitted" />

    <CategoryEditModal @ref="CategoryEditModal" OnCategorySubmitted="OnCategorySubmitted" />

    <DataTableHelpOffcanvas @ref="HelpOffcanvas" />
</AuthorizeView>

@code {
    [Parameter] public List<MasterDataTable>? Tables { get; set; }

    [Parameter] public List<MasterDataTableCategory>? Categories { get; set; }

    [Parameter] public List<SqlConnectionInfo> Connections { get; set; } = new();

    private DataTableHelpOffcanvas? HelpOffcanvas { get; set; }

    private DataTableEditModal? EditModal { get; set; }

    private CategoryEditModal? CategoryEditModal { get; set; }

    private void OnTableSubmitted(MasterDataTable table)
    {
        var toRemove = Tables?.FirstOrDefault(t => t.DataTableId == table.DataTableId);
        if (toRemove is not null)
        {
            Tables?.Remove(toRemove);
        }
        Tables?.Add(table);
        Tables?.Sort((t1, t2) => t1.DataTableName.CompareTo(t2.DataTableName));

        foreach (var lookup in Tables?.SelectMany(t => t.Lookups) ?? Enumerable.Empty<MasterDataTableLookup>())
        {
            if (lookup.LookupTableId == table.DataTableId)
            {
                lookup.LookupTable = table;
            }
        }
    }

    private async Task DeleteTableAsync(MasterDataTable table)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            context.MasterDataTables.Remove(table);
            await context.SaveChangesAsync();
            Tables?.Remove(table);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting data table", ex.Message);
        }
    }

    private async Task DeleteCategoryAsync(MasterDataTableCategory category)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            context.MasterDataTableCategories.Remove(category);
            await context.SaveChangesAsync();
            Categories?.Remove(category);
            foreach (var table in Tables?.Where(t => t.CategoryId == category.CategoryId) ?? Enumerable.Empty<MasterDataTable>())
            {
                table.CategoryId = null;
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting category", ex.Message);
        }
    }

    private void OnCategorySubmitted(MasterDataTableCategory category)
    {
        var remove = Categories?.FirstOrDefault(c => c.CategoryId == category.CategoryId);
        if (remove is not null)
        {
            Categories?.Remove(remove);
        }
        Categories?.Add(category);
        Categories?.Sort((c1, c2) => c1.CategoryName.CompareTo(c2.CategoryName));
    }
}
