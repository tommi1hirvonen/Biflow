@using System.Runtime.CompilerServices;
@inject MarkupHelperService MarkupHelper
@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject IHxMessengerService Messenger

<h4>Data Tables</h4>

<AuthorizeView Roles="Admin, Editor">
    <div class="row mt-3">
        <div class="col-auto">
            <HxButtonToolbar>
                <HxButton Color="ThemeColor.Success"
                          Enabled="Connections?.Any() ?? false"
                          OnClick="() => EditModal.LetAsync(x => x.SetEditContextAsync(null))"
                          Spinner="false">
                    Add table
                </HxButton>
                <HxButton Color="ThemeColor.Secondary"
                          CssClass="ms-3"
                          Enabled="Connections?.Any() ?? false"
                          OnClick="() => CategoryEditModal.LetAsync(x => x.ShowAsync())"
                          Spinner="false">
                    Add category
                </HxButton>
            </HxButtonToolbar>
        </div>
        <div class="col text-end">
            <HxButton Color="ThemeColor.Light" OnClick="async () => await HelpOffcanvas.LetAsync(x => x.ShowAsync())">
                @MarkupHelper.FromFile("icons/feather/help-circle.svg")
            </HxButton>
        </div>
    </div>
</AuthorizeView>

<div class="row mt-3">
    <div class="col-xxl-5 col-xl-7 col-md-8 col-sm-9">
        <div class="input-group input-group-sm me-3">
            <div class="input-group-text">
                @MarkupHelper.FromFile("icons/feather/filter.svg")
                Filter by
            </div>
            <input type="search" class="form-control" @bind-value="TableNameFilter" @bind-value:event="oninput" placeholder="Name" />
            <input type="search" class="form-control" @bind-value="TargetTableNameFilter" @bind-value:event="oninput" placeholder="Target table" />
        </div>
    </div>
        
    <div class="col-sm-3 mt-3 mt-sm-0">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() =>
                {
                    TargetTableNameFilter = string.Empty;
                    TableNameFilter = string.Empty;
                }">
                @MarkupHelper.FromFile("icons/feather/x.svg")
                Clear
            </HxButton>
        </HxButtonGroup>
    </div>  
</div>

<ul class="list-group shadow-sm mt-3">
    @if (Tables is null || Categories is null)
    {
        <li class="list-group-item text-center">
            <HxSpinner Color="ThemeColor.Secondary" />
        </li>
    }
    else if (!Tables.Any() && !Categories.Any())
    {
        <li class="list-group-item">
            No tables
        </li>
    }
    else
    {
        <li class="list-group-item" style="background-color: #f7f7f7">
            <span title="Collapse all" @onclick="CollapseAll" style="cursor: pointer;">
                @MarkupHelper.FromFile("icons/feather/chevrons-up.svg")
            </span>
            <span class="ms-1" title="Expand all" @onclick="ExpandAll" style="cursor: pointer;">
                @MarkupHelper.FromFile("icons/feather/chevrons-down.svg")
            </span>
        </li>
        foreach (var category in Categories.Append(null))
        {
            var state = category is not null ? CategoryExpandStatuses.GetOrCreateValue(category) : NoCategoryExpanded;
            var tables = Tables
                .Where(t => t.CategoryId == category?.CategoryId)
                .Where(t => t.DataTableName.ContainsIgnoreCase(TableNameFilter))
                .Where(t => $"{t.TargetSchemaName}.{t.TargetTableName}".ContainsIgnoreCase(TargetTableNameFilter));
            
            var filtersApplied = TableNameFilter.Any() || TargetTableNameFilter.Any();
            /*
            Show all categories even if they do not have tables in them. But hide them, if filters are applied.
            Show "No category" only if it has tables
            */
            if ((category is null || filtersApplied) && !tables.Any())
            {
                continue;
            }
            <li class="list-group-item fw-bold" style="background-color: #f7f7f7">
                <div class="row">
                    <div class="col">
                        @if (state.IsExpanded)
                        {
                            <span title="Collapse" @onclick="() => state.IsExpanded = false" style="cursor: pointer;">
                                @MarkupHelper.FromFile("icons/feather/chevron-down.svg")
                                @(category?.CategoryName ?? "No category")
                            </span>
                        }
                        else
                        {
                            <span title="Expand" @onclick="() => state.IsExpanded = true" style="cursor: pointer;">
                                @MarkupHelper.FromFile("icons/feather/chevron-right.svg")
                                @(category?.CategoryName ?? "No category")
                            </span>
                        }
                    </div>
                    <AuthorizeView Roles="Admin, Editor">
                        @if (category is not null)
                        {
                            <div class="col-auto btn-row">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                        OnClick="() => CategoryEditModal.LetAsync(x => x.ShowAsync(category))">
                                    @MarkupHelper.FromFile("icons/feather/edit-3.svg")
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                        @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteCategoryAsync(category)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </div>
                        }                      
                    </AuthorizeView>
                </div>
            </li>
            @if (!state.IsExpanded && !filtersApplied)
            {
                continue;
            }
            foreach (var table in tables)
            {
                <li class="list-group-item list-group-item-table">
                    <div class="row align-items-center">
                        <div class="col">
                            <a href="datatables/edit/@table.DataTableId" class="text-dark">
                                <HighlightableText PartToHighlight="@TableNameFilter" Text="@table.DataTableName" />
                            </a>
                        </div>
                        <div class="col">
                            <HighlightableText PartToHighlight="@TargetTableNameFilter" Text="@($"{table.TargetSchemaName}.{table.TargetTableName}")" />
                        </div>
                        <AuthorizeView Roles="Admin, Editor">
                            <div class="col-auto btn-row">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                            OnClick="async () => await EditModal.LetAsync(x => x.SetEditContextAsync(table))">
                                    @MarkupHelper.FromFile("icons/feather/edit-3.svg")
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                        @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="async () => await DeleteTableAsync(table)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </div>
                        </AuthorizeView>
                    </div>
                </li>
            }
        }
    }
</ul>

<AuthorizeView Roles="Admin, Editor">
    <DataTableEditModal @ref="EditModal" OnTableSubmitted="OnTableSubmitted" />

    <CategoryEditModal @ref="CategoryEditModal" OnCategorySubmitted="OnCategorySubmitted" />

    <DataTableHelpOffcanvas @ref="HelpOffcanvas" />
</AuthorizeView>

@code {
    [Parameter] public List<MasterDataTable>? Tables { get; set; }

    [Parameter] public List<MasterDataTableCategory>? Categories { get; set; }

    [Parameter] public List<SqlConnectionInfo> Connections { get; set; } = new();

    private DataTableHelpOffcanvas? HelpOffcanvas { get; set; }

    private DataTableEditModal? EditModal { get; set; }

    private CategoryEditModal? CategoryEditModal { get; set; }

    private string TableNameFilter { get; set; } = "";
    private string TargetTableNameFilter { get; set; } = "";

    private ConditionalWeakTable<MasterDataTableCategory, ExpandStatus> CategoryExpandStatuses { get; } = new();
    private ExpandStatus NoCategoryExpanded { get; } = new();

    private void OnTableSubmitted(MasterDataTable table)
    {
        var toRemove = Tables?.FirstOrDefault(t => t.DataTableId == table.DataTableId);
        if (toRemove is not null)
        {
            Tables?.Remove(toRemove);
        }
        Tables?.Add(table);
        Tables?.Sort((t1, t2) => t1.DataTableName.CompareTo(t2.DataTableName));

        foreach (var lookup in Tables?.SelectMany(t => t.Lookups) ?? Enumerable.Empty<MasterDataTableLookup>())
        {
            if (lookup.LookupTableId == table.DataTableId)
            {
                lookup.LookupTable = table;
            }
        }
    }

    private async Task DeleteTableAsync(MasterDataTable table)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            context.MasterDataTables.Remove(table);
            await context.SaveChangesAsync();
            Tables?.Remove(table);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting data table", ex.Message);
        }
    }

    private async Task DeleteCategoryAsync(MasterDataTableCategory category)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            context.MasterDataTableCategories.Remove(category);
            await context.SaveChangesAsync();
            Categories?.Remove(category);
            foreach (var table in Tables?.Where(t => t.CategoryId == category.CategoryId) ?? Enumerable.Empty<MasterDataTable>())
            {
                table.CategoryId = null;
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting category", ex.Message);
        }
    }

    private void OnCategorySubmitted(MasterDataTableCategory category)
    {
        var remove = Categories?.FirstOrDefault(c => c.CategoryId == category.CategoryId);
        if (remove is not null)
        {
            Categories?.Remove(remove);
        }
        Categories?.Add(category);
        Categories?.Sort((c1, c2) => c1.CategoryName.CompareTo(c2.CategoryName));
    }

    private void ExpandAll()
    {
        foreach (var category in Categories ?? Enumerable.Empty<MasterDataTableCategory>())
        {
            var state = CategoryExpandStatuses.GetOrCreateValue(category);
            state.IsExpanded = true;
        }
        NoCategoryExpanded.IsExpanded = true;
    }

    private void CollapseAll()
    {
        foreach (var category in Categories ?? Enumerable.Empty<MasterDataTableCategory>())
        {
            var state = CategoryExpandStatuses.GetOrCreateValue(category);
            state.IsExpanded = false;
        }
        NoCategoryExpanded.IsExpanded = false;
    }

    private class ExpandStatus { public bool IsExpanded { get; set; } = true; }
}
