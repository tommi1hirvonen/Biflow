@inject MarkupHelperService MarkupHelper
@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject IHxMessengerService Messenger
@inject IHxMessageBoxService MessageBox
@inject IJSRuntime JSRuntime

<div class="row justify-content-between">
    <div class="col">
        <HxButton Color="ThemeColor.Success" Enabled="Connections?.Any() ?? false" OnClick="async () => await EditModal.LetAsync(x => x.SetEditContextAsync(null))">
            Add table
        </HxButton>
    </div>
    <div class="col text-end">
        <HxButton Color="ThemeColor.Light" OnClick="async () => await HelpOffcanvas.LetAsync(x => x.ShowAsync())">
            @MarkupHelper.FromFile("icons/feather/help-circle.svg")
        </HxButton>
    </div>
</div>


<div class="row my-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Data table name</th>
                            <th>Connection</th>
                            <th>Target schema</th>
                            <th>Target table</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Tables is null)
                        {
                            <tr>
                                <td colspan="5" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var table in Tables)
                            {
                                <tr>
                                    <td class="align-middle">
                                        @table.DataTableName
                                    </td>
                                    <td class="align-middle">
                                        @table.Connection.ConnectionName
                                    </td>
                                    <td class="align-middle">
                                        @table.TargetSchemaName
                                    </td>
                                    <td class="align-middle">
                                        @table.TargetTableName
                                    </td>
                                    <td>
                                        <div class="btn-group btn-row">
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                            OnClick="async () => await EditModal.LetAsync(x => x.SetEditContextAsync(table))">
                                                @MarkupHelper.FromFile("icons/feather/edit-3.svg")
                                            </HxButton>
                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                    @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                    <HxDropdownItem @onclick="async () => await DeleteTableAsync(table)">Confirm</HxDropdownItem>
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<DataTableEditModal @ref="EditModal" OnTableSubmitted="OnTableSubmitted" />

<DataTableHelpOffcanvas @ref="HelpOffcanvas" />

@code {
    [Parameter] public List<MasterDataTable>? Tables { get; set; }

    [Parameter] public List<SqlConnectionInfo> Connections { get; set; } = new();

    private DataTableEditModal? EditModal { get; set; }

    private DataTableHelpOffcanvas? HelpOffcanvas { get; set; }

    private void OnTableSubmitted(MasterDataTable table)
    {
        var toRemove = Tables?.FirstOrDefault(t => t.DataTableId == table.DataTableId);
        if (toRemove is not null)
        {
            Tables?.Remove(toRemove);
        }
        Tables?.Add(table);
        Tables?.Sort((t1, t2) => t1.DataTableName.CompareTo(t2.DataTableName));

        foreach (var lookup in Tables?.SelectMany(t => t.Lookups) ?? Enumerable.Empty<MasterDataTableLookup>())
        {
            if (lookup.LookupTableId == table.DataTableId)
            {
                lookup.LookupTable = table;
            }
        }
    }

    private async Task DeleteTableAsync(MasterDataTable table)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            context.MasterDataTables.Remove(table);
            await context.SaveChangesAsync();
            Tables?.Remove(table);
        }
        catch(Exception ex)
        {
            Messenger.AddError("Error deleting data table", ex.Message);
        }
    }

}
