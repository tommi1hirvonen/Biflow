@using System.Data;
@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject IHxMessengerService Messenger
@inject MarkupHelperService MarkupHelper

<h4>Import data – @Table?.DataTableName</h4>

<div class="row mt-3">
    <div class="col" style="max-width: 40rem;">
        <div>
            <label for="formFile" class="form-label">Select Excel file to import</label>
            <InputFile @ref="InputFile" class="form-control form-control-sm" OnChange="LoadFileAsync" />
        </div>
    </div>
</div>

<div class="row align-items-center mt-3">
    <div class="col-auto">
        <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="UploadAsync" Enabled="Upload is not null">
            @MarkupHelper.FromFile("icons/feather/save.svg")
            Save
        </HxButton>
    </div>
    <div class="col-auto ms-3">
        <label class="col-form-label">Upload type</label>
    </div>
    <div class="col-auto">
        <div>
            <select @bind="UploadType" class="form-select form-select-sm">
                @foreach (var type in Enum.GetValues<UploadType>())
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                @if (Upload is not null)
                {
                    <small class="text-secondary px-3">@Upload.Data.Count record(s)</small>
                }
                <table class="table table-sm">
                    <thead>
                        <tr>
                            @foreach (var column in Builder?.Columns ?? Enumerable.Empty<string>())
                            {
                                <th>@column</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (Upload is null)
                        {
                            <tr>
                                <td colspan="@(Builder?.Columns.Count() ?? 1)" class="@(Loading ? "text-center" : null)">
                                    @if (Loading)
                                    {
                                        <HxSpinner Color="ThemeColor.Secondary" />
                                    }
                                    else
                                    {
                                        <em>Upload file to preview data</em>
                                    }
                                </td>
                            </tr>
                        }
                        else
                        {
                            <Virtualize Items="Upload.Data" Context="row" SpacerElement="tr"> 
                                <tr>
                                    @foreach (var column in Builder?.Columns ?? Enumerable.Empty<string>())
                                    {
                                        <td>@row[column]</td>
                                    }
                                </tr>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Guid? MasterDataTableId { get; set; }

    private MasterDataTable? Table { get; set; }

    private InputFile? InputFile { get; set; }

    private bool Loading { get; set; } = false;

    private UploadType UploadType { get; set; } = UploadType.Upsert;

    private UploadBuilder? Builder { get; set; }

    private Upload? Upload { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        Table = await context.MasterDataTables
            .Include(t => t.Connection)
            .FirstAsync(t => t.DataTableId == MasterDataTableId);
        Builder = await UploadBuilder.FromTableAsync(Table);
    }

    private async Task LoadFileAsync(InputFileChangeEventArgs e)
    {
        Loading = true;
        try
        {
            ArgumentNullException.ThrowIfNull(Builder);
            using var stream = new MemoryStream();
            await e.File.OpenReadStream().CopyToAsync(stream);
            stream.Position = 0;
            Upload = Builder.BuildFromExcelStream(stream);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error reading Excel file", ex.Message);
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task UploadAsync()
    {
        try
        {
            await Upload.LetAsync(x => x.SaveUploadToDbAsync(UploadType));
            Messenger.AddInformation("Data updated successfully");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error updating data", ex.Message);
        }
    }
}
