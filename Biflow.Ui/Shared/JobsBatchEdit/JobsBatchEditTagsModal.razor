@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory

<HxModal @ref="_modal" Title="Edit tags">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_tags_add"
                    checked=@(_editMode == EditMode.Add)
                    @onchange="() => SetEditMode(EditMode.Add)">
                    <label class="form-check-label" for="radio_batch_edit_tags_add">
                        Add
                        &nbsp;
                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Tags listed will be added to all selected jobs where they are not present. New tags can also be added.">
                            <SvgIcon Icon="FeatherIcon.Info" />
                        </HxPopover>
                    </label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_tags_remove"
                    checked=@(_editMode == EditMode.Remove)
                    @onchange="() => SetEditMode(EditMode.Remove)">
                    <label class="form-check-label" for="radio_batch_edit_tags_remove">
                        Remove
                        &nbsp;
                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Remove tags from the list to remove them from selected jobs where they are present.">
                            <SvgIcon Icon="FeatherIcon.Info" />
                        </HxPopover>
                    </label>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                @if (_jobs is not null)
                {
                    <TagInput TTag="JobTag"
                    Items="_allTags"
                    SelectedItems="_tags"
                    AllowCustomValues="_editMode == EditMode.Add"
                    NewItemFromText="text => new JobTag(text) { Color = TagColor.DarkGray }" />
                }
                else
                {
                    <HxSpinner Color="ThemeColor.Secondary" />
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" Spinner="_saving" Enabled="!_saving" OnClick="SubmitJobsAsync">
            Save
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="CloseAsync">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public IEnumerable<Job> SelectedJobs { get; set; } = [];

    [Parameter] public EventCallback<IEnumerable<Job>> OnJobsSubmit { get; set; }

    private HxModal? _modal;
    private bool _saving = false;
    private AppDbContext? _context;
    private List<JobTag>? _allTags;
    private List<JobTag> _tags = [];
    private List<Job>? _jobs;
    private EditMode _editMode = EditMode.Add;

    private enum EditMode { Add, Remove }

    public async Task ShowAsync()
    {
        if (!SelectedJobs.Any())
        {
            return;
        }

        await _modal.LetAsync(x => x.ShowAsync());

        if (_context is not null)
        {
            await _context.DisposeAsync();
        }
        _context = await DbContextFactory.CreateDbContextAsync();
        _allTags = await _context.JobTags.ToListAsync();
        _allTags.Sort();
        var jobIds = SelectedJobs.Select(s => s.JobId).ToArray();
        _jobs = await _context.Jobs
            .Include(job => job.Tags)
            .Include(job => job.Schedules)
            .Where(s => jobIds.Contains(s.JobId))
            .ToListAsync();
    }

    private async Task CloseAsync()
    {
        _tags.Clear();
        SetEditMode(EditMode.Add);
        await _modal.LetAsync(x => x.HideAsync());
    }

    private void SetEditMode(EditMode editMode)
    {
        if (_editMode == editMode)
        {
            return;
        }
        _editMode = editMode;
        switch (editMode)
        {
            case EditMode.Add:
                _tags.Clear();
                break;
            case EditMode.Remove:
                _tags = _jobs?
                    .SelectMany(s => s.Tags)
                    .Distinct()
                    .Order()
                    .ToList() ?? new();
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(editMode), editMode, null);
        }
    }

    private async Task SubmitJobsAsync()
    {
        ArgumentNullException.ThrowIfNull(_jobs);
        ArgumentNullException.ThrowIfNull(_context);

        switch (_editMode)
        {
            case EditMode.Add:
                foreach (var job in _jobs)
                {
                    foreach (var tag in _tags.Where(tag => !job.Tags.Contains(tag)))
                    {
                        job.Tags.Add(tag);
                    }
                }

                break;
                
            case EditMode.Remove:
                var jobTagsToRemove = _jobs
                    .SelectMany(s => s.Tags.Where(t => !_tags.Contains(t)), (s, t) => (Job: s, Tag: t))
                    .ToArray();
                foreach (var (job, tag) in jobTagsToRemove)
                {
                    job.Tags.Remove(tag);
                }

                break;
                
            default:
                throw new ArgumentOutOfRangeException();
        }

        await _context.SaveChangesAsync();
        await OnJobsSubmit.InvokeAsync(_jobs);

        await CloseAsync();
    }

    public void Dispose() => _context?.Dispose();
}
