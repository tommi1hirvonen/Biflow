@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory

<HxModal @ref="modal" Title="Edit tags">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_tags_add"
                           checked=@(editMode == EditMode.Add)
                           @onchange="() => SetEditMode(EditMode.Add)">
                    <label class="form-check-label" for="radio_batch_edit_tags_add">
                        Add
                        &nbsp;
                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Tags listed will be added to all selected jobs where they are not present. New tags can also be added.">
                            <SvgIcon Icon="FeatherIcon.Info" />
                        </HxPopover>
                    </label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_tags_remove"
                           checked=@(editMode == EditMode.Remove)
                           @onchange="() => SetEditMode(EditMode.Remove)">
                    <label class="form-check-label" for="radio_batch_edit_tags_remove">
                        Remove
                        &nbsp;
                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Remove tags from the list to remove them from selected jobs where they are present.">
                            <SvgIcon Icon="FeatherIcon.Info" />
                        </HxPopover>
                    </label>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                @if (jobs is not null)
                {
                    <TagInput TTag="JobTag"
                              Items="allTags"
                              SelectedItems="tags"
                              AllowCustomValues="editMode == EditMode.Add"
                              NewItemFromText="text => new JobTag(text) { Color = TagColor.DarkGray }" />
                }
                else
                {
                    <HxSpinner Color="ThemeColor.Secondary" />
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" Spinner="saving" Enabled="!saving" OnClick="SubmitJobsAsync">
            Save
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="CloseAsync">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public IEnumerable<Job> SelectedJobs { get; set; } = [];

    [Parameter] public EventCallback<IEnumerable<Job>> OnJobsSubmit { get; set; }

    private HxModal? modal;
    private bool saving = false;
    private AppDbContext? context;
    protected List<JobTag>? allTags;
    private List<JobTag> tags = [];
    private List<Job>? jobs;
    private EditMode editMode = EditMode.Add;

    private enum EditMode { Add, Remove }

    public async Task ShowAsync()
    {
        if (!SelectedJobs.Any())
        {
            return;
        }

        await modal.LetAsync(x => x.ShowAsync());

        if (context is not null)
        {
            await context.DisposeAsync();
        }
        context = await DbContextFactory.CreateDbContextAsync();
        allTags = await context.JobTags.OrderBy(t => t.TagName).ToListAsync();
        var jobIds = SelectedJobs.Select(s => s.JobId).ToArray();
        jobs = await context.Jobs
            .Include(job => job.Tags)
            .Include(job => job.Schedules)
            .Where(s => jobIds.Contains(s.JobId))
            .ToListAsync();
    }

    private async Task CloseAsync()
    {
        tags.Clear();
        SetEditMode(EditMode.Add);
        await modal.LetAsync(x => x.HideAsync());
    }

    private void SetEditMode(EditMode editMode)
    {
        if (this.editMode == editMode)
        {
            return;
        }
        this.editMode = editMode;
        if (editMode == EditMode.Add)
        {
            tags.Clear();
        }
        else if (editMode == EditMode.Remove)
        {
            tags = jobs?
                .SelectMany(s => s.Tags)
                .Distinct()
                .OrderBy(t => t.TagName)
                .ToList() ?? new();
        }
    }

    private async Task SubmitJobsAsync()
    {
        ArgumentNullException.ThrowIfNull(jobs);
        ArgumentNullException.ThrowIfNull(context);

        if (editMode == EditMode.Add)
        {
            foreach (var job in jobs)
            {
                foreach (var tag in tags)
                {
                    if (!job.Tags.Contains(tag))
                    {
                        job.Tags.Add(tag);
                    }
                }
            }
        }
        else if (editMode == EditMode.Remove)
        {
            var jobTagsToRemove = jobs
                .SelectMany(s => s.Tags.Where(t => !tags.Contains(t)), (s, t) => (Job: s, Tag: t))
                .ToArray();
            foreach (var (job, tag) in jobTagsToRemove)
            {
                job.Tags.Remove(tag);
            }
        }

        await context.SaveChangesAsync();
        await OnJobsSubmit.InvokeAsync(jobs);

        await CloseAsync();
    }

    public void Dispose() => context?.Dispose();
}
