@inject MarkupHelperService MarkupHelper
@inject AuthenticationMethodResolver AuthenticationResolver
@inject NavigationManager NavigationManager

<nav class="sidebar @ClassString" style="z-index: 1040;">
    <ul class="nav flex-column pt-3">
        <li class="nav-item">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="NavLinkClick">
                @MarkupHelper.FromFile("icons/feather/home.svg")
                Home
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="jobs" Match="NavLinkMatch.Prefix" @onclick="NavLinkClick">
                @MarkupHelper.FromFile("icons/feather/loader.svg")
                Jobs
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="schedules" @onclick="NavLinkClick">
                @MarkupHelper.FromFile("icons/feather/calendar.svg")
                Schedules
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="executions" @onclick="NavLinkClick">
                @MarkupHelper.FromFile("icons/feather/activity.svg")
                Executions
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="dashboard" @onclick="NavLinkClick">
                @MarkupHelper.FromFile("icons/feather/bar-chart-2.svg")
                Dashboard
            </NavLink>
        </li>
        <AuthorizeView Roles="Admin,Editor">
            <li class="nav-item">
                <NavLink class="nav-link" href="tags" @onclick="NavLinkClick">
                    @MarkupHelper.FromFile("icons/feather/tag.svg")
                    Tags
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="sourcestargets" @onclick="NavLinkClick">
                    @MarkupHelper.FromFile("icons/feather/columns.svg")
                    Sources & Targets
                </NavLink>
            </li>
        </AuthorizeView>
        <li class="nav-item">
            <a class="nav-link @(GetActiveByPrefix("datatables") ? "active" : null)" href="datatables/edit"  @onclick="NavLinkClick">
                @MarkupHelper.FromFile("icons/feather/table.svg")
                Data Tables
            </a>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="account" Match="NavLinkMatch.Prefix" @onclick="NavLinkClick">
                @MarkupHelper.FromFile("icons/feather/user.svg")
                Account
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="subscriptions" Match="NavLinkMatch.Prefix" @onclick="NavLinkClick">
                @MarkupHelper.FromFile("icons/feather/mail.svg")
                Subscriptions
            </NavLink>
        </li>
        <AuthorizeView Roles="Admin">
            <li class="nav-item">
                <NavLink class="nav-link" href="settings" Match="NavLinkMatch.Prefix" @onclick="NavLinkClick">
                    @MarkupHelper.FromFile("icons/feather/settings.svg")
                    Settings
                </NavLink>
            </li>
        </AuthorizeView>
        @if (AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.BuiltIn)
        {
            <li class="nav-item mt-3">
                <NavLink class="nav-link" href="logout?returnUrl=/">
                    @MarkupHelper.FromFile("icons/feather/log-out.svg")
                    Log out
                </NavLink>
            </li>
        }
        else if (AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.AzureAd)
        {
            <li class="nav-item mt-3">
                <a class="nav-link" href="MicrosoftIdentity/Account/SignOut">
                    @MarkupHelper.FromFile("icons/feather/log-out.svg")
                    Log out
                </a>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter]
    public string? ClassString { get; set; }

    [Parameter]
    public EventCallback OnNavLinkClick { get; set; }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool GetActiveByPrefix(string prefix)
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).ToLower();
        return relativePath.StartsWith(prefix.ToLower());
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task NavLinkClick()
    {
        await OnNavLinkClick.InvokeAsync();
    }
}
