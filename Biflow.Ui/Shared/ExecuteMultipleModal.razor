@using System.Collections.Concurrent

@inject IExecutionBuilderFactory<AppDbContext> BuilderFactory
@inject IExecutorService Executor
@inject ToasterService Toaster
@inject NavigationManager NavigationManager

<HxModal @ref="_modal" Size="ModalSize.Large" Title="Run jobs" Scrollable="true">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                @if (_state == State.Building)
                {
                    <span>
                        Run all enabled steps for the following @_jobs.Count job(s)?
                    </span>
                }
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var job in _jobs.OrderBy(j => j.JobName))
                        {
                            <tr>
                                <td>
                                    @job.JobName
                                </td>
                                <td>
                                    @if (_state == State.Building)
                                    {
                                        <HxButton Size="ButtonSize.Small"
                                                  Color="ThemeColor.None"
                                                  CssClass="btn-auto"
                                                  OnClick="() => _jobs.Remove(job)"
                                                  title="Remove from list of jobs to run">
                                            <SvgIcon Icon="FeatherIcon.Delete" />
                                        </HxButton>
                                    }
                                    else if (_responses.TryGetValue(job, out var response))
                                    {
                                        if (response.Success)
                                        {
                                            <div class="text-success">
                                                <span class="text-success">
                                                    <SvgIcon Icon="FeatherIcon.CheckCircle" />
                                                </span>
                                                @if (response.Execution is not null)
                                                {
                                                    <a class="small text-body ms-1" href="@($"executions/{response.Execution.ExecutionId}/list")">
                                                        View execution
                                                    </a>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-danger">
                                                <SvgIcon Icon="FeatherIcon.AlertOctagon" />
                                                <HxPopover Content="@(response.Exception?.ToString() ?? string.Empty)" Trigger="PopoverTrigger.Hover">
                                                    <span class=" ms-1 small text-decoration-underline text-primary pointer">
                                                        Show error
                                                    </span>
                                                </HxPopover>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <HxSpinner Size="SpinnerSize.Small" Color="ThemeColor.Secondary" />
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        @if (_state == State.Building)
        {
            <div class="col mr-auto">
                <HxDropdownButtonGroup AutoClose="DropdownAutoClose.Outside">
                    <HxDropdownToggleButton Color="ThemeColor.Secondary">
                        <SvgIcon Icon="FeatherIcon.Bell" />
                        Notifications
                    </HxDropdownToggleButton>
                    <HxDropdownContent>
                        <div class="row p-3" style="min-width: 20rem;">
                            <div class="col">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="execute_notify"
                                           checked=@_notify
                                           @bind-value="_notify">
                                    <label class="form-check-label" for="execute_notify">Notify based on subscriptions</label>
                                </div>
                                <h6 class="mt-3">Notify me</h6>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_none"
                                           checked=@(_notifyCaller is null)
                                           @onchange="() => _notifyCaller = null">
                                    <label class="form-check-label" for="radio_notify_me_none">None</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_completion"
                                           checked=@(_notifyCaller == AlertType.OnCompletion)
                                           @onchange="() => _notifyCaller = AlertType.OnCompletion">
                                    <label class="form-check-label" for="radio_notify_me_completion">On completion</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_failure"
                                           checked=@(_notifyCaller == AlertType.OnFailure)
                                           @onchange="() => _notifyCaller = AlertType.OnFailure">
                                    <label class="form-check-label" for="radio_notify_me_failure">On failure</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_success"
                                           checked=@(_notifyCaller == AlertType.OnSuccess)
                                           @onchange="() => _notifyCaller = AlertType.OnSuccess">
                                    <label class="form-check-label" for="radio_notify_me_success">On success</label>
                                </div>
                                <div class="form-check mt-3">
                                    <input type="checkbox" class="form-check-input" id="execute_notify_me_overtime"
                                           checked=@_notifyCallerOvertime
                                           @bind-value="_notifyCallerOvertime">
                                    <label class="form-check-label" for="execute_notify_me_overtime">On overtime</label>
                                </div>
                            </div>
                        </div>
                    </HxDropdownContent>
                </HxDropdownButtonGroup>
            </div>
            <HxButton Color="ThemeColor.Primary"
                      CssClass="ml-5"
                      Enabled="_jobs.Count > 0"
                      @onclick="ExecuteAsync">
                <SvgIcon Icon="FeatherIcon.Play" />
                Execute
            </HxButton>
            <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">
                Cancel
            </HxButton>
        }
        else if (_state == State.Starting)
        {
            <HxButton Color="ThemeColor.Secondary" @onclick="_cts.Cancel">
                <SvgIcon Icon="FeatherIcon.X" />
                Cancel
            </HxButton>
        }
        else
        {
            <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">
                Close
            </HxButton>
        }
    </FooterTemplate>
</HxModal>

@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool _notify = false;
    private AlertType? _notifyCaller;
    private bool _notifyCallerOvertime = false;
    private HxModal? _modal;
    private List<Job> _jobs = [];
    private ConcurrentDictionary<Job, Response> _responses = [];
    private State _state = State.Building;
    private CancellationTokenSource _cts = new();

    private enum State { Building, Starting, Done }

    public async Task ShowAsync(IEnumerable<Job> selectedJobs)
    {
        _state = State.Building;
        _jobs = [.. selectedJobs];
        _responses.Clear();
        _cts = new();
        await _modal.LetAsync(x => x.ShowAsync());
    }

    private async Task ExecuteAsync()
    {
        _state = State.Starting;
        StateHasChanged();
        var options = new ParallelOptions
        {
            MaxDegreeOfParallelism = 3,
            CancellationToken = _cts.Token
        };
        try
        {
            await Parallel.ForEachAsync(_jobs, options, async (job, cancellationToken) =>
            {
                try
                {
                    var execution = await CreateAndStartExecution(job.JobId, cancellationToken);
                    _responses[job] = new(true, execution);
                }
                catch (Exception ex)
                {
                    _responses[job] = new(false, null, ex);
                }
                finally
                {
                    await InvokeAsync(StateHasChanged);
                }
            });

            if (_responses.Values.All(r => r.Exception is not null))
            {
                Toaster.AddError("Error starting jobs");
            }
            else if (_responses.Values.Any(r => r.Exception is not null))
            {
                Toaster.AddWarning("Errors while starting some jobs");
            }
            else
            {
                Toaster.AddSuccess("Jobs started successfully");
            }
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error starting executions", ex.Message);
        }
        _state = State.Done;
    }

    private async Task<Execution?> CreateAndStartExecution(Guid jobId, CancellationToken cancellationToken)
    {
        ArgumentNullException.ThrowIfNull(AuthenticationState);
        var authState = await AuthenticationState;
        var username = authState.User.Identity?.Name;

        var executionBuilder = await BuilderFactory.CreateAsync(jobId, username, [_ => step => step.IsEnabled], cancellationToken);
        ArgumentNullException.ThrowIfNull(executionBuilder);

        executionBuilder.AddAll();
        executionBuilder.Notify = _notify;
        executionBuilder.NotifyCaller = _notifyCaller;
        executionBuilder.NotifyCallerOvertime = _notifyCallerOvertime;

        var execution = await executionBuilder.SaveExecutionAsync(cancellationToken);
        if (execution is null)
        {
            return null;
        }

        await Executor.StartExecutionAsync(execution.ExecutionId, cancellationToken);
        return execution;
    }

    private record Response(bool Success, Execution? Execution, Exception? Exception = null);
}
