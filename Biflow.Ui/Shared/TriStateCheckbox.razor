@inject IJSRuntime jsRuntime

<div class="form-check form-check-inline">
    <input @ref="_inputElement"
           type="checkbox"
           class="form-check-input"
           id="@_elementId"
           checked=@Checked
           @onchange="OnChange">
    <label class="form-check-label" for="@_elementId">@Label</label>
</div>

@code {
    [Parameter] public string? Label { get; set; }

    [Parameter] public bool? Indeterminate { get; set; }

    [Parameter] public bool Checked { get; set; }

    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

    private ElementReference _inputElement;
    private Guid _elementId = Guid.NewGuid();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Indeterminate.HasValue)
        {
            await jsRuntime.InvokeVoidAsync("setPropByElement", _inputElement, "indeterminate", Indeterminate.Value);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnChange(ChangeEventArgs e)
    {
        Checked = (bool)e.Value!;
        await CheckedChanged.InvokeAsync(Checked);
    }
}