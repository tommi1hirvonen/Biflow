@implements IDisposable

@inject ThemeService ThemeService

<ThemeManager @ref="themeManager" />

<HxDropdownButtonGroup CssClass="ms-auto">
    <HxDropdownToggleButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="m-1 text-white" style="text-decoration: none;">
        @if (ThemeService.IsAuto)
        {
            <span class="me-1">
                <SvgIcon Icon="LucideIcon.Contrast" />
            </span>
        }
        else if (ThemeService.CurrentTheme == Theme.Dark)
        {
            <span class="me-1">
                <SvgIcon Icon="FeatherIcon.Moon" />
            </span>
        }
        else
        {
            <span class="me-1">
                <SvgIcon Icon="FeatherIcon.Sun" />
            </span>
        }
    </HxDropdownToggleButton>
    <HxDropdownMenu CssClass="shadow">
        <li class="dropdown-header h6">
            Theme
        </li>
        <li class="dropdown-item @(!ThemeService.IsAuto && ThemeService.CurrentTheme == Theme.Light ? "active" : null)"
            role="button"
        @onclick="() => themeManager!.ToggleThemeAsync(Theme.Light)">
            <SvgIcon Icon="FeatherIcon.Sun" />
            Light
        </li>
        <li class="dropdown-item @(!ThemeService.IsAuto && ThemeService.CurrentTheme == Theme.Dark ? "active" : null)"
            role="button"
        @onclick="() => themeManager!.ToggleThemeAsync(Theme.Dark)">
            <SvgIcon Icon="FeatherIcon.Moon" />
            Dark
        </li>
        <li class="dropdown-item @(ThemeService.IsAuto ? "active" : null)"
            role="button"
        @onclick="() => themeManager!.ToggleThemeAutoAsync()">
            <SvgIcon Icon="LucideIcon.Contrast" />
            Auto
        </li>
    </HxDropdownMenu>
</HxDropdownButtonGroup>

@code {
    private ThemeManager? themeManager;

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += OnThemeChanged;
    }

    private void OnThemeChanged(Theme theme, bool isAuto) => StateHasChanged();

    public void Dispose() => ThemeService.OnThemeChanged -= OnThemeChanged;
}
