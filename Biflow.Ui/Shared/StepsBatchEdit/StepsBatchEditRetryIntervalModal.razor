@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory

<HxModal @ref="_modal" Title="Edit retry interval" Size="ModalSize.Small">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                @if (_steps is not null)
                {
                    <input class="form-control" type="number" placeholder="Retry interval (min)" min="0" @bind-value="RetryInterval" />
                }
                else
                {
                    <HxSpinner Color="ThemeColor.Secondary" />
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" OnClick="SubmitStepsAsync">
            Save
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="CloseAsync">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public IEnumerable<Step> SelectedSteps { get; set; } = [];

    [Parameter] public EventCallback<IEnumerable<Step>> OnStepsSubmit { get; set; }

    private HxModal? _modal;
    private AppDbContext? _context;
    private List<Step>? _steps;

    private int? RetryInterval
    {
        get;
        set => field = value is null or >= 0 ? value : field;
    }

    public async Task ShowAsync()
    {
        if (!SelectedSteps.Any())
        {
            return;
        }

        await _modal.LetAsync(x => x.ShowAsync());

        if (_context is not null)
        {
            await _context.DisposeAsync();
        }
        _context = await DbContextFactory.CreateDbContextAsync();
        var stepIds = SelectedSteps.Select(s => s.StepId).ToArray();
        _steps = await JobDetails.BuildStepsQueryWithIncludes(_context)
            .Where(s => stepIds.Contains(s.StepId))
            .ToListAsync();
    }

    private async Task CloseAsync()
    {
        RetryInterval = null;
        await _modal.LetAsync(x => x.HideAsync());
    }

    private async Task SubmitStepsAsync()
    {
        ArgumentNullException.ThrowIfNull(_steps);
        ArgumentNullException.ThrowIfNull(_context);

        int interval;
        if (RetryInterval is { } i)
        {
            interval = i;
        }
        else
        {
            return;
        }

        foreach (var step in _steps)
        {
            step.RetryIntervalMinutes = interval;
        }

        await _context.SaveChangesAsync();
        await OnStepsSubmit.InvokeAsync(_steps);
        await CloseAsync();
    }

    public void Dispose() => _context?.Dispose();
}
