@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory

<HxModal @ref="_modal" Title="Rename steps" Scrollable="true" Size="ModalSize.Large">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_rename_replace"
                           checked=@(_editMode == EditMode.Replace)
                    @onchange="() => _editMode = EditMode.Replace">
                    <label class="form-check-label" for="radio_batch_edit_rename_replace">
                        Replace
                    </label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_rename_prepend"
                           checked=@(_editMode == EditMode.Prepend)
                    @onchange="() => _editMode = EditMode.Prepend">
                    <label class="form-check-label" for="radio_batch_edit_rename_prepend">
                        Prepend
                    </label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_rename_append"
                           checked=@(_editMode == EditMode.Append)
                    @onchange="() => _editMode = EditMode.Append">
                    <label class="form-check-label" for="radio_batch_edit_rename_append">
                        Append
                    </label>
                </div>
                @if (_editMode == EditMode.Replace)
                {
                    <div class="form-check form-check-inline ms-4">
                        <input type="checkbox" class="form-check-input" id="check_batch_edit_rename_case_sensitive"
                               checked=@_caseSensitive
                        @onchange="() => _caseSensitive = !_caseSensitive">
                        <label class="form-check-label" for="check_batch_edit_rename_case_sensitive">
                            Case sensitive
                        </label>
                    </div>
                }
            </div>
        </div>
        <div class="row mt-3">
            @if (_editMode == EditMode.Prepend || _editMode == EditMode.Append)
            {
                <div class="col">
                    <input class="form-control" type="text" @bind-value="_prependAppendString" @bind-value:event="oninput" />
                </div>
            }
            else if (_editMode == EditMode.Replace)
            {
                <div class="col">
                    <input class="form-control" type="text" placeholder="Old text" @bind-value="_oldString" @bind-value:event="oninput" />
                </div>
                <div class="col">
                    <input class="form-control" type="text" placeholder="New text" @bind-value="_newString" @bind-value:event="oninput" />
                </div>
            }
        </div>
        <div class="row mt-3">
            <div class="col">
                <h6>Preview</h6>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <table class="table table-sm">
                    <tbody>
                        @if ((_editMode == EditMode.Prepend || _editMode == EditMode.Append) && !string.IsNullOrEmpty(_prependAppendString))
                        {
                            foreach (var step in _steps?.OrderBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                            {
                                var after = _editMode switch
                                {
                                    EditMode.Prepend => $"{_prependAppendString}{step.StepName}",
                                    EditMode.Append => $"{step.StepName}{_prependAppendString}",
                                    _ => step.StepName
                                };
                                <tr>
                                    <td>
                                        <StepTypeIcon StepType="step.StepType" />
                                        @step.StepName
                                    </td>
                                    <td>
                                        <span><SvgIcon Icon="LucideIcon.MoveRight" /></span>
                                    </td>
                                    <td>
                                        <StepTypeIcon StepType="step.StepType" />
                                        @after
                                    </td>
                                </tr>
                            }
                        }
                        else if (_editMode == EditMode.Replace && !string.IsNullOrEmpty(_oldString))
                        {
                            if (AffectedSteps.Any())
                            {
                                foreach (var step in AffectedSteps)
                                {
                                    <tr>
                                        <td>
                                            <StepTypeIcon StepType="step.StepType" />
                                            @step.StepName
                                        </td>
                                        <td>
                                            <span><SvgIcon Icon="LucideIcon.MoveRight" /></span>
                                        </td>
                                        <td>
                                            <StepTypeIcon StepType="step.StepType" />
                                            @step.StepName?.Replace(_oldString, _newString, Comparison)
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td>
                                        No changes
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td>
                                    No changes
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" OnClick="SubmitStepsAsync">
            Save
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="CloseAsync">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public IEnumerable<Step> SelectedSteps { get; set; } = [];

    [Parameter] public EventCallback<IEnumerable<Step>> OnStepsSubmit { get; set; }

    private HxModal? _modal;
    private AppDbContext? _context;
    private List<Step>? _steps;
    private EditMode _editMode = EditMode.Replace;
    private bool _caseSensitive = true;
    private string _prependAppendString = "";
    private string _oldString = "";
    private string _newString = "";

    private StringComparison Comparison =>
        _caseSensitive ? StringComparison.InvariantCulture : StringComparison.InvariantCultureIgnoreCase;

    private IEnumerable<Step> AffectedSteps => _steps
        ?.Where(s => s.StepName?.Contains(_oldString, Comparison) == true)
        .OrderBy(s => s.StepName)
        .AsEnumerable() ?? [];

    private enum EditMode { Replace, Prepend, Append };

    public async Task ShowAsync()
    {
        if (!SelectedSteps.Any())
        {
            return;
        }

        await _modal.LetAsync(x => x.ShowAsync());

        if (_context is not null)
        {
            await _context.DisposeAsync();
        }
        _context = await DbContextFactory.CreateDbContextAsync();
        var stepIds = SelectedSteps.Select(s => s.StepId).ToArray();
        _steps = await JobDetails.BuildStepsQueryWithIncludes(_context)
            .Where(s => stepIds.Contains(s.StepId))
            .ToListAsync();
    }

    private async Task CloseAsync()
    {
        (_editMode, _prependAppendString, _oldString, _newString, _caseSensitive) =
            (EditMode.Replace, "", "", "", true);
        await _modal.LetAsync(x => x.HideAsync());
    }

    private async Task SubmitStepsAsync()
    {
        ArgumentNullException.ThrowIfNull(_steps);
        ArgumentNullException.ThrowIfNull(_context);

        var steps = _editMode switch
        {
            EditMode.Replace => AffectedSteps,
            _ => _steps
        };
        foreach (var step in steps)
        {
            step.StepName = _editMode switch
            {
                EditMode.Prepend => $"{_prependAppendString}{step.StepName}",
                EditMode.Append => $"{step.StepName}{_prependAppendString}",
                EditMode.Replace => step.StepName?.Replace(_oldString, _newString, Comparison),
                _ => step.StepName
            };
        }

        await _context.SaveChangesAsync();
        await OnStepsSubmit.InvokeAsync(_steps);
        await CloseAsync();
    }

    public void Dispose() => _context?.Dispose();
}
