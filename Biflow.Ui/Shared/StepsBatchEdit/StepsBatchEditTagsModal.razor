@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory

<HxModal @ref="modal" Title="Edit tags">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_tags_add"
                           checked=@(editMode == EditMode.Add)
                    @onchange="() => SetEditMode(EditMode.Add)">
                    <label class="form-check-label" for="radio_batch_edit_tags_add">
                        Add
                        &nbsp;
                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Tags listed will be added to all selected steps where they are not present. New tags can also be added.">
                            <CxIcon Icon="FeatherIcon.Info" />
                        </HxPopover>
                    </label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_tags_remove"
                           checked=@(editMode == EditMode.Remove)
                    @onchange="() => SetEditMode(EditMode.Remove)">
                    <label class="form-check-label" for="radio_batch_edit_tags_remove">
                        Remove
                        &nbsp;
                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Remove tags from the list to remove them from selected steps where they are present.">
                            <CxIcon Icon="FeatherIcon.Info" />
                        </HxPopover>
                    </label>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                @if (steps is not null)
                {
                    <HxInputTags
                        @bind-Value="tags"
                        DataProvider="GetTagSuggestions"
                        SuggestMinimumLength="0"
                        SuggestDelay="0"
                        TagBadgeSettings="new BadgeSettings() { Color = ThemeColor.Secondary }" />
                }
                else
                {
                    <HxSpinner Color="ThemeColor.Secondary" />
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" Spinner="saving" Enabled="!saving" OnClick="SubmitStepsAsync">
            Save
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="CloseAsync">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public IEnumerable<Step> SelectedSteps { get; set; } = Enumerable.Empty<Step>();

    [Parameter] public EventCallback<IEnumerable<Step>> OnStepsSubmit { get; set; }

    private HxModal? modal;
    private bool saving = false;
    private AppDbContext? context;
    protected HashSet<Tag>? allTags;
    private List<string> tags = [];
    private List<Step>? steps;
    private EditMode editMode = EditMode.Add;

    private enum EditMode { Add, Remove }

    public async Task ShowAsync()
    {
        if (!SelectedSteps.Any())
        {
            return;
        }

        await modal.LetAsync(x => x.ShowAsync());

        if (context is not null)
        {
            await context.DisposeAsync();
        }
        context = await DbContextFactory.CreateDbContextAsync();
        var stepIds = SelectedSteps.Select(s => s.StepId).ToArray();
        steps = await JobDetails.BuildStepsQueryWithIncludes(context)
            .Where(s => stepIds.Contains(s.StepId))
            .ToListAsync();
    }

    private async Task CloseAsync()
    {
        tags.Clear();
        SetEditMode(EditMode.Add);
        await modal.LetAsync(x => x.HideAsync());
    }

    private void SetEditMode(EditMode editMode)
    {
        if (this.editMode == editMode)
        {
            return;
        }
        this.editMode = editMode;
        if (editMode == EditMode.Add)
        {
            tags.Clear();
        }
        else if (editMode == EditMode.Remove)
        {
            tags = steps?
                .SelectMany(s => s.Tags)
                .Select(t => t.TagName)
                .Distinct()
                .OrderBy(t => t)
                .ToList() ?? new();
        }
    }

    private async Task<InputTagsDataProviderResult> GetTagSuggestions(InputTagsDataProviderRequest request)
    {
        await EnsureAllTagsInitialized();
        return new InputTagsDataProviderResult
        {
            Data = allTags?
            .Select(t => t.TagName)
            .Where(t => t.ContainsIgnoreCase(request.UserInput))
            .Where(t => !tags.Any(tag => t == tag))
            .OrderBy(t => t) ?? Enumerable.Empty<string>()
        };
    }

    private async Task EnsureAllTagsInitialized()
    {
        ArgumentNullException.ThrowIfNull(context);
        allTags ??= (await context.Tags.ToListAsync()).ToHashSet();
    }

    private async Task SubmitStepsAsync()
    {
        ArgumentNullException.ThrowIfNull(steps);
        ArgumentNullException.ThrowIfNull(context);

        if (editMode == EditMode.Add)
        {
            var stepTagsToAdd = steps
                .SelectMany(s => tags, (s, t) => (Step: s, Tag: t))
                .Where(st => !st.Step.Tags.Any(t => t.TagName == st.Tag))
                .ToArray();
            foreach (var (step, tagName) in stepTagsToAdd)
            {
                var tag = allTags?.FirstOrDefault(t => t.TagName == tagName) ?? new Tag(tagName);
                allTags?.Add(tag); // In case of new tag, add it to the list.
                step.Tags.Add(tag);
            }
        }
        else if (editMode == EditMode.Remove)
        {
            var stepTagsToRemove = steps
                .SelectMany(s => s.Tags.Where(t => !tags.Contains(t.TagName)), (s, t) => (Step: s, Tag: t))
                .ToArray();
            foreach (var (step, tag) in stepTagsToRemove)
            {
                step.Tags.Remove(tag);
            }
        }

        await context.SaveChangesAsync();
        await OnStepsSubmit.InvokeAsync(steps);

        await CloseAsync();
    }

    public void Dispose() => context?.Dispose();
}
