@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory

<HxModal @ref="_modal" Title="Edit tags">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_tags_add"
                    checked=@(_editMode == EditMode.Add)
                    @onchange="() => SetEditMode(EditMode.Add)">
                    <label class="form-check-label" for="radio_batch_edit_tags_add">
                        Add
                        &nbsp;
                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Tags listed will be added to all selected steps where they are not present. New tags can also be added.">
                            <SvgIcon Icon="LucideIcon.Info" />
                        </HxPopover>
                    </label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_batch_edit_tags_remove"
                    checked=@(_editMode == EditMode.Remove)
                    @onchange="() => SetEditMode(EditMode.Remove)">
                    <label class="form-check-label" for="radio_batch_edit_tags_remove">
                        Remove
                        &nbsp;
                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Remove tags from the list to remove them from selected steps where they are present.">
                            <SvgIcon Icon="LucideIcon.Info" />
                        </HxPopover>
                    </label>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                @if (_steps is not null)
                {
                    <TagInput TTag="StepTag"
                              Items="_allTags"
                              SelectedItems="_tags"
                              AllowCustomValues="_editMode == EditMode.Add"
                              NewItemFromText="text => new StepTag(text) { Color = TagColor.DarkGray }"/>
                }
                else
                {
                    <HxSpinner Color="ThemeColor.Secondary" />
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" Spinner="_saving" Enabled="!_saving" OnClick="SubmitStepsAsync">
            Save
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="CloseAsync">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public IEnumerable<Step> SelectedSteps { get; set; } = [];

    [Parameter] public EventCallback<IEnumerable<Step>> OnStepsSubmit { get; set; }

    private HxModal? _modal;
    private bool _saving = false;
    private AppDbContext? _context;
    private List<StepTag>? _allTags;
    private List<StepTag> _tags = [];
    private List<Step>? _steps;
    private EditMode _editMode = EditMode.Add;

    private enum EditMode { Add, Remove }

    public async Task ShowAsync()
    {
        if (!SelectedSteps.Any())
        {
            return;
        }

        await _modal.LetAsync(x => x.ShowAsync());

        if (_context is not null)
        {
            await _context.DisposeAsync();
        }
        _context = await DbContextFactory.CreateDbContextAsync();
        _allTags = await _context.StepTags.ToListAsync();
        _allTags.Sort();
        var stepIds = SelectedSteps.Select(s => s.StepId).ToArray();
        _steps = await JobDetails.BuildStepsQueryWithIncludes(_context)
            .Where(s => stepIds.Contains(s.StepId))
            .ToListAsync();
    }

    private async Task CloseAsync()
    {
        _tags.Clear();
        SetEditMode(EditMode.Add);
        await _modal.LetAsync(x => x.HideAsync());
    }

    private void SetEditMode(EditMode editMode)
    {
        if (_editMode == editMode)
        {
            return;
        }
        _editMode = editMode;
        switch (editMode)
        {
            case EditMode.Add:
                _tags.Clear();
                break;
            case EditMode.Remove:
                _tags = _steps?
                    .SelectMany(s => s.Tags)
                    .Distinct()
                    .Order()
                    .ToList() ?? new();
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(editMode), editMode, null);
        }
    }

    private async Task SubmitStepsAsync()
    {
        ArgumentNullException.ThrowIfNull(_steps);
        ArgumentNullException.ThrowIfNull(_context);

        switch (_editMode)
        {
            case EditMode.Add:
            {
                foreach (var step in _steps)
                {
                    foreach (var tag in _tags.Where(tag => !step.Tags.Contains(tag)))
                    {
                        step.Tags.Add(tag);
                    }
                }

                break;
            }
            case EditMode.Remove:
            {
                var stepTagsToRemove = _steps
                    .SelectMany(s => s.Tags.Where(t => !_tags.Contains(t)), (s, t) => (Step: s, Tag: t))
                    .ToArray();
                foreach (var (step, tag) in stepTagsToRemove)
                {
                    step.Tags.Remove(tag);
                }

                break;
            }
            default:
                throw new ArgumentOutOfRangeException();
        }

        await _context.SaveChangesAsync();
        await OnStepsSubmit.InvokeAsync(_steps);

        await CloseAsync();
    }

    public void Dispose() => _context?.Dispose();
}
