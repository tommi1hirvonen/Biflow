@inject MarkupHelperService MarkupHelper

@if (Step is not null)
{
    <div class="row mt-3">
        <label class="form-label">Execution condition expression</label>
        <div class="input-group input-group-sm">
            <div class="input-group-text">
                @MarkupHelper.FromFile("icons/feather/check-square.svg")
            </div>
            <InputTextArea class="form-control form-control-sm" @bind-Value="Step.ExecutionConditionExpression" style="font-family: monospace;" rows="3"></InputTextArea>
        </div>
        <div class="form-text">
            Use Python expressions or statements to control whether the step is executed or not when all its dependencies have completed.
            Use parameters to dynamically pass values to the evaluated statement.
        </div>
    </div>
    <h5 class="mt-3">Parameters</h5>
    <small class="text-secondary"></small>
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Inherit from job</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!Step.ExecutionConditionParameters.Any())
            {
                <tr><td colspan="5">No parameters</td></tr>
            }
            @{
                var count = 0;
            }
            @foreach (var param in Step.ExecutionConditionParameters)
            {
                <tr>
                    <td>
                        <HxInputText InputSize="InputSize.Small" @bind-Value="param.ParameterName" placeholder="Name"></HxInputText>
                    </td>
                    <td class="align-middle">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="condition_inherit_param_@count"
                                    checked=@(param.JobParameterId is not null)
                                    disabled=@((JobParameters?.Any() ?? true))
                                    @onchange="args => SetJobParameter((bool)args.Value!, param)">
                            <label class="form-check-label" for="condition_inherit_param_@count"></label>
                        </div>
                    </td>
                    @if (param.JobParameterId is not null)
                    {
                        <td colspan="2">
                            <InputSelect class="form-select form-select-sm" @bind-Value="param.JobParameterId">
                                @foreach (var jobParam in JobParameters ?? Enumerable.Empty<JobParameter>())
                                            {
                                    <option value="@jobParam.ParameterId">
                                        @jobParam.ParameterName (@jobParam.ParameterValueType = @jobParam.ParameterValue)
                                    </option>
                                            }
                            </InputSelect>
                        </td>
                    }
                    else
                    {
                        <ParameterTypeValueEditComponent Parameter="param" />
                    }
                    <td>
                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                            <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" CssClass="btn-row" @onclick="() => Step.ExecutionConditionParameters.Remove(param)">
                                @MarkupHelper.FromFile("icons/feather/delete.svg")
                            </HxButton>
                        </HxButtonGroup>
                    </td>
                </tr>
                count++;
            }
        </tbody>
    </table>
    var type = ParameterValueType.String;
    <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" @onclick="() => Step.ExecutionConditionParameters.Add(new ExecutionConditionParameter { ParameterValueType = type, ParameterValue = string.Empty })">
        @MarkupHelper.FromFile("icons/feather/plus.svg")
    </HxButton>
}

@code {
    [Parameter]
    public Step? Step { get; set; }

    [Parameter]
    public ICollection<JobParameter>? JobParameters { get; set; }

    private void SetJobParameter(bool inheritFromJob, ExecutionConditionParameter param)
    {
        if (inheritFromJob)
        {
            param.JobParameterId = JobParameters?.FirstOrDefault()?.ParameterId;
        }
        else
        {
            param.JobParameterId = null;
        }
    }
}
