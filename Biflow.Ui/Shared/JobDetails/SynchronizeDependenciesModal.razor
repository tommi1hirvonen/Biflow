
<HxModal @ref="Modal" Size="ModalSize.Large" Scrollable="true" OnClosed="OnClosed" Title="Synchronize dependencies">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <small class="text-secondary">Automatically calculate modifications to dependencies based on step sources and targets.</small>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <HxButton Size="ButtonSize.Regular" Color="ThemeColor.Primary" OnClick="CalculateChangesAsync">
                    @MarkupHelper.FromFile("icons/feather/refresh-cw.svg")
                    Calculate changes
                </HxButton>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Step</th>
                            <th>Depends on</th>
                            <th>Strict</th>
                            <th>Action</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (DependenciesToAdd is null || DependenciesToRemove is null)
                        {
                            <tr class="text-secondary small">
                                <td colspan="5">Click on "Calculate changes"" to preview modifications</td>
                            </tr>
                        }
                        else if (!DependenciesToAdd.Any() && !DependenciesToRemove.Any())
                        {
                            <tr>
                                <td colspan="5">No changes detected</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var dep in DependenciesToAdd)
                            {
                                var addCheckId = $"strict_{dep.StepId}_{dep.DependantOnStepId}";
                                <tr class="text-primary">
                                    <td class="align-middle">
                                        <StepTypeIconComponent StepType_="dep.Step.StepType" />
                                        @dep.Step.StepName
                                    </td>
                                    <td class="align-middle">
                                        <StepTypeIconComponent StepType_="dep.DependantOnStep.StepType" />
                                        @dep.DependantOnStep.StepName
                                    </td>
                                    <td class="align-middle">
                                        <div class="form-check form-check-inline">
                                            <input type="checkbox" class="form-check-input" id="@addCheckId"
                                                   checked=@dep.StrictDependency
                                                   @onchange="eventArgs => dep.StrictDependency = (bool)eventArgs.Value!">
                                            <label class="form-check-label" for="@addCheckId"></label>
                                        </div>
                                    </td>
                                    <td class="align-middle">
                                        Add
                                    </td>
                                    <td>
                                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                                title="Commit this modification"
                                                CssClass="btn-row text-success" OnClick="async () => await AddDependencyAsync(dep)">
                                                @MarkupHelper.FromFile("icons/feather/check.svg")
                                            </HxButton>
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                                title="Discard this modification"
                                                CssClass="btn-row text-danger" OnClick="() => DependenciesToAdd.Remove(dep)">
                                                @MarkupHelper.FromFile("icons/feather/x.svg")
                                            </HxButton>
                                        </HxButtonGroup>
                                    </td>
                                </tr>
                            }
                            @foreach (var dep in DependenciesToRemove)
                            {
                                var removeCheckId = $"strict_{dep.StepId}_{dep.DependantOnStepId}";
                                <tr class="text-danger">
                                    <td class="align-middle">
                                        <StepTypeIconComponent StepType_="dep.Step.StepType" />
                                        @dep.Step.StepName
                                    </td>
                                    <td class="align-middle">
                                        <StepTypeIconComponent StepType_="dep.DependantOnStep.StepType" />
                                        @dep.DependantOnStep.StepName
                                    </td>
                                    <td class="align-middle">
                                        <div class="form-check form-check-inline">
                                            <input type="checkbox" class="form-check-input" id="@removeCheckId"
                                                   checked=@dep.StrictDependency
                                                    disabled>
                                            <label class="form-check-label" for="@removeCheckId"></label>
                                        </div>
                                    </td>
                                    <td class="align-middle">
                                        Remove
                                    </td>
                                    <td>
                                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                                title="Commit this modification"
                                                CssClass="btn-row text-success" OnClick="async () => await RemoveDependencyAsync(dep)">
                                                @MarkupHelper.FromFile("icons/feather/check.svg")
                                            </HxButton>
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                                title="Discard this modification"
                                                CssClass="btn-row text-danger" OnClick="() => DependenciesToRemove.Remove(dep)">
                                                @MarkupHelper.FromFile("icons/feather/x.svg")
                                            </HxButton>
                                        </HxButtonGroup>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <div class="row">
                    <div class="col">
                        @if (DependenciesToRemove?.Any() ?? false)
                        {
                            <small class="text-secondary">Dependency removal is only suggested for steps which have at least one source defined.</small>
                        }
                    </div>
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" OnClick="CommitAllAsync">
            @MarkupHelper.FromFile("icons/feather/check.svg")
            Commit all
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" OnClick="async () => await Modal.HideAsync()">
            @MarkupHelper.FromFile("icons/feather/x.svg")
            Close    
        </HxButton>
    </FooterTemplate>
</HxModal>
