<PageTitle>@Job?.JobName | Parameters | Biflow</PageTitle>

@if (EditJob is null || Steps is null)
{
    <div class="row mt-3">
        <div class="col text-center">
            <HxSpinner Color="ThemeColor.Secondary" />
        </div>
    </div>
}
else
{
    <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

    <div class="row">
        <div class="col">
            <HxButtonToolbar>
                <HxSubmit form="job_parameter_form" Color="ThemeColor.Success">
                    <CxIcon Icon="FeatherIcon.Save" />
                    Save
                </HxSubmit>
                <HxButton Color="ThemeColor.Secondary" CssClass="ms-3" @onclick="AddParameter">
                    <CxIcon Icon="FeatherIcon.Plus" />
                    Add parameter
                </HxButton>
            </HxButtonToolbar>
        </div>
        <div class="col text-end">
            <HxPopover Placement="PopoverPlacement.Bottom" Trigger="PopoverTrigger.Focus"
                        Content="@("<p>Job parameters can be passed to steps that support parameterization.</p><p>Use job parameters to define common parameters across all steps.</p><p>SQL steps can even edit job parameter values during execution.</p>")"
                Html>
                <HxButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto">
                    <CxIcon Icon="FeatherIcon.HelpCircle" />
                </HxButton>
            </HxPopover>
        </div>
    </div>
    
    <div class="row my-4">
        <div class="col">
            <div class="card shadow-sm">
                <EditForm id="job_parameter_form" Model="EditJob" OnValidSubmit="SubmitParameters">
                    <ObjectGraphDataAnnotationsValidator />
                    <ValidationSummary />
                    <FluentValidationValidator @ref="JobValidator" ValidatorType="typeof(JobValidator)" />
                    <table id="parameters_table" class="table">
                        <thead>
                            <tr>
                                <th>
                                    Name
                                </th>
                                <th>
                                    
                                </th>
                                <th>
                                    
                                </th>
                                <th>
                                    Inherits
                                </th>
                                <th>
                                    Captures
                                </th>
                                <th>
                                    Assigns
                                </th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!EditJob?.JobParameters?.Any() ?? true)
                            {
                                <tr><td colspan="8">No parameters</td></tr>
                            }
                            @foreach (var param in EditJob?.JobParameters ?? Enumerable.Empty<JobParameter>())
                            {
                                var inheritingSteps = GetInheritingSteps(param).ToList();
                                var capturingSteps = GetCapturingSteps(param).ToList();
                                var assigningSteps = GetAssigningSteps(param).ToList();
                                <tr>
                                    <td>
                                        <InputText class="form-control form-control-sm"
                                                   @bind-Value="param.ParameterName"
                                                   placeholder="Name"
                                                   @bind-Value:after="() => JobValidator.LetAsync(x => x.ValidateAsync())" />
                                    </td>
                                    <DynamicParameterEditComponent Parameter="param"
                                                                   OnParameterEdit="p => ExpressionEditOffcanvas.LetAsync(x => x.ShowAsync(p))">
                                        <StaticEditTemplate>
                                            <ParameterTypeValueEditComponent Parameter="param" />
                                        </StaticEditTemplate>
                                    </DynamicParameterEditComponent>
                                    <td class="@(inheritingSteps.Count == 0 ? "text-muted" : null)">
                                        @inheritingSteps.Count step(s)
                                    </td>
                                    <td class="@(capturingSteps.Count == 0 ? "text-muted" : null)">
                                        @capturingSteps.Count steps(s)
                                    </td>
                                    <td class="@(assigningSteps.Count == 0 ? "text-muted" : null)">
                                        @assigningSteps.Count step(s)
                                    </td>
                                    <td>
                                        <a class="text-body" href="javascript:void()" @onclick="() => ShowReferencingStepsAsync(param)">
                                            Show references
                                        </a>
                                    </td>
                                    <td>
                                        <HxButtonGroup Size="ButtonGroupSize.Small">
                                            <HxButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto" @onclick="() => RemoveParameter(param)">
                                                <CxIcon Icon="FeatherIcon.Delete" />
                                            </HxButton>
                                        </HxButtonGroup>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </EditForm>
            </div>
        </div>
    </div>
}

<ExpressionEditOffcanvas @ref="ExpressionEditOffcanvas" OnExpressionChanged="StateHasChanged">
    <div class="row mt-3">
        <div class="col text-secondary small">
            Job parameter expressions have the following built-in variables automatically available. They can be used to access the internal ids during execution.
            <ul>
                <li>_execution_id_ - The current execution id. An empty guid is passed when the expression is being tested.</li>
                <li>_job_id_ - The id of the current job.</li>
            </ul>
        </div>
    </div>
</ExpressionEditOffcanvas>

<HxOffcanvas @ref="ReferencingStepsOffcanvas" Title="@($"Steps referencing {ReferencingSteps.Parameter.ParameterName}")" Backdrop="OffcanvasBackdrop.False">
    <BodyTemplate>
        <h6>
            Inheriting steps
            <HxPopover Content="Steps in this job that have parameters whose value is inheriting the job parameter value"
                       Trigger="PopoverTrigger.Hover">
                <CxIcon Icon="FeatherIcon.Info" />
            </HxPopover>
        </h6>
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>
                        Step
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (!ReferencingSteps.InheritingSteps.Any())
                {
                    <tr><td class="text-muted">No inheriting steps</td></tr>
                }
                else
                {
                    foreach (var step in ReferencingSteps.InheritingSteps)
                    {
                        <tr>
                            <td>
                                <StepTypeIconComponent StepType_="step.StepType" />
                                @step.StepName
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <h6 class="mt-5">
            Capturing steps
            <HxPopover Content="Steps in this job that are capturing their return value and saving it to the job parameter"
                       Trigger="PopoverTrigger.Hover">
                <CxIcon Icon="FeatherIcon.Info" />
            </HxPopover>
        </h6>
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>
                        Step
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (!ReferencingSteps.CapturingSteps.Any())
                {
                    <tr><td class="text-muted">No capturing steps</td></tr>
                }
                else
                {
                    foreach (var step in ReferencingSteps.CapturingSteps)
                    {
                        <tr>
                            <td>
                                <StepTypeIconComponent StepType_="step.StepType" />
                                @step.StepName
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <h6 class="mt-5">
            Assigning steps
            <HxPopover Content="Steps in other jobs that are launching this job and assigning values to the job parameter"
                       Trigger="PopoverTrigger.Hover">
                <CxIcon Icon="FeatherIcon.Info" />
            </HxPopover>
        </h6>
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>
                        Job
                    </th>
                    <th>
                        Step
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (!ReferencingSteps.AssigningSteps.Any())
                {
                    <tr><td class="text-muted" colspan="2">No assigning steps</td></tr>
                }
                else
                {
                    foreach (var step in ReferencingSteps.AssigningSteps)
                    {
                        <tr>
                            <td>
                                @step.Job.JobName
                            </td>
                            <td>
                                <StepTypeIconComponent StepType_="step.StepType" />
                                @step.StepName
                            </td>
                        </tr>
                    }
                }
                
            </tbody>
        </table>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" OnClick="() => ReferencingStepsOffcanvas.LetAsync(x => x.HideAsync())" Spinner="false">
            Close
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>