@inject IDbContextFactory<AppDbContext> DbFactory
@inject IHxMessageBoxService Confirmer

@*CSS definitions for the dependency graph nodes and paths created in site.js through JSInterop.*@
<style>
    html, body {
        height: 100%;
    }
</style>

<PageTitle>@Job?.JobName | Data objects | Biflow</PageTitle>

<div class="row align-items-end mb-3">
    <div class="col-xl-7 col-lg-9 col-12">
        <HxAutosuggest @bind-Value="_filterNode"
                       @bind-Value:after="LoadGraphAsync"
                       TItem="INode"
                       TValue="INode"
                       TextSelector="x => x.Name"
                       DataProvider="ProvideSuggestionsAsync"
                       MinimumLength="0"
                       Delay="1"
                       InputSize="InputSize.Small"
                       Placeholder="Filter node"
                       autocomplete="off">
            <ItemTemplate Context="item">
                @if (item is StepNode step)
                {
                    <span class="small">
                        <StepTypeIcon StepType="step.Step.StepType" />
                        @step.Name
                    </span>
                }
                else if (item is DataNode data)
                {
                    <span class="small font-monospace">@data.Name</span>
                }
            </ItemTemplate>
            <EmptyTemplate>
                <span class="p-2">No matching nodes</span>
            </EmptyTemplate>
        </HxAutosuggest>
    </div>
    <div class="col-lg-auto d-flex flex-row align-items-end">
        <div class="form-group">
            <label class="form-label">Depth backwards</label>
            <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@("<p>The depth of traversal backwards when drawing the lineage graph starting from the filtered node.</p><p>Available only when the graph has been filtered.</p><p>0 = no limit</p>")">
                <ChildContent>
                    <span style="cursor: pointer;">
                        <SvgIcon Icon="FeatherIcon.Info" />
                    </span>
                </ChildContent>
            </HxPopover>
            <input class="form-control form-control-sm" type="number" @bind-value="FilterDepthBackwards" disabled=@(_filterNode is null) style="max-width: 9rem;" />
        </div>
        <div class="form-group ms-3">
            <label class="form-label">Depth forwards</label>
            <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@("<p>The depth of traversal forwards when drawing the lineage graph starting from the filtered node.</p><p>Available only when the graph has been filtered.</p><p>0 = no limit</p>")">
                <ChildContent>
                    <span style="cursor: pointer;">
                        <SvgIcon Icon="FeatherIcon.Info" />
                    </span>
                </ChildContent>
            </HxPopover>
            <input class="form-control form-control-sm" type="number" @bind-value="FilterDepthForwards" disabled=@(_filterNode is null) style="max-width: 9rem;" />
        </div>
        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="ms-3">
            <HxButton CssClass="btn-auto" Size="ButtonSize.Small" Color="ThemeColor.None" OnClick="LoadGraphAsync">
                Apply depth filters
            </HxButton>
            <HxDropdownButtonGroup AutoClose="DropdownAutoClose.Outside">
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                    Direction
                </HxDropdownToggleButton>
                <HxDropdownContent CssClass="p-3">
                    <div class="row mt-2" style="min-width: 12rem;">
                        <div class="col">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" id="direction_radio_admin"
                                       checked=@(_direction == DependencyGraphDirection.LeftToRight)
                                       @onchange="@(_ => SetDirectionAsync(DependencyGraphDirection.LeftToRight))">
                                <label class="form-check-label fw-normal" for="direction_radio_admin">
                                    <SvgIcon Icon="FeatherIcon.ArrowRight" />
                                    Left to right
                                </label>
                            </div>
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="radio" id="direction_radio_editor"
                                       checked=@(_direction == DependencyGraphDirection.RightToLeft)
                                       @onchange="@(_ => SetDirectionAsync(DependencyGraphDirection.RightToLeft))">
                                <label class="form-check-label fw-normal" for="direction_radio_editor">
                                    <SvgIcon Icon="FeatherIcon.ArrowLeft" />
                                    Right to left
                                </label>
                            </div>
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="radio" id="direction_radio_operator"
                                       checked=@(_direction == DependencyGraphDirection.TopToBottom)
                                       @onchange="@(_ => SetDirectionAsync(DependencyGraphDirection.TopToBottom))">
                                <label class="form-check-label fw-normal" for="direction_radio_operator">
                                    <SvgIcon Icon="FeatherIcon.ArrowDown" />
                                    Top to bottom
                                </label>
                            </div>
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="radio" id="direction_radio_viewer"
                                       checked=@(_direction == DependencyGraphDirection.BottomToTop)
                                       @onchange="@(_ => SetDirectionAsync(DependencyGraphDirection.BottomToTop))">
                                <label class="form-check-label fw-normal" for="direction_radio_viewer">
                                    <SvgIcon Icon="FeatherIcon.ArrowUp" />
                                    Bottom to top
                                </label>
                            </div>
                        </div>
                    </div>
                </HxDropdownContent>
            </HxDropdownButtonGroup>
        </HxButtonGroup>        
    </div>
</div>

@if (Job is not null)
{
    <DependencyGraph @ref="_dependencyGraph"
                     TItem="INode"
                     AfterRender="LoadGraphAsync"
                     ItemFromNodeIdSelector="nodeId => _graphNodes.FirstOrDefault(node => node.Id == nodeId)"
                     CssClass="dependency-graph">
        <ContextMenuTemplate Context="node">
            <li>
                <span class="dropdown-item" role="button" @onclick="async () => { _filterNode = node; await LoadGraphAsync();}">
                    <SvgIcon Icon="FeatherIcon.Filter" />
                    Limit graph to this
                </span>
            </li>
        </ContextMenuTemplate>
    </DependencyGraph>
}

@code {
    [CascadingParameter] public Job? Job { get; set; }

    [CascadingParameter] public List<Step>? Steps { get; set; }

    private DependencyGraph<INode>? _dependencyGraph;
    private INode? _filterNode;
    private List<INode> _graphNodes = [];
    private DependencyGraphDirection _direction = DependencyGraphDirection.LeftToRight;

    private int FilterDepthBackwards
    {
        get;
        set => field = value >= 0 ? value : field;
    }

    private int FilterDepthForwards
    {
        get;
        set => field = value >= 0 ? value : field;
    }

    private Task SetDirectionAsync(DependencyGraphDirection direction)
    {
        if (_direction == direction)
        {
            return Task.CompletedTask;
        }
        _direction = direction;
        return LoadGraphAsync();
    }

    private async Task LoadGraphAsync()
    {
        ArgumentNullException.ThrowIfNull(Job);
        ArgumentNullException.ThrowIfNull(Steps);
        ArgumentNullException.ThrowIfNull(_dependencyGraph);

        var uris = Steps
            .SelectMany(step => step.DataObjects)
            .Select(d => d.DataObject.ObjectUri)
            .Distinct()
            .ToArray();

        var stepNodes = Steps.Select(step =>
        {
            var node = new DependencyGraphNode(
                Id: step.StepId.ToString(),
                Name: step.StepName ?? "",
                CssClass: $"{(step.IsEnabled ? "enabled" : "disabled")} internal {(_filterNode?.Id == step.StepId.ToString() ? "selected" : null)}",
                TooltipText: step.StepType.ToString(),
                EnableOnClick: true
            );
            return new StepNode(step.StepId.ToString(), step.StepName ?? "", node, step) as INode;
        });
        var dataNodes = uris.Select(uri =>
        {
            var node = new DependencyGraphNode(
                Id: uri,
                Name: uri,
                CssClass: $"font-monospace internal {(_filterNode?.Id == uri ? "selected" : null)}",
                TooltipText: "Data object",
                EnableOnClick: true,
                Rounded: false
            );
            return new DataNode(uri, uri, node, uri) as INode;
        });

        _graphNodes = stepNodes
            .Concat(dataNodes)
            .ToList();

        // Replace filterNode with a new reference from graphNodes so that it has the selected css class.
        _filterNode = _graphNodes.FirstOrDefault(n => n.Id == _filterNode?.Id) ?? _filterNode;

        List<DependencyGraphNode> nodes;
        List<DependencyGraphEdge> edges;
        if (_filterNode is null)
        {
            nodes = _graphNodes.Select(n => n.Node).ToList();
            edges = Steps
                .SelectMany(step =>
                {
                    var sources = step.DataObjects
                        .Where(d => d.ReferenceType == DataObjectReferenceType.Source)
                        .Select(s => new DependencyGraphEdge(
                            Id: step.StepId.ToString(), DependsOnId: s.DataObject.ObjectUri, CssClass: ""));
                    var targets = step.DataObjects
                        .Where(d => d.ReferenceType == DataObjectReferenceType.Target)
                        .Select(t => new DependencyGraphEdge(
                            Id: t.DataObject.ObjectUri, DependsOnId: step.StepId.ToString(), CssClass: ""));
                    return sources.Concat(targets);
                })
                .ToList();
        }
        else
        {
            var iNodes = RecurseDependenciesBackward(_filterNode, _graphNodes, new(), 0);
            iNodes.Remove(_filterNode);
            iNodes = RecurseDependenciesForward(_filterNode, _graphNodes, iNodes, 0);
            nodes = iNodes.Select(n => n.Node).ToList();
            edges = Steps
                .SelectMany(step =>
                {
                    var sources = step.DataObjects
                        .Where(d => d.ReferenceType == DataObjectReferenceType.Source)
                        .Where(d => iNodes.Any(n => n.Id == d.DataObject.ObjectUri) && iNodes.Any(n => n.Id == d.StepId.ToString()))
                        .Select(s => new DependencyGraphEdge(
                            Id: step.StepId.ToString(), DependsOnId: s.DataObject.ObjectUri, CssClass: ""));
                    var targets = step.DataObjects
                        .Where(d => d.ReferenceType == DataObjectReferenceType.Target)
                        .Where(d => iNodes.Any(n => n.Id == d.DataObject.ObjectUri) && iNodes.Any(n => n.Id == d.StepId.ToString()))
                        .Select(t => new DependencyGraphEdge(
                            Id: t.DataObject.ObjectUri, DependsOnId: step.StepId.ToString(), CssClass: ""));
                    return sources.Concat(targets);
                })
                .ToList();
        }

        await _dependencyGraph.DrawAsync(nodes, edges, _direction);
    }

    private List<INode> RecurseDependenciesBackward(INode node, List<INode> allNodes, List<INode> processedNodes, int depth)
    {
        ArgumentNullException.ThrowIfNull(Steps);

        // If the node was already handled, return.
        // This way we do not loop indefinitely in case of circular dependencies.
        if (processedNodes.Any(n => n.Id == node.Id))
        {
            return processedNodes;
        }

        if (depth++ > FilterDepthBackwards && FilterDepthBackwards > 0)
        {
            return processedNodes;
        }

        processedNodes.Add(node);

        var dependencyNodes = node switch
        {
            StepNode step => allNodes
                .OfType<DataNode>()
                .Where(dn => step.Step.DataObjects.Any(d => d.ReferenceType == DataObjectReferenceType.Source && d.DataObject.ObjectUri == dn.Uri))
                .Cast<INode>()
                .ToList(),
            DataNode data => allNodes
                .OfType<StepNode>()
                .Where(sn => sn.Step.DataObjects.Any(d => d.ReferenceType == DataObjectReferenceType.Target && d.DataObject.ObjectUri == data.Uri))
                .Cast<INode>()
                .ToList(),
            _ => []
        };

        // Loop through the dependencies and handle them recursively.
        foreach (var dependencyNode in dependencyNodes)
        {
            RecurseDependenciesBackward(dependencyNode, allNodes, processedNodes, depth);
        }

        return processedNodes;
    }

    private List<INode> RecurseDependenciesForward(INode node, List<INode> allNodes, List<INode> processedNodes, int depth)
    {
        ArgumentNullException.ThrowIfNull(Steps);

        if (processedNodes.Any(n => n.Id == node.Id))
        {
            return processedNodes;
        }

        if (depth++ > FilterDepthForwards && FilterDepthForwards > 0)
        {
            return processedNodes;
        }

        processedNodes.Add(node);

        var dependencyNodes = node switch
        {
            StepNode step => allNodes
                .OfType<DataNode>()
                .Where(dn => step.Step.DataObjects.Any(d => d.ReferenceType == DataObjectReferenceType.Target && d.DataObject.ObjectUri == dn.Uri))
                .Cast<INode>()
                .ToList(),
            DataNode data => allNodes
                .OfType<StepNode>()
                .Where(sn => sn.Step.DataObjects.Any(d => d.ReferenceType == DataObjectReferenceType.Source && d.DataObject.ObjectUri == data.Uri))
                .Cast<INode>()
                .ToList(),
            _ => []
        };

        foreach (var dependencyNode in dependencyNodes)
        {
            RecurseDependenciesForward(dependencyNode, allNodes, processedNodes, depth);
        }

        return processedNodes;
    }

    private Task<AutosuggestDataProviderResult<INode>> ProvideSuggestionsAsync(AutosuggestDataProviderRequest request)
    {
        return Task.FromResult(new AutosuggestDataProviderResult<INode>
        {
            Data = _graphNodes.Where(n => n.Name.ContainsIgnoreCase(request.UserInput))
        });
    }

    private interface INode
    {
        public string Id { get; }

        public string Name { get; }

        public DependencyGraphNode Node { get; }
    }

    private record StepNode(string Id, string Name, DependencyGraphNode Node, Step Step) : INode;

    private record DataNode(string Id, string Name, DependencyGraphNode Node, string Uri) : INode;
}
