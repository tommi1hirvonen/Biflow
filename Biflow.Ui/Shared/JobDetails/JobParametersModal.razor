@implements IDisposable

@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject IHxMessengerService Messenger
@inject IJSRuntime JS

<HxModal @ref="Modal" Size="ModalSize.Large" Title="Edit job parameters" Scrollable="true" BodyCssClass="pt-0">
    <BodyTemplate>
        
        @if (EditJob is not null && Steps is not null)
        {
            var type = ParameterValueType.String;
            <div class="row py-3 mt-0 sticky-top" style="background-color: var(--sticky-top-modal-bg);">
                <div class="col">
                    <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" @onclick="() => EditJob?.JobParameters.Add(new JobParameter { ParameterValueType = type })">
                        <CxIcon Icon="FeatherIcon.Plus" />
                        Add parameter
                    </HxButton>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <p class="text-danger mt-1">@ErrorMessage</p>
                    }
                </div>
                <div class="col text-end">
                    <HxPopover Placement="PopoverPlacement.Bottom" Trigger="PopoverTrigger.Focus"
                                Content="@("<p>Job parameters can be passed to steps that support parameterization.</p><p>Use job parameters to define common parameters across all steps.</p><p>SQL steps can even edit job parameter values during execution.</p>")"
                        Html>
                        <HxButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto">
                            <CxIcon Icon="FeatherIcon.HelpCircle" />
                        </HxButton>
                    </HxPopover>
                </div>
            </div>
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm id="job_parameter_form" Model="EditJob" OnValidSubmit="SubmitParameters">
                <table id="parameters_table" class="table table-sm">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Value</th>
                            <th>Inheriting steps</th>
                            <th>Assigning steps</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!EditJob?.JobParameters?.Any() ?? true)
                        {
                            <tr><td colspan="5">No parameters</td></tr>
                        }
                        @foreach (var param in EditJob?.JobParameters ?? Enumerable.Empty<JobParameter>())
                        {
                            var inheritingStepCount = Steps.Select(s => s as ParameterizedStep).Count(s => s?.StepParameters.Any(p => p.InheritFromJobParameterId == param.ParameterId) ?? false);
                            <tr>
                                <td>
                                    <HxInputText InputSize="InputSize.Small" @bind-Value="param.ParameterName" placeholder="Name"></HxInputText>
                                </td>
                                <ParameterTypeValueEditComponent Parameter="param" />
                                <td>
                                    @if (inheritingStepCount > 0)
                                    {
                                        <HxPopover Title="@($"Steps inheriting {param.ParameterName}")"
                                                Content="@string.Join(", ", Steps.Where(s => s is ParameterizedStep ps && ps.StepParameters.Any(p => p.InheritFromJobParameterId == param.ParameterId)).Select(s => s.StepName))"
                                                Trigger="PopoverTrigger.Focus">
                                            <ChildContent>
                                                <a href="javascript:void(0)">
                                                    @inheritingStepCount
                                                    inheriting step(s)
                                                </a>
                                            </ChildContent>
                                        </HxPopover>
                                    }
                                    else
                                    {
                                        <span>0 inheriting steps</span>   
                                    }
                                </td>
                                <td>
                                    @if (param.AssigningStepParameters.Count > 0)
                                    {
                                        <HxPopover Title="@($"Steps assigning {param.ParameterName}")"
                                       Content="@string.Join(", ", param.AssigningStepParameters.Select(p => p.Step.StepName))"
                                       Trigger="PopoverTrigger.Focus">
                                            <ChildContent>
                                                <a href="javascript:void(0)">
                                                    @param.AssigningStepParameters.Count
                                                    assigning step(s)
                                                </a>
                                            </ChildContent>
                                        </HxPopover>
                                    }
                                    else
                                    {
                                        <span>0 assigning steps</span>
                                    }
                                </td>
                                <td>
                                    <HxButtonGroup Size="ButtonGroupSize.Small">
                                        <HxButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto" @onclick="() => EditJob?.JobParameters.Remove(param)">
                                            <CxIcon Icon="FeatherIcon.Delete" />
                                        </HxButton>
                                    </HxButtonGroup>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </EditForm>
        }
    </BodyTemplate>

    <FooterTemplate>
        <HxSubmit form="job_parameter_form" Color="ThemeColor.Success">Save</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [CascadingParameter] public List<Step>? Steps { get; set; }

    [Parameter] public Action<ICollection<JobParameter>>? OnJobParametersSet { get; set; }

    private Job? EditJob { get; set; }

    private HxModal? Modal { get; set; }

    private BiflowContext? Context { get; set; }

    private string? ErrorMessage { get; set; }

    private async Task SubmitParameters()
    {
        ErrorMessage = null;
        var (paramResult, paramMessage) = ParametersCheck();
        if (!paramResult)
        {
            ErrorMessage = paramMessage;
            return;
        }

        foreach (var param in EditJob?.JobParameters ?? Enumerable.Empty<JobParameter>())
        {
            param.SetParameterValue();

            // Update the referencing job step parameter names to match the possibly changed new name.
            foreach (var referencingJobStepParam in param.AssigningStepParameters)
            {
                referencingJobStepParam.ParameterName = param.ParameterName;
            }
        }

        try
        {
            ArgumentNullException.ThrowIfNull(Context);
            await Context.SaveChangesAsync();
            await Modal.LetAsync(x => x.HideAsync());
            if (EditJob is not null)
            {
                OnJobParametersSet?.Invoke(EditJob.JobParameters.OrderBy(p => p.ParameterName).ToList());
            }
            Context?.Dispose();
            Context = null;
            EditJob = null;
        }
        catch (DbUpdateConcurrencyException)
        {
            Messenger.AddError("Concurrency error",
                "The job has been modified outside of this session. Reload the page to view the most recent settings.");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error saving parameters", $"{ex.Message}\n{ex.InnerException?.Message}");
        }

    }

    private (bool Result, string? Message) ParametersCheck()
    {
        var parameters = EditJob?.JobParameters
            .OrderBy(param => param.ParameterName)
            .ToList() ?? Enumerable.Empty<JobParameter>().ToList();
        foreach (var param in parameters)
        {
            if (string.IsNullOrEmpty(param.ParameterName))
            {
                return (false, "Parameter name cannot be empty");
            }
        }
        for (var i = 0; i < parameters.Count - 1; i++)
        {
            if (parameters[i + 1].ParameterName == parameters[i].ParameterName)
            {
                return (false, "Duplicate parameter names");
            }
        }

        return (true, null);
    }

    public async Task ShowAsync(Guid jobId)
    {
        await Modal.LetAsync(x => x.ShowAsync());
        Context?.Dispose();
        Context = DbContextFactory.CreateDbContext();
        EditJob = await Context.Jobs
            .Include(j => j.JobParameters)
            .ThenInclude(p => p.AssigningStepParameters)
            .ThenInclude(p => p.Step)
            .FirstAsync(j => j.JobId == jobId);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }

    public void Dispose() => Context?.Dispose();
}
