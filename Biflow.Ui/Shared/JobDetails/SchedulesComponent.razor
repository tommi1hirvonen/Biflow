@inject IDbContextFactory<BiflowContext> DbFactory
@inject ISchedulerService SchedulerService
@inject MarkupHelperService MarkupHelper
@inject IHxMessengerService Messenger

<style>
    .white-space-pre {
        white-space: pre;
    }
</style>

<PageTitle>@Job?.JobName | Schedules | Biflow</PageTitle>

<AuthorizeView Roles="Admin, Editor, Operator">
    <HxButton Color="ThemeColor.Success" @onclick="async () => { EditScheduleId = Guid.Empty; await EditModal.ShowAsync(); }">
        Add schedule
    </HxButton>
</AuthorizeView>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Enabled
                </th>
                <th>
                    Cron expression
                </th>
                <th>
                    Next execution
                </th>
                <th>
                    Tag filters
                </th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Schedules is null)
            {
                <tr><td colspan="10">Loading...</td></tr>
            }
            else if (Schedules.Count == 0)
            {
                <tr><td colspan="10">No schedules</td></tr>
            }
            else
            {
                @foreach (var item in Schedules)
                {
                    <tr class="@(item.IsEnabled ? null : "disabled")">
                        <td class="align-middle">
                            <div class="form-check form-switch">
                                <AuthorizeView Roles="Admin, Editor, Operator">
                                    <input type="checkbox" class="form-check-input" id="@item.ScheduleId" checked=@item.IsEnabled @onchange="args => ToggleEnabled(args, item)">
                                    <label class="form-check-label" for="@item.ScheduleId"></label>
                                </AuthorizeView>
                                <AuthorizeView Roles="Viewer">
                                    <input type="checkbox" class="form-check-input" disabled checked=@item.IsEnabled>
                                    <label class="form-check-label" for="@item.ScheduleId"></label>
                                </AuthorizeView>
                            </div>
                        </td>
                        <td>
                            <div class="d-inline-flex">
                                @item.CronExpression
                                &nbsp;&nbsp;
                                <HxTooltip Placement="TooltipPlacement.Auto"
                                           Text="@item.GetScheduleDescription()">
                                    @MarkupHelper.FromFile("icons/feather/info.svg")
                                </HxTooltip>
                            </div>
                        </td>
                        <td>
                            <div class="d-inline-flex" style="@(!item.IsEnabled || (!Job?.IsEnabled ?? false) ? "color: #ccc;" : null)">
                                @item.GetNextFireTime()
                                @(!item.IsEnabled ? "(Schedule disabled)" : null)
                                @(!Job?.IsEnabled ?? false ? "(Job disabled)" : null)
                                &nbsp;&nbsp;
                                <HxTooltip Placement="TooltipPlacement.Auto"
                                           Text="@("Next execution(s) (first 10):\n" + string.Join("\n", item.GetNextFireTimes(15)))"
                                           CssClass="white-space-pre">
                                    @MarkupHelper.FromFile("icons/feather/info.svg")
                                </HxTooltip>
                            </div>
                        </td>
                        <td class="align-middle">
                            <AuthorizeView Roles="Admin, Editor, Operator">
                                <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                    <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" CssClass="btn-row"
                                              @onclick="async () => { EditScheduleId = item.ScheduleId; await EditModal.ShowAsync(); }">
                                        @MarkupHelper.FromFile("icons/feather/edit-2.svg")
                                    </HxButton>
                                </HxButtonGroup>
                            </AuthorizeView>
                            @if (!item.Tags.Any())
                            {
                                <span class="text-secondary ms-2">No tag filters</span>
                            }
                            @foreach (var tag in item.Tags.OrderBy(t => t.TagName))
                            {
                                <TagComponent Tag="tag" CssClass="m-1" />
                            }
                        </td>
                        <td align="center">
                            <AuthorizeView Roles="Admin, Editor, Operator">
                                <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                    <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" aria-label="delete" CssClass="btn-row" @onclick="() => DeleteSchedule(item)">
                                        @MarkupHelper.FromFile("icons/feather/delete.svg")
                                    </HxButton>
                                </HxButtonGroup>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<AuthorizeView Roles="Admin, Editor, Operator">
    <ScheduleEditModal @ref="EditModal" Job="Job" ScheduleId="EditScheduleId" OnSubmit="OnScheduleSubmit" />
</AuthorizeView>

@code {
    [Parameter]
    public Job? Job { get; set; }

    private Guid PrevId { get; set; }

    private List<Schedule>? Schedules { get; set; }

    private ScheduleEditModal EditModal { get; set; } = null!;
    private Guid EditScheduleId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Job is not null && Job.JobId != PrevId)
        {
            PrevId = Job.JobId;
            using var context = DbFactory.CreateDbContext();
            Schedules = await context.Schedules
                .AsNoTrackingWithIdentityResolution()
                .Include(schedule => schedule.Tags)
                .Where(schedule => schedule.JobId == Job.JobId)
                .OrderBy(schedule => schedule.CronExpression)
                .ToListAsync();
        }
    }

    private async Task ToggleEnabled(ChangeEventArgs args, Schedule schedule)
    {
        bool value = (bool)args.Value!;
        try
        {
            using var context = DbFactory.CreateDbContext();
            using var transaction = context.Database.BeginTransaction();
            context.Attach(schedule);
            schedule.IsEnabled = !schedule.IsEnabled;
            await context.SaveChangesAsync();
            try
            {
                await SchedulerService.ToggleScheduleEnabledAsync(schedule, value);
                await transaction.CommitAsync();
            }
            catch (Exception)
            {
                await transaction.RollbackAsync();
                schedule.IsEnabled = !schedule.IsEnabled;
                throw;
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling schedule", ex.Message);
        }
    }

    private void OnScheduleSubmit(Schedule schedule)
    {
        Schedules?.RemoveAll(s => s.ScheduleId == schedule.ScheduleId);
        Schedules?.Add(schedule);
    }

    private async Task DeleteSchedule(Schedule schedule)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            using var transaction = context.Database.BeginTransaction();
            context.Schedules.Remove(schedule);
            await context.SaveChangesAsync();
            try
            {
                await SchedulerService.RemoveScheduleAsync(schedule);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }

            Schedules?.Remove(schedule);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting schedule", ex.Message);
        }
    }

}
