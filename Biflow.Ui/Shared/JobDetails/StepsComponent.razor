
<PageTitle>@Job?.JobName | Steps | Biflow</PageTitle>

<div class="sticky-top pt-2 bg-body rounded-4" style="margin-left: -3px; margin-right: -3px; padding-left: 3px; padding-right: 3px;">
    <div class="row justify-content-between gap-3">
        <div class="col-auto">
            <div class="btn-toolbar">
                <AuthorizeView Roles="Admin, Editor">
                    <HxDropdownButtonGroup CssClass="me-3">
                        <HxDropdownToggleButton Color="ThemeColor.Success" Enabled="Steps is not null && Job is not null && Jobs is not null">
                            Add step
                        </HxDropdownToggleButton>
                        <HxDropdownMenu>
                            <HxDropdownHeader>Step type</HxDropdownHeader>
                            @foreach (var stepType in Enum.GetValues<StepType>())
                            {
                                <HxDropdownItem @onclick="() => ShowNewStepModal(stepType)"
                                            Enabled="!IsStepTypeDisabled(stepType)">
                                    <StepTypeIconComponent StepType_="stepType" />
                                    @stepType
                                </HxDropdownItem>
                            }
                        </HxDropdownMenu>
                    </HxDropdownButtonGroup>
                </AuthorizeView>
                <AuthorizeView Roles="Admin, Editor, Operator">
                    <HxButton Color="ThemeColor.Primary"
                              Enabled="Steps is not null && Job is not null && Jobs is not null"
                              @onclick="() => ExecuteModal.LetAsync(x => x.ShowAsync(SelectedSteps))">
                        <CxIcon Icon="FeatherIcon.Play" />
                        Execute
                    </HxButton>
                </AuthorizeView>
            </div>
        </div>
        <div class="col-auto">
            @if (Job is not null)
            {
                <div class="alert alert-secondary mb-0 py-2" role="alert">
                    @if (Job.UseDependencyMode)
                    {
                        <span>
                            Execution mode:
                            &nbsp;
                            <CxIcon Icon="LucideIcon.Network" />
                            Dependency mode
                        </span>
                    }
                    else
                    {
                        <span>
                            Execution mode:
                            &nbsp;
                            <CxIcon Icon="FeatherIcon.Layers" />
                            Execution phase
                        </span>
                    }
                </div>
            }
        </div>
    </div>

    @if (LastStartedExecutionId is not null)
    {
        <div class="alert alert-success mt-3 show alert-dismissible col-xl-6" role="alert">
            <CxIcon Icon="FeatherIcon.CheckCircle" />
            Execution started successfully – <a href="executions/@LastStartedExecutionId" class="alert-link">view execution</a>
            <button type="button" class="btn-close" @onclick="() => LastStartedExecutionId = null"></button>
        </div>
    }

    <div class="row mt-3">
        <div class="col-auto">
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_all"
                       checked=@(stateFilter == StateFilter.All)
                       @onchange="() => stateFilter = StateFilter.All">
                <label class="form-check-label" for="radio_all">All</label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_enabled"
                       checked=@(stateFilter == StateFilter.Enabled)
                       @onchange="() => stateFilter = StateFilter.Enabled">
                <label class="form-check-label" for="radio_enabled">Enabled</label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_disabled"
                       checked=@(stateFilter == StateFilter.Disabled)
                       @onchange="() => stateFilter = StateFilter.Disabled">
                <label class="form-check-label" for="radio_disabled">Disabled</label>
            </div>
        </div>
        <div class="col-lg mt-2 mt-lg-0">
            <CxIcon Icon="FeatherIcon.Tag" />
            <span class="me-3">Tags</span>
            @if (!Tags.Any())
            {
                <small class="text-secondary me-2">No tags</small>
            }
            @foreach (var tag in Tags)
            {
                <TagComponent Tag="tag"
                              Selected="TagsFilterSet.Contains(tag)"
                              CssClass="mx-1"
                              Style="cursor: pointer;"
                              OnClick="() => { if (TagsFilterSet.Contains(tag)) TagsFilterSet.Remove(tag); else TagsFilterSet.Add(tag); }" />
            }
        </div>
    </div>

    <div class="row mt-3">
        <div class="col">
            <div class="input-group input-group-sm me-3">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.Filter" />
                </div>
                <input type="search" class="form-control" @bind-value="StepNameFilter" @bind-value:event="oninput" placeholder="Filter by name" />
                <input type="search" class="form-control" @bind-value="StepDescriptionFilter" @bind-value:event="oninput" placeholder="Filter by description" />
                <input type="search" class="form-control" @bind-value="SqlStatementFilter" @bind-value:event="oninput" placeholder="Filter by SQL statement" />
            </div>
        </div>
        
        <div class="col-xxl mt-3 mt-xxl-0 d-inline-flex align-items-center">
            <HxButtonGroup Size="ButtonGroupSize.Small">
                <FilterDropdown TItem="StepType"
                                FilterSet="StepTypeFilter"
                                Items="Steps?.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tool" />
                        Step type
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIconComponent StepType_="item" />
                        @item.ToString()
                    </ItemTemplate>
                </FilterDropdown>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="() => AdvancedFiltersOffcanvas.LetAsync(x => x.ShowAsync())">
                    <CxIcon Icon="FeatherIcon.MoreHorizontal" />
                    Advanced filters
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="async () =>
                    {
                        TagsFilterSet.Clear();
                        StepTypeFilter.Clear();
                        ConnectionFilter.Clear();
                        StepNameFilter = string.Empty;
                        StepDescriptionFilter = string.Empty;
                        SqlStatementFilter = string.Empty;
                        await AdvancedFiltersOffcanvas.LetAsync(x => x.ClearAsync());
                    }">
                    <CxIcon Icon="FeatherIcon.X" />
                    Clear
                </HxButton>
            </HxButtonGroup>
            <div class="form-check ms-4">
                <input type="checkbox" class="form-check-input" id="show_details"
                       checked=@ShowDetails
                       @onchange="args => ShowDetails = (bool)args.Value!">
                <label class="form-check-label" for="show_details">Show details</label>
            </div>
        </div>
        
    </div>

    <div class="row mt-3">
        <div class="col">
            <ol class="list-group shadow-sm">
                @if (Steps is null || Jobs is null || Job is null)
                {
                    <li class="list-group-item list-group-header">
                        <div class="row">
                            <div class="col text-center">
                                <HxSpinner Color="ThemeColor.Secondary" />
                            </div>
                        </div>
                    </li>
                }
                else
                {
                    var count = FilteredSteps.Count();
                    var disabledCount = FilteredSteps.Where(s => !s.IsEnabled).Count();
                    var countText = Steps.Count switch
                    {
                        0 => "No steps",
                        1 => count == Steps.Count ? $"Showing {count} step" : $"Showing {count} of {Steps.Count} step",
                        > 1 => count == Steps.Count ? $"Showing all {Steps.Count} steps" : $"Showing {count} of {Steps.Count} steps",
                        _ => string.Empty
                    };
                    var disabledCountText = disabledCount switch { 0 => "No disabled steps", 1 => "1 disabled step", _ => $"{disabledCount} disabled steps" };
                    var selectedText = SelectedSteps.Count switch { 1 => $"{SelectedSteps.Count} selected step", > 1 => $"{SelectedSteps.Count} selected steps", _ => "" };
                    <li class="list-group-item list-group-header">
                        <div class="row align-items-center" style="min-height: 31px;">
                            <AuthorizeView Roles="Admin, Editor, Operator">
                                <div class="col text-muted d-flex align-items-center">
                                    <TriStateCheckbox Checked="@(SelectedSteps.Count == count && Steps.Any() && count > 0)"
                                                      Indeterminate="@(SelectedSteps.Any() && SelectedSteps.Count != count)"
                                                      CheckedChanged="ToggleAllStepsSelected" />
                                    <div class="fw-bold small">@selectedText</div>
                                </div>
                            </AuthorizeView>
                            <AuthorizeView Roles="Admin, Editor">
                                <div class="col">
                                    @if (SelectedSteps.Any())
                                    {
                                        <div class="btn-group">
                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small">
                                                    <CxIcon Icon="FeatherIcon.Trash2" />
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownHeader>Delete selected steps?</HxDropdownHeader>
                                                    <HxDropdownItem @onclick="DeleteSelectedSteps">Confirm</HxDropdownItem>
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>
                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small">
                                                    <CxIcon Icon="FeatherIcon.Copy" />
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu CssClass="dropdown-menu-right">
                                                    <HxDropdownHeader>Copy to</HxDropdownHeader>
                                                    <HxDropdownItem @onclick="() => CopySelectedSteps(Job)">here</HxDropdownItem>
                                                    <HxDropdownDivider></HxDropdownDivider>
                                                    @foreach (var job in Jobs.Where(job => job.JobId != Job.JobId))
                                                    {
                                                        <HxDropdownItem @onclick="() => CopySelectedSteps(job)">@job.JobName</HxDropdownItem>
                                                    }
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>
                                        </div>
                                    }
                                </div>
                            </AuthorizeView>
                            <div class="col text-muted text-center fw-bold small">
                                 @countText
                            </div>
                            <div class="col text-muted text-end fw-bold small">
                                @if (stateFilter == StateFilter.All)
                                {
                                    @disabledCountText
                                }
                            </div>
                        </div>
                    </li>
                }
            </ol>
        </div>
    </div>
</div>


@if (Steps is not null && Jobs is not null && Job is not null)
{
    <div class="row mb-3 mt-3">
        <div class="col">
            <ol class="list-group shadow-sm">
                @foreach (var item in FilteredSteps)
                {
                    <li class="list-group-item list-group-item-action py-2 @(item.IsEnabled ? null : "step-item-disabled")">
                        <div class="row">
                            <div class="col-xl-5 col-md-6 col-10 pl-2 d-flex align-items-center">
                                <AuthorizeView Roles="Admin, Editor, Operator">
                                    <div class="form-check me-2">
                                        <input type="checkbox" class="form-check-input" id="select_step_@item.StepId"
                                               checked=@SelectedSteps.Contains(item)
                                       @onchange="args => { if (SelectedSteps.Contains(item)) SelectedSteps.Remove(item); else SelectedSteps.Add(item); }">
                                        <label class="form-check-label" for="select_step_@item.StepId"></label>
                                    </div>
                                </AuthorizeView>
                                <AuthorizeView Roles="Admin, Editor">
                                    <a class="text-body" href="javascript:void(0)" @onclick="() => ShowEditModal(item)">
                                        <StepTypeIconComponent StepType_="@item.StepType" />
                                        &nbsp;
                                        <HighlightableText Text="@item.StepName" PartToHighlight="@StepNameFilter" />
                                    </a>
                                </AuthorizeView>
                                <AuthorizeView Roles="Operator, Viewer">
                                    <span>
                                        <StepTypeIconComponent StepType_="@item.StepType" />
                                        <HighlightableText Text="@item.StepName" PartToHighlight="@StepNameFilter" />
                                    </span>
                                </AuthorizeView>
                            </div>
                            <div class="col-xl-1 col-2 d-inline-flex align-items-center justify-content-between">
                                @if (item.ExecutionConditionParameters.Any(p => p.JobParameterId is not null)
                               || item is IHasStepParameters hasParams && hasParams.StepParameters.Any(p => p.InheritFromJobParameterId is not null || p.ExpressionParameters.Any(ep => ep.InheritFromJobParameter is not null))
                               || item is SqlStep sql && sql.ResultCaptureJobParameterId is not null)
                                {
                                    <div title="Step uses job parameters" class="text-body">
                                        <CxIcon Icon="FeatherIcon.AtSign" />
                                    </div>
                                }
                                else
                                {
                                    <div></div>
                                }
                                @if (!string.IsNullOrWhiteSpace(item.ExecutionConditionExpression.Expression))
                                {
                                    <div title="Execution condition enabled" class="text-body">
                                        <CxIcon Icon="FeatherIcon.CheckSquare" />
                                    </div>
                                }
                                else
                                {
                                    <div></div>
                                }
                                <div class="justify-content-end @(Job.UseDependencyMode ? "text-body-tertiary" : "text-body")">
                                    @item.ExecutionPhase
                                    &nbsp;
                                    <CxIcon Icon="FeatherIcon.Layers" />
                                </div>
                            </div>
                            <div class="col-xl-3 col-md-4 d-inline-flex align-items-center justify-content-end">
                                <AuthorizeView Roles="Admin, Editor">
                                    <div class="form-check form-switch">
                                        <input type="checkbox" class="form-check-input" id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                        <label class="form-check-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                    </div>
                                </AuthorizeView>
                                <AuthorizeView Roles="Operator, Viewer">
                                    <div class="form-check form-switch">
                                        <input type="checkbox" class="form-check-input" disabled id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)">
                                        <label class="form-check-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                    </div>
                                </AuthorizeView>
                                <div class="btn-group ms-2">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="() => StepHistoryOffcanvas.LetAsync(x => x.ShowAsync(item.StepId))">
                                        <CxIcon Icon="LucideIcon.History" />
                                    </HxButton>

                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="() => StepDetailsModal.LetAsync(x => x.ShowAsync(item))">
                                        <CxIcon Icon="FeatherIcon.Info" />
                                    </HxButton>

                                    @{
                                        var navigateToDependencies = () => NavigationManager.NavigateTo($"jobs/{Job?.JobId}/dependencies/{item.StepId}");
                                    }
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="navigateToDependencies">
                                        <CxIcon Icon="LucideIcon.Network" />
                                    </HxButton>

                                    <AuthorizeView Roles="Admin, Editor">
                                        <HxDropdownButtonGroup>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                                <CxIcon Icon="FeatherIcon.Copy" />
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu CssClass="dropdown-menu-right">
                                                <HxDropdownHeader>Copy to</HxDropdownHeader>
                                                <HxDropdownItem @onclick="() => CopyStep(item, Job)">here</HxDropdownItem>
                                                <HxDropdownDivider></HxDropdownDivider>
                                                @foreach (var job in Jobs.Where(job => job.JobId != Job.JobId))
                                                {
                                                    <HxDropdownItem @onclick="() => CopyStep(item, job)">@job.JobName</HxDropdownItem>
                                                }
                                            </HxDropdownMenu>
                                        </HxDropdownButtonGroup>

                                        <HxDropdownButtonGroup>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                                <CxIcon Icon="FeatherIcon.Trash2" />
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu CssClass="dropdown-menu-right">
                                                <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                <HxDropdownItem @onclick="() => DeleteStep(item)">Confirm</HxDropdownItem>
                                            </HxDropdownMenu>
                                        </HxDropdownButtonGroup>
                                    </AuthorizeView>
                                </div>
                            </div>

                            <div class="col-xl-3 d-flex flex-wrap align-items-center justify-content-end">
                                @foreach (var tag in item.Tags.OrderBy(t => t.TagName))
                                {
                                    <TagComponent Tag="tag" CssClass="m-1" />
                                }
                            </div>
                        </div>
                        @if (ShowDetails || !string.IsNullOrEmpty(StepDescriptionFilter))
                        {
                            <div class="row">
                                <div class="col text-truncate">
                                    <small class="text-secondary"><em><HighlightableText Text="@item.StepDescription" PartToHighlight="@StepDescriptionFilter" /></em></small>
                                </div>
                            </div>
                        }
                        @if ((ShowDetails || !string.IsNullOrEmpty(SqlStatementFilter)) && item is SqlStep sqlStep)
                        {
                            <div class="row">
                                <div class="col text-truncate">
                                    <small class="text-secondary font-monospace"><HighlightableText Text="@sqlStep.SqlStatement" PartToHighlight="@SqlStatementFilter" /></small>
                                </div>
                            </div>
                        }
                        @if ((ShowDetails || !string.IsNullOrEmpty(AdvancedFiltersOffcanvas?.PackageFolder)
                       || !string.IsNullOrEmpty(AdvancedFiltersOffcanvas?.PackageProject)
                       || !string.IsNullOrEmpty(AdvancedFiltersOffcanvas?.PackageName)) && item is PackageStep package)
                        {
                            <div class="row">
                                <div class="col text-truncate">
                                    <small class="text-secondary">
                                        <HighlightableText Text="@package.PackageFolderName" PartToHighlight="@AdvancedFiltersOffcanvas?.PackageFolder" />
                                        \
                                        <HighlightableText Text="@package.PackageProjectName" PartToHighlight="@AdvancedFiltersOffcanvas?.PackageProject" />
                                        \
                                        <HighlightableText Text="@package.PackageName" PartToHighlight="@AdvancedFiltersOffcanvas?.PackageName" />
                                    </small>
                                </div>
                            </div>
                        }
                        @if ((ShowDetails || !string.IsNullOrEmpty(AdvancedFiltersOffcanvas?.PipelineName)) && item is PipelineStep pipeline)
                        {
                            <div class="row">
                                <div class="col text-truncate">
                                    <small class="text-secondary">
                                        <HighlightableText Text="@pipeline.PipelineName" PartToHighlight="@AdvancedFiltersOffcanvas?.PipelineName" />
                                    </small>
                                </div>
                            </div>
                        }
                        @if (ShowDetails && item is AgentJobStep agentJob)
                        {
                            <div class="row">
                                <div class="col text-truncate">
                                    <small class="text-secondary">@agentJob.AgentJobName</small>
                                </div>
                            </div>
                        }
                        @if ((ShowDetails || !string.IsNullOrEmpty(AdvancedFiltersOffcanvas?.ExeFilePath)
                       || !string.IsNullOrEmpty(AdvancedFiltersOffcanvas?.ExeArguments)) && item is ExeStep exe)
                        {
                            <div class="row">
                                <div class="col text-truncate">
                                    <small class="text-secondary">
                                        <HighlightableText Text="@exe.ExeFileName" PartToHighlight="@AdvancedFiltersOffcanvas?.ExeFilePath" />
                                        <HighlightableText Text="@exe.ExeArguments" PartToHighlight="@AdvancedFiltersOffcanvas?.ExeArguments" />
                                    </small>
                                </div>
                            </div>
                        }
                        @if ((ShowDetails || !string.IsNullOrEmpty(AdvancedFiltersOffcanvas?.FunctionUrl)) && item is FunctionStep function)
                        {
                            <div class="row">
                                <div class="col text-truncate">
                                    <small class="text-secondary">
                                        <HighlightableText Text="@function.FunctionUrl" PartToHighlight="@AdvancedFiltersOffcanvas?.FunctionUrl" />
                                    </small>
                                </div>
                            </div>
                        }
                        @if (ShowDetails && item is TabularStep tabular)
                        {
                            var tableText = string.IsNullOrEmpty(tabular.TabularTableName) ? null : $" \\ {tabular.TabularTableName}";
                            var partitionText = string.IsNullOrEmpty(tabular.TabularPartitionName) ? null : $" \\ {tabular.TabularPartitionName}";
                            <div class="row">
                                <div class="col text-truncate">

                                    <small class="text-secondary">@tabular.TabularModelName@tableText@partitionText</small>
                                </div>
                            </div>
                        }
                    </li>
                }
            </ol>
        </div>
    </div>
}

<AuthorizeView Roles="Admin, Editor">
    <SqlStepEditModal @ref="StepEditModals[StepType.Sql]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <TabularStepEditModal @ref="StepEditModals[StepType.Tabular]"
        Connections="SqlConnections"
        AsConnections="AsConnections"
        OnStepSubmit="OnStepSubmit" />
    <EmailStepEditModal @ref="StepEditModals[StepType.Email]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <AgentJobStepEditModal @ref="StepEditModals[StepType.AgentJob]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <DatasetStepEditModal @ref="StepEditModals[StepType.Dataset]"
        Connections="SqlConnections"
        AppRegistrations="AppRegistrations"
        OnStepSubmit="OnStepSubmit" />
    <ExeStepEditModal @ref="StepEditModals[StepType.Exe]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <JobStepEditModal @ref="StepEditModals[StepType.Job]"
        Connections="SqlConnections"
        Jobs="Jobs"
        OnStepSubmit="OnStepSubmit" />
    <FunctionStepEditModal @ref="StepEditModals[StepType.Function]"
        Connections="SqlConnections"
        FunctionApps="FunctionApps"
        OnStepSubmit="OnStepSubmit" />
    <PackageStepEditModal @ref="StepEditModals[StepType.Package]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <PipelineStepEditModal @ref="StepEditModals[StepType.Pipeline]"
        Connections="SqlConnections"
        PipelineClients="PipelineClients"
        OnStepSubmit="OnStepSubmit" />   
</AuthorizeView>

@{
    var connections = SqlConnections
        ?.Cast<ConnectionInfoBase>()
        .Concat(AsConnections?.Cast<ConnectionInfoBase>() ?? Enumerable.Empty<ConnectionInfoBase>())
        .Where(c => Steps?.OfType<IHasConnection>().Any(step => c.ConnectionId == step.ConnectionId) ?? false)
        .OrderBy(c => c.ConnectionName)
        ?? Enumerable.Empty<ConnectionInfoBase>();
    var pipelineClients = PipelineClients
        ?.Where(c => Steps?.OfType<PipelineStep>().Any(step => c.PipelineClientId == step.PipelineClientId) ?? false)
        ?? Enumerable.Empty<PipelineClient>();
    var functionApps = FunctionApps
        ?.Where(fa => Steps?.OfType<FunctionStep>().Any(step => fa.FunctionAppId == step.FunctionAppId) ?? false)
        ?? Enumerable.Empty<FunctionApp>();
}

<AdvancedFiltersOffcanvas @ref="AdvancedFiltersOffcanvas"
    OnFiltersChanged="StateHasChanged"
    Connections="connections"
    FunctionApps="functionApps"
    PipelineClients="pipelineClients" />

<StepDetailsModal @ref="StepDetailsModal" />

<StepHistoryOffcanvas @ref="StepHistoryOffcanvas" />

<AuthorizeView Roles="Admin, Editor, Operator">
    <ExecuteModal @ref="ExecuteModal" OnExecutionStarted="OnExecutionStarted" />
</AuthorizeView>
