
<PageTitle>@Job?.JobName | Steps | Biflow</PageTitle>

<div class="sticky-sm-top pt-2 bg-body rounded-bottom-4" style="margin-left: -3px; margin-right: -3px; padding-left: 3px; padding-right: 3px; margin-top: -1px;">
    <div class="row justify-content-between gap-3">
        <div class="col-auto">
            <div class="btn-toolbar">
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                    <HxDropdownButtonGroup CssClass="me-3">
                        <HxDropdownToggleButton Color="ThemeColor.Success" Enabled="Steps is not null && Job is not null && Jobs is not null">
                            Add step
                        </HxDropdownToggleButton>
                        <HxDropdownMenu>
                            @{
                                var stepTypes = Enum.GetValues<StepType>()
                                    .GroupBy(t => t.GetCategory())
                                    .OrderBy(c => c.Key?.Ordinal);
                            }
                            @foreach (var group in stepTypes)
                            {
                                <HxDropdownHeader>@group.Key?.Name</HxDropdownHeader>
                                @foreach (var stepType in group)
                                {
                                    <HxDropdownItem @onclick="() => ShowNewStepModal(stepType)"
                                                    Enabled="!IsStepTypeDisabled(stepType)"
                                                    title="@stepType.GetDescription()">
                                        <StepTypeIconComponent StepType="stepType" />
                                        @stepType
                                    </HxDropdownItem>
                                }
                            }
                        </HxDropdownMenu>
                    </HxDropdownButtonGroup>
                </AuthorizeView>
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                    <HxButton Color="ThemeColor.Primary"
                              Enabled="Steps is not null && Job is not null && Jobs is not null"
                              @onclick="() => Job.LetAsync(j => executeModal.LetAsync(m => m.ShowAsync(j.JobId, selectedSteps)))">
                        <CxIcon Icon="FeatherIcon.Play" />
                        Execute
                    </HxButton>
                </AuthorizeView>
            </div>
        </div>
        <div class="col-auto">
            @if (Job is not null)
            {
                <div class="alert alert-secondary mb-0 py-2" role="alert">
                    @if (Job.UseDependencyMode)
                    {
                        <span>
                            Execution mode:
                            &nbsp;
                            <CxIcon Icon="LucideIcon.Network" />
                            Dependency mode
                        </span>
                    }
                    else
                    {
                        <span>
                            Execution mode:
                            &nbsp;
                            <CxIcon Icon="FeatherIcon.Layers" />
                            Execution phase
                        </span>
                    }
                </div>
            }
        </div>
    </div>

    @if (lastStartedExecutionId is not null)
    {
        <div class="alert alert-success mt-3 show alert-dismissible col-xl-6" role="alert">
            <CxIcon Icon="FeatherIcon.CheckCircle" />
            Execution started successfully – <a href="executions/@lastStartedExecutionId/list" class="alert-link">view execution</a>
            <button type="button" class="btn-close" @onclick="() => lastStartedExecutionId = null"></button>
        </div>
    }

    <div class="row">
        <div class="col-auto mt-3">
            <div class="input-group input-group-sm">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.Search" />
                </div>
                <DebounceTextInput type="search" class="form-control" @bind-Value="stepNameFilter" placeholder="Search by name" style="min-width: 18rem; max-width: 18rem;" />
            </div>
        </div>
        <div class="col-auto mt-3">
            <HxButtonGroup Size="ButtonGroupSize.Small">
                <FilterDropdown TItem="StepType"
                                FilterSet="stepTypeFilter"
                                Items="Steps?.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tool" />
                        Step type
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIconComponent StepType="item" />
                        @item.ToString()
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="Tag"
                                FilterSet="tagsFilterSet"
                                Items="Tags"
                                IdSelector="tag => tag.TagId.ToString()"
                                TextSelector="tag => tag.TagName"
                                IsSearchable
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tag" />
                        Tags
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <TagComponent Tag="item" />
                    </ItemTemplate>
                </FilterDropdown>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="() => advancedFiltersOffcanvas.LetAsync(x => x.ShowAsync())">
                    <CxIcon Icon="FeatherIcon.MoreHorizontal" />
                    Advanced filters
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="async () =>
                    {
                        tagsFilterSet.Clear();
                        stepTypeFilter.Clear();
                        connectionFilter.Clear();
                        stepNameFilter = string.Empty;
                        await advancedFiltersOffcanvas.LetAsync(x => x.ClearAsync());
                    }">
                    <CxIcon Icon="FeatherIcon.X" />
                    Clear
                </HxButton>
            </HxButtonGroup>
        </div>
         <div class="col-auto mt-3">
             <div class="form-check form-check-inline">
                 <input type="radio" class="form-check-input" id="radio_all"
                        checked=@(stateFilter == StateFilter.All)
                        @onchange="() => stateFilter = StateFilter.All">
                 <label class="form-check-label" for="radio_all">All</label>
             </div>
             <div class="form-check form-check-inline">
                 <input type="radio" class="form-check-input" id="radio_enabled"
                        checked=@(stateFilter == StateFilter.Enabled)
                        @onchange="() => stateFilter = StateFilter.Enabled">
                 <label class="form-check-label" for="radio_enabled">Enabled</label>
             </div>
             <div class="form-check form-check-inline">
                 <input type="radio" class="form-check-input" id="radio_disabled"
                        checked=@(stateFilter == StateFilter.Disabled)
                        @onchange="() => stateFilter = StateFilter.Disabled">
                 <label class="form-check-label" for="radio_disabled">Disabled</label>
             </div>
         </div>
         <div class="col-auto mt-3">
             <div class="form-check">
                 <input type="checkbox" class="form-check-input" id="show_details"
                        checked=@showDetails
                        @onchange="args => showDetails = (bool)args.Value!">
                 <label class="form-check-label" for="show_details">Show details</label>
             </div>
         </div>
    </div>

    <div class="row mt-3 align-items-center">
        <div class="col">
            <ol class="list-group shadow-sm">
                @if (Steps is null || Jobs is null || Job is null)
                {
                    <li class="list-group-item list-group-header">
                        <div class="row">
                            <div class="col text-center">
                                <HxSpinner Color="ThemeColor.Secondary" />
                            </div>
                        </div>
                    </li>
                }
                else
                {
                    var count = FilteredSteps.Count();
                    var disabledCount = FilteredSteps.Where(s => !s.IsEnabled).Count();
                    var countText = Steps.Count switch
                    {
                        0 => "No steps",
                        1 => count == Steps.Count ? $"Showing {count} step" : $"Showing {count} of {Steps.Count} step",
                        > 1 => count == Steps.Count ? $"Showing all {Steps.Count} steps" : $"Showing {count} of {Steps.Count} steps",
                        _ => string.Empty
                    };
                    var disabledCountText = disabledCount switch { 0 => "No disabled steps", 1 => "1 disabled step", _ => $"{disabledCount} disabled steps" };
                    var selectedText = selectedSteps.Count switch { 1 => $"{selectedSteps.Count} selected step", > 1 => $"{selectedSteps.Count} selected steps", _ => "" };
                    <li class="list-group-item list-group-header">
                        <div class="row align-items-center" style="min-height: 31px;">
                            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                <div class="col text-muted d-flex align-items-center">
                                    <TriStateCheckbox Checked="@(selectedSteps.Count > 0 && Steps.Any() && count > 0)"
                                                      Indeterminate="@(selectedSteps.Any() && selectedSteps.Count != count)"
                                                      CheckedChanged="ToggleAllStepsSelected" />
                                    <div class="fw-bold small">@selectedText</div>
                                </div>
                            </AuthorizeView>
                            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                <div class="col">
                                    @if (selectedSteps.Any())
                                    {
                                        <div class="btn-group">
                                            <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" title="Delete selected steps"
                                                      @onclick="DeleteSelectedSteps">
                                                <CxIcon Icon="FeatherIcon.Trash2" />
                                                Delete
                                            </HxButton>
                                            <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" title="Copy selected steps"
                                                      @onclick="() => stepsCopyOffcanvas.LetAsync(x => x.ShowAsync(Job, selectedSteps))">
                                                <CxIcon Icon="FeatherIcon.Copy" />
                                                Copy
                                            </HxButton>
                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small">
                                                    <CxIcon Icon="FeatherIcon.Edit2" />
                                                    Edit
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu Alignment="DropdownMenuAlignment.End">
                                                    <HxDropdownHeader>Batch edit</HxDropdownHeader>
                                                    <HxDropdownItem OnClick="() => batchEditRenameModal.LetAsync(x => x.ShowAsync())">
                                                        <CxIcon Icon="FeatherIcon.Edit3" />
                                                        Name
                                                    </HxDropdownItem>
                                                    <HxDropdownItem OnClick="() => batchEditTagsModal.LetAsync(x => x.ShowAsync())">
                                                        <CxIcon Icon="FeatherIcon.Tag" />
                                                        Tags
                                                    </HxDropdownItem>
                                                    <HxDropdownItem OnClick="() => batchEditExecPhaseModal.LetAsync(x => x.ShowAsync())">
                                                        <CxIcon Icon="FeatherIcon.Layers" />
                                                        Execution phase
                                                    </HxDropdownItem>
                                                    <HxDropdownItem OnClick="() => batchEditRetriesModal.LetAsync(x => x.ShowAsync())">
                                                        <CxIcon Icon="FeatherIcon.Repeat" />
                                                        Retry attempts
                                                    </HxDropdownItem>
                                                    <HxDropdownItem OnClick="() => batchEditRetryIntervalModal.LetAsync(x => x.ShowAsync())">
                                                        <CxIcon Icon="FeatherIcon.Clock" />
                                                        Retry interval
                                                    </HxDropdownItem>
                                                    <HxDropdownItem OnClick="() => ToggleSelectedStepsEnabledAsync(false)">
                                                        <CxIcon Icon="FeatherIcon.ToggleLeft" />
                                                        Disable
                                                    </HxDropdownItem>
                                                    <HxDropdownItem OnClick="() => ToggleSelectedStepsEnabledAsync(true)">
                                                        <CxIcon Icon="FeatherIcon.ToggleRight" />
                                                        Enable
                                                    </HxDropdownItem>
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>
                                        </div>
                                    }
                                </div>
                            </AuthorizeView>
                            <div class="col text-muted text-center fw-bold small">
                                 @countText
                            </div>
                            <div class="col text-muted text-end fw-bold small">
                                @if (stateFilter == StateFilter.All)
                                {
                                    @disabledCountText
                                }
                            </div>
                        </div>
                    </li>
                }
            </ol>
        </div>
    </div>
</div>


@if (Steps is not null && Jobs is not null && Job is not null)
{
    <div class="row mb-3 mt-3">
        <div class="col">
            <ol class="list-group shadow-sm steps-list">
                @foreach (var item in FilteredSteps)
                {
                    var containerCssClass = $"list-group-item list-group-item-action py-2 {(item.IsEnabled ? null : "step-item-disabled")}";
                    <ContextMenuToggle @key="item.StepId" ContainerHtmlTag="li" CssClass="@containerCssClass">
                        <ChildContent Context="menu">
                            <div class="row">
                                <div class="col-xl-5 col-sm-7 pl-2 d-flex align-items-center">
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                        <div class="form-check me-2">
                                            <input type="checkbox" class="form-check-input" id="select_step_@item.StepId"
                                                   checked=@selectedSteps.Contains(item)
                                           @onchange="args => { if (selectedSteps.Contains(item)) selectedSteps.Remove(item); else selectedSteps.Add(item); }">
                                            <label class="form-check-label" for="select_step_@item.StepId"></label>
                                        </div>
                                    </AuthorizeView>
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                        <a class="text-body" href="javascript:void(0)" @onclick="() => ShowEditModal(item)">
                                            <StepTypeIconComponent StepType="@item.StepType" />
                                            &nbsp;
                                            <HighlightableText Text="@item.StepName" PartToHighlight="@stepNameFilter" />
                                        </a>
                                    </AuthorizeView>
                                    <AuthorizeView Roles="@($"{Roles.Operator}, {Roles.Viewer}")">
                                        <span>
                                            <StepTypeIconComponent StepType="@item.StepType" />
                                            <HighlightableText Text="@item.StepName" PartToHighlight="@stepNameFilter" />
                                        </span>
                                    </AuthorizeView>
                                </div>
                                <div class="col-xl-2 col-sm-4 col-6 d-inline-flex align-items-center justify-content-start">
                                    <div class="justify-content-end @(Job.UseDependencyMode ? "text-body-tertiary" : "text-body")">
                                        <CxIcon Icon="FeatherIcon.Layers" />
                                        <sup>@item.ExecutionPhase</sup>
                                    </div>

                                    @if (item.RetryAttempts > 0)
                                    {
                                        <div title="Step has @item.RetryAttempts retry attempts" class="text-body ms-3">
                                            <CxIcon Icon="FeatherIcon.Repeat" />
                                            <sup>@item.RetryAttempts</sup>
                                        </div>
                                    }

                                    @if (item.ExecutionConditionParameters.Any(p => p.JobParameterId is not null)
                                   || item is IHasStepParameters hasParams && hasParams.StepParameters.Any(p => p.InheritFromJobParameterId is not null || p.ExpressionParameters.Any(ep => ep.InheritFromJobParameter is not null))
                                   || item is SqlStep sql && sql.ResultCaptureJobParameterId is not null)
                                    {
                                        <div title="Step uses job parameters" class="text-body ms-3">
                                            <CxIcon Icon="FeatherIcon.AtSign" />
                                        </div>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(item.ExecutionConditionExpression.Expression))
                                    {
                                        <div title="Execution condition enabled" class="text-body ms-3">
                                            <CxIcon Icon="FeatherIcon.CheckSquare" />
                                        </div>
                                    }
                                </div>
                                <div class="col-sm-1 col-6 d-inline-flex align-items-center justify-content-end">
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                        <div class="form-check form-switch">
                                            <input type="checkbox" class="form-check-input" id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                            <label class="form-check-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                        </div>
                                    </AuthorizeView>
                                    <AuthorizeView Roles="@($"{Roles.Operator}, {Roles.Viewer}")">
                                        <div class="form-check form-switch">
                                            <input type="checkbox" class="form-check-input" disabled id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)">
                                            <label class="form-check-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                        </div>
                                    </AuthorizeView>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" Spinner="false" CssClass="btn-auto" @onclick="e => menu.ShowContextMenuAsync(e)">
                                        <CxIcon Icon="FeatherIcon.MoreHorizontal" />
                                    </HxButton>
                                </div>

                                <div class="col-xl-4 d-flex flex-wrap align-items-center justify-content-xl-end">
                                    @foreach (var tag in item.Tags.OrderBy(t => t.TagName))
                                    {
                                        <TagComponent Tag="tag" CssClass="m-1" />
                                    }
                                </div>
                            </div>
                            @if (showDetails || !string.IsNullOrEmpty(advancedFiltersOffcanvas?.Description))
                            {
                                <div class="row">
                                    <div class="col text-truncate">
                                        <small class="text-secondary"><em><HighlightableText Text="@item.StepDescription" PartToHighlight="@advancedFiltersOffcanvas?.Description" /></em></small>
                                    </div>
                                </div>
                            }
                            @if ((showDetails || !string.IsNullOrEmpty(advancedFiltersOffcanvas?.SqlStatement)) && item is SqlStep sqlStep)
                            {
                                <div class="row">
                                    <div class="col text-truncate">
                                        <small class="text-secondary font-monospace"><HighlightableText Text="@sqlStep.SqlStatement" PartToHighlight="@advancedFiltersOffcanvas?.SqlStatement" /></small>
                                    </div>
                                </div>
                            }
                            @if ((showDetails || !string.IsNullOrEmpty(advancedFiltersOffcanvas?.PackageFolder)
                           || !string.IsNullOrEmpty(advancedFiltersOffcanvas?.PackageProject)
                           || !string.IsNullOrEmpty(advancedFiltersOffcanvas?.PackageName)) && item is PackageStep package)
                            {
                                <div class="row">
                                    <div class="col text-truncate">
                                        <small class="text-secondary">
                                            <HighlightableText Text="@package.PackageFolderName" PartToHighlight="@advancedFiltersOffcanvas?.PackageFolder" />
                                            \
                                            <HighlightableText Text="@package.PackageProjectName" PartToHighlight="@advancedFiltersOffcanvas?.PackageProject" />
                                            \
                                            <HighlightableText Text="@package.PackageName" PartToHighlight="@advancedFiltersOffcanvas?.PackageName" />
                                        </small>
                                    </div>
                                </div>
                            }
                            @if ((showDetails || !string.IsNullOrEmpty(advancedFiltersOffcanvas?.PipelineName)) && item is PipelineStep pipeline)
                            {
                                <div class="row">
                                    <div class="col text-truncate">
                                        <small class="text-secondary">
                                            <HighlightableText Text="@pipeline.PipelineName" PartToHighlight="@advancedFiltersOffcanvas?.PipelineName" />
                                        </small>
                                    </div>
                                </div>
                            }
                            @if (showDetails && item is AgentJobStep agentJob)
                            {
                                <div class="row">
                                    <div class="col text-truncate">
                                        <small class="text-secondary">@agentJob.AgentJobName</small>
                                    </div>
                                </div>
                            }
                            @if ((showDetails || !string.IsNullOrEmpty(advancedFiltersOffcanvas?.ExeFilePath)
                           || !string.IsNullOrEmpty(advancedFiltersOffcanvas?.ExeArguments)) && item is ExeStep exe)
                            {
                                <div class="row">
                                    <div class="col text-truncate">
                                        <small class="text-secondary">
                                            <HighlightableText Text="@exe.ExeFileName" PartToHighlight="@advancedFiltersOffcanvas?.ExeFilePath" />
                                            <HighlightableText Text="@exe.ExeArguments" PartToHighlight="@advancedFiltersOffcanvas?.ExeArguments" />
                                        </small>
                                    </div>
                                </div>
                            }
                            @if ((showDetails || !string.IsNullOrEmpty(advancedFiltersOffcanvas?.FunctionUrl)) && item is FunctionStep function)
                            {
                                <div class="row">
                                    <div class="col text-truncate">
                                        <small class="text-secondary">
                                            <HighlightableText Text="@function.FunctionUrl" PartToHighlight="@advancedFiltersOffcanvas?.FunctionUrl" />
                                        </small>
                                    </div>
                                </div>
                            }
                            @if (showDetails && item is TabularStep tabular)
                            {
                                var tableText = string.IsNullOrEmpty(tabular.TabularTableName) ? null : $" \\ {tabular.TabularTableName}";
                                var partitionText = string.IsNullOrEmpty(tabular.TabularPartitionName) ? null : $" \\ {tabular.TabularPartitionName}";
                                <div class="row">
                                    <div class="col text-truncate">
                                        <small class="text-secondary">@tabular.TabularModelName@tableText@partitionText</small>
                                    </div>
                                </div>
                            }
                        </ChildContent>
                        <MenuContent>
                            <DropdownMenuHeader>
                                <StepTypeIconComponent StepType="item.StepType" />
                                @item.StepName
                            </DropdownMenuHeader>
                            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                <DropdownMenuItem @onclick="() => ShowEditModal(item)">
                                    <CxIcon Icon="FeatherIcon.Edit2" />
                                    Edit
                                </DropdownMenuItem>
                                <DropdownMenuItem @onclick="() => DeleteStep(item)">
                                    <CxIcon Icon="FeatherIcon.Trash2" />
                                    Delete
                                </DropdownMenuItem>
                                <DropdownMenuItem @onclick="() => stepsCopyOffcanvas.LetAsync(x => x.ShowAsync(Job, [item]))">
                                    <CxIcon Icon="FeatherIcon.Copy" />
                                    Copy
                                </DropdownMenuItem>
                            </AuthorizeView>
                            <DropdownMenuItem @onclick="() => stepHistoryOffcanvas.LetAsync(x => x.ShowAsync(item.StepId))">
                                <CxIcon Icon="LucideIcon.History" />
                                History
                            </DropdownMenuItem>
                            @{
                                var navigateToDependencies = () => NavigationManager.NavigateTo($"jobs/{Job?.JobId}/graph/{item.StepId}");
                            }
                            <DropdownMenuItem @onclick="navigateToDependencies">
                                <CxIcon Icon="LucideIcon.Network" />
                                Dependencies
                            </DropdownMenuItem>
                            <DropdownMenuItem @onclick="() => stepDetailsModal.LetAsync(x => x.ShowAsync(item))">
                                <CxIcon Icon="FeatherIcon.Info" />
                                Details
                            </DropdownMenuItem>
                        </MenuContent>
                    </ContextMenuToggle>
                }
            </ol>
        </div>
    </div>
}

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
    <StepsCopyOffcanvas
        @ref="stepsCopyOffcanvas"
        Jobs="Jobs"
        OnStepsCopied="OnStepsCopied" />

    <StepsBatchEditTagsModal
        @ref="batchEditTagsModal"
        SelectedSteps="selectedSteps"
        OnStepsSubmit="OnStepsSubmit" />

    <StepsBatchEditExecPhaseModal
        @ref="batchEditExecPhaseModal"
        SelectedSteps="selectedSteps"
        OnStepsSubmit="OnStepsSubmit" />

    <StepsBatchEditRenameModal
        @ref="batchEditRenameModal"
        SelectedSteps="selectedSteps"
        OnStepsSubmit="OnStepsSubmit" />

    <StepsBatchEditRetriesModal
        @ref="batchEditRetriesModal"
        SelectedSteps="selectedSteps"
        OnStepsSubmit="OnStepsSubmit" />

    <StepsBatchEditRetryIntervalModal
        @ref="batchEditRetryIntervalModal"
        SelectedSteps="selectedSteps"
        OnStepsSubmit="OnStepsSubmit" />

    <SqlStepEditModal @ref="stepEditModals[StepType.Sql]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <TabularStepEditModal @ref="stepEditModals[StepType.Tabular]"
        Connections="SqlConnections"
        AsConnections="AsConnections"
        OnStepSubmit="OnStepSubmit" />
    <EmailStepEditModal @ref="stepEditModals[StepType.Email]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <AgentJobStepEditModal @ref="stepEditModals[StepType.AgentJob]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <DatasetStepEditModal @ref="stepEditModals[StepType.Dataset]"
        Connections="SqlConnections"
        AppRegistrations="AppRegistrations"
        OnStepSubmit="OnStepSubmit" />
    <ExeStepEditModal @ref="stepEditModals[StepType.Exe]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <JobStepEditModal @ref="stepEditModals[StepType.Job]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <FunctionStepEditModal @ref="stepEditModals[StepType.Function]"
        Connections="SqlConnections"
        FunctionApps="FunctionApps"
        OnStepSubmit="OnStepSubmit" />
    <PackageStepEditModal @ref="stepEditModals[StepType.Package]"
        Connections="SqlConnections"
        OnStepSubmit="OnStepSubmit" />
    <PipelineStepEditModal @ref="stepEditModals[StepType.Pipeline]"
        Connections="SqlConnections"
        PipelineClients="PipelineClients"
        OnStepSubmit="OnStepSubmit" />
    <QlikStepEditModal @ref="stepEditModals[StepType.Qlik]"
        Clients="QlikCloudClients"
        OnStepSubmit="OnStepSubmit" />
</AuthorizeView>

@{
    var connections = SqlConnections
        ?.Cast<ConnectionInfoBase>()
        .Concat(AsConnections?.Cast<ConnectionInfoBase>() ?? Enumerable.Empty<ConnectionInfoBase>())
        .Where(c => Steps?.OfType<IHasConnection>().Any(step => c.ConnectionId == step.ConnectionId) ?? false)
        .OrderBy(c => c.ConnectionName)
        ?? Enumerable.Empty<ConnectionInfoBase>();
    var pipelineClients = PipelineClients
        ?.Where(c => Steps?.OfType<PipelineStep>().Any(step => c.PipelineClientId == step.PipelineClientId) ?? false)
        ?? Enumerable.Empty<PipelineClient>();
    var functionApps = FunctionApps
        ?.Where(fa => Steps?.OfType<FunctionStep>().Any(step => fa.FunctionAppId == step.FunctionAppId) ?? false)
        ?? Enumerable.Empty<FunctionApp>();
}

<AdvancedFiltersOffcanvas @ref="advancedFiltersOffcanvas"
    OnFiltersChanged="StateHasChanged"
    Connections="connections"
    FunctionApps="functionApps"
    PipelineClients="pipelineClients" />

<StepDetailsModal @ref="stepDetailsModal" />

<StepHistoryOffcanvas @ref="stepHistoryOffcanvas" />

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
    <ExecuteModal @ref="executeModal" OnExecutionStarted="OnExecutionStarted" />
</AuthorizeView>
