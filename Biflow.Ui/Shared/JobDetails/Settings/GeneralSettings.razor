@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster

@if (editJob is not null)
{
    <EditForm Model="editJob" OnValidSubmit="UpdateJob" Context="_context">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label class="form-label">Name</label>
            <div class="input-group">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.Edit3" />
                </div>
                <InputText class="form-control" @bind-Value="editJob.JobName" autocomplete="off" style="max-width: 50rem;"></InputText>
            </div>
        </div>
        <div style="max-width: 50rem;">
            <label class="form-label">Tags</label>
            <HxInputTags @bind-Value="tags"
                        DataProvider="GetTagSuggestions"
                        SuggestMinimumLength="0"
                        SuggestDelay="0"
                        TagBadgeSettings="new BadgeSettings() { Color = ThemeColor.Secondary }" />
        </div>
        <div>
            <label class="form-label">Description</label>
            <div class="input-group">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.BookOpen" />
                </div>
                <InputTextArea class="form-control form-control-sm" @bind-Value="editJob.JobDescription" rows="5" style="max-width: 50rem;"></InputTextArea>
            </div>
        </div>
        <div>
            <label class="form-label">Timeout (min, 0 = indefinite)</label>
            <div class="input-group">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.XOctagon" />
                </div>
                <InputNumber class="form-control form-control-sm" style="max-width: 10rem;" @bind-Value="editJob.TimeoutMinutes"></InputNumber>
            </div>
            <div class="form-text">If the job's execution exceeds the timeout limit, the execution will be stopped in its entirety.</div>
        </div>
        <div>
            <label class="form-label">Overtime notification limit (min, 0 = indefinite)</label>
            <div class="input-group">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.Bell" />
                </div>
                <InputNumber class="form-control form-control-sm" style="max-width: 10rem;" @bind-Value="editJob.OvertimeNotificationLimitMinutes"></InputNumber>
            </div>
            <div class="form-text">If the job's execution exceeds the overtime limit, an email is automatically sent to users who have subscribed to this job's overtime notifications.</div>
        </div>
        <div class="row">
            <div class="col">
                <HxSubmit Color="ThemeColor.Success">
                    <CxIcon Icon="FeatherIcon.Save" />
                    Save
                </HxSubmit>
            </div>
        </div>
    </EditForm>
}

@code {
    [CascadingParameter] Job? Job { get; set; }

    [CascadingParameter(Name = "OnJobUpdated")] public Action<Job>? OnJobUpdated { get; set; }

    private Job? editJob;
    private IEnumerable<JobTag> allTags = [];
    private List<string> tags = [];

    protected override async void OnParametersSet()
    {
        if (Job is null || Job.JobId == Guid.Empty)
        {
            return;
        }

        using var context = await DbContextFactory.CreateDbContextAsync();
        allTags = await context.JobTags.ToArrayAsync();
        editJob = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .Include(j => j.Tags)
            .FirstAsync(j => j.JobId == Job.JobId);
        tags = editJob.Tags
            .Select(t => t.TagName)
            .Distinct()
            .Order()
            .ToList();
        StateHasChanged();
    }

    private async Task UpdateJob()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(editJob);

            // Synchronize tags
            foreach (var text in tags.Where(str => !editJob.Tags.Any(t => t.TagName == str)))
            {
                // New tags
                var tag = allTags.FirstOrDefault(t => t.TagName == text) ?? new JobTag(text);
                editJob.Tags.Add(tag);
            }
            foreach (var tag in editJob.Tags.Where(t => !tags.Contains(t.TagName)).ToList() ?? [])
            {
                editJob.Tags.Remove(tag);
            }

            await Mediator.SendAsync(new UpdateJobCommand(editJob));
            Toaster.AddSuccess("Job settings saved successfully");
            OnJobUpdated?.Invoke(editJob);
        }
        catch (DbUpdateConcurrencyException)
        {
            Toaster.AddError("Concurrency error", "The job was modified outside of this session. Reload the page to view the most recent values.");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error updating job", ex.Message);
        }
    }

    private Task<InputTagsDataProviderResult> GetTagSuggestions(InputTagsDataProviderRequest request)
    {
        return Task.FromResult(new InputTagsDataProviderResult
        {
            Data = allTags
                .Select(t => t.TagName)
                .Where(t => t.ContainsIgnoreCase(request.UserInput))
                .Where(t => !tags.Any(tag => t == tag))
                .OrderBy(t => t)
                .AsEnumerable()
                ?? []
        });
    }
}
