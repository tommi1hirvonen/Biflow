@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster

@if (_editJob is not null)
{
    <EditForm Model="_editJob" OnValidSubmit="UpdateJob">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <label class="form-label">Name</label>
            <div class="input-group">
                <div class="input-group-text">
                    <SvgIcon Icon="LucideIcon.PenLine" />
                </div>
                <InputText class="form-control" @bind-Value="_editJob.JobName" autocomplete="off" style="max-width: 50rem;"></InputText>
            </div>
        </div>
        <div style="max-width: 50rem;">
            <label class="form-label">Tags</label>
            <TagInput TTag="JobTag"
                      Items="_allTags"
                      AllowCustomValues
                      SelectedItems="_editJob.Tags"
                      NewItemFromText="text => new JobTag(text) { Color = TagColor.DarkGray }"/>
        </div>
        <div>
            <label class="form-label">Description</label>
            <div class="input-group">
                <div class="input-group-text">
                    <SvgIcon Icon="LucideIcon.BookOpen" />
                </div>
                <InputTextArea class="form-control form-control-sm" @bind-Value="_editJob.JobDescription" rows="5" style="max-width: 50rem;"></InputTextArea>
            </div>
        </div>
        <div>
            <label class="form-label">Timeout (min, 0 = indefinite)</label>
            <div class="input-group">
                <div class="input-group-text">
                    <SvgIcon Icon="LucideIcon.OctagonX" />
                </div>
                <InputNumber class="form-control form-control-sm" style="max-width: 10rem;" @bind-Value="_editJob.TimeoutMinutes"></InputNumber>
            </div>
            <div class="form-text">If the job's execution exceeds the timeout limit, the execution will be stopped in its entirety.</div>
        </div>
        <div>
            <label class="form-label">Overtime notification limit (min, 0 = indefinite)</label>
            <div class="input-group">
                <div class="input-group-text">
                    <SvgIcon Icon="LucideIcon.Bell" />
                </div>
                <InputNumber class="form-control form-control-sm" style="max-width: 10rem;" @bind-Value="_editJob.OvertimeNotificationLimitMinutes"></InputNumber>
            </div>
            <div class="form-text">If the job's execution exceeds the overtime limit, an email is automatically sent to users who have subscribed to this job's overtime notifications.</div>
        </div>
        <div class="row">
            <div class="col">
                <HxSubmit Color="ThemeColor.Success">
                    <SvgIcon Icon="LucideIcon.Save" />
                    Save
                </HxSubmit>
            </div>
        </div>
    </EditForm>
}

@code {
    [CascadingParameter] Job? Job { get; set; }

    [CascadingParameter(Name = "OnJobUpdated")] public Action<Job>? OnJobUpdated { get; set; }

    private Job? _editJob;
    private List<JobTag> _allTags = [];

    protected override async Task OnParametersSetAsync()
    {
        if (Job is null || Job.JobId == Guid.Empty)
        {
            return;
        }
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _allTags = await context.JobTags.ToListAsync();
        _allTags.Sort();
        _editJob = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .Include(j => j.Tags)
            .FirstAsync(j => j.JobId == Job.JobId);
        StateHasChanged();
    }

    private async Task UpdateJob()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(_editJob);
            var command = new UpdateJobCommand(
                JobId: _editJob.JobId,
                JobName: _editJob.JobName,
                JobDescription: _editJob.JobDescription,
                ExecutionMode: _editJob.ExecutionMode,
                StopOnFirstError: _editJob.StopOnFirstError,
                MaxParallelSteps: _editJob.MaxParallelSteps,
                OvertimeNotificationLimitMinutes: _editJob.OvertimeNotificationLimitMinutes,
                TimeoutMinutes: _editJob.TimeoutMinutes,
                IsEnabled: _editJob.IsEnabled,
                IsPinned: _editJob.IsPinned,
                JobTagIds: _editJob.Tags.Select(t => t.TagId).ToArray());
            await Mediator.SendAsync(command);
            Toaster.AddSuccess("Job settings saved successfully");
            OnJobUpdated?.Invoke(_editJob);
        }
        catch (DbUpdateConcurrencyException)
        {
            Toaster.AddError("Concurrency error", "The job was modified outside of this session. Reload the page to view the most recent values.");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error updating job", ex.Message);
        }
    }
}
