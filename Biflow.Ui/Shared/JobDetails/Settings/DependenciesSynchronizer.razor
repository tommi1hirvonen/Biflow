
<div class="row">
    <div class="col">
        <small class="text-secondary">Automatically calculate modifications to dependencies based on step sources and targets. Changes can be accepted one at a time or all at once.</small>
    </div>
</div>
<div class="row mt-3">
    <div class="col">
        <HxButton Size="ButtonSize.Regular" Color="ThemeColor.Primary" OnClick="CalculateChangesAsync">
            <SvgIcon Icon="FeatherIcon.RefreshCw" />
            Calculate changes
        </HxButton>
    </div>
</div>
<div class="row mt-3">
    <div class="col">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Step</th>
                    <th>Depends on</th>
                    <th>Action</th>
                    <th></th>
                    <th>Type</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (_dependenciesToAdd is null || _dependenciesToRemove is null)
                {
                    <tr class="text-secondary small">
                        <td colspan="6">Click on Calculate changes to preview modifications</td>
                    </tr>
                }
                else if (!_dependenciesToAdd.Any() && !_dependenciesToRemove.Any())
                {
                    <tr>
                        <td colspan="6">No changes detected</td>
                    </tr>
                }
                else
                {
                    var dependencies = _dependenciesToAdd
                        .Select(d => (Dependency: d, Add: true))
                        .Concat(_dependenciesToRemove.Select(d => (Dependency: d, Add: false)))
                        .OrderBy(d => d.Dependency.Step.StepName)
                        .ThenBy(d => d.Dependency.DependantOnStep.StepName);
                    <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
                    @foreach (var (dep, add) in dependencies)
                    {
                        var (commitTask, discardAction) = add switch
                        {
                            true => ((Func<Task>)(() => AddDependencyAsync(dep)), (Func<bool>)(() => _dependenciesToAdd.Remove(dep))),
                            false => (() => RemoveDependencyAsync(dep), () => _dependenciesToRemove.Remove(dep))
                        };
                        <tr>
                            <td class="align-middle">
                                <StepTypeIcon StepType="dep.Step.StepType" />
                                @dep.Step.StepName
                            </td>
                            <td class="align-middle">
                                <StepTypeIcon StepType="dep.DependantOnStep.StepType" />
                                @dep.DependantOnStep.StepName
                            </td>
                            <td class="align-middle">
                                @if (add)
                                {
                                    <span class="text-success fw-bold fs-5 pb-1">+</span>
                                }
                                else
                                {
                                    <span class="text-danger fw-bold fs-5 pb-1">–</span>
                                }
                            </td>
                            <td class="align-middle text-end">
                                @{
                                    var (className, icon) = dep.DependencyType switch
                                    {
                                        DependencyType.OnSucceeded => ("text-success", FeatherIcon.CheckCircle),
                                        DependencyType.OnCompleted => ("text-primary", FeatherIcon.ArrowRight),
                                        DependencyType.OnFailed => ("text-danger", FeatherIcon.AlertOctagon),
                                        _ => ("text-secondary", FeatherIcon.HelpCircle)
                                    };
                                }
                                <span class="@className">
                                    <SvgIcon Icon="icon" />
                                </span>
                            </td>
                            <td class="align-middle">
                                <select class="form-select form-select-sm" @bind="dep.DependencyType">
                                    @foreach (var type in Enum.GetValues<DependencyType>())
                                    {
                                        <option selected=@(dep.DependencyType == type)>@type</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <HxButtonGroup Size="ButtonGroupSize.Small">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None"
                                              title="Commit this modification"
                                              CssClass="btn-auto text-success" OnClick="async () => await commitTask()">
                                        <SvgIcon Icon="FeatherIcon.Check" />
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None"
                                              title="Discard this modification"
                                              CssClass="btn-auto text-danger" OnClick="() => discardAction()">
                                        <SvgIcon Icon="FeatherIcon.X" />
                                    </HxButton>
                                </HxButtonGroup>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="row">
            <div class="col">
                @if (_dependenciesToRemove?.Any() ?? false)
                {
                    <small class="text-secondary">Dependency removal is only suggested for steps which have at least one source defined.</small>
                }
            </div>
        </div>
    </div>
</div>
@if ((_dependenciesToAdd?.Any() ?? false) || (_dependenciesToRemove?.Any() ?? false))
{
    <div class="row mt-3">
        <div class="col">
            <HxButton Color="ThemeColor.Success" OnClick="CommitAllAsync">
                <SvgIcon Icon="FeatherIcon.Check" />
                Commit all
            </HxButton>
        </div>
    </div>
}
