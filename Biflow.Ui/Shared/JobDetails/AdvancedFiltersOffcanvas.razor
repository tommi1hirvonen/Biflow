<HxOffcanvas @ref="offcanvas" Backdrop="OffcanvasBackdrop.False" Size="OffcanvasSize.Regular" ScrollingEnabled="true" Title="Advanced filters">
    <BodyTemplate>
        <div class="row">
            <div class="col">

                <HxButtonGroup Size="ButtonGroupSize.Small">
                    <FilterDropdown TItem="ConnectionInfoBase"
                                    FilterSet="connectionsFilter"
                                    IdSelector="c => c.ConnectionId.ToString()"
                                    TextSelector="c => c.ConnectionName"
                                    Items="Connections"
                                    OnChange="async () => await OnFiltersChanged.InvokeAsync()">
                        <TitleTemplate>
                            <CxIcon Icon="FeatherIcon.Database" />
                            Connection
                        </TitleTemplate>
                    </FilterDropdown>
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="async () => await ClearAsync()">
                        <CxIcon Icon="FeatherIcon.X" />
                        Clear all
                    </HxButton>
                </HxButtonGroup>

                <div class="row mt-3">
                    <div class="col-3 text-end">
                        <label class="form-label">Description</label>
                    </div>
                    <div class="col-9">
                        <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Description" @bind-Value="Description" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                    </div>
                </div>
                <hr />
                @{
                    var sqlExpanded = expandedSections.GetValueOrDefault(StepType.Sql);
                    var packageExpanded = expandedSections.GetValueOrDefault(StepType.Package);
                    var pipelineExpanded = expandedSections.GetValueOrDefault(StepType.Pipeline);
                    var functionExpanded = expandedSections.GetValueOrDefault(StepType.Function);
                    var exeExpanded = expandedSections.GetValueOrDefault(StepType.Exe);
                }

                <h6 class="mt-3 d-flex align-items-center" style="cursor: pointer;" @onclick="() => expandedSections[StepType.Sql] = !sqlExpanded">
                    @if (sqlExpanded)
                    {
                        <CxIcon Icon="FeatherIcon.ChevronDown" />
                    }
                    else
                    {
                        <CxIcon Icon="FeatherIcon.ChevronRight" />
                    }
                    &nbsp;
                    <StepTypeIcon StepType="StepType.Sql" />
                    &nbsp;
                    SQL steps
                </h6>
                
                @if (sqlExpanded)
                {
                    <div class="row mt-3">
                        <div class="col-3 text-end">
                            <label class="form-label">SQL statement</label>
                        </div>
                        <div class="col-9">
                            <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="SQL statement" @bind-Value="SqlStatement" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                        </div>
                    </div>
                }
                <hr />

                <h6 class="mt-3 d-flex align-items-center" style="cursor: pointer;" @onclick="() => expandedSections[StepType.Package] = !packageExpanded">
                    @if (packageExpanded)
                    {
                        <CxIcon Icon="FeatherIcon.ChevronDown" />
                    }
                    else
                    {
                        <CxIcon Icon="FeatherIcon.ChevronRight" />
                    }
                    &nbsp;
                    <StepTypeIcon StepType="StepType.Package" />
                    &nbsp;
                    Package steps
                </h6>
                
                @if (packageExpanded)
                {
                    <div class="row mt-3">
                        <div class="col-3 text-end">
                            <label class="form-label">Folder</label>
                        </div>
                        <div class="col-9">
                            <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Folder" @bind-Value="PackageFolder" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-3 text-end">
                            <label class="form-label">Project</label>
                        </div>
                        <div class="col-9">
                            <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Project" @bind-Value="PackageProject" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-3 text-end">
                            <label class="form-label">Package</label>
                        </div>
                        <div class="col-9">
                            <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Package" @bind-Value="PackageName" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                        </div>
                    </div>
                }
                <hr />

                <h6 class="mt-3 d-flex align-items-center" style="cursor: pointer;" @onclick="() => expandedSections[StepType.Pipeline] = !pipelineExpanded">
                    @if (pipelineExpanded)
                    {
                        <CxIcon Icon="FeatherIcon.ChevronDown" />
                    }
                    else
                    {
                        <CxIcon Icon="FeatherIcon.ChevronRight" />
                    }
                    &nbsp;
                    <StepTypeIcon StepType="StepType.Pipeline" />
                    &nbsp;
                    Pipeline steps
                </h6>
                
                @if (pipelineExpanded)
                {
                    <div class="row mt-3">
                        <div class="col-3 text-end">
                            <label class="form-label">Pipeline name</label>
                        </div>
                        <div class="col-9">
                            <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Pipeline name" @bind-Value="PipelineName" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col">
                            <FilterDropdown TItem="PipelineClient"
                                            Items="PipelineClients"
                                            TextSelector="fa => fa.PipelineClientName"
                                            IdSelector="fa => fa.PipelineClientId.ToString()"
                                            FilterSet="pipelineClientsFilter"
                                            OnChange="async () => await OnFiltersChanged.InvokeAsync()">
                                <TitleTemplate>
                                    Pipeline client
                                </TitleTemplate>
                            </FilterDropdown>
                        </div>
                    </div>
                }
                <hr />

                <h6 class="mt-3 d-flex align-items-center" style="cursor: pointer;" @onclick="() => expandedSections[StepType.Function] = !functionExpanded">
                    @if (functionExpanded)
                    {
                        <CxIcon Icon="FeatherIcon.ChevronDown" />
                    }
                    else
                    {
                        <CxIcon Icon="FeatherIcon.ChevronRight" />
                    }
                    &nbsp;
                    <StepTypeIcon StepType="StepType.Function" />
                    &nbsp;
                    Function steps
                </h6>
                
                @if (functionExpanded)
                {
                    <div class="row mt-3">
                        <div class="col-3 text-end">
                            <label class="form-label">URL</label>
                        </div>
                        <div class="col-9">
                            <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="URL" @bind-Value="FunctionUrl" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col-3 text-end">
                            <label class="form-label">Input</label>
                        </div>
                        <div class="col-9">
                            <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Input" @bind-Value="FunctionInput" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col">
                            <FilterDropdown TItem="FunctionApp"
                                            Items="FunctionApps"
                                            TextSelector="fa => fa.FunctionAppName"
                                            IdSelector="fa => fa.FunctionAppId.ToString()"
                                            FilterSet="functionAppsFilter"
                                            OnChange="async () => await OnFiltersChanged.InvokeAsync()">
                                <TitleTemplate>
                                    Function app
                                </TitleTemplate>
                            </FilterDropdown>
                        </div>
                    </div>
                }
                <hr />

                <h6 class="mt-3 d-flex align-items-center" style="cursor: pointer;" @onclick="() => expandedSections[StepType.Exe] = !exeExpanded">
                    @if (exeExpanded)
                    {
                        <CxIcon Icon="FeatherIcon.ChevronDown" />
                    }
                    else
                    {
                        <CxIcon Icon="FeatherIcon.ChevronRight" />
                    }
                    &nbsp;
                    <StepTypeIcon StepType="StepType.Exe" />
                    &nbsp;
                    Exe steps
                </h6>
                @if (exeExpanded)
                {
                    <div class="row mt-3">
                        <div class="col-3 text-end">
                            <label class="form-label">File path</label>
                        </div>
                        <div class="col-9">
                            <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="File path" @bind-Value="ExeFilePath" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-3 text-end">
                            <label class="form-label">Arguments</label>
                        </div>
                        <div class="col-9">
                            <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Arguments" @bind-Value="ExeArguments" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                        </div>
                    </div>
                }
                <hr />
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">Close</HxButton>
    </FooterTemplate>
</HxOffcanvas>
