<HxOffcanvas @ref="Offcanvas" Backdrop="OffcanvasBackdrop.False" Size="OffcanvasSize.Small" ScrollingEnabled="true" Title="Advanced filters">
    <BodyTemplate>
        <div class="row">
            <div class="col">

                <HxButtonGroup Size="ButtonGroupSize.Small">
                    <FilterDropdown TItem="ConnectionInfoBase"
                                    FilterSet="ConnectionsFilter"
                                    IdSelector="c => c.ConnectionId.ToString()"
                                    TextSelector="c => c.ConnectionName"
                                    Items="Connections"
                                    OnChange="async () => await OnFiltersChanged.InvokeAsync()">
                        <TitleTemplate>
                            <CxIcon Icon="FeatherIcon.Database" />
                            Connection
                        </TitleTemplate>
                    </FilterDropdown>
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="async () => await ClearAsync()">
                        <CxIcon Icon="FeatherIcon.X" />
                        Clear all
                    </HxButton>
                </HxButtonGroup>

                <h6 class="mt-3">
                    <StepTypeIconComponent StepType_="StepType.Package" />
                    Package steps
                </h6>

                <div class="row mt-3">
                    <div class="col-3">
                        <label class="form-label">Folder</label>
                    </div>
                    <div class="col-9">
                        <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Folder" @bind-Value="PackageFolder" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-3">
                        <label class="form-label">Project</label>
                    </div>
                    <div class="col-9">
                        <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Project" @bind-Value="PackageProject" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-3">
                        <label class="form-label">Package</label>
                    </div>
                    <div class="col-9">
                        <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Package" @bind-Value="PackageName" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                    </div>
                </div>

                <h6 class="mt-3">
                    <StepTypeIconComponent StepType_="StepType.Pipeline" />
                    Pipeline steps
                </h6>

                <div class="row mt-3">
                    <div class="col-3">
                        <label class="form-label">Pipeline name</label>
                    </div>
                    <div class="col-9">
                        <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Pipeline name" @bind-Value="PipelineName" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                    </div>
                </div>

                <div class="row mt-2">
                    <div class="col">
                        <FilterDropdown TItem="PipelineClient"
                                        Items="PipelineClients"
                                        TextSelector="fa => fa.PipelineClientName"
                                        IdSelector="fa => fa.PipelineClientId.ToString()"
                                        FilterSet="PipelineClientsFilter"
                                        OnChange="async () => await OnFiltersChanged.InvokeAsync()">
                            <TitleTemplate>
                                Pipeline client
                            </TitleTemplate>
                        </FilterDropdown>
                    </div>
                </div>

                <h6 class="mt-3">
                    <StepTypeIconComponent StepType_="StepType.Function" />
                    Function steps
                </h6>

                <div class="row mt-3">
                    <div class="col-3">
                        <label class="form-label">URL</label>
                    </div>
                    <div class="col-9">
                        <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="URL" @bind-Value="FunctionUrl" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                    </div>
                </div>

                <div class="row mt-2">
                    <div class="col-3">
                        <label class="form-label">Input</label>
                    </div>
                    <div class="col-9">
                        <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Input" @bind-Value="FunctionInput" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                    </div>
                </div>

                <div class="row mt-2">
                    <div class="col">
                        <FilterDropdown TItem="FunctionApp"
                                        Items="FunctionApps"
                                        TextSelector="fa => fa.FunctionAppName"
                                        IdSelector="fa => fa.FunctionAppId.ToString()"
                                        FilterSet="FunctionAppsFilter"
                                        OnChange="async () => await OnFiltersChanged.InvokeAsync()">
                            <TitleTemplate>
                                Function app
                            </TitleTemplate>
                        </FilterDropdown>
                    </div>
                </div>

                <h6 class="mt-3">
                    <StepTypeIconComponent StepType_="StepType.Exe" />
                    Exe steps
                </h6>

                <div class="row mt-3">
                    <div class="col-3">
                        <label class="form-label">File path</label>
                    </div>
                    <div class="col-9">
                        <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="File path" @bind-Value="ExeFilePath" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-3">
                        <label class="form-label">Arguments</label>
                    </div>
                    <div class="col-9">
                        <DebounceTextInput type="text" class="form-control form-control-sm" placeholder="Arguments" @bind-Value="ExeArguments" @bind-Value:after="async () => await OnFiltersChanged.InvokeAsync()" />
                    </div>
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Offcanvas.LetAsync(x => x.HideAsync())">Close</HxButton>
    </FooterTemplate>
</HxOffcanvas>
