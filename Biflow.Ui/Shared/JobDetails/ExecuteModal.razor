@inject IHxMessengerService Messenger
@inject IHttpContextAccessor HttpContextAccessor
@inject IExecutionBuilderFactory BuilderFactory
@inject IExecutorService Executor

<HxModal @ref="Modal" Fullscreen="ModalFullscreen.Always" Scrollable="true" Title="Execute steps"
         BodyCssClass="pt-0"
         OnClosed="() => { Builder = null; ExecuteFilterText = string.Empty; ExecuteTagsFilterSet.Clear(); }">

    <BodyTemplate>
        @if (Builder is not null)
        {
            <div class="row mt-3">
                <span class="col fst-italic text-secondary small">Disabled steps, if selected, will be included in manual executions.</span>
            </div>

            <div class="row py-3">
                <div class="row">
                    <div class="col">
                        <CxIcon Icon="FeatherIcon.Tag" />
                        <span class="me-3">Tags</span>
                        @if (!Tags.Any())
                        {
                            <small class="text-secondary me-2">No tags</small>
                        }
                        @foreach (var tag in Tags)
                        {
                            <TagComponent Tag="tag"
                                          Selected="ExecuteTagsFilterSet.Contains(tag)"
                                          CssClass="mx-1"
                                          Style="cursor: pointer;"
                                          OnClick="() => { if (ExecuteTagsFilterSet.Contains(tag)) ExecuteTagsFilterSet.Remove(tag); else ExecuteTagsFilterSet.Add(tag); }" />
                        }
                    </div>
                </div>
                <div class="row mt-3">
                     <div class="col">
                         <div class="row">
                             <div class="col input-group input-group-sm">
                                <div class="input-group-text">
                                    <CxIcon Icon="FeatherIcon.Filter" />
                                </div>
                                <input type="search" class="form-control" @bind-value="ExecuteFilterText" @bind-value:event="oninput"
                                       placeholder="Filter by name" autocomplete="off" />
                            </div>
                            <div class="col-auto">
                                <FilterDropdown TItem="StepType"
                                                FilterSet="StepTypeFilter"
                                                Items="Builder.Steps.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                                                OnChange="StateHasChanged">
                                    <TitleTemplate>
                                        <CxIcon Icon="FeatherIcon.Tool" />
                                        Step type
                                    </TitleTemplate>
                                    <ItemTemplate Context="item">
                                        <StepTypeIconComponent StepType_="item" />
                                        @item.ToString()
                                    </ItemTemplate>
                                </FilterDropdown>
                            </div>
                            <div class="col-auto">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                @onclick="() => { ExecuteTagsFilterSet.Clear(); StepTypeFilter.Clear(); ExecuteFilterText = string.Empty; }">
                                    <CxIcon Icon="FeatherIcon.X" />
                                    Clear
                                </HxButton>
                            </div>
                         </div>
                    </div>
                    <div class="col">
                        <HxButtonGroup>
                        @*Add all available AND enabled steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                  @onclick="() => Builder.AddAll(s => s.IsEnabled)">
                            <CxIcon Icon="FeatherIcon.ChevronRight" />
                            Select enabled
                        </HxButton>
                        @*Add all available steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                  @onclick="() => Builder.AddAll()">
                            <CxIcon Icon="FeatherIcon.ChevronsRight" />
                            Select all
                        </HxButton>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="() => Builder.Clear()">
                            <CxIcon Icon="FeatherIcon.ChevronsLeft" />
                            Deselect all
                        </HxButton>
                    </HxButtonGroup>
                    </div>
                </div>
            </div>

            <div class="row mt-1">
                <div class="col">
                    <h6>Available steps</h6>
                    <div style="overflow-y: scroll; height: calc(100vh - 322px);">
                        <table class="table table-hover table-sm">
                            <tbody>
                                @foreach (var step in StepsAvailableToExecute)
                                {
                                    <tr style="cursor: pointer;" >
                                        <td class="@(step.IsEnabled ? null : "text-secondary") align-middle" @onclick="() => step.AddToExecution()">
                                            <StepTypeIconComponent StepType_="@step.StepType" />
                                            &nbsp;
                                            <HighlightableText Text="@step.StepName" PartToHighlight="@ExecuteFilterText" />
                                        </td>
                                        <td class="text-end @(Builder.DependencyMode == true ? "text-body-tertiary" : null)" @onclick="() => step.AddToExecution()">
                                            @step.ExecutionPhase
                                            &nbsp;
                                            <CxIcon Icon="FeatherIcon.Layers" />
                                        </td>
                                        @if (Builder.DependencyMode == true)
                                        {
                                            <td class="text-end">
                                                @if (step.HasDependencies)
                                                {
                                                    <HxDropdown>
                                                        <HxDropdownToggleElement title="Include dependencies">
                                                            <CxIcon Icon="LucideIcon.Network" />
                                                        </HxDropdownToggleElement>
                                                        <HxDropdownMenu>
                                                            <HxDropdownHeader>Include dependencies (only enabled steps)</HxDropdownHeader>
                                                            <HxDropdownItem OnClick="() => step.AddWithDependencies(true)">On-success dependencies</HxDropdownItem>
                                                            <HxDropdownItem OnClick="() => step.AddWithDependencies(false)">All dependencies</HxDropdownItem>
                                                        </HxDropdownMenu>
                                                    </HxDropdown>
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="col">
                    <h6>Selected steps</h6>
                    <div style="overflow-y: scroll; height: calc(100vh - 322px);">
                        <table class="table table-hover table-sm">
                            <tbody>
                                @foreach (var step in Builder.StepExecutions)
                                {
                                    <tr style="cursor: pointer;" @onclick="() => step.RemoveFromExecution()">
                                        <td>
                                            <StepTypeIconComponent StepType_="@step.StepType" />
                                            &nbsp;
                                            @step.StepName
                                        </td>
                                        <td class="text-end @(Builder.DependencyMode == true ? "text-body-tertiary" : null)">
                                            @step.ExecutionPhase
                                            &nbsp;
                                            <CxIcon Icon="FeatherIcon.Layers" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
        }
        else
        {
            <div class="row mt-5 mb-4">
                <div class="col text-center">
                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Regular" />
                </div>
            </div>
        }
    </BodyTemplate>

    <FooterTemplate>
        <div class="col mr-auto">
            <HxDropdownButtonGroup AutoClose="DropdownAutoClose.Outside">
                <HxDropdownToggleButton Color="ThemeColor.Secondary" Enabled="Builder is not null">
                    <CxIcon Icon="FeatherIcon.Bell" />
                    Notifications
                </HxDropdownToggleButton>
                <HxDropdownContent>
                    @if (Builder is not null)
                    {
                        <div class="row p-3" style="min-width: 20rem;">
                            <div class="col">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="execute_notify"
                                           checked=@Builder.Notify
                                           @bind-value="Builder.Notify">
                                    <label class="form-check-label" for="execute_notify">Notify based on subscriptions</label>
                                </div>
                                <h6 class="mt-3">Notify me</h6>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_none"
                                           checked=@(Builder.NotifyCaller is null)
                                            @onchange="() => Builder.NotifyCaller = null">
                                    <label class="form-check-label" for="radio_notify_me_none">None</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_completion"
                                           checked=@(Builder.NotifyCaller == SubscriptionType.OnCompletion)
                                           @onchange="() => Builder.NotifyCaller = SubscriptionType.OnCompletion">
                                    <label class="form-check-label" for="radio_notify_me_completion">On completion</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_failure"
                                           checked=@(Builder.NotifyCaller == SubscriptionType.OnFailure)
                                           @onchange="() => Builder.NotifyCaller = SubscriptionType.OnFailure">
                                    <label class="form-check-label" for="radio_notify_me_failure">On failure</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_success"
                                           checked=@(Builder.NotifyCaller == SubscriptionType.OnSuccess)
                                           @onchange="() => Builder.NotifyCaller = SubscriptionType.OnSuccess">
                                    <label class="form-check-label" for="radio_notify_me_success">On success</label>
                                </div>
                                <div class="form-check mt-3">
                                    <input type="checkbox" class="form-check-input" id="execute_notify_me_overtime"
                                           checked=@Builder.NotifyCallerOvertime
                                           @bind-value="Builder.NotifyCallerOvertime">
                                    <label class="form-check-label" for="execute_notify_me_overtime">On overtime</label>
                                </div>
                            </div>
                        </div>
                    }
                </HxDropdownContent>
            </HxDropdownButtonGroup>
        </div>
        <HxButton Color="ThemeColor.Primary" CssClass="ml-5" @onclick="Execute">
            <CxIcon Icon="FeatherIcon.Play" />
            Execute
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [CascadingParameter] public Job? Job { get; set; }

    [Parameter] public EventCallback<Guid> OnExecutionStarted { get; set; }

    private ExecutionBuilder? Builder { get; set; }

    private IEnumerable<ITag> Tags => Builder?.Steps
    .SelectMany(step => step.Tags)
    .DistinctBy(t => t.TagName)
    .OrderBy(t => t.TagName) ?? Enumerable.Empty<ITag>();

    private HxModal? Modal { get; set; }

    private string ExecuteFilterText { get; set; } = string.Empty;
    private HashSet<ITag> ExecuteTagsFilterSet { get; set; } = new();
    private HashSet<StepType> StepTypeFilter { get; } = new();

    private IEnumerable<ExecutionBuilderStep> StepsAvailableToExecute =>
    Builder?.Steps
    .Where(step => step.StepName?.ContainsIgnoreCase(ExecuteFilterText) == true) // Step name filter
    .Where(step => !StepTypeFilter.Any() || StepTypeFilter.Contains(step.StepType)) // Filter based on step type
    .Where(step => ExecuteTagsFilterSet.All(tag => step.Tags.Any(t => t.TagName == tag.TagName))) // Tag filter
    ?? Enumerable.Empty<ExecutionBuilderStep>();

    private async Task Execute()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(Builder);
            var execution = await Builder.SaveExecutionAsync();
            if (execution is not null)
            {
                await OnExecutionStarted.InvokeAsync(execution.ExecutionId);
                await Executor.StartExecutionAsync(execution.ExecutionId);
            }
            Builder = null;
            await Modal.LetAsync(x => x.HideAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error starting execution", ex.Message);
        }
    }

    public async Task ShowAsync(IEnumerable<Step>? initiallySelectedSteps = null)
    {
        Builder = null;
        await Modal.LetAsync(x => x.ShowAsync());
        ArgumentNullException.ThrowIfNull(Job);
        string user = HttpContextAccessor.HttpContext?.User?.Identity?.Name
            ?? throw new ArgumentNullException(nameof(user), "User was null");
        Builder = await BuilderFactory.CreateAsync(Job.JobId, user);
        if (Builder is null)
        {
            Messenger.AddWarning("Job with the given id could not be found");
            return;
        }
        foreach (var selected in initiallySelectedSteps ?? Enumerable.Empty<Step>())
        {
            var step = Builder.Steps.FirstOrDefault(s => s.StepId == selected.StepId);
            step?.AddToExecution();
        }
        StateHasChanged();
    }

}