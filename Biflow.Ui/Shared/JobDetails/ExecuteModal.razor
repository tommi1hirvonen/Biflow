@implements IDisposable

@inject IHxMessengerService Messenger
@inject IExecutionBuilderFactory<AppDbContext> BuilderFactory
@inject IExecutorService Executor

<HxModal @ref="modal" Fullscreen="ModalFullscreen.Always" Scrollable="true" Title="Execute steps"
         BodyCssClass="pt-0"
         OnClosed="OnClosed">

    <BodyTemplate>
        @if (builder is not null)
        {
            var (stepsCount, stepParamsCount, jobParamsCount) = (
                builder.StepExecutions.Count(),
                builder.StepExecutions.Sum(e => e.Parameters.Count()),
                builder.Parameters.Count());
            string badgeClass(int? count) => count > 0 ? "bg-primary" : "bg-secondary";
            <ul class="nav nav-tabs mt-2" role="tablist">
                <li class="nav-item" role="presentation">
                    <a class="nav-link @(activeView == View.Steps ? "active" : null)" @onclick="() => activeView = View.Steps" style="cursor: pointer;">
                        Steps
                        <span class="badge rounded-pill ms-3 @badgeClass(stepsCount)">
                            @stepsCount
                        </span>
                    </a>
                </li>
                <li class="nav-item" role="presentation">
                    <a class="nav-link @(activeView == View.StepParameters ? "active" : null)" @onclick="() => activeView = View.StepParameters" style="cursor: pointer;">
                        Step parameters
                        <span class="badge rounded-pill ms-3 @badgeClass(stepParamsCount)">
                            @stepParamsCount
                        </span>
                    </a>
                </li>
                <li class="nav-item" role="presentation">
                    <a class="nav-link @(activeView == View.JobParameters ? "active" : null)" @onclick="() => activeView = View.JobParameters" style="cursor: pointer;">
                        Job parameters
                        <span class="badge rounded-pill ms-3 @badgeClass(jobParamsCount)">
                            @jobParamsCount
                        </span>
                    </a>
                </li>
            </ul>

            @if (activeView == View.Steps)
            {
                <div class="row">
                    <div class="row">
                        <div class="col">
                            <div class="row">
                                <div class="col-auto mt-3">
                                    <div class="input-group input-group-sm">
                                        <div class="input-group-text">
                                            <CxIcon Icon="FeatherIcon.Filter" />
                                        </div>
                                        <input type="search" class="form-control" @bind-value="executeFilterText" @bind-value:event="oninput"
                                               placeholder="Filter by name" autocomplete="off" style="min-width: 15rem; max-width: 15rem;" />
                                    </div>
                                </div>
                                <div class="col-auto mt-3">
                                    <HxButtonGroup Size="ButtonGroupSize.Small">
                                        <FilterDropdown TItem="StepType"
                                                        FilterSet="stepTypeFilter"
                                                        Items="builder.Steps.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                                                        OnChange="StateHasChanged">
                                            <TitleTemplate>
                                                <CxIcon Icon="FeatherIcon.Tool" />
                                                Step type
                                            </TitleTemplate>
                                            <ItemTemplate Context="item">
                                                <StepTypeIcon StepType="item" />
                                                @item.ToString()
                                            </ItemTemplate>
                                        </FilterDropdown>
                                        <FilterDropdown TItem="ITag"
                                                        FilterSet="executeTagsFilterSet"
                                                        Items="Tags"
                                                        IdSelector="tag => tag.TagId.ToString()"
                                                        TextSelector="tag => tag.TagName"
                                                                                    IsSearchable
                                                         OnChange="StateHasChanged">
                                             <TitleTemplate>
                                                 <CxIcon Icon="FeatherIcon.Tag" />
                                                 Tags
                                             </TitleTemplate>
                                             <ItemTemplate Context="item">
                                                 <TagBadge Tag="item" />
                                             </ItemTemplate>
                                         </FilterDropdown>
                                         <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                                   @onclick="() => { executeTagsFilterSet.Clear(); stepTypeFilter.Clear(); executeFilterText = string.Empty; }">
                                             <CxIcon Icon="FeatherIcon.X" />
                                             Clear
                                         </HxButton>
                                    </HxButtonGroup>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-auto mt-2">
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="execute_radio_all"
                                               checked=@(stateFilter == StateFilter.All)
                                               @onchange="() => stateFilter = StateFilter.All">
                                        <label class="form-check-label" for="execute_radio_all">All</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="execute_radio_enabled"
                                               checked=@(stateFilter == StateFilter.Enabled)
                                               @onchange="() => stateFilter = StateFilter.Enabled">
                                        <label class="form-check-label" for="execute_radio_enabled">Enabled</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="execute_radio_disabled"
                                               checked=@(stateFilter == StateFilter.Disabled)
                                               @onchange="() => stateFilter = StateFilter.Disabled">
                                        <label class="form-check-label" for="execute_radio_disabled">Disabled</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col mt-3">
                            <HxButtonGroup>
                                @*Add all available AND enabled steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                            @onclick="() => builder.AddAll(s => StepsAvailableToExecute.Any(available => s.StepId == available.StepId))">
                                    <CxIcon Icon="FeatherIcon.ChevronsRight" />
                                    Select all
                                </HxButton>
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="() => builder.Clear()">
                                    <CxIcon Icon="FeatherIcon.ChevronsLeft" />
                                    Deselect all
                                </HxButton>
                            </HxButtonGroup>
                        </div>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col">
                        <h6>Available steps</h6>
                        <div style="overflow-y: scroll; height: calc(100vh - 325px);">
                            <table class="table table-hover table-sm">
                                <tbody>
                                    @foreach (var step in StepsAvailableToExecute)
                                    {
                                        <tr style="cursor: pointer;" title="@(step.IsEnabled ? null : "Step is disabled")">
                                            <td class="@(step.IsEnabled ? null : "text-secondary") align-middle" @onclick="() => step.AddToExecution()">
                                                <StepTypeIcon StepType="@step.StepType" />
                                                &nbsp;
                                                <HighlightableText Text="@step.StepName" PartToHighlight="@executeFilterText" />
                                            </td>
                                            <td class="@(builder.DependencyMode == true ? "text-body-tertiary" : null)" @onclick="() => step.AddToExecution()">
                                                <CxIcon Icon="FeatherIcon.Layers" />
                                                <sup>@step.ExecutionPhase</sup>
                                            </td>
                                            @if (builder.DependencyMode == true)
                                            {
                                                <td class="text-end pe-2">
                                                    @if (step.HasDependencies)
                                                    {
                                                        <HxDropdown>
                                                            <HxDropdownToggleElement title="Include dependencies">
                                                                <CxIcon Icon="LucideIcon.Workflow" />
                                                            </HxDropdownToggleElement>
                                                            <HxDropdownMenu>
                                                                <HxDropdownHeader>Include dependencies (only enabled steps)</HxDropdownHeader>
                                                                <HxDropdownItem OnClick="() => step.AddWithDependencies(true)">On-success dependencies</HxDropdownItem>
                                                                <HxDropdownItem OnClick="() => step.AddWithDependencies(false)">All dependencies</HxDropdownItem>
                                                            </HxDropdownMenu>
                                                        </HxDropdown>
                                                    }
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="col">
                        <h6>Selected steps</h6>
                        <div style="overflow-y: scroll; height: calc(100vh - 325px);">
                            <table class="table table-hover table-sm">
                                <tbody>
                                    @foreach (var step in builder.StepExecutions)
                                    {
                                        <tr style="cursor: pointer;" @onclick="() => step.RemoveFromExecution()">
                                            <td>
                                                <StepTypeIcon StepType="@step.StepType" />
                                                &nbsp;
                                                @step.StepName
                                            </td>
                                            <td class="@(builder.DependencyMode == true ? "text-body-tertiary" : null)">
                                                <CxIcon Icon="FeatherIcon.Layers" />
                                                <sup>@step.ExecutionPhase</sup>
                                            </td>
                                            <td class="text-end">
                                                @if (step.SupportsParameters && step.Parameters.Any())
                                                {
                                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" title="Edit parameters"
                                                    @onclick="() => { parameterEditStep = step; activeView = View.StepParameters; }">
                                                        <CxIcon Icon="FeatherIcon.AtSign" />
                                                    </HxButton>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            }
            else if (activeView == View.StepParameters)
            {
                <div class="row mt-3">
                    <div class="col-5">
                        <h6>
                            Selected steps
                            &nbsp;
                            <HxPopover Content="Only steps that have parameters are listed" Trigger="PopoverTrigger.Hover">
                                <CxIcon Icon="FeatherIcon.Info" />
                            </HxPopover>
                        </h6>
                        <div style="overflow-y: scroll; height: calc(100vh - 250px);">
                            <table class="table table-hover table-sm">
                                <tbody>
                                    @foreach (var step in builder.StepExecutions.Where(s => s.Parameters.Any()))
                                    {
                                        <tr style="cursor: pointer;" class="@(step.StepId == parameterEditStep?.StepId ? "fw-bold" : null)" @onclick="() => ToggleParameterEditStep(step)">
                                            <td>
                                                <StepTypeIcon StepType="@step.StepType" />
                                                &nbsp;
                                                @step.StepName
                                            </td>
                                            <td class="text-end @(builder.DependencyMode == true ? "text-body-tertiary" : null)">
                                                @step.ExecutionPhase
                                                &nbsp;
                                                <CxIcon Icon="FeatherIcon.Layers" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="col-7">
                        <h6>Parameters</h6>
                        <div style="overflow-y: scroll; height: calc(100vh - 250px);">
                            <table class="table table-sm">
                                <tbody>
                                    @foreach (var parameter in parameterEditStep?.Parameters.OrderBy(p => p.DisplayName) ?? Enumerable.Empty<StepExecutionParameterBase>())
                                    {
                                        <tr>
                                            <td class="align-middle">
                                                @parameter.DisplayName
                                            </td>
                                            @if (parameter.InheritFromExecutionParameter is not null)
                                            {
                                                <td colspan="2">
                                                    @parameter.DisplayValueType = @parameter.DisplayValue
                                                </td>
                                            }
                                            else
                                            {
                                                <DynamicParameterEditor Parameter="parameter"
                                                                               TParameter="StepExecutionParameterBase"
                                                                               OnParameterEdit="p => expressionEditOffcanvas.LetAsync(x => x.ShowAsync(p))">
                                                    <StaticEditTemplate>
                                                        <ParameterTypeValueEditor Parameter="parameter" />
                                                    </StaticEditTemplate>
                                                </DynamicParameterEditor>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
            else if (activeView == View.JobParameters)
            {
                <div class="row mt-3">
                    <div class="col">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th></th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var parameter in builder.Parameters.OrderBy(p => p.DisplayName))
                                {
                                    <tr>
                                        <td>
                                            @parameter.DisplayName
                                        </td>
                                        <DynamicParameterEditor Parameter="parameter"
                                                                       TParameter="DynamicParameter"
                                                                       OnParameterEdit="p => jobParameterExpressionEditOffcanvas.LetAsync(x => x.ShowAsync(p))">
                                            <StaticEditTemplate>
                                                <ParameterTypeValueEditor Parameter="parameter" />
                                            </StaticEditTemplate>
                                        </DynamicParameterEditor>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="row mt-5 mb-4">
                <div class="col text-center">
                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Regular" />
                </div>
            </div>
        }
    </BodyTemplate>

    <FooterTemplate>
        <div class="col mr-auto">
            <HxDropdownButtonGroup AutoClose="DropdownAutoClose.Outside">
                <HxDropdownToggleButton Color="ThemeColor.Secondary" Enabled="builder is not null">
                    <CxIcon Icon="FeatherIcon.Bell" />
                    Notifications
                </HxDropdownToggleButton>
                <HxDropdownContent>
                    @if (builder is not null)
                    {
                        <div class="row p-3" style="min-width: 20rem;">
                            <div class="col">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="execute_notify"
                                           checked=@builder.Notify
                                           @bind-value="builder.Notify">
                                    <label class="form-check-label" for="execute_notify">Notify based on subscriptions</label>
                                </div>
                                <h6 class="mt-3">Notify me</h6>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_none"
                                           checked=@(builder.NotifyCaller is null)
                                            @onchange="() => builder.NotifyCaller = null">
                                    <label class="form-check-label" for="radio_notify_me_none">None</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_completion"
                                           checked=@(builder.NotifyCaller == AlertType.OnCompletion)
                                           @onchange="() => builder.NotifyCaller = AlertType.OnCompletion">
                                    <label class="form-check-label" for="radio_notify_me_completion">On completion</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_failure"
                                           checked=@(builder.NotifyCaller == AlertType.OnFailure)
                                           @onchange="() => builder.NotifyCaller = AlertType.OnFailure">
                                    <label class="form-check-label" for="radio_notify_me_failure">On failure</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="radio_notify_me_success"
                                           checked=@(builder.NotifyCaller == AlertType.OnSuccess)
                                           @onchange="() => builder.NotifyCaller = AlertType.OnSuccess">
                                    <label class="form-check-label" for="radio_notify_me_success">On success</label>
                                </div>
                                <div class="form-check mt-3">
                                    <input type="checkbox" class="form-check-input" id="execute_notify_me_overtime"
                                           checked=@builder.NotifyCallerOvertime
                                           @bind-value="builder.NotifyCallerOvertime">
                                    <label class="form-check-label" for="execute_notify_me_overtime">On overtime</label>
                                </div>
                            </div>
                        </div>
                    }
                </HxDropdownContent>
            </HxDropdownButtonGroup>
        </div>
        <HxButton Color="ThemeColor.Primary" CssClass="ml-5" @onclick="Execute" Enabled="builder?.StepExecutions.Any() ?? false">
            <CxIcon Icon="FeatherIcon.Play" />
            Execute
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

<ExpressionEditOffcanvas @ref="expressionEditOffcanvas" TParameter="StepExecutionParameterBase" OnExpressionChanged="StateHasChanged">
    <div class="row mt-3">
        <div class="col">
            <ExpressionParameterEditor StepParameter="context" />
        </div>
    </div>
    <StepExpressionParameterNotice />
</ExpressionEditOffcanvas>

<ExpressionEditOffcanvas @ref="jobParameterExpressionEditOffcanvas" TParameter="DynamicParameter" OnExpressionChanged="StateHasChanged">
    <div class="row mt-3">
        <div class="col text-secondary small">
            Job parameter expressions have the following built-in variables automatically available. They can be used to access the internal ids during execution.
            <ul>
                <li><span class="font-monospace text-secondary-emphasis">@ExpressionParameterNames.ExecutionId</span> - The current execution id. An empty guid is passed when the expression is being tested.</li>
                <li><span class="font-monospace text-secondary-emphasis">@ExpressionParameterNames.JobId</span> - The id of the current job.</li>
            </ul>
        </div>
    </div>
</ExpressionEditOffcanvas>

@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter] public EventCallback<ExecutionStartResponse> OnExecutionStarted { get; set; }

    private readonly HashSet<StepType> stepTypeFilter = new();
    private readonly HashSet<ITag> executeTagsFilterSet = new();

    private ExpressionEditOffcanvas<StepExecutionParameterBase>? expressionEditOffcanvas;
    private ExpressionEditOffcanvas<DynamicParameter>? jobParameterExpressionEditOffcanvas;
    private ExecutionBuilder? builder;
    private HxModal? modal;
    private string executeFilterText = string.Empty;
    private View activeView = View.Steps;
    private ExecutionBuilderStepExecution? parameterEditStep;
    private StateFilter stateFilter = StateFilter.Enabled;

    private enum StateFilter { All, Enabled, Disabled }

    private enum View { Steps, StepParameters, JobParameters }

    private IEnumerable<ITag> Tags => builder?.Steps
        .SelectMany(step => step.Tags)
        .DistinctBy(t => t.TagName)
        .OrderBy(t => t.TagName) ?? Enumerable.Empty<ITag>();

    private IEnumerable<ExecutionBuilderStep> StepsAvailableToExecute => builder?.Steps
        .Where(step => stateFilter switch { StateFilter.Enabled => step.IsEnabled, StateFilter.Disabled => !step.IsEnabled, _ => true })
        .Where(step => step.StepName?.ContainsIgnoreCase(executeFilterText) == true) // Step name filter
        .Where(step => !stepTypeFilter.Any() || stepTypeFilter.Contains(step.StepType)) // Filter based on step type
        .Where(step => executeTagsFilterSet.All(tag => step.Tags.Any(t => t.TagName == tag.TagName))) // Tag filter
        ?? Enumerable.Empty<ExecutionBuilderStep>();

    private void ToggleParameterEditStep(ExecutionBuilderStepExecution step) =>
        parameterEditStep = step.StepId == parameterEditStep?.StepId ? null : step;

    private async Task Execute()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(builder);
            var execution = await builder.SaveExecutionAsync();
            if (execution is not null)
            {
                try
                {
                    await Executor.StartExecutionAsync(execution.ExecutionId);
                    await OnExecutionStarted.InvokeAsync(new(execution.ExecutionId, true));
                }
                catch
                {
                    await OnExecutionStarted.InvokeAsync(new(execution.ExecutionId, false));
                    throw;   
                }
            }
            builder?.Dispose();
            builder = null;
            await modal.LetAsync(x => x.HideAsync());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error starting execution", ex.Message);
        }
    }

    private void OnClosed()
    {
        builder?.Dispose();
        builder = null;
        executeFilterText = string.Empty;
        executeTagsFilterSet.Clear();
        stepTypeFilter.Clear();
        parameterEditStep = null;
        activeView = View.Steps;
    }

    public async Task ShowAsync(Guid jobId, IEnumerable<Step>? initiallySelectedSteps = null)
    {
        activeView = View.Steps;
        builder?.Dispose();
        builder = null;
        await modal.LetAsync(x => x.ShowAsync());

        ArgumentNullException.ThrowIfNull(AuthenticationState);
        var authState = await AuthenticationState;
        var username = authState.User.Identity?.Name;

        builder = await BuilderFactory.CreateAsync(jobId, username);
        if (builder is null)
        {
            Messenger.AddWarning("Job with the given id could not be found");
            return;
        }
        foreach (var selected in initiallySelectedSteps ?? Enumerable.Empty<Step>())
        {
            var step = builder.Steps.FirstOrDefault(s => s.StepId == selected.StepId);
            step?.AddToExecution();
        }
        StateHasChanged();
    }

    public void Dispose() => builder?.Dispose();
}