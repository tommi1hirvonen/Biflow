@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster

<div class="row mt-3">
    <div class="col">
        <button class="btn btn-secondary" @onclick="OpenConfirmDeleteModalAsync">
            <SvgIcon Icon="FeatherIcon.Trash2" />
            Delete unused...
        </button>
    </div>
</div>

<div class="row my-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Tag</th>
                            <th>Sort order</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (tags is null)
                        {
                            <tr>
                                <td colspan="4" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td>
                            </tr>
                        }
                        else if (!tags.Any())
                        {
                            <tr>
                                <td colspan="4" class="px-3">No job tags</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var tag in tags.Order())
                            {
                                var jobs = tag.Jobs.Count();
                                <tr>
                                    <td class="align-middle">
                                        <TagBadge Tag="tag" />
                                    </td>
                                    <td class="align-middle">
                                        @tag.SortOrder
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            @*Dropdown to edit the tag's name*@
                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="() => SetTemplateTag(tag)">
                                                    <SvgIcon Icon="FeatherIcon.Edit3" />
                                                </HxDropdownToggleButton>
                                                <HxDropdownContent CssClass="p-4">
                                                    <EditForm Model="templateTag" OnValidSubmit="async () => await UpdateTagAsync(tag)" Context="_context" style="min-width: 20rem; gap: 0.2rem;">
                                                        <DataAnnotationsValidator />
                                                        <ValidationSummary />
                                                        <div>
                                                            <label class="form-label">New name</label>
                                                            <InputText class="form-control form-control-sm" @bind-Value="templateTag.TagName" autocomplete="off"></InputText>
                                                        </div>
                                                        <div>
                                                            <label class="form-label">Sort order</label>
                                                            <InputNumber class="form-control form-control-sm" @bind-Value="templateTag.SortOrder" autocomplete="off"></InputNumber>
                                                        </div>
                                                        <HxSubmit Size="ButtonSize.Small" Color="ThemeColor.Success" CssClass="mt-3">Save</HxSubmit>
                                                    </EditForm>
                                                </HxDropdownContent>
                                            </HxDropdownButtonGroup>
                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                                    <SvgIcon Icon="FeatherIcon.Trash2" />
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                    <HxDropdownItem @onclick="async () => await DeleteTag(tag)">Confirm</HxDropdownItem>
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>
                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                                    @tag.Color
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownHeader>Tag color</HxDropdownHeader>
                                                    @foreach (var color in Enum.GetValues<TagColor>())
                                                    {
                                                        <HxDropdownItem OnClick="async () => await SetTagColorAsync(tag, color)">@color</HxDropdownItem>
                                                    }
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>
                                        </div>
                                    </td>
                                    <td class="align-middle">
                                        <a class="text-body" href="javascript:void(0)" @onclick="async () => await ShowEditModalAsync(tag)">
                                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                                        </a>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<HxModal @ref="confirmDeleteModal" Size="ModalSize.Regular" Title="Delete tags">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                Delete these unused tags?
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                @foreach (var tag in UnusedTags)
                {
                    <TagBadge Tag="tag" CssClass="m-1" />
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await confirmDeleteModal.LetAsync(x => x.HideAsync())">Cancel</button>
        <button class="btn btn-danger" @onclick="DeleteUnusedTagsAsync">Delete</button>
    </FooterTemplate>
</HxModal>

<HxModal @ref="editModal" Size="ModalSize.Large" Title="@($"Edit tag {editTag?.TagName}")" Scrollable="true">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var job in editTag?.Jobs.OrderBy(j => j.JobName).AsEnumerable() ?? [])
                        {
                            <tr>
                                <td class="align-middle">
                                    @job.JobName
                                </td>
                                <td class="align-middle">
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-auto" @onclick="async () => await DeleteJobTag(job)">
                                            <SvgIcon Icon="FeatherIcon.Delete" />
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await editModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private readonly JobTag templateTag = new(string.Empty);

    private List<JobTag>? tags;
    private HxModal? confirmDeleteModal;
    private HxModal? editModal;
    private JobTag? editTag;

    private IEnumerable<JobTag> UnusedTags => tags?
        .Where(t => !t.Jobs.Any())
        .Order()
        .AsEnumerable()
        ?? [];

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run(DbContextFactory.CreateDbContext);
        tags = await context.JobTags
            .AsNoTrackingWithIdentityResolution()
            .Include(t => t.Jobs)
            .ToListAsync();
    }

    private async Task OpenConfirmDeleteModalAsync()
    {
        if (!UnusedTags.Any())
        {
            Toaster.AddInformation("No unused job tags");
            return;
        }

        await confirmDeleteModal.LetAsync(x => x.ShowAsync());
    }

    private async Task DeleteUnusedTagsAsync()
    {
        var response = await Mediator.SendAsync(new DeleteUnusedJobTagsCommand());
        tags?.RemoveAll(t => response.DeletedTags.Any(d => d.TagId == t.TagId));
        await confirmDeleteModal.LetAsync(x => x.HideAsync());
    }

    private void SetTemplateTag(Tag tag)
    {
        templateTag.TagName = tag.TagName;
        templateTag.SortOrder = tag.SortOrder;
    }

    private async Task UpdateTagAsync(Tag tag)
    {
        try
        {
            tag.TagName = templateTag.TagName;
            tag.SortOrder = templateTag.SortOrder;
            await Mediator.SendAsync(new UpdateTagCommand(tag));
        }
        catch (DbUpdateConcurrencyException)
        {
            Toaster.AddError("Concurrency error", "The tag was modified outside of this session. Reload the page to view the most recent values.");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error updating tag", ex.Message);
        }
    }

    private async Task DeleteTag(JobTag tag)
    {
        await Mediator.SendAsync(new DeleteTagCommand(tag.TagId));
        tags?.Remove(tag);
    }

    private async Task DeleteJobTag(Job job)
    {
        if (editTag is null)
        {
            return;
        }
        await Mediator.SendAsync(new DeleteJobTagCommand(job.JobId, editTag.TagId));
        editTag.Jobs.Remove(job);
    }

    private async Task SetTagColorAsync(Tag tag, TagColor color)
    {
        tag.Color = color;
        await Mediator.SendAsync(new UpdateTagCommand(tag));
    }

    private async Task ShowEditModalAsync(JobTag tag)
    {
        editTag = tag;
        await editModal.LetAsync(x => x.ShowAsync());
    }
}
