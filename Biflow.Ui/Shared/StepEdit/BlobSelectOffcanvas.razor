@inject IDbContextFactory<AppDbContext> DbContextFactory

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Regular" Title="Select blob" RenderMode="OffcanvasRenderMode.Always">
    <BodyTemplate>
        <div class="row align-items-end">
            <div class="col">
                <label class="form-label">Blob storage client</label>
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <SvgIcon Icon="LucideIcon.Container" />
                    </div>
                    <select class="form-select form-select-sm" @bind="_clientId" @bind:after="LoadAsync">
                        <option value="@Guid.Empty">Select client</option>
                        @foreach (var client in _clients ?? [])
                        {
                            <option value="@client.BlobStorageClientId">@client.BlobStorageClientName</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <BlobStorageBrowser @ref="_browser" OnItemSelected="r => _response = r" />
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectBlobAsync"
                  Enabled="_response is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public EventCallback<BlobSelectedResponse> OnBlobSelected { get; set; }

    private HxOffcanvas? _offcanvas;
    private IEnumerable<BlobStorageClient>? _clients;
    private Guid _clientId;
    private BlobSelectedResponse? _response;
    private BlobStorageBrowser? _browser;

    public async Task ShowAsync()
    {
        if (_clients is null)
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            _clients = await context.BlobStorageClients
                .Include(c => c.AppRegistration)
                .OrderBy(c => c.BlobStorageClientName)
                .ToArrayAsync();
        }
        await _offcanvas.LetAsync(x => x.ShowAsync());
        StateHasChanged();
    }

    private async Task LoadAsync()
    {
        ArgumentNullException.ThrowIfNull(_clients);
        var client = _clients.FirstOrDefault(c => c.BlobStorageClientId == _clientId);
        if (client is null)
        {
            return;
        }
        await _browser.LetAsync(x => x.SetClientAsync(client));
    }

    private async Task SelectBlobAsync()
    {
        if (_response is null)
        {
            return;
        }
        await OnBlobSelected.InvokeAsync(_response);
        await _offcanvas.LetAsync(x => x.HideAsync());
    }
}
