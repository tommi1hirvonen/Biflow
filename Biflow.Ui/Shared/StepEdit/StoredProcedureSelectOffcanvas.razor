@inject ToasterService Toaster

<HxOffcanvas @ref="offcanvas" Size="OffcanvasSize.Regular" OnClosed="OnClosed" Title="Select stored procedure">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="input-group input-group-sm">
                    <span class="input-group-text">
                        <SvgIcon Icon="FeatherIcon.Filter" />
                    </span>
                    <input type="text" class="form-control form-control-sm" autocomplete="off" placeholder="Schema"
                           @bind-value="filterTextSchema" @bind-value:event="oninput" />
                    <input type="text" class="form-control form-control-sm" autocomplete="off" placeholder="Name"
                           @bind-value="filterTextName" @bind-value:event="oninput" />
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                Stored procedures
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (procedures is null)
                        {
                            <tr><td class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td></tr>
                        }
                        else if (procedures.Count() == 0)
                        {
                            <tr><td>No stored procedures</td></tr>
                        }
                        else
                        {
                            foreach (var proc in ProceduresFiltered)
                            {
                                <tr style="cursor: pointer;"
                                    @onclick="() => selectedProcedure = proc"
                                    class="@(proc == selectedProcedure ? "bg-body-tertiary fw-bold" : null)">
                                    <td class="small">
                                        <HighlightableText Text="@(proc.QuotedSchemaName)" PartToHighlight="@filterTextSchema" />.<HighlightableText Text="@(proc.QuotedProcedureName)" PartToHighlight="@filterTextName" />@proc.ArgumentSignature
                                    </td>
                                </tr>
                                @if (proc == selectedProcedure && proc.Parameters.Any())
                                {
                                    <tr class="no-hover">
                                        <td colspan="2" class="bg-body-tertiary">
                                            <div class="row">
                                                <div class="col">
                                                    <h6 class="mx-2">Parameters</h6>
                                                    <dl class="row mx-3 small">
                                                        @foreach (var param in proc.Parameters)
                                                        {
                                                            <dt class="col-sm-6">@param.ParameterName</dt>
                                                            <dd class="col-sm-6">@param.ParameterType</dd>
                                                        }
                                                    </dl>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectProcedure"
                  Enabled="selectedProcedure is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public EventCallback<IStoredProcedure> OnProcedureSelected { get; set; }

    private HxOffcanvas? offcanvas;
    private IEnumerable<IStoredProcedure>? procedures;
    private string filterTextName = string.Empty;
    private string filterTextSchema = string.Empty;
    private IStoredProcedure? selectedProcedure;

    private IEnumerable<IStoredProcedure> ProceduresFiltered => procedures?
        .Where(proc => proc.QuotedSchemaName.ContainsIgnoreCase(filterTextSchema))
        .Where(proc => proc.QuotedProcedureName.ContainsIgnoreCase(filterTextName))
        .OrderBy(proc => proc.SchemaName)
        .ThenBy(proc => proc.ProcedureName)
        .AsEnumerable() ?? [];

    private async Task SelectProcedure()
    {
        if (selectedProcedure is not null)
        {
            await OnProcedureSelected.InvokeAsync(selectedProcedure);
            await offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    public void OnClosed()
    {
        procedures = null;
        selectedProcedure = null;
        filterTextSchema = string.Empty;
        filterTextName = string.Empty;
    }

    public async Task ShowAsync(ConnectionBase connection)
    {
        await offcanvas.LetAsync(x => x.ShowAsync());
        try
        {
            procedures = connection switch
            {
                MsSqlConnection ms => await ms.GetStoredProceduresAsync(),
                SnowflakeConnection sf => await sf.GetStoredProceduresAsync(),
                _ => throw new ArgumentException($"Unsupported connection type {connection.GetType().Name}")
            };
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading procedures", ex.Message);
        }
    }
}
