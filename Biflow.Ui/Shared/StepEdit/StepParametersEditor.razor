@typeparam TParameter where TParameter : StepParameterBase

@if (Step is not null)
{
    <p />
    <h5>
        @Title
        &nbsp;
        @if (!string.IsNullOrEmpty(InfoContent))
        {
            <HxPopover Placement="PopoverPlacement.Right"
                       Trigger="PopoverTrigger.Hover"
                       Html
                       Sanitize="false"
                       Content="@InfoContent">
                <ChildContent>
                    <span style="cursor: pointer;">
                        <SvgIcon Icon="FeatherIcon.Info" />
                    </span>
                </ChildContent>
            </HxPopover>
        }
    </h5>
    <table id="parameters_table" class="table table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!Step.StepParameters.Any())
            {
                <tr><td colspan="5">No parameters</td></tr>
            }
            @{
                var count = 0;
            }
            @foreach (var param in Step.StepParameters)
            {
                <tr>
                    <td>
                        <InputText class="form-control form-control-sm"
                                   @bind-Value="param.ParameterName"
                                   placeholder="Name"
                                   @bind-Value:after="() => ParametersValidator.LetAsync(x => x.ValidateAsync())" />
                    </td>
                    <td class="align-middle">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="inherit_param_@count"
                                   checked=@(param.InheritFromJobParameterId is not null)
                                   disabled=@(!JobParameters.Any())
                                   @onchange="args => SetJobParameter((bool)args.Value!, param)">
                            <label class="form-check-label fw-normal" for="inherit_param_@count">Inherit</label>
                        </div>
                    </td>
                    @if (param.InheritFromJobParameterId is not null)
                    {
                        <td colspan="2">
                            <InputSelect class="form-select form-select-sm"
                                         @bind-Value:get="param.InheritFromJobParameterId"
                                         @bind-Value:set="id => SetJobParameter(true, param, id)">
                                @foreach (var jobParam in JobParameters.OrderBy(p => p.ParameterName))
                                {
                                    <option value="@jobParam.ParameterId">
                                        @jobParam.DisplaySummary
                                    </option>
                                }
                            </InputSelect>
                        </td>
                    }
                    else
                    {
                        <DynamicParameterEditor Parameter="param"
                                                       TParameter="StepParameterBase"
                                                       OnParameterEdit="OnParameterEdit">
                            <StaticEditTemplate>
                                <ParameterTypeValueEditor Parameter="param" />
                            </StaticEditTemplate>
                        </DynamicParameterEditor>
                    }
                    <td>
                        <HxButtonGroup Size="ButtonGroupSize.Small">
                            <HxButton Color="ThemeColor.None"
                                      CssClass="btn-auto"
                                      Size="ButtonSize.Small"
                                      @onclick="async () => { Step.StepParameters.Remove(param); await ParametersValidator.LetAsync(x => x.ValidateAsync()); }">
                                <SvgIcon Icon="FeatherIcon.Delete" />
                            </HxButton>
                        </HxButtonGroup>
                    </td>
                </tr>
                count++;
            }
        </tbody>
    </table>
    <HxButtonGroup Size="ButtonGroupSize.Small">
        <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" @onclick="AddParameter">
            <SvgIcon Icon="FeatherIcon.Plus" />
            Add parameter
        </HxButton>
        @if (OnImportParameters is not null)
        {
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="ImportParametersAsync" Spinner="loadingParameters" Enabled="!loadingParameters">
                <SvgIcon Icon="FeatherIcon.AtSign" />
                Import parameters
            </HxButton>
        }
    </HxButtonGroup>
}

<ExpressionEditOffcanvas @ref="expressionEditOffcanvas" OnExpressionChanged="StateHasChanged" TParameter="StepParameterBase">
    <div class="row mt-3">
        <div class="col">
            <ExpressionParameterEditor StepParameter="context" />
        </div>
    </div>
    <StepExpressionParameterNotice />
</ExpressionEditOffcanvas>

@code {
    [CascadingParameter(Name = "StepParametersValidator")] FluentValidationValidator? ParametersValidator { get; set; }

    [Parameter, EditorRequired] public IHasStepParameters<TParameter>? Step { get; set; }

    [Parameter, EditorRequired] public Func<TParameter>? NewParameterDelegate { get; set; }

    [Parameter] public Func<Task>? OnImportParameters { get; set; }

    [Parameter] public string? Title { get; set; }

    [Parameter] public string? InfoContent { get; set; }

    private ExpressionEditOffcanvas<StepParameterBase>? expressionEditOffcanvas;
    private bool loadingParameters = false;

    private IEnumerable<JobParameter> JobParameters => (Step as Step)?.Job.JobParameters ?? Enumerable.Empty<JobParameter>();

    private void SetJobParameter(bool inheritFromJob, StepParameterBase param, Guid? jobParameterId = null)
    {
        if (inheritFromJob && jobParameterId is Guid id)
        {
            param.InheritFromJobParameterId = JobParameters.FirstOrDefault(p => p.ParameterId == id)?.ParameterId;
            param.InheritFromJobParameter = JobParameters.FirstOrDefault(p => p.ParameterId == id);
        }
        else if (inheritFromJob)
        {
            param.InheritFromJobParameterId = JobParameters.FirstOrDefault()?.ParameterId;
            param.InheritFromJobParameter = JobParameters.FirstOrDefault();
        }
        else
        {
            param.InheritFromJobParameterId = null;
            param.InheritFromJobParameter = null;
        }
    }

    private Task OnParameterEdit(StepParameterBase parameter) => expressionEditOffcanvas.LetAsync(x => x.ShowAsync(parameter));

    private void AddParameter()
    {
        ArgumentNullException.ThrowIfNull(Step);
        ArgumentNullException.ThrowIfNull(NewParameterDelegate);
        Step.StepParameters.Add(NewParameterDelegate());
    }

    private async Task ImportParametersAsync()
    {
        try
        {
            loadingParameters = true;
            ArgumentNullException.ThrowIfNull(OnImportParameters);
            await OnImportParameters();
            StateHasChanged();

        }
        finally
        {
            loadingParameters = false;
        }
    }

}
