@inject SqlServerHelperService SqlServerHelperService
@inject ToasterService Toaster

<HxOffcanvas @ref="offcanvas" Size="OffcanvasSize.Regular" OnClosed="OnClosed" Title="Select Agent job">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="input-group input-group-sm">
                    <span class="input-group-text">
                        <SvgIcon Icon="FeatherIcon.Filter" />
                    </span>
                    <input type="text" class="form-control form-control-sm" autocomplete="off" placeholder="Name"
                           @bind-value="filterTextName" @bind-value:event="oninput" />
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                Agent job name
                            </th>
                            <th>
                                Enabled
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (agentJobs is null)
                        {
                            <tr>
                                <td colspan="2" class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td>
                            </tr>
                        }
                        else if (!agentJobs.Any())
                        {
                            <tr>
                                <td colspan="2">No Agent jobs</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var job in agentJobs
                                .Where(aj => aj.AgentJobName.ContainsIgnoreCase(filterTextName))
                                .OrderBy(aj => aj.AgentJobName))
                            {
                                <tr style="cursor: pointer;"
                                    @onclick="() => selectedAgentJob = job.AgentJobName"
                                    class="@(job.AgentJobName == selectedAgentJob ? "bg-body-tertiary fw-bold" : null)">
                                    <td>
                                        <HighlightableText Text="@job.AgentJobName" PartToHighlight="@filterTextName" />
                                    </td>
                                    <td>
                                        <div class="form-check form-switch">
                                            <input type="checkbox" class="form-check-input" disabled id="agent_job_enabled_@job.AgentJobName" checked="@(job.IsEnabled ? "checked" : null)">
                                            <label class="form-check-label" for="agent_job_enabled_@job.AgentJobName" aria-label="enabled"></label>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectAgentJob"
                  Enabled="selectedAgentJob is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public Guid? ConnectionId { get; set; }

    [Parameter]
    public EventCallback<string> OnAgentJobSelected { get; set; }

    private HxOffcanvas? offcanvas;
    private IEnumerable<(string AgentJobName, bool IsEnabled)>? agentJobs;
    private string filterTextName = string.Empty;
    private string? selectedAgentJob;

    private async Task SelectAgentJob()
    {
        if (selectedAgentJob is not null)
        {
            await OnAgentJobSelected.InvokeAsync(selectedAgentJob);
            await offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    public void OnClosed()
    {
        agentJobs = null;
        selectedAgentJob = null;
        filterTextName = string.Empty;
    }

    public async Task ShowAsync()
    {
        await offcanvas.LetAsync(x => x.ShowAsync());
        if (ConnectionId is null || ConnectionId == Guid.Empty) return;
        try
        {
            agentJobs = await SqlServerHelperService.GetAgentJobsAsync((Guid)ConnectionId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading Agent jobs", ex.Message);
        }
    }

}
