@inject ToasterService Toaster
@inject IJSRuntime JS

<HxOffcanvas @ref="offcanvas" Size="OffcanvasSize.Large" Backdrop="OffcanvasBackdrop.False" ScrollingEnabled="true" Title="Explore SQL definitions">
    <BodyTemplate>
        <div class="row">
            <div class="col-3">
                <label class="form-label">Connection</label>
            </div>
            <div class="col-9">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <SvgIcon Icon="FeatherIcon.Database" />
                    </div>
                    <select class="form-select form-select-sm" @bind="connectionId">
                        @foreach (var connection in Connections ?? [])
                        {
                            <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-3">
                <label class="form-label">Procedure name</label>
            </div>
            <div class="col-9">
                <HxAutosuggest TItem="IStoredProcedure"
                               TValue="IStoredProcedure"
                               DataProvider="ProvideSuggestions"
                               TextSelector="TextSelector"
                               MinimumLength="0"
                               InputSize="InputSize.Small"
                               ValueExpression="() => procedure"
                               ValueChanged="RunQuery"
                               autocomplete="off">
                    <EmptyTemplate>
                        <span class="p-2">No matching procedures</span>
                    </EmptyTemplate>
                </HxAutosuggest>
            </div>
        </div>

        <hr />
        @if (objectDefinition is not null)
        {
            <div class="row">
                <div class="col">
                    <a class="text-secondary small" href="javascript:void(0)" @onclick="CopyToClipboard">Copy to clipboard</a>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <CodeEditor @ref="editor"
                                Language="sql"
                                ReadOnly="true"
                                InitialValueExpression="() => objectDefinition"
                                InitialHeight="calc(100vh - 320px)" />
                </div>
            </div>
        }
        @if (errorMessage is not null)
        {
            <div class="row mt-3">
                <div class="col">
                    <pre><code>@errorMessage</code></pre>
                </div>
            </div>
        }

    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">Close</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public IEnumerable<ConnectionBase> Connections { get; set; } = [];

    private Guid? connectionId;
    private Guid prevConnectionId;
    private CodeEditor? editor;
    private HxOffcanvas? offcanvas;
    private IEnumerable<IStoredProcedure>? procedures;
    private IStoredProcedure? procedure;
    private string? objectDefinition;
    private string? errorMessage;

    private async Task<AutosuggestDataProviderResult<IStoredProcedure>> ProvideSuggestions(AutosuggestDataProviderRequest request)
    {
        try
        {
            Guid connectionId = this.connectionId ?? throw new ArgumentNullException(nameof(connectionId), "Connection id was null");
            if (connectionId != prevConnectionId)
            {
                prevConnectionId = connectionId;
                procedures = null;
            }
            var connection = Connections.First(c => c.ConnectionId == connectionId);
            procedures ??= connection switch
            {
                MsSqlConnection mssql => await mssql.GetStoredProceduresAsync(),
                SnowflakeConnection sf => await sf.GetStoredProceduresAsync(),
                _ => null
            };

            var filtered = procedures?
                .Where(p => $"{p.QuotedSchemaName}.{p.QuotedProcedureName}".ContainsIgnoreCase(request.UserInput));
            return new AutosuggestDataProviderResult<IStoredProcedure>
            {
                    Data = filtered
            };
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error querying procedures", ex.Message);
        }
        return new AutosuggestDataProviderResult<IStoredProcedure>
        {
            Data = Enumerable.Empty<IStoredProcedure>()
        };
    }

    private string TextSelector(IStoredProcedure proc) => proc.ToString() ?? "";

    private async Task RunQuery(IStoredProcedure? proc)
    {
        if (proc is null)
        {
            return;
        }
        this.procedure = proc;
        objectDefinition = null;
        await editor.LetAsync(x => x.SetValueAsync(""));
        errorMessage = null;
        try
        {
            Guid connectionId = this.connectionId ?? throw new ArgumentNullException(nameof(connectionId), "Connection id was null");
            var connection = Connections.First(c => c.ConnectionId == connectionId);
            objectDefinition = connection switch
            {
                MsSqlConnection msSql when proc is MsSqlStoredProcedure msproc => await msSql.GetProcedureDefinitionAsync(msproc),
                MsSqlConnection => throw new ArgumentException($"Unsupported procedure type for {typeof(MsSqlConnection)}: {proc.GetType().Name}"),
                SnowflakeConnection snow when proc is SnowflakeStoredProcedure snowproc => await snow.GetProcedureDefinitionAsync(snowproc),
                SnowflakeConnection => throw new ArgumentException($"Unsupported procedure type for {typeof(SnowflakeConnection)}: {proc.GetType().Name}"),
                _ => throw new ArgumentException($"Unsupported connection type: {connection.GetType().Name}")
            };
            if (objectDefinition is null)
            {
                errorMessage = $"No procedure definition found for {proc}";
            }
            await editor.LetAsync(x => x.SetValueAsync(objectDefinition));
        }
        catch (SqlException ex)
        {
            objectDefinition = ex.Message;
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error getting procedure definition", ex.Message);
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", objectDefinition);
            Toaster.AddInformation("Code copied to clipboard");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error copying to clipboard", ex.Message);
        }
    }

    public async Task ShowAsync(Guid? connectionId = null, string? sqlStatement = null)
    {
        this.connectionId = connectionId ?? Connections.FirstOrDefault()?.ConnectionId;
        var connection = Connections.FirstOrDefault(c => c.ConnectionId == this.connectionId);
        if (connection is MsSqlConnection msSql && sqlStatement is not null)
        {
            var proc = MsSqlExtensions.ParseStoredProcedureFromSqlStatement(sqlStatement);
            var schema = proc?.Schema;
            var name = proc?.ProcedureName;
            if (name is not null)
            {
                var procedure = await msSql.GetStoredProcedureAsync(schema, name);
                if (procedure is not null)
                {
                    await RunQuery(procedure);
                }
            }
        }
        await offcanvas.LetAsync(x => x.ShowAsync());
    }

}
