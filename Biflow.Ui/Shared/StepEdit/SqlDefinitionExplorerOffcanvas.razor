@inject SqlServerHelperService SqlServerHelper
@inject IHxMessengerService Messenger
@inject IJSRuntime JS

<HxOffcanvas @ref="offcanvas" Size="OffcanvasSize.Large" Backdrop="OffcanvasBackdrop.False" ScrollingEnabled="true" Title="Explore SQL definitions">
    <BodyTemplate>
        <div class="row">
            <div class="col-3">
                <label class="form-label">Connection</label>
            </div>
            <div class="col-9">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <CxIcon Icon="FeatherIcon.Database" />
                    </div>
                    <select class="form-select form-select-sm" @bind="connectionId">
                        @foreach (var connection in Connections ?? Enumerable.Empty<SqlConnectionInfo>())
                        {
                            <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-3">
                <label class="form-label">Object name</label>
            </div>
            <div class="col-9">
                <HxAutosuggest TItem="(string, string, string)?"
                               TValue="string"
                               DataProvider="ProvideSuggestions"
                               ValueSelector="ValueSelector"
                               ItemFromValueResolver="ResolveAutosuggestItemFromValue"
                               TextSelector="TextSelector"
                               MinimumLength="0"
                               InputSize="InputSize.Small"
                               ValueChanged="RunQuery"
                               ValueExpression="() => objectName">
                    <ItemTemplate Context="item">@($"{item?.Item1}.{@item?.Item2}") <sup>@item?.Item3</sup></ItemTemplate>
                    <EmptyTemplate>
                        <span class="p-2">No matching modules</span>
                    </EmptyTemplate>
                </HxAutosuggest>
            </div>
        </div>

        <hr />
        @if (objectDefinition is not null)
        {
            <div class="row">
                <div class="col">
                    <a class="text-secondary small" href="javascript:void(0)" @onclick="CopyToClipboard">Copy to clipboard</a>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <CodeEditor @ref="editor"
                                Language="sql"
                                ReadOnly="true"
                                InitialValueExpression="() => objectDefinition"
                                InitialHeight="calc(100vh - 320px)" />
                </div>
            </div>
        }
        @if (errorMessage is not null)
        {
            <div class="row mt-3">
                <div class="col">
                    <pre><code>@errorMessage</code></pre>
                </div>
            </div>
        }

    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">Close</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public IEnumerable<SqlConnectionInfo> Connections { get; set; } = Enumerable.Empty<SqlConnectionInfo>();

    private Guid? connectionId;
    private Guid prevConnectionId;
    private CodeEditor? editor;
    private HxOffcanvas? offcanvas;
    private IEnumerable<(string, string, string)?>? sqlModules;
    private string objectName = string.Empty;
    private string? objectDefinition;
    private string? errorMessage;

    private async Task<AutosuggestDataProviderResult<(string, string, string)?>> ProvideSuggestions(AutosuggestDataProviderRequest request)
    {
        try
        {
            Guid connectionId = this.connectionId ?? throw new ArgumentNullException(nameof(connectionId), "Connection id was null");
            if (connectionId != prevConnectionId)
            {
                prevConnectionId = connectionId;
                sqlModules = null;
            }
            sqlModules ??= await SqlServerHelper.GetSqlModulesAsync(connectionId);

            var filteredModules = sqlModules?
                .Where(module => $"{module?.Item1}.{module?.Item2}".ContainsIgnoreCase(request.UserInput));
            return new AutosuggestDataProviderResult<(string, string, string)?>
            {
                Data = filteredModules
            };
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error querying references", ex.Message);
        }
        return new AutosuggestDataProviderResult<(string, string, string)?>
        {
            Data = Enumerable.Empty<(string, string, string)?>()
        };
    }

    private string ValueSelector((string, string, string)? module) => $"[{module?.Item1}].[{module?.Item2}]";

    private string TextSelector((string, string, string)? module) => $"{module?.Item1}.{module?.Item2} ({module?.Item3})";

    private async Task<(string, string, string)?> ResolveAutosuggestItemFromValue(string value)
    {
        var module = await Task.FromResult(sqlModules?.FirstOrDefault(module => $"[{module?.Item1}].[{module?.Item2}]" == value));
        return module;
    }

    private async Task RunQuery(string objectName)
    {
        this.objectName = objectName;
        objectDefinition = null;
        await editor.LetAsync(x => x.SetValueAsync(""));
        errorMessage = null;
        if (string.IsNullOrEmpty(this.objectName)) return;
        try
        {
            Guid connectionId = this.connectionId ?? throw new ArgumentNullException(nameof(connectionId), "Connection id was null");
                objectDefinition = await SqlServerHelper.GetObjectDefinitionAsync(connectionId, this.objectName);
            if (objectDefinition is null)
            {
                    errorMessage = $"No object definition found for '{this.objectName}'";
            }
            await editor.LetAsync(x => x.SetValueAsync(objectDefinition));
        }
        catch (SqlException ex)
        {
            objectDefinition = ex.Message;
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error getting object definition", ex.Message);
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", objectDefinition);
            Messenger.AddInformation("Code copied to clipboard");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error copying to clipboard", ex.Message);
        }
    }

    public async Task ShowAsync(Guid? connectionId = null, string? sqlStatement = null)
    {
        this.connectionId = connectionId ?? Connections.FirstOrDefault()?.ConnectionId;
        var proc = sqlStatement?.ParseStoredProcedureFromSqlStatement();
        var schema = proc?.Schema;
        var name = proc?.ProcedureName;
        if (schema is not null && name is not null)
        {
            await RunQuery($"[{schema}].[{name}]");
        }
        else if (name is not null)
        {
            await RunQuery($"[{name}]");
        }
        await offcanvas.LetAsync(x => x.ShowAsync());
    }

}
