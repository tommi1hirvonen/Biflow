@inject ToasterService Toaster
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IHttpClientFactory HttpClientFactory
@inject ITokenService TokenService

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Large" Title="Select function">

    <BodyTemplate>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <SvgIcon Icon="LucideIcon.Filter" />
                    </div>
                    <input type="search" class="form-control" @bind-value="_filterText" @bind-value:event="oninput"
                           placeholder="Filter by name" autocomplete="off" />
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                Function name
                            </th>
                            <th>
                                Invoke url
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_functions is null)
                        {
                            <tr>
                                <td colspan="2" class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td>
                            </tr>
                        }
                        else if (_functions.Count == 0)
                        {
                            <tr>
                                <td colspan="2">No functions</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var function in _functions
                                .Where(function => function.FunctionName.ContainsIgnoreCase(_filterText))
                                .OrderBy(function => function.FunctionName))
                            {
                                <tr style="cursor: pointer;"
                                    @onclick="() => _selectedFunctionUrl = function.FunctionUrl"
                                    class="@(function.FunctionUrl == _selectedFunctionUrl ? "bg-body-tertiary fw-bold" : null)">
                                    <td>
                                        <small>
                                            <HighlightableText Text="@function.FunctionName" PartToHighlight="@_filterText" />
                                        </small>
                                    </td>
                                    <td>
                                        <small>
                                            @function.FunctionUrl
                                        </small>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectFunctionAsync"
                  Enabled="_selectedFunctionUrl is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public EventCallback<string> OnFunctionSelected { get; set; }

    private HxOffcanvas? _offcanvas;
    private List<(string FunctionName, string FunctionUrl)>? _functions;
    private string? _selectedFunctionUrl;
    private string _filterText = string.Empty;

    private async Task SelectFunctionAsync()
    {
        if (_selectedFunctionUrl is not null)
        {
            await OnFunctionSelected.InvokeAsync(_selectedFunctionUrl);
            await _offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    public async Task ShowAsync(Guid functionAppId)
    {
        _functions = null;
        _selectedFunctionUrl = null;
        _filterText = string.Empty;

        await _offcanvas.LetAsync(x => x.ShowAsync());

        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var functionApp = await context.FunctionApps
                .AsNoTrackingWithIdentityResolution()
                .Include(fa => fa.AzureCredential)
                .FirstAsync(fa => fa.FunctionAppId == functionAppId);
            var client = functionApp.CreateClient(TokenService, HttpClientFactory);
            _functions = await client.GetFunctionsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading functions", ex.Message);
        }
    }

}
