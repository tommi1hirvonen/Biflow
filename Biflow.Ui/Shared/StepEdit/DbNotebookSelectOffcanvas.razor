@inject ToasterService Toaster
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IHttpClientFactory HttpClientFactory
@inject ITokenService TokenService

<HxOffcanvas @ref="offcanvas" Size="OffcanvasSize.Large" Title="Select notebook">

    <BodyTemplate>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <SvgIcon Icon="FeatherIcon.Filter" />
                    </div>
                    <input type="search" class="form-control" @bind-value="filterText" @bind-value:event="oninput"
                           placeholder="Filter by name" autocomplete="off" />
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                Notebook name
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (notebooks is null)
                        {
                            <tr>
                                <td colspan="1" class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td>
                            </tr>
                        }
                        else if (notebooks.Length == 0)
                        {
                            <tr>
                                <td colspan="1">No notebooks</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var notebook in notebooks.Where(n => n.ContainsIgnoreCase(filterText)).Order())
                            {
                                <tr style="cursor: pointer;"
                                    @onclick="() => selectedNotebook = notebook"
                                    class="@(notebook == selectedNotebook ? "bg-body-tertiary fw-bold" : null)">
                                    <td>
                                        <small>
                                            <HighlightableText Text="@notebook" PartToHighlight="@filterText" />
                                        </small>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectNotebookAsync"
                  Enabled="selectedNotebook is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public EventCallback<string> OnNotebookSelected { get; set; }

    private HxOffcanvas? offcanvas;
    private string[]? notebooks;
    private string? selectedNotebook;
    private string filterText = string.Empty;

    private async Task SelectNotebookAsync()
    {
        if (selectedNotebook is not null)
        {
            await OnNotebookSelected.InvokeAsync(selectedNotebook);
            await offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    public async Task ShowAsync(Guid workspaceId)
    {
        notebooks = null;
        selectedNotebook = null;
        filterText = string.Empty;

        await offcanvas.LetAsync(x => x.ShowAsync());

        try
        {
            using var context = DbContextFactory.CreateDbContext();
            var workspace = await context.DatabricksWorkspaces
                .AsNoTrackingWithIdentityResolution()
                .FirstAsync(w => w.WorkspaceId == workspaceId);
            using var client = workspace.CreateClient();
            var notebooks = await client.GetWorkspaceObjectsAsync();
            this.notebooks = notebooks
                .Where(n => n.ObjectType == Microsoft.Azure.Databricks.Client.Models.ObjectType.NOTEBOOK)
                .Select(n => n.Path)
                .ToArray();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading functions", ex.Message);
        }
    }

}
