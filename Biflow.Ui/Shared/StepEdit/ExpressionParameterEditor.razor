
@typeparam TJobParameter where TJobParameter : ParameterBase
@typeparam TExpressionParameter where TExpressionParameter : IExpressionParameter<TJobParameter>

@if (StepParameter is null)
{
    return;
}

<div class="row">
    <div class="col">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Inherit job parameter</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (StepParameter.ExpressionParameters.Any())
                {
                    @foreach (var param in StepParameter.ExpressionParameters)
                    {
                        <tr>
                            <td>
                                <InputText class="form-control form-control-sm"
                                           @bind-Value="param.ParameterName"
                                           @bind-Value:after="() => ParametersValidator.LetAsync(x => x.ValidateAsync())" />
                            </td>
                            <td>
                                <InputSelect class="form-select form-select-sm"
                                             @bind-Value="param.InheritFromJobParameterId"
                                             @bind-Value:after="() => OnInheritFromJobParameterChanged(param)">
                                    @foreach (var jobParam in StepParameter.JobParameters.OrderBy(p => p.ParameterName))
                                    {
                                        <option value="@jobParam.ParameterId">
                                            @jobParam.DisplaySummary
                                        </option>
                                    }
                                </InputSelect>
                            </td>
                            <td>
                                <HxButtonGroup Size="ButtonGroupSize.Small">
                                    <HxButton Color="ThemeColor.None"
                                              CssClass="btn-auto"
                                              Size="ButtonSize.Small"
                                              @onclick="() => RemoveParameter(StepParameter, param)">
                                        <CxIcon Icon="FeatherIcon.Delete" />
                                    </HxButton>
                                </HxButtonGroup>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3">
                            No parameters
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col">
        <HxButton Color="ThemeColor.None"
                  CssClass="btn-auto"
                  Size="ButtonSize.Small"
                  Enabled="StepParameter.JobParameters.Any()"
                  @onclick="AddParameter">
            <CxIcon Icon="FeatherIcon.Plus" />
            Add parameter
        </HxButton>
    </div>
</div>

@code {
    [CascadingParameter(Name = "StepParametersValidator")] FluentValidationValidator? ParametersValidator { get; set; }

    [Parameter, EditorRequired] public IHasExpressionParameters<TExpressionParameter, TJobParameter>? StepParameter { get; set; }

    private async Task RemoveParameter(
        IHasExpressionParameters<TExpressionParameter, TJobParameter> parameter,
        TExpressionParameter expressionParameter)
    {
        parameter.ExpressionParameters.Remove(expressionParameter);
        await ParametersValidator.LetAsync(x => x.ValidateAsync());
    }

    private void AddParameter()
    {
        ArgumentNullException.ThrowIfNull(StepParameter);
        var jobParameter = StepParameter.JobParameters.First();
        StepParameter.AddExpressionParameter(jobParameter);
    }

    private void OnInheritFromJobParameterChanged(TExpressionParameter param)
    {
        ArgumentNullException.ThrowIfNull(StepParameter);
        param.InheritFromJobParameter = StepParameter.JobParameters
            .First(p => p.ParameterId == param.InheritFromJobParameterId);
    }
}