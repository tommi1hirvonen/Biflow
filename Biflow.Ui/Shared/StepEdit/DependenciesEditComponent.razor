
<div class="row">
    <div class="col">
        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link" OnClick="InferDependenciesFromDatabaseObjects">
            Infer dependencies from sources and targets
        </HxButton>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <CxIcon Icon="FeatherIcon.Tag" />
        <span class="me-3">Tags</span>
        @{
            var tags = Steps
                .SelectMany(step => step.Tags)
                .DistinctBy(t => t.TagName)
                .OrderBy(t => t.TagName) ?? Enumerable.Empty<Tag>();
        }
        @if (!tags.Any())
        {
            <small class="text-secondary me-2">No tags</small>
        }
        @foreach (var tag in tags)
        {
            <TagComponent Tag="tag"
                          Style="cursor: pointer;"
                          CssClass="mx-1"
                          Selected="TagFilter.Contains(tag)"
                          OnClick="() => { if (TagFilter.Contains(tag)) TagFilter.Remove(tag); else TagFilter.Add(tag); }" />
        }
    </div>
</div>

<div class="row mt-3 align-items-center">
    <div class="input-group input-group-sm col">
        <div class="input-group-text rounded-left">
            <CxIcon Icon="FeatherIcon.Search" />
        </div>
        <input type="search" class="form-control" @bind-value="DependenciesFilterText" @bind-value:event="oninput" placeholder="Search" autocomplete="off" />
    </div>
    <div class="col-auto">
        <FilterDropdown TItem="StepType"
                        FilterSet="StepTypeFilter"
                        Items="Steps.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                        OnChange="StateHasChanged">
            <TitleTemplate>
                <CxIcon Icon="FeatherIcon.Tool" />
                Step type
            </TitleTemplate>
            <ItemTemplate Context="item">
                <StepTypeIconComponent StepType_="item" />
                @item.ToString()
            </ItemTemplate>
        </FilterDropdown>
    </div>
</div>

<div class="row mt-3">
    <div class="col-5">
        <h6>Available steps</h6>
        <div style="overflow-y: scroll; height: calc(100vh - 485px);">
            <table class="table table-sm table-hover">
                <tbody>
                    @foreach (var step in FilteredStepsOrdered)
                    {
                        <tr @onclick="() => AddDependency(step)">
                            <td class="align-middle">
                                <StepTypeIconComponent StepType_="step.StepType" />
                                <HighlightableText Text="@step.StepName" PartToHighlight="@DependenciesFilterText" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="col-7">
        <h6>Step depends on</h6>
        <div style="overflow-y: scroll; height: calc(100vh - 485px);">
            <table class="table table-sm table-hover">
                <tbody>
                    @if (Step is null)
                    {
                        <tr>
                            <td class="text-center" colspan="3">
                                <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var dependency in Step.Dependencies)
                        {
                            var step = Steps.FirstOrDefault(s => s.StepId == dependency.DependantOnStepId);
                            if (step is null)
                            {
                                <tr><td colspan="3">Error getting step</td></tr>
                                continue;
                            }
                            var title = dependency.IsCandidateForRemoval ? "Dependency not found in source/target mapping" : dependency.IsNewAddition ? "New dependency" : null;
                            <tr>
                                <td class="align-middle">
                                    <StepTypeIconComponent StepType_="step.StepType" />
                                    @step.StepName
                                </td>
                                <td class="align-middle text-center" title="@title">
                                    @if (dependency.IsCandidateForRemoval)
                                    {
                                        <span class="text-danger fw-bold pb-1">–</span>
                                    }
                                    else if (dependency.IsNewAddition)
                                    {
                                        <span class="text-success fw-bold pb-1">+</span>
                                    }
                                </td>
                                <td class="align-middle">
                                    <InputSelect class="form-select form-select-sm" @bind-Value="dependency.DependencyType">
                                        @foreach (var type in Enum.GetValues<DependencyType>())
                                        {
                                            <option>@type</option>
                                        }
                                    </InputSelect>
                                </td>
                                <td class="align-middle">
                                    <HxButton Size="ButtonSize.Small" CssClass="btn-auto" OnClick="() => RemoveDependency(step)">
                                        <CxIcon Icon="FeatherIcon.Trash2" />
                                    </HxButton>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public Step? Step { get; set; }

    [Parameter]
    public IEnumerable<Step> Steps { get; set; } = Enumerable.Empty<Step>();

    private HashSet<Tag> TagFilter { get; } = new();
    private HashSet<StepType> StepTypeFilter { get; } = new();
    private string DependenciesFilterText { get; set; } = string.Empty;

    private IEnumerable<Step> FilteredSteps => Steps
            .Where(step => step.StepId != Step?.StepId) // Exclude current step => step cannot depend on itself.
            .Where(step => step.StepName?.ContainsIgnoreCase(DependenciesFilterText) == true) // Filter based on search filter.
            .Where(step => !StepTypeFilter.Any() || StepTypeFilter.Contains(step.StepType)) // Filter based on step type
            .Where(step => TagFilter.All(tag => step.Tags.Any(t => t.TagName == tag.TagName))) // Filter based on tags
            .Where(step => !Step?.Dependencies.Any(d => d.DependantOnStepId == step.StepId) ?? true) // Exclude steps which are already listed as dependencies
            ?? Enumerable.Empty<Step>();

    private IEnumerable<Step> FilteredStepsOrdered => Step?.Job.UseDependencyMode switch
    {
        true => FilteredSteps.OrderBy(step => step, new TopologicalStepComparer(Steps)),
        _ => FilteredSteps.OrderBy(step => step) // use default comparer
    };

    private void RemoveDependency(Step step)
    {
        ArgumentNullException.ThrowIfNull(Step);
        var dependency = Step.Dependencies.FirstOrDefault(dep => dep.DependantOnStepId == step.StepId);
        if (dependency is not null)
        {
            Step.Dependencies.Remove(dependency);
        }
    }

    private void AddDependency(Step step)
    {
        ArgumentNullException.ThrowIfNull(Step);
        if (!Step.Dependencies.Any(dep => dep.DependantOnStepId == step.StepId))
        {
            var newDep = new Dependency
                {
                    StepId = Step.StepId,
                    DependantOnStepId = step.StepId,
                    IsNewAddition = true
                };
            Step.Dependencies.Add(newDep);
        }
    }

    private void InferDependenciesFromDatabaseObjects()
    {
        ArgumentNullException.ThrowIfNull(Step);
        var dependsOnSteps = Steps.Where(step => step.Targets.Any(target => Step.Sources.Any(source => target.NamesEqual(source))));
        var missingDependencies = dependsOnSteps.Where(d1 => !Step.Dependencies.Any(d2 => d2.DependantOnStepId == d1.StepId));
        foreach (var step in missingDependencies)
        {
            var dependency = new Dependency
            {
                StepId = Step.StepId,
                DependantOnStepId = step.StepId,
                IsNewAddition = true
            };
            Step.Dependencies.Add(dependency);
        }
        var candidatesForRemoval = Step.Dependencies.Where(d => !dependsOnSteps.Any(s => s.StepId == d.DependantOnStepId));
        foreach (var candidate in candidatesForRemoval)
        {
            candidate.IsCandidateForRemoval = true;
        }
    }

}
