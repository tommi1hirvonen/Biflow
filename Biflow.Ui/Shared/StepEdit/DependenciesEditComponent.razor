
<div class="row">
    <div class="col">
        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link" OnClick="InferDependenciesFromDatabaseObjects">
            Infer dependencies from sources and targets
        </HxButton>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <CxIcon Icon="FeatherIcon.Tag" />
        <span class="me-3">Tags</span>
        @{
            var tags = Steps?
                .SelectMany(step => step.Tags)
                .DistinctBy(t => t.TagName)
                .OrderBy(t => t.TagName) ?? Enumerable.Empty<Tag>();
        }
        @if (!tags.Any())
        {
            <small class="text-secondary me-2">No tags</small>
        }
        @foreach (var tag in tags)
        {
            <TagComponent Tag="tag"
                          Style="cursor: pointer;"
                          CssClass="mx-1"
                          Selected="TagFilter.Contains(tag)"
                          OnClick="() => { if (TagFilter.Contains(tag)) TagFilter.Remove(tag); else TagFilter.Add(tag); }" />
        }
    </div>
</div>

<div class="row py-3 align-items-center sticky-top" style="background-color: var(--sticky-top-modal-bg);">
    <div class="input-group input-group-sm col">
        <div class="input-group-text rounded-left">
            <CxIcon Icon="FeatherIcon.Search" />
        </div>
        <input type="search" class="form-control" @bind-value="DependenciesFilterText" @bind-value:event="oninput" placeholder="Search" autocomplete="off" />
    </div>
    <div class="col-lg-auto mt-3 mt-lg-0">
        <FilterDropdown TItem="StepType"
                        FilterSet="StepTypeFilter"
                        Items="Steps?.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                        OnChange="StateHasChanged">
            <TitleTemplate>
                <CxIcon Icon="FeatherIcon.Tool" />
                Step type
            </TitleTemplate>
            <ItemTemplate Context="item">
                <StepTypeIconComponent StepType_="item" />
                @item.ToString()
            </ItemTemplate>
        </FilterDropdown>
    </div>
    <div class="form-check form-check-inline col-lg-auto ms-3 mt-3 mt-lg-0 mb-0">
        <input type="checkbox" class="form-check-input" id="only_active"
               checked=@ShowOnlyActiveDependencies
               @onchange="() => ShowOnlyActiveDependencies = !ShowOnlyActiveDependencies">
        <label class="form-check-label" for="only_active">Show only active</label>
    </div>
</div>

<table class="table table-sm table-hover">
    <thead>
        <tr>
            <th>Name</th>
            <th>Dependent on</th>
            <th>Dependency type</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var step in FilteredStepsOrdered)
        {
            var dependency = Step.Dependencies.FirstOrDefault(d => d.DependantOnStepId == step.StepId);
            var className = dependency?.IsCandidateForRemoval ?? false ? "text-danger" : dependency?.IsNewAddition ?? false ? "text-primary" : null;
            var title = dependency?.IsCandidateForRemoval ?? false ? "Dependency not found in source/target mapping" : dependency?.IsNewAddition ?? false ? "New dependency" : null;
            <tr class="@className" title="@title">
                <td class="align-middle">
                    <StepTypeIconComponent StepType_="step.StepType" />
                    <HighlightableText Text="@step.StepName" PartToHighlight="@DependenciesFilterText" />
                </td>
                <td class="align-middle">
                    <div class="form-check form-check-inline">
                        <input @key="step" type="checkbox" class="form-check-input" id="dependency_@step.StepId"
                               checked=@(dependency is not null)
                               @onchange="eventArgs => ToggleDependency(step, eventArgs.Value!)">
                        <label class="form-check-label" for="dependency_@step.StepId"></label>
                    </div>
                </td>
                <td class="align-middle">
                    @if (dependency is not null)
                    {
                        <InputSelect class="form-select form-select-sm" @bind-Value="dependency.DependencyType">
                            @foreach (var type in Enum.GetValues<DependencyType>())
                            {
                                <option>@type</option>
                            }
                        </InputSelect>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public Step Step { get; set; } = null!;

    [Parameter]
    public IEnumerable<Step> Steps { get; set; } = Enumerable.Empty<Step>();

    private HashSet<Tag> TagFilter { get; } = new();
    private HashSet<StepType> StepTypeFilter { get; } = new();
    private string DependenciesFilterText { get; set; } = string.Empty;
    private bool ShowOnlyActiveDependencies { get; set; } = false;

    private IEnumerable<Step> FilteredSteps => Steps
            .Where(step => step.StepId != Step.StepId) // Exclude current step => step cannot depend on itself.
            .Where(step => step.StepName?.ContainsIgnoreCase(DependenciesFilterText) == true) // Filter based on search filter.
            .Where(step => !StepTypeFilter.Any() || StepTypeFilter.Contains(step.StepType)) // Filter based on step type
            .Where(step => TagFilter.All(tag => step.Tags.Any(t => t.TagName == tag.TagName))) // Filter based on tags
            .Where(step => Step.Dependencies.Any(d => d.DependantOnStepId == step.StepId) || !ShowOnlyActiveDependencies) // Only show active dependencies if checked.
            ?? Enumerable.Empty<Step>();

    private IEnumerable<Step> FilteredStepsOrdered => Step.Job.UseDependencyMode switch
    {
        true => FilteredSteps.OrderBy(step => step, new TopologicalStepComparer(Steps)),
        _ => FilteredSteps.OrderBy(step => step) // use default comparer
    };

    protected override void OnParametersSet()
    {
        ShowOnlyActiveDependencies = Step?.Dependencies.Any() ?? false;
    }

    private void ToggleDependency(Step step, object checkedValue)
    {
        var dependent = (bool)checkedValue;
        var dependency = Step.Dependencies.FirstOrDefault(dep => dep.DependantOnStepId == step.StepId);
        if (!dependent && dependency is not null)
        {
            Step.Dependencies.Remove(dependency);
        }
        else if (dependent && dependency is null)
        {
            var newDep = new Dependency
            {
                StepId = Step.StepId,
                DependantOnStepId = step.StepId,
                IsNewAddition = true
            };
            Step.Dependencies.Add(newDep);
        }
    }

    private void InferDependenciesFromDatabaseObjects()
    {
        var dependsOnSteps = Steps.Where(step => step.Targets.Any(target => Step.Sources.Any(source => target.Equals(source))));
        var missingDependencies = dependsOnSteps.Where(d1 => !Step.Dependencies.Any(d2 => d2.DependantOnStepId == d1.StepId));
        foreach (var step in missingDependencies)
        {
            var dependency = new Dependency
            {
                StepId = Step.StepId,
                DependantOnStepId = step.StepId,
                IsNewAddition = true
            };
            Step.Dependencies.Add(dependency);
        }
        var candidatesForRemoval = Step.Dependencies.Where(d => !dependsOnSteps.Any(s => s.StepId == d.DependantOnStepId));
        foreach (var candidate in candidatesForRemoval)
        {
            candidate.IsCandidateForRemoval = true;
        }
        ShowOnlyActiveDependencies = Step.Dependencies.Any();
    }

}
