@using Azure.Storage.Blobs.Models

@implements IDisposable

@inject ITokenService TokenService

<div class="row">
    <div class="col small">
        @if (_accountName is not null)
        {
            <span class="link-primary text-decoration-underline pointer" @onclick="() => _items = null">
                @_accountName
            </span>
            <span> / </span>
        }
        @if (_container is not null)
        {
            <span class="link-primary text-decoration-underline pointer" @onclick="() => BrowseAsync(_container)">
                @_container.Name
            </span>
            <span> / </span>
        }
        @foreach (var (segment, index) in _prefix?.Split('/').SkipLast(1).Select((s, i) => (s, i)) ?? [])
        {
            <span class="link-primary text-decoration-underline pointer" @onclick="() => BrowseAsync(index)">
                @segment
            </span>
            <span> / </span>
        }
    </div>
</div>

<ul class="list-group small mt-3">
    @if (_loading)
    {
        <li class="list-group-item text-center">
            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
        </li>
    }
    else if (_items is not null)
    {
        @foreach (var i in _items)
        {
            @if (i.IsBlob)
            {
                <li class="list-group-item list-group-item-action pointer d-flex align-items-center @(_item == i.Blob ? "active" : null)" @onclick="() => SelectItemAsync(i.Blob)">
                    <FileTypeIcon Filename="@i.Blob.Name" />
                    <span class="ms-1">
                        @i.Blob.Name.Substring(_prefix?.Length ?? 0)
                    </span>
                </li>
            }
            else if (i.IsPrefix)
            {
                <li class="list-group-item d-flex align-items-center">
                    <SvgIcon Icon="FeatherIcon.Folder" />
                    <span class="link-primary text-decoration-underline pointer ms-1" @onclick="() => BrowseAsync(i)">
                        @i.Prefix.Substring(_prefix?.Length ?? 0, i.Prefix.Length - (_prefix?.Length ?? 0) - 1)
                    </span>
                </li>
            }
        }
    }
    else if (_containers is not null)
    {
        @foreach (var c in _containers)
        {
            <li class="list-group-item d-flex align-items-center">
                <SvgIcon Icon="LucideIcon.Container" />
                <span class="link-primary text-decoration-underline pointer ms-1" @onclick="() => BrowseAsync(c)">
                    @c.Name
                </span>                
            </li>
        }
    }
</ul>

@code {
    [Parameter]
    public EventCallback<BlobSelectedResponse?> OnItemSelected { get; set; }

    private BlobStorageExplorer? _client;
    private string? _accountName;
    private IEnumerable<BlobContainerItem>? _containers;
    private BlobContainerItem? _container;
    private IEnumerable<BlobHierarchyItem>? _items;
    private BlobItem? _item;
    private bool _loading = false;
    private string? _prefix;

    public async Task SetClientAsync(BlobStorageClient client)
    {
        _client = client.CreateExplorer(TokenService);
        _prefix = null;
        _containers = null;
        _accountName = null;
        _container = null;
        _items = null;
        _item = null;
        _loading = true;
        StateHasChanged();
        _containers = await _client.GetContainersAsync();
        _accountName = _client.StorageAccountName;
        _loading = false;
    }

    private async Task SelectItemAsync(BlobItem item)
    {
        ArgumentNullException.ThrowIfNull(_accountName);
        ArgumentNullException.ThrowIfNull(_container);
        _item = item;
        await OnItemSelected.InvokeAsync(new(_accountName, _container.Name, item.Name));
    }

    private async Task BrowseAsync(BlobContainerItem container)
    {
        ArgumentNullException.ThrowIfNull(_client);
        _container = container;
        _prefix = null;
        _item = null;
        await OnItemSelected.InvokeAsync(null);
        _loading = true;
        StateHasChanged();
        _items = await _client.GetItemsAsync(container);
        _loading = false;
    }

    private async Task BrowseAsync(int index)
    {
        ArgumentNullException.ThrowIfNull(_client);
        ArgumentNullException.ThrowIfNull(_accountName);
        ArgumentNullException.ThrowIfNull(_container);
        ArgumentNullException.ThrowIfNull(_prefix);
        _item = null;
        _prefix = string.Join('/', _prefix.Split('/').Take(index + 1)) + "/";
        await OnItemSelected.InvokeAsync(new(_accountName, _container.Name, _prefix));
        _loading = true;
        StateHasChanged();
        _items = await _client.GetItemsAsync(_container, _prefix);
        _loading = false;
    }

    private async Task BrowseAsync(BlobHierarchyItem item)
    {
        ArgumentNullException.ThrowIfNull(_client);
        ArgumentNullException.ThrowIfNull(_accountName);
        ArgumentNullException.ThrowIfNull(_container);
        _item = null;
        _prefix = item.Prefix;
        await OnItemSelected.InvokeAsync(new(_accountName, _container.Name, item.Prefix));
        _loading = true;
        StateHasChanged();
        _items = await _client.GetItemsAsync(_container, item.Prefix);
        _loading = false;
    }

    public void Dispose()
    {
        
    }
}
