@inject MarkupHelperService MarkupHelper
@inject IHxMessengerService Messenger

@using IronPython.Hosting

@if (Step is not null)
{
    <HxButton Size="ButtonSize.Small" OnClick="async () => await HelpOffcanvas.ShowAsync()">
        @MarkupHelper.FromFile("icons/feather/help-circle.svg")
    </HxButton>
    <div class="row mt-3">
        <label class="form-label">Execution condition expression</label>
        <div class="input-group input-group-sm">
            <div class="input-group-text">
                @MarkupHelper.FromFile("icons/feather/check-square.svg")
            </div>
            <InputTextArea class="form-control form-control-sm" @bind-Value="Step.ExecutionConditionExpression" style="font-family: monospace;" rows="3"></InputTextArea>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col">
            <HxButton OnClick="TestEvaluate" Size="ButtonSize.Small">
                Test evaluate
            </HxButton>
        </div>
    </div>
    <h5 class="mt-3">Parameters</h5>
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Inherit from job</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!Step.ExecutionConditionParameters.Any())
            {
                <tr><td colspan="5">No parameters</td></tr>
            }
            @{
                var count = 0;
            }
            @foreach (var param in Step.ExecutionConditionParameters)
            {
                <tr>
                    <td>
                        <HxInputText InputSize="InputSize.Small" @bind-Value="param.ParameterName" placeholder="Name"></HxInputText>
                    </td>
                    <td class="align-middle">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="condition_inherit_param_@count"
                                    checked=@(param.JobParameterId is not null)
                                    disabled=@((!JobParameters?.Any() ?? true))
                                    @onchange="args => SetJobParameter((bool)args.Value!, param)">
                            <label class="form-check-label" for="condition_inherit_param_@count"></label>
                        </div>
                    </td>
                    @if (param.JobParameterId is not null)
                    {
                        <td colspan="2">
                            <InputSelect class="form-select form-select-sm" @bind-Value="param.JobParameterId">
                                @foreach (var jobParam in JobParameters?.OrderBy(p => p.ParameterName) ?? Enumerable.Empty<JobParameter>())
                                            {
                                    <option value="@jobParam.ParameterId">
                                        @jobParam.ParameterName (@jobParam.ParameterValueType = @jobParam.ParameterValue)
                                    </option>
                                            }
                            </InputSelect>
                        </td>
                    }
                    else
                    {
                        <ParameterTypeValueEditComponent Parameter="param" />
                    }
                    <td>
                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                            <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" CssClass="btn-row" @onclick="() => Step.ExecutionConditionParameters.Remove(param)">
                                @MarkupHelper.FromFile("icons/feather/delete.svg")
                            </HxButton>
                        </HxButtonGroup>
                    </td>
                </tr>
                count++;
            }
        </tbody>
    </table>
    var type = ParameterValueType.String;
    <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" @onclick="() => Step.ExecutionConditionParameters.Add(new ExecutionConditionParameter { ParameterValueType = type, ParameterValue = string.Empty })">
        @MarkupHelper.FromFile("icons/feather/plus.svg")
    </HxButton>
}

<HxOffcanvas @ref="HelpOffcanvas" BackdropEnabled="false" Title="Execution conditions">
    <BodyTemplate>
        <p>Use Python expressions or statements to control whether the step is executed or not when the step's execution phase is reached (execution phase mode) or all its dependencies have completed (dependency mode).</p>
        <p>The expressions use Python 3 syntax and expressions are evaluated using IronPython 3. Standard Python libraries are supported (e.g. datetime, math, json etc.).</p>
        <p>The expression return type must always be boolean (True/False).</p>
        <p>Avoid using long running operations in expressions as these can hinder the flow of the executor process. And definitely do not use time.sleep().</p>
        <p>Use parameters to dynamically pass values to the evaluated statement.</p>
        <h4>Examples</h4>
        <h6>Simple expression</h6>
        <pre><code>
            count1 == 0 and count2 > 0
        </code></pre>
        <p>This single line expression has two integer variables <code>count1</code> and <code>count2</code> which are passed using parameters of the same name.</p>
        <h6>Working with datetimes</h6>
        <pre><code>
            from datetime import datetime
            dt = datetime(paramValue)
            datetime.now() > dt
        </code></pre>
        <p>This multi line statement takes one parameter <code>paramValue</code> of type DateTime. Biflow uses .NET DateTime types, which need to be converted to Python datetimes using the datetime() constructor.</p>
        <h6>Function calls</h6>
        <pre><code>
            def getSum(value1, value2):
                return value1 + value2

            value4 = getSum(value1, value2)
            value1 > value4 or value3
        </code></pre>
        <p>This statement takes two integer parameters (<code>value1</code> and <code>value2</code>) and one boolean parameter (<code>value3</code>). Functions in the Python code need to be defined before they can be called.</p>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton OnClick="async () => await HelpOffcanvas.HideAsync()">
            Close
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public Step? Step { get; set; }

    [Parameter]
    public ICollection<JobParameter>? JobParameters { get; set; }

    private HxOffcanvas HelpOffcanvas { get; set; } = null!;

    private void SetJobParameter(bool inheritFromJob, ExecutionConditionParameter param)
    {
        if (inheritFromJob)
        {
            param.JobParameterId = JobParameters?.FirstOrDefault()?.ParameterId;
        }
        else
        {
            param.JobParameterId = null;
        }
    }

    private void TestEvaluate()
    {
        if (string.IsNullOrWhiteSpace(Step?.ExecutionConditionExpression))
        {
            Messenger.AddWarning("Execution condition expression is empty");
            return;
        }
        try
        {
            ArgumentNullException.ThrowIfNull(JobParameters);
            var engine = Python.CreateEngine();
            var scope = engine.CreateScope();
            foreach (var param in Step.ExecutionConditionParameters)
            {
                param.SetParameterValue();
                var value = param.JobParameterId is not null
                ? JobParameters.First(p => p.ParameterId == param.JobParameterId).ParameterValue
                : param.ParameterValue;
                scope.SetVariable(param.ParameterName, value);
            }
            var result = engine.Execute<bool>(Step.ExecutionConditionExpression, scope);
            Messenger.AddInformation($"Result: {result}");
        }
        catch (Exception ex)
        {
            Messenger.AddError(ex.Message);
        }
    }
}
