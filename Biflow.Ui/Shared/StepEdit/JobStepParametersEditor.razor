@inject IDbContextFactory<AppDbContext> DbContextFactory

@if (loading)
{
    <div class="row mt-3">
        <div class="col text-center">
            <HxSpinner Color="ThemeColor.Secondary" />
        </div>
    </div>
}
else if (Step is not null && targetJob is not null)
{
    <p />
    <h5>
        Parameters

    </h5>
    <table id="parameters_table" class="table table-sm">
        <thead>
            <tr>
                <th>Target</th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!Step.StepParameters.Any())
            {
                <tr><td colspan="5">No parameters</td></tr>
            }
            @{
                var count = 0;
            }
            @foreach (var param in Step.StepParameters.OrderBy(p => p.ParameterName))
            {
                var targetParam = targetJob.JobParameters.First(p => p.ParameterId == param.AssignToJobParameterId);
                var availableJobParams = GetAvailableJobParameters(param);
                <tr>
                    <td>
                        @targetParam.ParameterName<sup>@targetParam.ParameterValueType</sup>
                    </td>
                    <td class="align-middle">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="inherit_param_@count"
                           checked=@(param.InheritFromJobParameterId is not null)
                           disabled=@(!availableJobParams.Any())
                           @onchange="args => SetInheritFromJobParameter((bool)args.Value!, param)">
                            <label class="form-check-label fw-normal" for="inherit_param_@count">Inherit</label>
                        </div>
                    </td>
                    @if (param.InheritFromJobParameterId is not null)
                    {
                        <td colspan="2">
                            <InputSelect class="form-select form-select-sm" @bind-Value="param.InheritFromJobParameterId">
                                @foreach (var jobParam in availableJobParams)
                                {
                                    <option value="@jobParam.ParameterId">
                                        @jobParam.DisplaySummary
                                    </option>
                                }
                            </InputSelect>
                        </td>
                    }
                    else
                    {
                        <DynamicParameterEditor Parameter="param" TParameter="StepParameterBase"
                                           OnParameterEdit="OnParameterEdit">
                            <StaticEditTemplate>
                                <td>
                                    <div class="input-group input-group-sm">
                                        <div class="input-group-text">
                                            Value
                                        </div>
                                        <ParameterValueEditor Parameter="param" />
                                    </div>
                                </td>
                            </StaticEditTemplate>
                        </DynamicParameterEditor>
                    }
                    <td>
                        <HxButtonGroup Size="ButtonGroupSize.Small">
                            <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" @onclick="() => Step.StepParameters.Remove(param)">
                                <CxIcon Icon="FeatherIcon.Delete" />
                            </HxButton>
                        </HxButtonGroup>
                    </td>
                </tr>
                count++;
            }
        </tbody>
    </table>
    <HxDropdownButtonGroup>
        <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" Enabled="AvailableTargetParameters.Any()">
            <CxIcon Icon="FeatherIcon.Plus" />
            Add parameter
        </HxDropdownToggleButton>
        <HxDropdownMenu>
            @foreach (var param in AvailableTargetParameters)
            {
                <HxDropdownItem OnClick="() => AddParameter(param)">
                    @param.ParameterName<sup>@param.ParameterValueType</sup>
                </HxDropdownItem>
            }
        </HxDropdownMenu>
    </HxDropdownButtonGroup>
}
else if (Step is not null)
{
    <div class="row mt-3">
        <div class="col text-center">
            <em>Select a job to add step parameters</em>
        </div>
    </div>
}

<ExpressionEditOffcanvas @ref="expressionEditOffcanvas" TParameter="StepParameterBase" OnExpressionChanged="StateHasChanged">
    <div class="row mt-3">
        <div class="col">
            <ExpressionParameterEditor StepParameter="context" />
        </div>
    </div>
    <StepExpressionParameterNotice />
</ExpressionEditOffcanvas>

@code {
    [Parameter] public JobStep? Step { get; set; }

    [Parameter] public Guid? TargetJobId { get; set; }

    private Job? targetJob;
    private bool loading = false;
    private ExpressionEditOffcanvas<StepParameterBase>? expressionEditOffcanvas;

    private IEnumerable<JobParameter> JobParameters => (Step as Step)?.Job.JobParameters ?? Enumerable.Empty<JobParameter>();

    private IEnumerable<JobParameter> AvailableTargetParameters => targetJob?.JobParameters
        .Where(jp => !Step?.StepParameters.Cast<JobStepParameter>().Any(sp => sp.AssignToJobParameterId == jp.ParameterId) ?? false)
        .OrderBy(jp => jp.ParameterName)
        ?? Enumerable.Empty<JobParameter>();

    protected override async Task OnParametersSetAsync()
    {
        if (TargetJobId == targetJob?.JobId || loading)
        {
            return;
        }
        else if (TargetJobId is null)
        {
            targetJob = null;
            return;
        }

        loading = true;

        using var context = await DbContextFactory.CreateDbContextAsync();
        targetJob = await context.Jobs
            .Include(j => j.JobParameters)
            .FirstOrDefaultAsync(j => j.JobId == TargetJobId);

        loading = false;
    }

    private void AddParameter(JobParameter targetParam)
    {
        if (Step is null)
        {
            return;
        }
        var parameter = new JobStepParameter(targetParam.ParameterId)
        {
            ParameterValueType = targetParam.ParameterValueType,
            ParameterName = targetParam.ParameterName,
            ParameterValue = targetParam.ParameterValue,
            Step = Step
        };
        Step.StepParameters.Add(parameter);
    }

    private void OnTargetParameterChanged(ChangeEventArgs args, JobStepParameter parameter)
    {
        var idString = args.Value?.ToString();
        if (idString is null || targetJob is null)
        {
            return;
        }
        var targetParamId = Guid.Parse(idString);
        var targetParam = AvailableTargetParameters.First(j => j.ParameterId == targetParamId);
        parameter.AssignToJobParameterId = targetParam.ParameterId;
        parameter.ParameterValueType = targetParam.ParameterValueType;
        parameter.ParameterName = targetParam.ParameterName;
    }

    private Task OnParameterEdit(StepParameterBase parameter) => expressionEditOffcanvas.LetAsync(x => x.ShowAsync(parameter));

    private IEnumerable<JobParameter> GetAvailableJobParameters(StepParameterBase param) => JobParameters
        .Where(p => p.ParameterValueType == param.ParameterValueType || p.UseExpression)
        .OrderBy(p => p.ParameterName);

    private void SetInheritFromJobParameter(bool inheritFromJob, StepParameterBase param)
    {
        if (inheritFromJob)
        {
            param.InheritFromJobParameterId = GetAvailableJobParameters(param).FirstOrDefault()?.ParameterId;
            param.InheritFromJobParameter = GetAvailableJobParameters(param).FirstOrDefault();
        }
        else
        {
            param.InheritFromJobParameterId = null;
            param.InheritFromJobParameter = null;
        }
    }

}
