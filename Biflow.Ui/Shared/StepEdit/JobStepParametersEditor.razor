@inject IDbContextFactory<AppDbContext> DbContextFactory

@if (_loading)
{
    <div class="row mt-3">
        <div class="col text-center">
            <HxSpinner Color="ThemeColor.Secondary" />
        </div>
    </div>
}
else if (Step is not null && _targetJob is not null)
{
    <p />
    <h5>
        Parameters
    </h5>
    <table id="parameters_table" class="table table-sm">
        <thead>
            <tr>
                <th>Target</th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!Step.StepParameters.Any())
            {
                <tr><td colspan="5">No parameters</td></tr>
            }
            @{
                var count = 0;
            }
            @foreach (var param in Step.StepParameters.OrderBy(p => p.ParameterName))
            {
                var targetParam = _targetJob.JobParameters.First(p => p.ParameterId == param.AssignToJobParameterId);
                var availableJobParams = GetAvailableJobParameters(param);
                <tr>
                    <td>
                        @targetParam.ParameterName<sup>@targetParam.ParameterValue.ValueType</sup>
                    </td>
                    <td class="align-middle">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="inherit_param_@count"
                           checked=@(param.InheritFromJobParameterId is not null)
                           disabled=@(!availableJobParams.Any())
                           @onchange="args => SetInheritFromJobParameter((bool)args.Value!, param)">
                            <label class="form-check-label fw-normal" for="inherit_param_@count">Inherit</label>
                        </div>
                    </td>
                    @if (param.InheritFromJobParameterId is not null)
                    {
                        var t1 = targetParam.ParameterValue.ValueType;
                        var t2 = param.InheritFromJobParameter?.ParameterValue.ValueType;
                        <td colspan="2">
                            <div class="row align-items-center">
                                <div class="col">
                                    <InputSelect class="form-select form-select-sm"
                                                 @bind-Value:get="param.InheritFromJobParameterId"
                                                 @bind-Value:set="id => SetInheritFromJobParameter(true, param, id)">
                                        @foreach (var jobParam in availableJobParams)
                                        {
                                            <option value="@jobParam.ParameterId">
                                                @jobParam.DisplaySummary
                                            </option>
                                        }
                                    </InputSelect>
                                </div>
                                @if (t1 != t2)
                                {
                                    <div class="col-auto">
                                        <HxTooltip Trigger="TooltipTrigger.Hover" Text="@($"Parameter value types do not match: {t1} vs {t2}")">
                                            <span style="color: var(--bs-warning);">
                                                <SvgIcon Icon="FeatherIcon.AlertCircle" />
                                            </span>
                                        </HxTooltip>
                                    </div>
                                }
                            </div>
                        </td>
                    }
                    else
                    {
                        <DynamicParameterEditor Parameter="param" TParameter="StepParameterBase"
                                           OnParameterEdit="OnParameterEdit">
                            <StaticEditTemplate>
                                <td>
                                    <div class="input-group input-group-sm">
                                        <div class="input-group-text">
                                            Value
                                        </div>
                                        <ParameterValueEditor Parameter="param" />
                                    </div>
                                </td>
                            </StaticEditTemplate>
                        </DynamicParameterEditor>
                    }
                    <td>
                        <HxButtonGroup Size="ButtonGroupSize.Small">
                            <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" @onclick="() => Step.StepParameters.Remove(param)">
                                <SvgIcon Icon="FeatherIcon.Delete" />
                            </HxButton>
                        </HxButtonGroup>
                    </td>
                </tr>
                count++;
            }
        </tbody>
    </table>
    <HxDropdownButtonGroup>
        <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" Enabled="AvailableTargetParameters.Any()">
            <SvgIcon Icon="FeatherIcon.Plus" />
            Add parameter
        </HxDropdownToggleButton>
        <HxDropdownMenu>
            @foreach (var param in AvailableTargetParameters)
            {
                <HxDropdownItem OnClick="() => AddParameter(param)">
                    @param.ParameterName<sup>@param.ParameterValue.ValueType</sup>
                </HxDropdownItem>
            }
        </HxDropdownMenu>
    </HxDropdownButtonGroup>
}
else if (Step is not null)
{
    <div class="row mt-3">
        <div class="col text-center">
            <em>Select a job to add step parameters</em>
        </div>
    </div>
}

<ExpressionEditOffcanvas @ref="_expressionEditOffcanvas" TParameter="StepParameterBase" OnExpressionChanged="StateHasChanged">
    <div class="row mt-3">
        <div class="col">
            <ExpressionParameterEditor StepParameter="context" />
        </div>
    </div>
    <StepExpressionParameterNotice />
</ExpressionEditOffcanvas>

@code {
    [Parameter] public JobStep? Step { get; set; }

    [Parameter] public Guid? TargetJobId { get; set; }

    private Job? _targetJob;
    private bool _loading = false;
    private ExpressionEditOffcanvas<StepParameterBase>? _expressionEditOffcanvas;

    private IEnumerable<JobParameter> JobParameters => Step?.Job.JobParameters ?? Enumerable.Empty<JobParameter>();

    private IEnumerable<JobParameter> AvailableTargetParameters => _targetJob?.JobParameters
        .Where(jp => Step?.StepParameters.All(sp => sp.AssignToJobParameterId != jp.ParameterId) ?? false)
        .OrderBy(jp => jp.ParameterName)
        .AsEnumerable() ?? [];

    protected override async Task OnParametersSetAsync()
    {
        if (TargetJobId == _targetJob?.JobId || _loading)
        {
            return;
        }

        if (TargetJobId is null)
        {
            _targetJob = null;
            return;
        }

        _loading = true;

        await using var context = await DbContextFactory.CreateDbContextAsync();
        _targetJob = await context.Jobs
            .Include(j => j.JobParameters)
            .FirstOrDefaultAsync(j => j.JobId == TargetJobId);

        _loading = false;
    }

    private void AddParameter(JobParameter targetParam)
    {
        if (Step is null)
        {
            return;
        }
        var parameter = new JobStepParameter(targetParam.ParameterId)
        {
            ParameterName = targetParam.ParameterName,
            ParameterValue = targetParam.ParameterValue,
            Step = Step
        };
        Step.StepParameters.Add(parameter);
    }

    private Task OnParameterEdit(StepParameterBase parameter) => _expressionEditOffcanvas.LetAsync(x => x.ShowAsync(parameter));

    private IEnumerable<JobParameter> GetAvailableJobParameters(StepParameterBase param) => JobParameters
        .OrderBy(p => p.ParameterName);

    private void SetInheritFromJobParameter(bool inheritFromJob, StepParameterBase param, Guid? jobParameterId = null)
    {
        switch (inheritFromJob)
        {
            case true when jobParameterId is { } id:
                param.InheritFromJobParameterId = GetAvailableJobParameters(param).FirstOrDefault(p => p.ParameterId == id)?.ParameterId;
                param.InheritFromJobParameter = GetAvailableJobParameters(param).FirstOrDefault(p => p.ParameterId == id);
                break;
            case true:
                param.InheritFromJobParameterId = GetAvailableJobParameters(param).FirstOrDefault()?.ParameterId;
                param.InheritFromJobParameter = GetAvailableJobParameters(param).FirstOrDefault();
                break;
            default:
                param.InheritFromJobParameterId = null;
                param.InheritFromJobParameter = null;
                break;
        }
    }

}
