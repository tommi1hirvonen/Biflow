
@inject IHxMessengerService Messenger


@if (StepType == StepType.Sql)
{
    <div class="row">
        <div class="col">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link" OnClick="GetDatabaseObjectsAsync">
                Attempt to infer from stored procedure
            </HxButton>
            @{
                var content = $"Read {ListName} objects from the database based on stored procedure definition. Mapping can be unreliable especially when temporary tables are used. Manually remove extra {ListName}s after mapping.";
            }
            <HxPopover Trigger="PopoverTrigger.Hover" Content="@content">
                <CxIcon Icon="FeatherIcon.Info" />
            </HxPopover>
        </div>
    </div>
}
<div class="row mt-3">
    <div class="col-auto">
        <div class="form-check form-check-inline">
            <input type="checkbox" class="form-check-input" id="only_schedule"
                    @bind-value="showServer"
                    checked=@showServer>
            <label class="form-check-label" for="only_schedule">Show server name</label>
        </div>
        <div class="form-check form-check-inline ms-3">
            <input type="checkbox" class="form-check-input" id="include_deleted"
                    @bind-value="showDatabase"
                    checked=@showDatabase>
            <label class="form-check-label" for="include_deleted">Show database name</label>
        </div>
    </div>
</div>
@{
    var colspan = (showServer, showDatabase, newObject is not null) switch
    {
        (true, true, _) or (_, _, true) => 6,
        (false, true, _) or (true, false, _) => 5,
        _ => 4
    };
}
<table class="table table-sm table-hover small mt-3">
    <thead>
        <tr>
            @if (showServer || newObject is not null)
            {
                <th>Server</th>
            }
            @if (showDatabase || newObject is not null)
            {
                <th>Database</th>
            }
            <th>Schema</th>
            <th>Name</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (DataObjects is null)
        {
            <tr>
                <td colspan="@colspan">Loading...</td>
            </tr>
        }
        else if (!DataObjects.Any())
        {
            <tr>
                <td colspan="@colspan">@NoDataObjectsText</td>
            </tr>
        }
        else
        {
            foreach (var obj in DataObjects
           .OrderBy(x => x.ServerName)
           .ThenBy(x => x.DatabaseName)
           .ThenBy(x => x.SchemaName)
           .ThenBy(x => x.ObjectName))
            {
                var mappingResult = GetMappingResult(obj);
                var title = mappingResult switch
                {
                    { IsCandidateForRemoval: true } => "Object not found in latest mapping result",
                    { IsUnreliableMapping: true } => "Unreliable mapping",
                    { IsNewAddition: true } => "New object",
                    _ => null
                };
                <tr title="@title">
                    @if (showServer || newObject is not null)
                    {
                        <td class="align-middle">
                            @obj.ServerName
                        </td>
                    }
                    @if (showDatabase || newObject is not null)
                    {
                        <td class="align-middle">
                            @obj.DatabaseName
                        </td>
                    }
                    <td class="align-middle">
                        @obj.SchemaName
                    </td>
                    <td class="align-middle">
                        @obj.ObjectName
                    </td>
                    <td>
                        @if (mappingResult.IsCandidateForRemoval)
                        {
                            <span class="text-danger fw-bold fs-5 pb-1">–</span>
                        }
                        else if (mappingResult.IsUnreliableMapping)
                        {
                            <span class="text-warning fw-bold fs-5 pb-1">?</span>
                        }
                        else if (mappingResult.IsNewAddition)
                        {
                            <span class="text-success fw-bold fs-5 pb-1">+</span>
                        }
                    </td>
                    <td>
                        <HxButtonGroup Size="ButtonGroupSize.Small">
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" OnClick="() => DataObjects.Remove(obj)">
                                <CxIcon Icon="FeatherIcon.Delete" />
                            </HxButton>
                        </HxButtonGroup>
                    </td>
                </tr>
            }
        }
        @if (newObject is not null)
        {
            <tr>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="newObject.ServerName"
                            @bind:event="oninput"
                            @onfocusin="() => suggestType = DatabaseObjectType.Server" />
                </td>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="newObject.DatabaseName"
                            @bind:event="oninput"
                            @onfocusin="() => suggestType = DatabaseObjectType.Database" />
                </td>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="newObject.SchemaName"
                            @bind:event="oninput"
                            @onfocusin="() => suggestType = DatabaseObjectType.Schema" />
                </td>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="newObject.ObjectName"
                            @bind:event="oninput"
                            @onfocusin="() => suggestType = DatabaseObjectType.Object" />
                </td>
                <td colspan="2">
                    <HxButtonGroup Size="ButtonGroupSize.Small">
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto text-success" OnClick="SubmitNewObject" title="Add">
                            <CxIcon Icon="FeatherIcon.Check" />
                        </HxButton>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto text-danger" OnClick="() => newObject = null" title="Discard">
                            <CxIcon Icon="FeatherIcon.X" />
                        </HxButton>
                    </HxButtonGroup>
                </td>
            </tr>
            @if (suggestType == DatabaseObjectType.Server)
            {
                var servers = allObjects?
                    .Select(o => o.ServerName)
                    .Distinct()
                    .OrderBy(o => o)
                    .Take(10) ?? Enumerable.Empty<string>();
                @foreach (var server in servers)
                {
                    <tr style="cursor: pointer;" @onclick="() => newObject.ServerName = server">
                        <td colspan="6"><HighlightableText Text="@server" PartToHighlight="@newObject.ServerName" /></td>
                    </tr>
                }
            }
            else if (suggestType == DatabaseObjectType.Database)
            {
                var databases = allObjects?
                    .Where(o => string.IsNullOrEmpty(newObject.ServerName) || o.ServerName == newObject.ServerName)
                    .Where(o => o.DatabaseName.ContainsIgnoreCase(newObject.DatabaseName))
                    .Select(o => (o.ServerName, o.DatabaseName))
                    .Distinct()
                    .OrderBy(o => o.ServerName).ThenBy(o => o.DatabaseName)
                    .Take(10) ?? Enumerable.Empty<(string, string)>();
                @foreach (var database in databases)
                {
                    <tr style="cursor: pointer;" @onclick="() => { newObject.ServerName = database.ServerName; newObject.DatabaseName = database.DatabaseName; }">
                        <td colspan="1">@database.ServerName</td>
                        <td colspan="5"><HighlightableText Text="@database.DatabaseName" PartToHighlight="@newObject.DatabaseName" /></td>
                    </tr>
                }
            }
            else if (suggestType == DatabaseObjectType.Schema)
            {
                var schemas = allObjects?
                    .Where(o => string.IsNullOrEmpty(newObject.ServerName) || o.ServerName == newObject.ServerName)
                    .Where(o => string.IsNullOrEmpty(newObject.DatabaseName) || o.DatabaseName == newObject.DatabaseName)
                    .Where(o => o.SchemaName.ContainsIgnoreCase(newObject.SchemaName))
                    .Select(o => (o.ServerName, o.DatabaseName, o.SchemaName))
                    .Distinct()
                    .OrderBy(o => o.ServerName).ThenBy(o => o.DatabaseName).ThenBy(o => o.SchemaName)
                    .Take(10) ?? Enumerable.Empty<(string, string, string)>();
                @foreach (var schema in schemas)
                {
                    <tr style="cursor: pointer;" @onclick="() => { newObject.ServerName = schema.ServerName; newObject.DatabaseName = schema.DatabaseName; newObject.SchemaName = schema.SchemaName; }">
                        <td colspan="1">@schema.ServerName</td>
                        <td colspan="1">@schema.DatabaseName</td>
                        <td colspan="4"><HighlightableText Text="@schema.SchemaName" PartToHighlight="@newObject.SchemaName" /></td>
                    </tr>
                }
            }
            else if (suggestType == DatabaseObjectType.Object)
            {
                var objects = allObjects?
                    .Where(o => string.IsNullOrEmpty(newObject.ServerName) || o.ServerName == newObject.ServerName)
                    .Where(o => string.IsNullOrEmpty(newObject.DatabaseName) || o.DatabaseName == newObject.DatabaseName)
                    .Where(o => string.IsNullOrEmpty(newObject.SchemaName) || o.SchemaName == newObject.SchemaName)
                    .Where(o => o.ObjectName.ContainsIgnoreCase(newObject.ObjectName))
                    .OrderBy(o => o.ServerName).ThenBy(o => o.DatabaseName).ThenBy(o => o.SchemaName).ThenBy(o => o.ObjectName)
                    .Take(10) ?? Enumerable.Empty<DataObject>();
                @foreach (var obj in objects)
                {
                    <tr style="cursor: pointer;" @onclick="() => { newObject = obj; SubmitNewObject(); }">
                        <td class="align-middle">@obj.ServerName</td>
                        <td class="align-middle">@obj.DatabaseName</td>
                        <td class="align-middle">@obj.SchemaName</td>
                        <td class="align-middle" colspan="2"><HighlightableText Text="@obj.ObjectName" PartToHighlight="@newObject.ObjectName" /></td>
                        <td>
                            <HxButtonGroup Size="ButtonGroupSize.Small">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" OnClick="() => { newObject = obj; }" title="Edit before adding">
                                    <CxIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                            </HxButtonGroup>
                        </td>
                    </tr>
                }
            }
        }
    </tbody>
</table>
<HxDropdownButtonGroup Split CssClass="mt-2">
    <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" OnClick="() => dbObjectExplorerOffcanvas.LetAsync(x => x.ShowAsync(ConnectionId))">
        <CxIcon Icon="FeatherIcon.Plus" />
        @AddButtonText
    </HxButton>
    <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small">
        <span class="visually-hidden">Toggle dropdown</span>
    </HxDropdownToggleButton>
    <HxDropdownMenu>
        <HxDropdownItem OnClick="AddNewObjectAsync">
            Add manually
        </HxDropdownItem>
    </HxDropdownMenu>
</HxDropdownButtonGroup>


<DbObjectExplorerOffcanvas @ref="dbObjectExplorerOffcanvas" Connections="Connections" OnDbObjectSelected="OnDbObjectSelected" />

@code {
    [Parameter] public string ListName { get; set; } = string.Empty;

    [Parameter] public StepType StepType { get; set; }

    [Parameter] public IList<DataObject>? DataObjects { get; set; }

    [Parameter] public IList<DataObject> ComparisonObjects { get; set; } = null!;

    [Parameter] public Guid? ConnectionId { get; set; }

    [Parameter] public IEnumerable<SqlConnectionInfo> Connections { get; set; } = null!;

    [Parameter] public string? SqlStatement { get; set; }

    [Parameter] public Func<Guid, string?, string, Task<IEnumerable<DbObjectReference>>> LoadDataObjectDependencies { get; set; } = null!;

    [Parameter] public Func<Task<IEnumerable<DataObject>>> LoadAllDataObjects { get; set; } = null!;

    [Parameter] public Func<DataObject, DataObjectMappingResult> GetMappingResult { get; set; } = null!;

    [Parameter] public string AddButtonText { get; set; } = "";

    [Parameter] public string NoDataObjectsText { get; set; } = "";

    private IEnumerable<DataObject>? allObjects;
    private bool showServer = false;
    private bool showDatabase = true;
    private DataObject? newObject;
    private DatabaseObjectType? suggestType;
    private DbObjectExplorerOffcanvas? dbObjectExplorerOffcanvas;

    private enum DatabaseObjectType
    {
        Server, Database, Schema, Object
    }

    private async Task AddNewObjectAsync()
    {
        allObjects ??= await LoadAllDataObjects();
        newObject = new();
    }

    private void SubmitNewObject()
    {
        ArgumentNullException.ThrowIfNull(newObject);
        ArgumentNullException.ThrowIfNull(DataObjects);

        if (DataObjects.Any(o => o.NamesEqual(newObject)))
        {
            Messenger.AddWarning($"Duplicate {ListName} object");
            return;
        }

        var existing = allObjects?.FirstOrDefault(o => o.NamesEqual(newObject))
            ?? ComparisonObjects.FirstOrDefault(o => o.NamesEqual(newObject));
        if (existing is not null)
        {
            GetMappingResult(existing).IsNewAddition = true;
            DataObjects.Add(existing);
        }
        else
        {
            GetMappingResult(newObject).IsNewAddition = true;
            DataObjects.Add(newObject);
        }
        newObject = null;
    }

    private async Task GetDatabaseObjectsAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(DataObjects);

            var proc = SqlStatement?.ParseStoredProcedureFromSqlStatement();
            var schema = proc?.Schema;
            var name = proc?.ProcedureName;
            if (name is null) return;

            allObjects ??= await LoadAllDataObjects();

            Guid connectionId = ConnectionId ?? throw new ArgumentNullException(nameof(ConnectionId), "Connection id was null");
            var dependencies = await LoadDataObjectDependencies(connectionId, schema, name);

            // Add new data objects for the step if they are not present.
            foreach (var dependency in dependencies)
            {
                // Check if the same object exists in the comparison list. Skip this object if it does.
                // This way we do not accidentally add objects that might be a target as sources,
                // thus creating a self reference.
                var comparison = ComparisonObjects.FirstOrDefault(o => o.NamesEqual(dependency));
                if (comparison is not null)
                    continue;

                var dbObject = allObjects?.FirstOrDefault(o => o.NamesEqual(dependency)) ??
                    new DataObject
                        {
                            ServerName = dependency.ServerName,
                            DatabaseName = dependency.DatabaseName,
                            SchemaName = dependency.SchemaName,
                            ObjectName = dependency.ObjectName
                        };

                if (!DataObjects.Any(s => s.NamesEqual(dbObject)))
                {
                    GetMappingResult(dbObject).IsNewAddition = true;
                    GetMappingResult(dbObject).IsUnreliableMapping = dependency.IsUnreliable;
                    DataObjects.Add(dbObject);
                }
            }

            foreach (var dbObject in DataObjects) GetMappingResult(dbObject).IsCandidateForRemoval = false;

            // Check if there are objects in the list that are not mentioned in the dependencies.
            // Flag them as candidates for removal.
            var candidatesForRemoval = DataObjects.Where(o => !dependencies.Any(d => o.NamesEqual(d))).ToList();
            foreach (var candidate in candidatesForRemoval)
            {
                GetMappingResult(candidate).IsCandidateForRemoval = true;
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error getting object dependencies", ex.Message);
        }
    }

    private void OnDbObjectSelected((string Server, string Database, string Schema, string Object) tuple, bool commit)
    {
        if (newObject is null)
        {
            newObject = new();
        }
        newObject.ServerName = tuple.Server;
        newObject.DatabaseName = tuple.Database;
        newObject.SchemaName = tuple.Schema;
        newObject.ObjectName = tuple.Object;
        if (commit)
        {
            SubmitNewObject();
        }
        StateHasChanged();
    }
}
