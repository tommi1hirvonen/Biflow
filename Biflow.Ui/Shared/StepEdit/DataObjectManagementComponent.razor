
@inject IHxMessengerService Messenger


@if (StepType == StepType.Sql)
{
    <div class="row">
        <div class="col">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link" OnClick="GetDatabaseObjectsAsync">
                Attempt to infer from stored procedure
            </HxButton>
            @{
                var content = $"Read {ListName} objects from the database based on stored procedure definition. Mapping can be unreliable especially when temporary tables are used. Manually remove extra {ListName}s after mapping.";
            }
            <HxPopover Trigger="PopoverTrigger.Hover" Content="@content">
                <CxIcon Icon="FeatherIcon.Info" />
            </HxPopover>
        </div>
    </div>
}

<table class="table table-sm small mt-3">
    <thead>
        <tr>
            <th>Uri</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (DataObjects is null)
        {
            <tr>
                <td colspan="3">Loading...</td>
            </tr>
        }
        else if (!DataObjects.Any() && newObject is null)
        {
            <tr>
                <td colspan="3">@NoDataObjectsText</td>
            </tr>
        }
        else
        {
            foreach (var obj in DataObjects.OrderBy(x => x.ObjectUri))
            {
                var mappingResult = GetMappingResult(obj);
                var title = mappingResult switch
                {
                    { IsCandidateForRemoval: true } => "Object not found in latest mapping result",
                    { IsUnreliableMapping: true } => "Unreliable mapping",
                    { IsNewAddition: true } => "New object",
                    _ => null
                };
                <tr class="table-hover" title="@title">
                    <td class="align-middle font-monospace">
                        @obj.ObjectUri
                    </td>
                    <td>
                        @if (mappingResult.IsCandidateForRemoval)
                        {
                            <span class="text-danger fw-bold fs-5 pb-1">–</span>
                        }
                        else if (mappingResult.IsUnreliableMapping)
                        {
                            <span class="text-warning fw-bold fs-5 pb-1">?</span>
                        }
                        else if (mappingResult.IsNewAddition)
                        {
                            <span class="text-success fw-bold fs-5 pb-1">+</span>
                        }
                    </td>
                    <td>
                        <HxButtonGroup Size="ButtonGroupSize.Small">
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" OnClick="() => OnDelete.InvokeAsync(obj)">
                                <CxIcon Icon="FeatherIcon.Delete" />
                            </HxButton>
                        </HxButtonGroup>
                    </td>
                </tr>
            }
        }
        @if (newObject is not null)
        {
            <tr>
                <td>
                    <input class="form-control form-control-sm font-monospace" type="text" autocomplete="off" placeholder="Uri"
                            @bind="newObject.ObjectUri"
                            @bind:event="oninput" />
                </td>
                <td colspan="2">
                    <HxButtonGroup Size="ButtonGroupSize.Small">
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto text-success" OnClick="SubmitNewObject" title="Add">
                            <CxIcon Icon="FeatherIcon.Check" />
                        </HxButton>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto text-danger" OnClick="() => newObject = null" title="Discard">
                            <CxIcon Icon="FeatherIcon.X" />
                        </HxButton>
                    </HxButtonGroup>
                </td>
            </tr>
            var objects = allObjects?
                .Where(o => o.ObjectUri.ContainsIgnoreCase(newObject.ObjectUri))
                .OrderBy(o => o.ObjectUri)
                .Take(10) ?? Enumerable.Empty<DataObject>();
            <tr>
                <td class="px-5" colspan="3">
                    <table class="table table-sm table-hover mb-0">
                        <thead>
                            <tr>
                                <th>Suggestions</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var obj in objects)
                            {
                                <tr style="cursor: pointer;" @onclick="() => { newObject = obj; SubmitNewObject(); }">
                                    <td class="align-middle font-monospace">
                                        <HighlightableText Text="@obj.ObjectUri" PartToHighlight="@newObject.ObjectUri" />
                                    </td>
                                    <td>
                                        <HxButtonGroup Size="ButtonGroupSize.Small">
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" OnClick="() => { newObject = obj; }" title="Edit before adding">
                                                <CxIcon Icon="FeatherIcon.Edit2" />
                                            </HxButton>
                                        </HxButtonGroup>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            </tr>
        }
    </tbody>
</table>

<HxDropdownButtonGroup CssClass="mt-2">
    <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small">
        <CxIcon Icon="FeatherIcon.Plus" />
        @AddButtonText
    </HxDropdownToggleButton>
    <HxDropdownMenu>
        <HxDropdownItem OnClick="() => dbObjectExplorerOffcanvas.LetAsync(x => x.ShowAsync(ConnectionId))">
            <CxIcon Icon="FeatherIcon.Table" />
            Add table
        </HxDropdownItem>
        <HxDropdownItem OnClick="AddNewObjectAsync">
            <CxIcon Icon="FeatherIcon.Edit3" />
            Add manually
        </HxDropdownItem>
    </HxDropdownMenu>
</HxDropdownButtonGroup>

<DbObjectExplorerOffcanvas @ref="dbObjectExplorerOffcanvas" Connections="Connections" OnDbObjectSelected="OnDbObjectSelected" />

@code {
    [Parameter] public string ListName { get; set; } = string.Empty;

    [Parameter] public StepType StepType { get; set; }

    [Parameter] public IEnumerable<DataObject>? DataObjects { get; set; }

    [Parameter] public IEnumerable<DataObject> ComparisonObjects { get; set; } = null!;

    [Parameter] public EventCallback<DataObject> OnDelete { get; set; }

    [Parameter] public EventCallback<DataObject> OnAdd { get; set; }

    [Parameter] public Guid? ConnectionId { get; set; }

    [Parameter] public IEnumerable<SqlConnectionInfo> Connections { get; set; } = null!;

    [Parameter] public string? SqlStatement { get; set; }

    [Parameter] public Func<Guid, string?, string, Task<IEnumerable<DbObjectReference>>> LoadDataObjectDependencies { get; set; } = null!;

    [Parameter] public Func<Task<IEnumerable<DataObject>>> LoadAllDataObjects { get; set; } = null!;

    [Parameter] public Func<DataObject, DataObjectMappingResult> GetMappingResult { get; set; } = null!;

    [Parameter] public string AddButtonText { get; set; } = "";

    [Parameter] public string NoDataObjectsText { get; set; } = "";

    private IEnumerable<DataObject>? allObjects;
    private DataObject? newObject;
    private DbObjectExplorerOffcanvas? dbObjectExplorerOffcanvas;

    private async Task AddNewObjectAsync()
    {
        allObjects ??= await LoadAllDataObjects();
        newObject = new();
    }

    private async void SubmitNewObject()
    {
        ArgumentNullException.ThrowIfNull(newObject);
        ArgumentNullException.ThrowIfNull(DataObjects);

        if (DataObjects.Any(o => o.UriEquals(newObject)))
        {
            Messenger.AddWarning($"Duplicate {ListName} object");
            return;
        }

        if (!Uri.IsWellFormedUriString(newObject.ObjectUri, UriKind.RelativeOrAbsolute))
        {
            Messenger.AddWarning("Not a valid Uri");
            return;
        }

        var existing = allObjects?.FirstOrDefault(o => o.UriEquals(newObject))
            ?? ComparisonObjects.FirstOrDefault(o => o.UriEquals(newObject));
        if (existing is not null)
        {
            GetMappingResult(existing).IsNewAddition = true;
            await OnAdd.InvokeAsync(existing);
        }
        else
        {
            GetMappingResult(newObject).IsNewAddition = true;
            await OnAdd.InvokeAsync(newObject);
        }
        newObject = null;
    }

    private async Task GetDatabaseObjectsAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(DataObjects);

            var proc = SqlStatement?.ParseStoredProcedureFromSqlStatement();
            var schema = proc?.Schema;
            var name = proc?.ProcedureName;
            if (name is null) return;

            allObjects ??= await LoadAllDataObjects();

            Guid connectionId = ConnectionId ?? throw new ArgumentNullException(nameof(ConnectionId), "Connection id was null");
            var dependencies = await LoadDataObjectDependencies(connectionId, schema, name);

            // Add new data objects for the step if they are not present.
            foreach (var dependency in dependencies)
            {
                // Check if the same object exists in the comparison list. Skip this object if it does.
                // This way we do not accidentally add objects that might be a target as sources,
                // thus creating a self reference.
                var comparison = ComparisonObjects.FirstOrDefault(o => o.UriEquals(dependency));
                if (comparison is not null)
                    continue;

                var dbObject = allObjects?.FirstOrDefault(o => o.UriEquals(dependency)) ??
                    new DataObject { ObjectUri = dependency.ObjectUri };

                if (!DataObjects.Any(s => s.UriEquals(dbObject)))
                {
                    GetMappingResult(dbObject).IsNewAddition = true;
                    GetMappingResult(dbObject).IsUnreliableMapping = dependency.IsUnreliable;
                    await OnAdd.InvokeAsync(dbObject);
                }
            }

            foreach (var dbObject in DataObjects) GetMappingResult(dbObject).IsCandidateForRemoval = false;

            // Check if there are objects in the list that are not mentioned in the dependencies.
            // Flag them as candidates for removal.
            var candidatesForRemoval = DataObjects.Where(o => !dependencies.Any(d => o.UriEquals(d))).ToList();
            foreach (var candidate in candidatesForRemoval)
            {
                GetMappingResult(candidate).IsCandidateForRemoval = true;
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error getting object dependencies", ex.Message);
        }
    }

    private void OnDbObjectSelected((string Server, string Database, string Schema, string Object) tuple, bool commit)
    {
        if (newObject is null)
        {
            newObject = new();
        }
        newObject.ObjectUri = DataObject.CreateTableUri(tuple.Server, tuple.Database, tuple.Schema, tuple.Object);
        if (commit)
        {
            SubmitNewObject();
        }
        StateHasChanged();
    }
}
