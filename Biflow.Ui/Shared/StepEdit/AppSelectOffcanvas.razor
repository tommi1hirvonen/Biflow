@inject ToasterService Toaster
@inject IHttpClientFactory HttpClientFactory

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Regular" Title="Select app" OnClosed="OnClosed">
    <BodyTemplate>
        @if (AllowClientChange)
        {
            <div class="row mb-3 align-items-end">
                <div class="col">
                    <label class="form-label">Azure credential</label>
                    <div class="input-group input-group-sm">
                        <div class="input-group-text">
                            <SvgIcon Icon="LucideIcon.Globe" />
                        </div>
                        <select class="form-select form-select-sm" @bind="_clientId">
                            @foreach (var client in QlikClients ?? [])
                            {
                                <option value="@client.QlikCloudEnvironmentId">@client.QlikCloudEnvironmentName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-auto">
                    <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="() => LoadAsync()">
                        <SvgIcon Icon="LucideIcon.RefreshCw" />
                        Refresh
                    </HxButton>
                </div>
            </div>
        }
        <div class="row">
            <div class="col">
                <div class="input-group">
                    <div class="input-group-text">
                        <SvgIcon Icon="LucideIcon.Search" />
                    </div>
                    <input type="search" class="form-control form-control-sm" placeholder="Search apps" @bind-value="_appSearchTerm" @bind-value:event="oninput" />
                </div>
            </div>
        </div>
        @{
            var style = AllowClientChange
                ? "height: calc(100vh - 290px); overflow-y: scroll;"
                : "height: calc(100vh - 210px); overflow-y: scroll;";
        }
        <div class="row mt-3" style="@style">
            <div class="col">
                <div class="list-group group">
                    @if (_spaces is null)
                    {
                        <div class="list-group-item text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </div>
                    }
                    else if (!_spaces.Any())
                    {
                        <div class="list-group-item small">
                            No spaces with apps
                        </div>
                    }
                    else
                    {
                        var filteredSpaces = _spaces
                            .Where(s => string.IsNullOrEmpty(_appSearchTerm) || s.Apps.Any(a => a.Name.ContainsIgnoreCase(_appSearchTerm)))
                            .OrderBy(s => s.Name)
                            .ToArray();
                        if (filteredSpaces.Length == 0)
                        {
                            <div class="list-group-item small">
                                No matching results
                            </div>
                        }
                        foreach (var space in filteredSpaces)
                        {
                            var apps = space.Apps
                                .Where(a => string.IsNullOrEmpty(_appSearchTerm) || a.Name.ContainsIgnoreCase(_appSearchTerm))
                                .OrderBy(a => a.Name)
                                .ToArray();
                            var expanded = !string.IsNullOrEmpty(_appSearchTerm) || _spaceExpandState.GetValueOrDefault(space);
                            <div class="list-group-item list-group-item-action cursor-pointer" @onclick="() => _spaceExpandState[space] = !expanded">
                                <div class="row">
                                    <div class="col d-flex align-items-center small">
                                        @if (expanded)
                                        {
                                            <SvgIcon Icon="LucideIcon.ChevronDown" />
                                        }
                                        else
                                        {
                                            <SvgIcon Icon="LucideIcon.ChevronRight" />
                                        }
                                        &nbsp;
                                        <SvgIcon Icon="LucideIcon.Folder" />
                                        &nbsp;
                                        @space.Name
                                        <span class="ms-auto badge rounded-pill @(apps.Length > 0 ? "bg-primary" : "bg-secondary")">
                                            @apps.Length
                                        </span>
                                    </div>
                                </div>
                            </div>
                            @if (expanded)
                            {
                                foreach (var app in apps)
                                {
                                    <div class="list-group-item list-group-item-action cursor-pointer @(app == _selectedApp ? "fw-bold bg-body" : null)" @onclick="() => _selectedApp = app">
                                        <div class="row">
                                            <div class="col d-flex align-items-center ps-5 small">
                                                <SvgIcon Icon="LucideIcon.FileChartPie" />
                                                &nbsp;
                                                <HighlightableText Text="@app.Name" PartToHighlight="@_appSearchTerm" />
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectAppAsync"
                  Enabled="_selectedApp is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public IEnumerable<QlikCloudEnvironment>? QlikClients { get; set; }

    [Parameter]
    public bool AllowClientChange { get; set; }

    [Parameter] public EventCallback<QlikApp> OnAppSelected { get; set; }

    private readonly Dictionary<QlikSpace, bool> _spaceExpandState = [];

    private Guid _clientId;
    private HxOffcanvas? _offcanvas;
    private IEnumerable<QlikSpace>? _spaces;
    private QlikApp? _selectedApp;    
    private string _appSearchTerm = "";

    public async Task ShowAsync(Guid? clientId = null)
    {
        if (clientId is { } id)
        {
            _clientId = id;
        }
        else
        {
            _clientId = QlikClients?.FirstOrDefault()?.QlikCloudEnvironmentId ?? Guid.Empty;
        }

        if (_clientId == Guid.Empty)
        {
            Toaster.AddWarning("No Qlik clients found");
            return;
        }

        await _offcanvas.LetAsync(x => x.ShowAsync());
        await LoadAsync();
    }

    private async Task SelectAppAsync()
    {
        ArgumentNullException.ThrowIfNull(_selectedApp);
        await OnAppSelected.InvokeAsync(_selectedApp);
        await _offcanvas.LetAsync(x => x.HideAsync());
    }

    private async Task LoadAsync()
    {
        _spaces = null;
        _selectedApp = null;
        _spaceExpandState.Clear();

        try
        {
            var client = QlikClients?.FirstOrDefault(c => c.QlikCloudEnvironmentId == _clientId);
            ArgumentNullException.ThrowIfNull(client);
            using var connectedClient = client.CreateClient(HttpClientFactory);
            _spaces = await connectedClient.GetAppsAsync();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error getting apps", ex.Message);
        }
    }

    private void OnClosed()
    {
        _spaceExpandState.Clear();
        (_selectedApp, _spaces) = (null, null);
    }
    
}
