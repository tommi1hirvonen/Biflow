
<HxOffcanvas @ref="offcanvas" Size="OffcanvasSize.Regular" Title="Select app" OnClosed="OnClosed">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="input-group">
                    <div class="input-group-text">
                        <CxIcon Icon="FeatherIcon.Search" />
                    </div>
                    <input type="search" class="form-control form-control-sm" placeholder="Search apps" @bind-value="appSearchTerm" @bind-value:event="oninput" />
                </div>
            </div>
        </div>
        <div class="row mt-3" style="height: calc(100vh - 210px); overflow-y: scroll;">
            <div class="col">
                <div class="list-group group">
                    @if (spaces is null)
                    {
                        <div class="list-group-item text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </div>
                    }
                    else if (!spaces.Any())
                    {
                        <div class="list-group-item small">
                            No spaces with apps
                        </div>
                    }
                    else
                    {
                        var filteredSpaces = spaces
                            .Where(s => string.IsNullOrEmpty(appSearchTerm) || s.Apps.Any(a => a.Name.ContainsIgnoreCase(appSearchTerm)))
                            .OrderBy(s => s.Name)
                            .ToArray();
                        if (filteredSpaces.Length == 0)
                        {
                            <div class="list-group-item small">
                                No matching results
                            </div>
                        }
                        foreach (var space in filteredSpaces)
                        {
                            var apps = space.Apps
                                .Where(a => string.IsNullOrEmpty(appSearchTerm) || a.Name.ContainsIgnoreCase(appSearchTerm))
                                .OrderBy(a => a.Name)
                                .ToArray();
                            var expanded = !string.IsNullOrEmpty(appSearchTerm) || spaceExpandState.GetValueOrDefault(space);
                            <div class="list-group-item list-group-item-action" style="cursor: pointer;" @onclick="() => spaceExpandState[space] = !expanded">
                                <div class="row">
                                    <div class="col d-flex align-items-center small">
                                        @if (expanded)
                                        {
                                            <CxIcon Icon="FeatherIcon.ChevronDown" />
                                        }
                                        else
                                        {
                                            <CxIcon Icon="FeatherIcon.ChevronRight" />
                                        }
                                        &nbsp;
                                        <CxIcon Icon="FeatherIcon.Folder" />
                                        &nbsp;
                                        @space.Name
                                        <span class="ms-auto badge rounded-pill @(apps.Length > 0 ? "bg-primary" : "bg-secondary")">
                                            @apps.Length
                                        </span>
                                    </div>
                                </div>
                            </div>
                            @if (expanded)
                            {
                                foreach (var app in apps)
                                {
                                    <div class="list-group-item list-group-item-action @(app == selectedApp ? "fw-bold bg-body" : null)" style="cursor: pointer;" @onclick="() => selectedApp = app">
                                        <div class="row">
                                            <div class="col d-flex align-items-center ps-5 small">
                                                <CxIcon Icon="LucideIcon.FilePieChart" />
                                                &nbsp;
                                                <HighlightableText Text="@app.Name" PartToHighlight="@appSearchTerm" />
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectAppAsync"
                  Enabled="selectedApp is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    private readonly Dictionary<QlikSpace, bool> spaceExpandState = [];

    private HxOffcanvas? offcanvas;
    private IEnumerable<QlikSpace>? spaces;
    private QlikApp? selectedApp;    
    private string appSearchTerm = "";

    [Parameter] public EventCallback<QlikApp> OnAppSelected { get; set; }

    public async Task ShowAsync(QlikCloudClient client)
    {
        await offcanvas.LetAsync(x => x.ShowAsync());
        spaces = await client.GetAppsAsync();
    }

    private async Task SelectAppAsync()
    {
        ArgumentNullException.ThrowIfNull(selectedApp);
        await OnAppSelected.InvokeAsync(selectedApp);
        await offcanvas.LetAsync(x => x.HideAsync());
    }

    private void OnClosed()
    {
        spaceExpandState.Clear();
        (selectedApp, spaces) = (null, null);
    }
    
}
