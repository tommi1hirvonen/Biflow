
@inject IHxMessengerService Messenger


@if (StepType == StepType.Sql)
{
    <div class="row">
        <div class="col">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link" OnClick="GetDatabaseObjectsAsync">
                Attempt to infer from stored procedure
            </HxButton>
            @{
                var content = $"Read {ListName} objects from the database based on stored procedure definition. Mapping can be unreliable especially when temporary tables are used. Manually remove extra {ListName}s after mapping.";
            }
            <HxPopover Trigger="PopoverTrigger.Focus" Content="@content">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link">
                    <CxIcon Icon="FeatherIcon.Info" />
                </HxButton>
            </HxPopover>
        </div>
    </div>
}
<div class="row mt-3">
    <div class="col-auto">
        <div class="form-check form-check-inline">
            <input type="checkbox" class="form-check-input" id="only_schedule"
                    @bind-value="ShowServer"
                    checked=@ShowServer>
            <label class="form-check-label" for="only_schedule">Show server name</label>
        </div>
        <div class="form-check form-check-inline ms-3">
            <input type="checkbox" class="form-check-input" id="include_deleted"
                    @bind-value="ShowDatabase"
                    checked=@ShowDatabase>
            <label class="form-check-label" for="include_deleted">Show database name</label>
        </div>
    </div>
</div>
<table class="table table-sm table-hover small">
    <thead>
        <tr>
            @if (ShowServer || NewObject is not null)
            {
                <th>Server</th>
            }
            @if (ShowDatabase || NewObject is not null)
            {
                <th>Database</th>
            }
            <th>Schema</th>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var obj in SourceTargetObjects
        .OrderBy(x => x.ServerName)
        .ThenBy(x => x.DatabaseName)
        .ThenBy(x => x.SchemaName)
        .ThenBy(x => x.ObjectName))
        {
            var mappingResult = GetMappingResult(obj);
            var className = mappingResult.IsCandidateForRemoval ? "text-danger" : mappingResult.IsUnreliableMapping ? "text-warning" : mappingResult.IsNewAddition ? "text-primary" : null;
            var title = mappingResult.IsCandidateForRemoval ? "Object not found in latest mapping result" : mappingResult.IsUnreliableMapping ? "Unreliable mapping" : mappingResult.IsNewAddition ? "New object" : null;
            <tr class="@className" title="@title">
                @if (ShowServer || NewObject is not null)
                {
                    <td class="align-middle">
                        @obj.ServerName
                    </td>
                }
                @if (ShowDatabase || NewObject is not null)
                {
                    <td class="align-middle">
                        @obj.DatabaseName
                    </td>
                }
                <td class="align-middle">
                    @obj.SchemaName
                </td>
                <td class="align-middle">
                    @obj.ObjectName
                </td>
                <td>
                    <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row" OnClick="() => SourceTargetObjects.Remove(obj)">
                            <CxIcon Icon="FeatherIcon.Delete" />
                        </HxButton>
                    </HxButtonGroup>
                </td>
            </tr>
        }
        @if (NewObject is not null)
        {
            <tr>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="NewObject.ServerName"
                            @bind:event="oninput"
                            @onfocusin="() => SuggestType = DatabaseObjectType.Server" />
                </td>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="NewObject.DatabaseName"
                            @bind:event="oninput"
                            @onfocusin="() => SuggestType = DatabaseObjectType.Database" />
                </td>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="NewObject.SchemaName"
                            @bind:event="oninput"
                            @onfocusin="() => SuggestType = DatabaseObjectType.Schema" />
                </td>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="NewObject.ObjectName"
                            @bind:event="oninput"
                            @onfocusin="() => SuggestType = DatabaseObjectType.Object" />
                </td>
                <td>
                    <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row text-success" OnClick="SubmitNewObject">
                            <CxIcon Icon="FeatherIcon.Check" />
                        </HxButton>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row text-danger" OnClick="() => NewObject = null">
                            <CxIcon Icon="FeatherIcon.X" />
                        </HxButton>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row"
                              OnClick="async () => await DbObjectExplorerOffcanvas.LetAsync(x => x.ShowAsync(ConnectionId))">
                            <CxIcon Icon="FeatherIcon.MoreHorizontal" />
                        </HxButton>
                    </HxButtonGroup>
                </td>
            </tr>
            @if (SuggestType == DatabaseObjectType.Server)
            {
                var servers = AllObjects?
                    .Select(o => o.ServerName)
                    .Distinct()
                    .OrderBy(o => o)
                    .Take(10) ?? Enumerable.Empty<string>();
                @foreach (var server in servers)
                {
                    <tr style="cursor: pointer;" @onclick="() => NewObject.ServerName = server">
                        <td colspan="5"><HighlightableText Text="@server" PartToHighlight="@NewObject.ServerName" /></td>
                    </tr>
                }
            }
            else if (SuggestType == DatabaseObjectType.Database)
            {
                var databases = AllObjects?
                    .Where(o => string.IsNullOrEmpty(NewObject.ServerName) || o.ServerName == NewObject.ServerName)
                    .Where(o => o.DatabaseName.ContainsIgnoreCase(NewObject.DatabaseName))
                    .Select(o => (o.ServerName, o.DatabaseName))
                    .Distinct()
                    .OrderBy(o => o.ServerName).ThenBy(o => o.DatabaseName)
                    .Take(10) ?? Enumerable.Empty<(string, string)>();
                @foreach (var database in databases)
                {
                    <tr style="cursor: pointer;" @onclick="() => { NewObject.ServerName = database.ServerName; NewObject.DatabaseName = database.DatabaseName; }">
                        <td colspan="1">@database.ServerName</td>
                        <td colspan="4"><HighlightableText Text="@database.DatabaseName" PartToHighlight="@NewObject.DatabaseName" /></td>
                    </tr>
                }
            }
            else if (SuggestType == DatabaseObjectType.Schema)
            {
                var schemas = AllObjects?
                    .Where(o => string.IsNullOrEmpty(NewObject.ServerName) || o.ServerName == NewObject.ServerName)
                    .Where(o => string.IsNullOrEmpty(NewObject.DatabaseName) || o.DatabaseName == NewObject.DatabaseName)
                    .Where(o => o.SchemaName.ContainsIgnoreCase(NewObject.SchemaName))
                    .Select(o => (o.ServerName, o.DatabaseName, o.SchemaName))
                    .Distinct()
                    .OrderBy(o => o.ServerName).ThenBy(o => o.DatabaseName).ThenBy(o => o.SchemaName)
                    .Take(10) ?? Enumerable.Empty<(string, string, string)>();
                @foreach (var schema in schemas)
                {
                    <tr style="cursor: pointer;" @onclick="() => { NewObject.ServerName = schema.ServerName; NewObject.DatabaseName = schema.DatabaseName; NewObject.SchemaName = schema.SchemaName; }">
                        <td colspan="1">@schema.ServerName</td>
                        <td colspan="1">@schema.DatabaseName</td>
                        <td colspan="3"><HighlightableText Text="@schema.SchemaName" PartToHighlight="@NewObject.SchemaName" /></td>
                    </tr>
                }
            }
            else if (SuggestType == DatabaseObjectType.Object)
            {
                var objects = AllObjects?
                    .Where(o => string.IsNullOrEmpty(NewObject.ServerName) || o.ServerName == NewObject.ServerName)
                    .Where(o => string.IsNullOrEmpty(NewObject.DatabaseName) || o.DatabaseName == NewObject.DatabaseName)
                    .Where(o => string.IsNullOrEmpty(NewObject.SchemaName) || o.SchemaName == NewObject.SchemaName)
                    .Where(o => o.ObjectName.ContainsIgnoreCase(NewObject.ObjectName))
                    .OrderBy(o => o.ServerName).ThenBy(o => o.DatabaseName).ThenBy(o => o.SchemaName).ThenBy(o => o.ObjectName)
                    .Take(10) ?? Enumerable.Empty<SourceTargetObject>();
                @foreach (var obj in objects)
                {
                    <tr style="cursor: pointer;" @onclick="() => NewObject = obj">
                        <td>@obj.ServerName</td>
                        <td>@obj.DatabaseName</td>
                        <td>@obj.SchemaName</td>
                        <td colspan="2"><HighlightableText Text="@obj.ObjectName" PartToHighlight="@NewObject.ObjectName" /></td>
                    </tr>
                }
            }
        }
    </tbody>
</table>
<HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" OnClick="AddNewObjectAsync">
    <CxIcon Icon="FeatherIcon.Plus" />
</HxButton>

<DbObjectExplorerOffcanvas @ref="DbObjectExplorerOffcanvas" Connections="Connections" OnDbObjectSelected="OnDbObjectSelected" />

@code {
    [Parameter] public string ListName { get; set; } = string.Empty;

    [Parameter] public StepType StepType { get; set; }

    [Parameter] public IList<SourceTargetObject> SourceTargetObjects { get; set; } = null!;

    [Parameter] public IList<SourceTargetObject> ComparisonObjects { get; set; } = null!;

    [Parameter] public Guid? ConnectionId { get; set; }

    [Parameter] public IEnumerable<SqlConnectionInfo> Connections { get; set; } = null!;

    [Parameter] public string? SqlStatement { get; set; }

    [Parameter] public Func<Guid, string?, string, Task<IEnumerable<(string ServerName, string DatabaseName, string SchemaName, string ObjectName, bool IsUnreliable)>>> LoadDatabaseObjectDependencies { get; set; } = null!;

    [Parameter] public Func<Task<IEnumerable<SourceTargetObject>>> LoadAllDatabaseObjects { get; set; } = null!;

    [Parameter] public Func<SourceTargetObject, SourceTargetMappingResult> GetMappingResult { get; set; } = null!;

    private IEnumerable<SourceTargetObject>? AllObjects { get; set; }

    private bool ShowServer { get; set; } = false;

    private bool ShowDatabase { get; set; } = true;

    private SourceTargetObject? NewObject { get; set; }

    private DatabaseObjectType? SuggestType { get; set; }

    private DbObjectExplorerOffcanvas? DbObjectExplorerOffcanvas { get; set; }

    private enum DatabaseObjectType
    {
        Server, Database, Schema, Object
    }

    private async Task AddNewObjectAsync()
    {
        AllObjects ??= await LoadAllDatabaseObjects();
        NewObject = new();
    }

    private void SubmitNewObject()
    {
        if (NewObject is null) return;

        if (SourceTargetObjects.Any(o => o.Equals(NewObject)))
        {
            Messenger.AddWarning($"Duplicate {ListName} object");
            return;
        }

        var existing = AllObjects?.FirstOrDefault(o => o.Equals(NewObject))
            ?? ComparisonObjects.FirstOrDefault(o => o.Equals(NewObject));
        if (existing is not null)
        {
            GetMappingResult(existing).IsNewAddition = true;
            SourceTargetObjects.Add(existing);
        }
        else
        {
            GetMappingResult(NewObject).IsNewAddition = true;
            SourceTargetObjects.Add(NewObject);
        }
        NewObject = null;
    }

    private async Task GetDatabaseObjectsAsync()
    {
        try
        {
            var proc = SqlStatement?.ParseStoredProcedureFromSqlStatement();
            var schema = proc?.Schema;
            var name = proc?.ProcedureName;
            if (name is null) return;

            AllObjects ??= await LoadAllDatabaseObjects();

            Guid connectionId = ConnectionId ?? throw new ArgumentNullException(nameof(ConnectionId), "Connection id was null");
            var dependencies = await LoadDatabaseObjectDependencies(connectionId, schema, name);

            // Add new database objects for the step if they are not present.
            foreach (var dependency in dependencies)
            {
                // Check if the same object exists in the comparison list. Skip this object if it does.
                // This way we do not accidentally add objects that might be a target as sources,
                // thus creating a self reference.
                var comparison = ComparisonObjects.FirstOrDefault(o => o.Equals(dependency));
                if (comparison is not null)
                    continue;

                var dbObject = AllObjects?.FirstOrDefault(o => o.Equals(dependency)) ??
                    new SourceTargetObject
                        {
                            ServerName = dependency.ServerName,
                            DatabaseName = dependency.DatabaseName,
                            SchemaName = dependency.SchemaName,
                            ObjectName = dependency.ObjectName
                        };

                if (!SourceTargetObjects.Any(s => s.Equals(dbObject)))
                {
                    GetMappingResult(dbObject).IsNewAddition = true;
                    GetMappingResult(dbObject).IsUnreliableMapping = dependency.IsUnreliable;
                    SourceTargetObjects.Add(dbObject);
                }
            }

            foreach (var dbObject in SourceTargetObjects) GetMappingResult(dbObject).IsCandidateForRemoval = false;

            // Check if there are objects in the list that are not mentioned in the dependencies.
            // Flag them as candidates for removal.
            var candidatesForRemoval = SourceTargetObjects.Where(o => !dependencies.Any(d => o.Equals(d))).ToList();
            foreach (var candidate in candidatesForRemoval)
            {
                GetMappingResult(candidate).IsCandidateForRemoval = true;
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error getting object dependencies", ex.Message);
        }
    }

    private void OnDbObjectSelected((string Server, string Database, string Schema, string Object) tuple)
    {
        if (NewObject is null) return;
        NewObject.ServerName = tuple.Server;
        NewObject.DatabaseName = tuple.Database;
        NewObject.SchemaName = tuple.Schema;
        NewObject.ObjectName = tuple.Object;
        StateHasChanged();
    }
}
