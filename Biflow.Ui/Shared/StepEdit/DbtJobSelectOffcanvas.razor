@inject IHttpClientFactory HttpClientFactory

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Regular" Title="Select job">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="list-group">
                    <div class="list-group-item list-group-header fw-semibold">
                        Projects
                    </div>
                    @if (_projects is null)
                    {
                        <div class="list-group-item text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </div>
                    }
                    else if (!_projects.Any())
                    {
                        <div class="list-group-item small">
                            No projects
                        </div>
                    }
                    else
                    {
                        foreach (var project in _projects)
                        {
                            var projectExpanded = _projectExpandedStates.GetValueOrDefault(project);
                            <div class="list-group-item list-group-item-action cursor-pointer" @onclick="() => ToggleProjectAsync(project)">
                                <div class="row">
                                    <div class="col d-flex align-items-center small">
                                        @if (projectExpanded)
                                        {
                                            <SvgIcon Icon="LucideIcon.ChevronDown" />
                                        }
                                        else
                                        {
                                            <SvgIcon Icon="LucideIcon.ChevronRight" />
                                        }
                                        &nbsp;
                                        @project.Name
                                    </div>
                                </div>
                            </div>
                            @if (projectExpanded)
                            {
                                var environments = _projectEnvironments.GetValueOrDefault(project);
                                <div class="list-group-item">
                                    <div class="row">
                                        <div class="col fw-semibold small" style="padding-left: 2.5rem;">
                                            Environments
                                        </div>
                                    </div>
                                </div>
                                @if (environments is null)
                                {
                                    <div class="list-group-item">
                                        <div class="row">
                                            <div class="col small" style="padding-left: 2.5rem;">
                                                <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (!environments.Any())
                                {
                                    <div class="list-group-item">
                                        <div class="row">
                                            <div class="col small" style="padding-left: 2.5rem;">
                                                No environments
                                            </div>
                                        </div>
                                    </div>
                                }
                                foreach (var environment in environments ?? [])
                                {
                                    var environmentExpanded = _environmentExpandedStates.GetValueOrDefault(environment);
                                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick="() => ToggleEnvironmentAsync(environment)">
                                        <div class="row">
                                            <div class="col d-flex align-items-center small" style="padding-left: 2.5rem;">
                                                @if (environmentExpanded)
                                                {
                                                    <SvgIcon Icon="LucideIcon.ChevronDown" />
                                                }
                                                else
                                                {
                                                    <SvgIcon Icon="LucideIcon.ChevronRight" />
                                                }
                                                &nbsp;
                                                @environment.Name
                                            </div>
                                        </div>
                                    </div>
                                    @if (!environmentExpanded)
                                    {
                                        continue;
                                    }

                                    var jobs = _environmentJobs.GetValueOrDefault(environment);
                                    <div class="list-group-item">
                                        <div class="row">
                                            <div class="col fw-semibold small" style="padding-left: 4rem;">
                                                Jobs
                                            </div>
                                        </div>
                                    </div>
                                    @if (jobs is null)
                                    {
                                        <div class="list-group-item">
                                            <div class="row">
                                                <div class="col small" style="padding-left: 4rem;">
                                                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else if (!jobs.Any())
                                    {
                                        <div class="list-group-item">
                                            <div class="row">
                                                <div class="col small" style="padding-left: 4rem;">
                                                    No jobs
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    foreach (var job in jobs ?? [])
                                    {
                                        var item = (project, environment, job);
                                        var selected = item == _selectedJob;
                                        <div class="list-group-item list-group-item-action cursor-pointer @(selected ? "fw-bold bg-body" : null)" @onclick="() => _selectedJob = item">
                                            <div class="row">
                                                <div class="col small" style="padding-left: 4rem;">
                                                    @job.Name
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary"
        CssClass="me-3"
        @onclick="SelectJobAsync"
        Enabled="_selectedJob is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public EventCallback<(DbtProject, DbtEnvironment, DbtJob)> OnJobSelected { get; set; }

    private readonly Dictionary<DbtProject, bool> _projectExpandedStates = [];
    private readonly Dictionary<DbtProject, IEnumerable<DbtEnvironment>> _projectEnvironments = [];
    private readonly Dictionary<DbtEnvironment, bool> _environmentExpandedStates = [];
    private readonly Dictionary<DbtEnvironment, IEnumerable<DbtJob>> _environmentJobs = [];
    
    private HxOffcanvas? _offcanvas;
    private (DbtProject, DbtEnvironment, DbtJob)? _selectedJob;
    private DbtClient? _client;
    private IEnumerable<DbtProject>? _projects;

    public async Task ShowAsync(DbtAccount account)
    {
        _selectedJob = null;
        _projects = null;
        _projectEnvironments.Clear();
        _projectExpandedStates.Clear();
        _environmentExpandedStates.Clear();
        _environmentJobs.Clear();
        await _offcanvas.LetAsync(x => x.ShowAsync());
        _client = account.CreateClient(HttpClientFactory);
        _projects = await _client.GetProjectsAsync();
    }

    private async Task ToggleProjectAsync(DbtProject project)
    {
        var expanded = !_projectExpandedStates.GetValueOrDefault(project);
        _projectExpandedStates[project] = expanded;
        if (expanded && !_projectEnvironments.ContainsKey(project))
        {
            ArgumentNullException.ThrowIfNull(_client);
            _projectEnvironments[project] = await _client.GetEnvironmentsAsync(project.Id);
        }
    }

    private async Task ToggleEnvironmentAsync(DbtEnvironment environment)
    {
        var expanded = !_environmentExpandedStates.GetValueOrDefault(environment);
        _environmentExpandedStates[environment] = expanded;
        if (expanded && !_environmentJobs.ContainsKey(environment))
        {
            ArgumentNullException.ThrowIfNull(_client);
            _environmentJobs[environment] = await _client.GetJobsAsync(environment.Id);
        }
    }

    private async Task SelectJobAsync()
    {
        if (_selectedJob is not { } job)
        {
            return;
        }
        await OnJobSelected.InvokeAsync(job);
        await _offcanvas.LetAsync(x => x.HideAsync());
    }
}
