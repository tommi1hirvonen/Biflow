@inject IHxMessengerService Messenger
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ITokenService TokenService

<HxOffcanvas @ref="offcanvas" Size="OffcanvasSize.Regular" Title="Select dataset">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="input-group">
                    <div class="input-group-text">
                        <CxIcon Icon="FeatherIcon.Search" />
                    </div>
                    <input type="search" class="form-control form-control-sm" placeholder="Search datasets" @bind-value="filterText" @bind-value:event="oninput" />
                </div>
            </div>
        </div>
        <div class="row mt-3" style="height: calc(100vh - 210px); overflow-y: scroll;">
            <div class="col">
                <div class="list-group">
                    @if (datasets is null)
                    {
                        <div class="list-group-item text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </div>
                    }
                    else if (datasets.Count() == 0)
                    {
                        <div class="list-group-item small">
                            No workspaces
                        </div>
                    }
                    else
                    {
                        var filteredGroups = datasets
                            .Where(g => string.IsNullOrEmpty(filterText) || g.Datasets.Any(d => d.DatasetName.ContainsIgnoreCase(filterText)))
                            .OrderBy(d => d.Name)
                            .ToArray();
                        if (filteredGroups.Length == 0)
                        {
                            <div class="list-group-item small">
                                No matching results
                            </div>
                        }
                        foreach (var group in filteredGroups)
                        {
                            var datasets = group.Datasets
                                .Where(d => string.IsNullOrEmpty(filterText) || d.DatasetName.ContainsIgnoreCase(filterText))
                                .OrderBy(d => d.DatasetName)
                                .ToArray();
                            var expanded = !string.IsNullOrEmpty(filterText) || expandedStates.GetValueOrDefault(group);
                            <div class="list-group-item list-group-item-action" style="cursor: pointer;" @onclick="() => expandedStates[group] = !expanded">
                                <div class="row">
                                    <div class="col d-flex align-items-center small">
                                        @if (expanded)
                                        {
                                            <CxIcon Icon="FeatherIcon.ChevronDown" />
                                        }
                                        else
                                        {
                                            <CxIcon Icon="FeatherIcon.ChevronRight" />
                                        }
                                        &nbsp;
                                        <CxIcon Icon="FeatherIcon.Folder" />
                                        &nbsp;
                                        @group.Name
                                        <span class="ms-auto badge rounded-pill @(datasets.Length > 0 ? "bg-primary" : "bg-secondary")">
                                            @datasets.Length
                                        </span>
                                    </div>
                                </div>
                            </div>
                            @if (expanded)
                            {
                                foreach (var dataset in datasets)
                                {
                                    <div class="list-group-item list-group-item-action @(dataset == selectedDataset ? "fw-bold bg-body" : null)" style="cursor: pointer;" @onclick="() => selectedDataset = dataset">
                                        <div class="row">
                                            <div class="col d-flex align-items-center ps-5 small">
                                                <CxIcon Icon="LucideIcon.FileBarChart2" />
                                                &nbsp;
                                                <HighlightableText Text="@dataset.DatasetName" PartToHighlight="@filterText" />
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectDatasetAsync"
                  Enabled="selectedDataset is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public Guid? AppRegistrationId { get; set; }

    [Parameter]
    public EventCallback<Dataset> OnDatasetSelected { get; set; }

    private readonly Dictionary<DatasetGroup, bool> expandedStates = [];

    private HxOffcanvas? offcanvas;
    private IEnumerable<DatasetGroup>? datasets;
    private Dataset? selectedDataset;
    private string filterText = "";

    private async Task SelectDatasetAsync()
    {
        if (selectedDataset is null)
        {
            return;
        }
        await OnDatasetSelected.InvokeAsync(selectedDataset);
        await offcanvas.LetAsync(x => x.HideAsync());
    }

    public async Task ShowAsync()
    {
        datasets = null;
        selectedDataset = null;
        expandedStates.Clear();
        filterText = "";

        await offcanvas.LetAsync(x => x.ShowAsync());
        if (AppRegistrationId is null || AppRegistrationId == Guid.Empty) return;
        try
        {
            Guid id = AppRegistrationId ?? throw new ArgumentNullException(nameof(id), "App registration id cannot be null");
            using var context = DbContextFactory.CreateDbContext();
            var appRegistration = await context.AppRegistrations
                .AsNoTracking()
                .FirstAsync(r => r.AppRegistrationId == id);
            datasets = await appRegistration.GetAllDatasetsAsync(TokenService);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error reading datasets", ex.Message);
        }
    }

}
