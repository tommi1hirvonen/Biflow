@inject IHxMessengerService Messenger
@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject ITokenService TokenService

<HxOffcanvas @ref="Offcanvas" Size="OffcanvasSize.Regular" OnClosed="OnClosed" Title="Select dataset">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                <CxIcon Icon="FeatherIcon.Folder" />
                                Workspaces
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Datasets is null)
                        {
                            <tr><td class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td></tr>
                        }
                        else if (Datasets.Count == 0)
                        {
                            <tr><td>No workspaces</td></tr>
                        }
                        else
                        {
                            foreach (var group in Datasets.Keys.OrderBy(folder => folder))
                            {
                                <tr style="cursor: pointer;" @onclick="() => OnGroupChanged(group)" class="@(group == SelectedGroup ? "bg-body-tertiary fw-bold" : null)">
                                    <td>@group.GroupName</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                <CxIcon Icon="FeatherIcon.File" />
                                Datasets
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Datasets is not null && SelectedGroup is not null)
                        {
                            var datasets = Datasets[SelectedGroup.Value];
                            if (datasets.Count == 0)
                            {
                                <tr><td>No datasets</td></tr>
                            }
                            else
                            {
                                foreach (var dataset in datasets.OrderBy(p => p))
                                {
                                    <tr style="cursor: pointer;" @onclick="() => SelectedDataset = dataset" class="@(dataset == SelectedDataset ? "bg-body-tertiary fw-bold" : null)">
                                        <td>@dataset.DatasetName</td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectDatasetAsync"
                  Enabled="SelectedDataset is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {

    private HxOffcanvas? Offcanvas { get; set; }

    [Parameter]
    public Guid? AppRegistrationId { get; set; }

    [Parameter]
    public EventCallback<DatasetSelectedResponse> OnDatasetSelected { get; set; }

    private Dictionary<(string GroupId, string GroupName), List<(string DatasetId, string DatasetName)>>? Datasets { get; set; }

    private (string GroupId, string GroupName)? SelectedGroup { get; set; }
    private (string DatasetId, string DatasetName)? SelectedDataset { get; set; }

    private void OnGroupChanged((string Id, string Name) group)
    {
        if (group != SelectedGroup)
        {
            SelectedDataset = null;
        }
        SelectedGroup = group;
    }

    private async Task SelectDatasetAsync()
    {
        var groupId = SelectedGroup?.GroupId;
        var datasetId = SelectedDataset?.DatasetId;
        if (groupId is not null && datasetId is not null)
        {
            await OnDatasetSelected.InvokeAsync(new(groupId, datasetId));
            await Offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    private void OnClosed()
    {
        Datasets = null;
        SelectedGroup = null;
        SelectedDataset = null;
    }

    public async Task ShowAsync()
    {
        await Offcanvas.LetAsync(x => x.ShowAsync());
        if (AppRegistrationId is null || AppRegistrationId == Guid.Empty) return;
        try
        {
            Guid id = AppRegistrationId ?? throw new ArgumentNullException(nameof(id), "App registration id cannot be null");
            using var context = DbContextFactory.CreateDbContext();
            var appRegistration = await context.AppRegistrations
                .AsNoTracking()
                .FirstAsync(r => r.AppRegistrationId == id);
            Datasets = await appRegistration.GetAllDatasetsAsync(TokenService);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error reading datasets", ex.Message);
        }
    }

}
