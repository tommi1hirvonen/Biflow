@inject ToasterService Toaster
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ITokenService TokenService

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Regular" Title="Select dataset">
    <BodyTemplate>
        @if (AllowAppRegistrationChange)
        {
            <div class="row mb-3 align-items-end">
                <div class="col">
                    <label class="form-label">App registration</label>
                    <div class="input-group input-group-sm">
                        <div class="input-group-text">
                            <SvgIcon Icon="LucideIcon.Globe" />
                        </div>
                        <select class="form-select form-select-sm" @bind="_appRegistrationId">
                            @foreach (var appRegistration in AppRegistrations ?? [])
                            {
                                <option value="@appRegistration.AzureCredentialId">@appRegistration.AzureCredentialName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-auto">
                    <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="LoadAsync">
                        <SvgIcon Icon="LucideIcon.RefreshCw" />
                        Refresh
                    </HxButton>
                </div>
            </div>
        }
        <div class="row">
            <div class="col">
                <div class="input-group">
                    <div class="input-group-text">
                        <SvgIcon Icon="LucideIcon.Search" />
                    </div>
                    <input type="search" class="form-control form-control-sm" placeholder="Search datasets" @bind-value="_filterText" @bind-value:event="oninput" />
                </div>
            </div>
        </div>
        @{
            var style = AllowAppRegistrationChange
                ? "height: calc(100vh - 290px); overflow-y: scroll;"
                : "height: calc(100vh - 210px); overflow-y: scroll;";
        }
        <div class="row mt-3" style="@style">
            <div class="col">
                <div class="list-group">
                    @if (_datasets is null)
                    {
                        <div class="list-group-item text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </div>
                    }
                    else if (!_datasets.Any())
                    {
                        <div class="list-group-item small">
                            No workspaces
                        </div>
                    }
                    else
                    {
                        var filteredGroups = _datasets
                            .Where(g => string.IsNullOrEmpty(_filterText) || g.Datasets.Any(d => d.DatasetName.ContainsIgnoreCase(_filterText)))
                            .OrderBy(d => d.Name)
                            .ToArray();
                        if (filteredGroups.Length == 0)
                        {
                            <div class="list-group-item small">
                                No matching results
                            </div>
                        }
                        foreach (var group in filteredGroups)
                        {
                            var datasets = group.Datasets
                                .Where(d => string.IsNullOrEmpty(_filterText) || d.DatasetName.ContainsIgnoreCase(_filterText))
                                .OrderBy(d => d.DatasetName)
                                .ToArray();
                            var expanded = !string.IsNullOrEmpty(_filterText) || _expandedStates.GetValueOrDefault(group);
                            <div class="list-group-item list-group-item-action" style="cursor: pointer;" @onclick="() => _expandedStates[group] = !expanded">
                                <div class="row">
                                    <div class="col d-flex align-items-center small">
                                        @if (expanded)
                                        {
                                            <SvgIcon Icon="LucideIcon.ChevronDown" />
                                        }
                                        else
                                        {
                                            <SvgIcon Icon="LucideIcon.ChevronRight" />
                                        }
                                        &nbsp;
                                        <SvgIcon Icon="LucideIcon.Folder" />
                                        &nbsp;
                                        @group.Name
                                        <span class="ms-auto badge rounded-pill @(datasets.Length > 0 ? "bg-primary" : "bg-secondary")">
                                            @datasets.Length
                                        </span>
                                    </div>
                                </div>
                            </div>
                            @if (expanded)
                            {
                                foreach (var dataset in datasets)
                                {
                                    <div class="list-group-item list-group-item-action @(dataset == _selectedDataset ? "fw-bold bg-body" : null)" style="cursor: pointer;" @onclick="() => _selectedDataset = dataset">
                                        <div class="row">
                                            <div class="col d-flex align-items-center ps-5 small">
                                                <SvgIcon Icon="LucideIcon.FileBarChart2" />
                                                &nbsp;
                                                <HighlightableText Text="@dataset.DatasetName" PartToHighlight="@_filterText" />
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectDatasetAsync"
                  Enabled="_selectedDataset is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public IEnumerable<AzureCredential>? AppRegistrations { get; set; }

    [Parameter]
    public EventCallback<Dataset> OnDatasetSelected { get; set; }

    [Parameter]
    public bool AllowAppRegistrationChange { get; set; }

    private readonly Dictionary<DatasetGroup, bool> _expandedStates = [];

    private Guid _appRegistrationId;
    private HxOffcanvas? _offcanvas;
    private IEnumerable<DatasetGroup>? _datasets;
    private Dataset? _selectedDataset;
    private string _filterText = "";

    private async Task SelectDatasetAsync()
    {
        if (_selectedDataset is null)
        {
            return;
        }
        await OnDatasetSelected.InvokeAsync(_selectedDataset);
        await _offcanvas.LetAsync(x => x.HideAsync());
    }

    public async Task ShowAsync(Guid? appRegistrationId = null)
    {
        _filterText = "";
        if (appRegistrationId is { } id)
        {
            _appRegistrationId = id;
        }
        else
        {
            _appRegistrationId = AppRegistrations?.FirstOrDefault()?.AzureCredentialId ?? Guid.Empty;
        }

        if (_appRegistrationId == Guid.Empty)
        {
            Toaster.AddWarning("No app registrations found");
            return;
        }

        await _offcanvas.LetAsync(x => x.ShowAsync());
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _datasets = null;
        _selectedDataset = null;
        _expandedStates.Clear();
        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var appRegistration = await context.AzureCredentials
                .AsNoTracking()
                .FirstAsync(r => r.AzureCredentialId == _appRegistrationId);
            var client = appRegistration.CreateDatasetClient(TokenService);
            _datasets = await client.GetAllDatasetsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading datasets", ex.Message);
        }
    }

}
