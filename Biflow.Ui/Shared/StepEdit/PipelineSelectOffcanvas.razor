@inject ToasterService Toaster
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ITokenService TokenService

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Regular" Title="Select pipeline">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="input-group">
                    <div class="input-group-text">
                        <SvgIcon Icon="FeatherIcon.Search" />
                    </div>
                    <input type="search" class="form-control form-control-sm" placeholder="Search pipelines" @bind-value="_filterText" @bind-value:event="oninput" />
                </div>
            </div>
        </div>
        <div class="row mt-3" style="height: calc(100vh - 210px); overflow-y: scroll;">
            <div class="col">
                <div class="list-group">
                    @if (_root is null)
                    {
                        <div class="list-group-item text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </div>
                    }
                    else if (!_root.Pipelines.Any() && !_root.Folders.Any())
                    {
                        <div class="list-group-item small">
                            No pipelines
                        </div>
                    }
                    else
                    {
                        <PipelineFolderListGroupItem
                            Folder="_root"
                            ExpandStatuses="_folderExpandedStates"
                            SelectedPipeline="_selectedPipeline"
                            OnPipelineSelected="TogglePipeline"
                            FilterText="@_filterText" />
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectPipelineAsync"
                  Enabled="_selectedPipeline is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public EventCallback<string> OnPipelineSelected { get; set; }

    private readonly Dictionary<PipelineFolder, bool> _folderExpandedStates = [];

    private HxOffcanvas? _offcanvas;
    private PipelineFolder? _root;
    private string _filterText = string.Empty;
    private PipelineInfo? _selectedPipeline;

    private async Task SelectPipelineAsync()
    {
        await OnPipelineSelected.InvokeAsync(_selectedPipeline?.Name);
        await _offcanvas.LetAsync(x => x.HideAsync());
    }

    public async Task ShowAsync(Guid pipelineClientId)
    {
        _folderExpandedStates.Clear();
        _root = null;
        _selectedPipeline = null;
        _filterText = string.Empty;

        await _offcanvas.LetAsync(x => x.ShowAsync());

        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var client = await context.PipelineClients
                .AsNoTrackingWithIdentityResolution()
                .Include(c => c.AppRegistration)
                .FirstAsync(c => c.PipelineClientId == pipelineClientId);
            var pipelineClient = client.CreatePipelineClient(TokenService);
            _root = await pipelineClient.GetPipelinesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading pipelines", ex.Message);
        }
    }

    private void TogglePipeline(PipelineInfo pipeline)
    {
        if (_selectedPipeline == pipeline)
        {
            _selectedPipeline = null;
            return;
        }
        _selectedPipeline = pipeline;
    }
}
