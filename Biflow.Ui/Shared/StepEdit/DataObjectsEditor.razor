@inject ToasterService Toaster
@inject IDbContextFactory<AppDbContext> DbContextFactory

@if (Step is SqlStep sql && Connection is MsSqlConnection mssql)
{
    <div class="row">
        <div class="col">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link" OnClick="() => GetDatabaseObjectsAsync(mssql, sql.SqlStatement)">
                Attempt to infer from stored procedure
            </HxButton>
            <HxPopover Trigger="PopoverTrigger.Hover" Content="@_popoverContent">
                <SvgIcon Icon="FeatherIcon.Info" />
            </HxPopover>
        </div>
    </div>
}

<table class="table mt-3">
    <thead>
        <tr>
            <th>Uri</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (_references is null)
        {
            <tr>
                <td colspan="3">Loading...</td>
            </tr>
        }
        else if (_references.All(r => r.ReferenceType != ReferenceType) && _newObject is null)
        {
            <tr>
                <td colspan="3">@_noDataObjects</td>
            </tr>
        }
        else
        {
            foreach (var reference in _references.Where(d => d.ReferenceType == ReferenceType).OrderBy(x => x.DataObject.ObjectUri))
            {
                var mappingResult = GetMappingResult(reference.DataObject);
                var title = mappingResult switch
                {
                    { IsCandidateForRemoval: true } => "Object not found in latest mapping result",
                    { IsUnreliableMapping: true } => "Unreliable mapping",
                    { IsNewAddition: true } => "New object",
                    _ => null
                };
                <tr class="table-hover" title="@title">
                    <td class="align-middle">
                        <div class="row font-monospace small">
                            <span>@reference.DataObject.ObjectUri</span>
                        </div>
                        <div class="row mt-2">
                            <div class="col @(reference == _editReference ? null : "d-flex") align-items-center">
                                @if (reference == _editReference)
                                {
                                    <HxInputTags Delimiters="new()"
                                    InputSize="InputSize.Small"
                                    Placeholder="Add data attributes"
                                    SuggestDelay="0"
                                    SuggestMinimumLength="0"
                                    DataProvider="GetDataAttributeSuggestionsAsync"
                                    TagBadgeSettings="new BadgeSettings { Color = ThemeColor.Secondary }"
                                    @bind-Value="_editReferenceAttributes" />
                                }
                                else
                                {
                                    <span class="small text-muted mx-1">Data attributes: </span>
                                    @if (reference.DataAttributes.Count == 0)
                                    {
                                        <span class="small text-muted mx-1">–</span>
                                    }
                                    @foreach (var value in reference.DataAttributes)
                                    {
                                        var tag = new DataAttribute(value);
                                        <TagBadge IsRemovable Tag="tag" CssClass="mx-1" OnRemoveClick="() => reference.DataAttributes.Remove(value)" />
                                    }
                                    <span class="data-attribute-edit bg-light-subtle border d-inline-flex align-items-center rounded small mx-1" title="Add data attributes"
                                    @onclick="() => { _editReference = reference; _editReferenceAttributes = reference.DataAttributes.ToList(); }">
                                        <SvgIcon Icon="FeatherIcon.Plus" />
                                    </span>
                                }
                            </div>
                        </div>
                    </td>
                    @if (reference != _editReference)
                    {
                        <td class="align-middle">
                            @if (mappingResult.IsCandidateForRemoval)
                            {
                                <span class="text-danger fw-bold fs-5 pb-1">–</span>
                            }
                            else if (mappingResult.IsUnreliableMapping)
                            {
                                <span class="text-warning fw-bold fs-5 pb-1">?</span>
                            }
                            else if (mappingResult.IsNewAddition)
                            {
                                <span class="text-success fw-bold fs-5 pb-1">+</span>
                            }
                        </td>
                    }
                    <td class="@(reference == _editReference ? "align-bottom" : "align-middle")" colspan="@(reference == _editReference ? "2" : "1")">
                        <HxButtonGroup Size="ButtonGroupSize.Small">
                            @if (reference == _editReference)
                            {
                                <HxButton Size="ButtonSize.Small"
                                Color="ThemeColor.None"
                                CssClass="btn-auto text-success"
                                OnClick="() => { reference.DataAttributes.Clear(); reference.DataAttributes.AddRange(_editReferenceAttributes); _editReferenceAttributes.Clear(); _editReference = null; }"
                                title="Done">
                                    <SvgIcon Icon="FeatherIcon.Check" />
                                </HxButton>
                                <HxButton Size="ButtonSize.Small"
                                Color="ThemeColor.None"
                                CssClass="btn-auto text-danger"
                                OnClick="() => { _editReference = null; _editReferenceAttributes.Clear(); }"
                                title="Discard">
                                    <SvgIcon Icon="FeatherIcon.X" />
                                </HxButton>
                            }
                            else
                            {
                                <HxButton Size="ButtonSize.Small"
                                Color="ThemeColor.None"
                                CssClass="btn-auto"
                                OnClick="() => _references.Remove(reference)">
                                    <SvgIcon Icon="FeatherIcon.Delete" />
                                </HxButton>
                            }
                        </HxButtonGroup>
                    </td>
                </tr>
            }
        }
        @if (_newObject is not null)
        {
            <tr>
                <td>
                    <input class="form-control form-control-sm font-monospace" type="text" autocomplete="off" placeholder="Uri"
                    @bind="_newObject.ObjectUri"
                    @bind:event="oninput" />
                </td>
                <td colspan="2">
                    <HxButtonGroup Size="ButtonGroupSize.Small">
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto text-success" OnClick="SubmitNewObject" title="Add">
                            <SvgIcon Icon="FeatherIcon.Check" />
                        </HxButton>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto text-danger" OnClick="() => _newObject = null" title="Discard">
                            <SvgIcon Icon="FeatherIcon.X" />
                        </HxButton>
                    </HxButtonGroup>
                </td>
            </tr>
            var objects = _allObjects?
                .Where(o => o.ObjectUri.ContainsIgnoreCase(_newObject.ObjectUri))
                .OrderBy(o => o.ObjectUri)
                .Take(10) ?? [];
            <tr>
                <td class="px-5" colspan="3">
                    <table class="table table-sm small table-hover mb-0">
                        <thead>
                            <tr>
                                <th>Suggestions</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var obj in objects)
                            {
                                <tr style="cursor: pointer;" @onclick="() => { _newObject = obj; SubmitNewObject(); }">
                                    <td class="align-middle font-monospace">
                                        <HighlightableText Text="@obj.ObjectUri" PartToHighlight="@_newObject.ObjectUri" />
                                    </td>
                                    <td>
                                        <HxButtonGroup Size="ButtonGroupSize.Small">
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" OnClick="() => { _newObject = obj; }" title="Edit before adding">
                                                <SvgIcon Icon="FeatherIcon.Edit2" />
                                            </HxButton>
                                        </HxButtonGroup>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            </tr>
        }
    </tbody>
</table>

<HxDropdownButtonGroup CssClass="mt-2">
    <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small">
        <SvgIcon Icon="FeatherIcon.Plus" />
        @_addButton
    </HxDropdownToggleButton>
    <HxDropdownMenu>
        @{
            Guid? appRegistrationId = Step is DatasetStep ds ? ds.AppRegistrationId : null;
            Guid? qlikClientId = Step is QlikStep qlik ? qlik.QlikCloudEnvironmentId : null;
            Guid? tabularConnectionId = Step is TabularStep tabular ? tabular.ConnectionId : null;
        }
        <HxDropdownItem OnClick="() => _appOffcanvas.LetAsync(x => x.ShowAsync(qlikClientId))">
            <SvgIcon Icon="LucideIcon.FilePieChart" />
            Add app
        </HxDropdownItem>
        <HxDropdownItem OnClick="() => _tabularOffcanvas.LetAsync(x => x.ShowAsync(tabularConnectionId))">
            <SvgIcon Icon="FeatherIcon.Box" />
            Add tabular
        </HxDropdownItem>
        <HxDropdownItem OnClick="() => _datasetOffcanvas.LetAsync(x => x.ShowAsync(appRegistrationId))">
            <SvgIcon Icon="LucideIcon.FileBarChart2" />
            Add dataset
        </HxDropdownItem>
        <HxDropdownItem OnClick="() => _blobOffcanvas.LetAsync(x => x.ShowAsync())">
            <SvgIcon Icon="FeatherIcon.File" />
            Add blob
        </HxDropdownItem>
        <HxDropdownItem OnClick="() => _dbObjectExplorerOffcanvas.LetAsync(x => x.ShowAsync(Connection?.ConnectionId))">
            <SvgIcon Icon="FeatherIcon.Table" />
            Add table
        </HxDropdownItem>
        <HxDropdownItem OnClick="AddNewObjectAsync">
            <SvgIcon Icon="FeatherIcon.Edit3" />
            Add manually
        </HxDropdownItem>
    </HxDropdownMenu>
</HxDropdownButtonGroup>

<DbObjectExplorerOffcanvas @ref="_dbObjectExplorerOffcanvas" Connections="SqlConnections" OnDbObjectSelected="OnDbObjectSelected" />

<DatasetSelectOffcanvas @ref="_datasetOffcanvas" AppRegistrations="AppRegistrations" AllowAppRegistrationChange OnDatasetSelected="OnDatasetSelected" />

<AppSelectOffcanvas @ref="_appOffcanvas" QlikClients="QlikClients" AllowClientChange OnAppSelected="OnAppSelected" />

<BlobSelectOffcanvas @ref="_blobOffcanvas" OnBlobSelected="OnBlobSelected" />

<AnalysisServicesObjectSelectOffcanvas @ref="_tabularOffcanvas" Connections="AsConnections" AllowAppRegistrationChange OnObjectSelected="OnTabularSelected" />

@code {
    [Parameter] public DataObjectReferenceType ReferenceType { get; set; }

    [Parameter] public Step? Step { get; set; }

    [Parameter] public ConnectionBase? Connection { get; set; }

    [Parameter] public IEnumerable<ConnectionBase>? SqlConnections { get; set; }

    [Parameter] public IEnumerable<AnalysisServicesConnection>? AsConnections { get; set; }

    [Parameter] public IEnumerable<AppRegistration>? AppRegistrations { get; set; }

    [Parameter] public IEnumerable<QlikCloudEnvironment>? QlikClients { get; set; }

    [Parameter] public Func<Task<IEnumerable<DataObject>>> LoadAllDataObjects { get; set; } = null!;

    private Func<DataObject, DataObjectMappingResult> GetMappingResult => ReferenceType switch
    {
        DataObjectReferenceType.Source => d => d.SourceMappingResult,
        _ => d => d.TargetMappingResult
    };

    private ICollection<StepDataObject>? _references;
    private string _listName = "";
    private string _noDataObjects = "";
    private string _addButton = "";
    private string _popoverContent = "";
    private IEnumerable<DataObject>? _allObjects;
    private DataObject? _newObject;
    private StepDataObject? _editReference;
    private List<string> _editReferenceAttributes = [];
    private DbObjectExplorerOffcanvas? _dbObjectExplorerOffcanvas;
    private DatasetSelectOffcanvas? _datasetOffcanvas;
    private AppSelectOffcanvas? _appOffcanvas;
    private BlobSelectOffcanvas? _blobOffcanvas;
    private AnalysisServicesObjectSelectOffcanvas? _tabularOffcanvas;

    protected override void OnParametersSet()
    {
        _references = Step?.DataObjects;
        _listName = ReferenceType switch
        {
            DataObjectReferenceType.Source => "source",
            _ => "target"
        };
        _noDataObjects = $"No {_listName}s";
        _popoverContent = $"Read {_listName} objects from the database based on stored procedure definition. Mapping can be unreliable especially when temporary tables are used. Manually remove extra {_listName}s after mapping.";
        _addButton = $"Add {_listName}";
    }

    private async Task AddNewObjectAsync()
    {
        _allObjects ??= await LoadAllDataObjects();
        _newObject = new();
    }

    private void SubmitNewObject()
    {
        ArgumentNullException.ThrowIfNull(_newObject);
        ArgumentNullException.ThrowIfNull(_references);

        if (_references.Any(o => o.ReferenceType == ReferenceType && o.DataObject.UriEquals(_newObject)))
        {
            Toaster.AddWarning($"Duplicate {_listName} object");
            return;
        }

        if (!_newObject.IsValid)
        {
            Toaster.AddWarning("Only ASCII characters allowed");
            return;
        }

        var existing = _allObjects?.FirstOrDefault(o => o.UriEquals(_newObject))
            ?? _references.Select(d => d.DataObject).FirstOrDefault(o => o.UriEquals(_newObject));
        if (existing is not null)
        {
            GetMappingResult(existing).IsNewAddition = true;
            AddReference(existing);
        }
        else
        {
            GetMappingResult(_newObject).IsNewAddition = true;
            AddReference(_newObject);
        }
        _newObject = null;
    }

    private async Task GetDatabaseObjectsAsync(MsSqlConnection connection, string sqlStatement)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(_references);

            var proc = MsSqlExtensions.ParseStoredProcedureFromSqlStatement(sqlStatement);
            var schema = proc?.Schema;
            var name = proc?.ProcedureName;
            if (name is null)
            {
                return;
            }

            _allObjects ??= await LoadAllDataObjects();

            var dependencies = ReferenceType switch
            {
                DataObjectReferenceType.Source => await connection.GetSourceObjectsAsync(schema, name),
                _ => await connection.GetTargetObjectsAsync(schema, name)
            };

            // Add new data objects for the step if they are not present.
            foreach (var dependency in dependencies)
            {
                // Check if the same object exists in the list already. Skip this object if it does.
                // This way we do not accidentally add objects that might be a target as sources,
                // thus creating a self reference.
                if (_references.Any(d => d.DataObject.UriEquals(dependency)))
                {
                    continue;
                }

                var dbObject = _allObjects?.FirstOrDefault(o => o.UriEquals(dependency)) ??
                    new DataObject { ObjectUri = dependency.ObjectUri };

                if (_references.Any(d => d.DataObject.UriEquals(dbObject)))
                {
                    continue;
                }
                
                GetMappingResult(dbObject).IsNewAddition = true;
                GetMappingResult(dbObject).IsUnreliableMapping = dependency.IsUnreliable;
                AddReference(dbObject);
            }

            foreach (var dbObject in _references)
            {
                GetMappingResult(dbObject.DataObject).IsCandidateForRemoval = false;
            }

            // Check if there are objects in the list that are not mentioned in the dependencies.
            // Flag them as candidates for removal.
            var candidatesForRemoval = _references.Where(o => !dependencies.Any(d => o.DataObject.UriEquals(d))).ToList();
            foreach (var candidate in candidatesForRemoval)
            {
                GetMappingResult(candidate.DataObject).IsCandidateForRemoval = true;
            }
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error getting object dependencies", ex.Message);
        }
    }

    private void AddReference(DataObject dataObject)
    {
        ArgumentNullException.ThrowIfNull(Step);
        var reference = new StepDataObject
        {
            Step = Step,
            DataObject = dataObject,
            ReferenceType = ReferenceType
        };
        _references?.Add(reference);
    }

    private void OnDbObjectSelected((string Server, string Database, string Schema, string Object) tuple, bool commit)
    {
        _newObject ??= new();
        _newObject.ObjectUri = DataObject.CreateTableUri(tuple.Server, tuple.Database, tuple.Schema, tuple.Object);
        if (commit)
        {
            SubmitNewObject();
        }
        StateHasChanged();
    }

    private void OnDatasetSelected(Dataset dataset)
    {
        _newObject ??= new();
        _newObject.ObjectUri = DataObject.CreateDatasetUri(dataset.GroupName, dataset.DatasetName);
        StateHasChanged();
    }

    private void OnTabularSelected(AnalysisServicesObjectSelectedResponse tabular)
    {
        _newObject ??= new();
        _newObject.ObjectUri = DataObject.CreateTabularUri(tabular.ServerName, tabular.ModelName, tabular.TableName, tabular.PartitionName);
        StateHasChanged();
    }

    private void OnAppSelected(QlikApp app)
    {
        _newObject ??= new();
        _newObject.ObjectUri = DataObject.CreateQlikUri(app.Name);
        StateHasChanged();
    }

    private void OnBlobSelected(BlobSelectedResponse blob)
    {
        _newObject ??= new();
        _newObject.ObjectUri = DataObject.CreateBlobUri(blob.AccountName, blob.ContainerName, blob.Path);
        StateHasChanged();
    }

    private async Task<InputTagsDataProviderResult> GetDataAttributeSuggestionsAsync(InputTagsDataProviderRequest request)
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var fromDb = await context.StepDataObjects
            .Where(d => d.DataAttributes.Any(a => a.ToLower().Contains(request.UserInput.ToLower())))
            .Select(d => d.DataAttributes)
            .ToListAsync();
        var current = _references
            ?.SelectMany(r => r.DataAttributes)
            .Where(a => a.ContainsIgnoreCase(request.UserInput))
            ?? [];
        return new InputTagsDataProviderResult
        {
            Data = fromDb
                .SelectMany(a => a)
                .Where(a => a.ContainsIgnoreCase(request.UserInput))
                .Concat(current)
                .Where(a => _editReferenceAttributes.All(x => a != x))
                .Distinct()
                .ToArray()
        };
    }

    private readonly struct DataAttribute(string attribute) : ITag
    {
        public Guid TagId { get; }

        public string TagName { get; } = attribute;

        public TagColor Color => TagColor.LightGray;

        public int SortOrder => 0;
    }
}
