@using Biflow.ExecutorProxy.Core.FilesExplorer

@inject ToasterService Toaster

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Large" Title="Select file">

    <BodyTemplate>
        <div class="row">
            <div class="col">
                <HxButtonToolbar>
                    <HxButtonGroup>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                  @onclick="() => _viewType = ViewType.List"
                                  Spinner="false"
                                  CssClass="@(_viewType == ViewType.List ? "active" : null)">
                            <SvgIcon Icon="LucideIcon.List" />
                            List
                        </HxButton>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                  @onclick="() => _viewType = ViewType.Tree"
                                  Spinner="false"
                                  CssClass="@(_viewType == ViewType.Tree ? "active" : null)">
                            <SvgIcon Icon="LucideIcon.ListTree" />
                            Tree
                        </HxButton>
                    </HxButtonGroup>
                </HxButtonToolbar>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                @if (_viewType == ViewType.List)
                {
                    <FileExplorerListView RootNodes="_rootNodes"
                                          FileExplorerDelegate="_fileExplorerDelegate"
                                          SelectedFile="_selectedFile"
                                          OnFileSelected="ToggleFile" />
                }
                else if (_viewType == ViewType.Tree)
                {
                    <FileExplorerTreeView RootNodes="_rootNodes"
                                          FileExplorerDelegate="_fileExplorerDelegate"
                                          SelectedFile="_selectedFile"
                                          OnFileSelected="ToggleFile"/>
                }
            </div>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectFileAsync"
                  Enabled="_selectedFile is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [CascadingParameter] public UserState UserState { get; set; } = new();

    [Parameter] public EventCallback<string> OnFileSelected { get; set; }
    
    private HxOffcanvas? _offcanvas;
    private IReadOnlyList<DirectoryItem>? _rootNodes;
    private DirectoryItem? _selectedFile;
    private ViewType _viewType = ViewType.List;
    private FileExplorerDelegate _fileExplorerDelegate =
        (_, _) => Task.FromResult<IReadOnlyList<DirectoryItem>>([]);
    
    private enum ViewType { List, Tree }

    private async Task SelectFileAsync()
    {
        if (_selectedFile is not null)
        {
            await OnFileSelected.InvokeAsync(_selectedFile.FullName);
            await _offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    public async Task ShowAsync(FileExplorerDelegate fileExplorerDelegate)
    {
        _rootNodes = null;
        _selectedFile = null;
        _fileExplorerDelegate = fileExplorerDelegate;

        await _offcanvas.LetAsync(x => x.ShowAsync());

        try
        {
            _rootNodes = await _fileExplorerDelegate(null);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _rootNodes = [];
            Toaster.AddError("Error reading items", ex.Message);
        }
    }

    private void ToggleFile(DirectoryItem file)
    {
        if (file.Type != DirectoryItemType.File)
        {
            return;
        }
        
        if (_selectedFile == file)
        {
            _selectedFile = null;
            return;
        }
        _selectedFile = file;
    }
}
