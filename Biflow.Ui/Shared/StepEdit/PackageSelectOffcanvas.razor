@inject ToasterService Toaster

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Regular" Title="Select package">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="input-group">
                    <div class="input-group-text">
                        <SvgIcon Icon="LucideIcon.Search" />
                    </div>
                    <input type="search" class="form-control form-control-sm" placeholder="Search packages" @bind-value="_filterText" @bind-value:event="oninput" />
                </div>
            </div>
        </div>
        <div class="row mt-3" style="height: calc(100vh - 210px); overflow-y: scroll;">
            <div class="col">
                <div class="list-group">
                    @if (_catalog is null)
                    {
                        <div class="list-group-item text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </div>
                    }
                    else if (_catalog.Folders.Count == 0)
                    {
                        <div class="list-group-item small">
                            No folders
                        </div>
                    }
                    else
                    {
                        var folders = _catalog.Folders.Values
                            .Where(f => string.IsNullOrEmpty(_filterText) || f.Projects.Values.SelectMany(pr => pr.Packages.Values).Any(p => p.PackageName.ContainsIgnoreCase(_filterText)))
                            .OrderBy(f => f.FolderName);
                        foreach (var folder in folders)
                        {
                            var folderExpanded = !string.IsNullOrEmpty(_filterText) || _folderExpandedStates.GetValueOrDefault(folder);
                            var projects = folder.Projects.Values
                                .Where(pr => string.IsNullOrEmpty(_filterText) || pr.Packages.Values.Any(pa => pa.PackageName.ContainsIgnoreCase(_filterText)))
                                .OrderBy(pr => pr.ProjectName)
                                .ToArray();
                            <div class="list-group-item list-group-item-action d-flex align-items-center small cursor-pointer" @onclick="() => ToggleFolder(folder)">
                                @if (folderExpanded)
                                {
                                    <SvgIcon Icon="LucideIcon.ChevronDown" />
                                }
                                else
                                {
                                    <SvgIcon Icon="LucideIcon.ChevronRight" />
                                }
                                &nbsp;
                                <SvgIcon Icon="LucideIcon.Folder" />
                                &nbsp;
                                @folder.FolderName
                                <span class="ms-auto badge rounded-pill @(projects.Length > 0 ? "bg-primary" : "bg-secondary")">
                                    @projects.Length
                                </span>
                            </div>
                            @if (!folderExpanded)
                            {
                                continue;
                            }
                            
                            if (folder.Projects.Count == 0)
                            {
                                <div class="list-group-item small" style="padding-left: 2rem;">
                                    No projects
                                </div>
                            }
                            foreach (var project in projects)
                            {
                                var projectExpanded = !string.IsNullOrEmpty(_filterText) || _projectExpandedStates.GetValueOrDefault(project);
                                var packages = project.Packages.Values
                                    .Where(p => string.IsNullOrEmpty(_filterText) || p.PackageName.ContainsIgnoreCase(_filterText))
                                    .OrderBy(p => p.PackageName)
                                    .ToArray();
                                <div class="list-group-item list-group-item-action d-flex align-items-center small cursor-pointer" style="padding-left: 2rem;" @onclick="() => ToggleProject(project)">
                                    @if (projectExpanded)
                                    {
                                        <SvgIcon Icon="LucideIcon.ChevronDown" />
                                    }
                                    else
                                    {
                                        <SvgIcon Icon="LucideIcon.ChevronRight" />
                                    }
                                    &nbsp;
                                    <SvgIcon Icon="LucideIcon.Briefcase" />
                                    &nbsp;
                                    @project.ProjectName
                                    <span class="ms-auto badge rounded-pill @(packages.Length > 0 ? "bg-primary" : "bg-secondary")">
                                        @packages.Length
                                    </span>
                                </div>
                                if (!projectExpanded)
                                {
                                    continue;
                                }

                                if(project.Packages.Count == 0)
                                {
                                    <div class="list-group-item small" style="padding-left: 3rem;">
                                        No packages
                                    </div>
                                }
                                foreach (var package in packages)
                                {
                                    var parameters = package.Parameters.Values
                                        .Where(p => !p.ConnectionManagerParameter || _showConnectionManagerParameters)
                                        .OrderBy(p => p.ProjectParameter)
                                        .ThenBy(p => p.ParameterName);
                                    <div class="list-group-item list-group-item-action small cursor-pointer @(package == _selectedPackage ? "bg-body" : null)" @onclick="() => TogglePackage(package)">
                                        <div class="row" style="padding-left: 3rem;">
                                            <div class="col d-flex align-items-center @(package == _selectedPackage ? "fw-bold" : null)">
                                                <SvgIcon Icon="LucideIcon.Package" />
                                                &nbsp;
                                                <HighlightableText Text="@package.PackageName" PartToHighlight="@_filterText" />
                                            </div>
                                        </div>
                                        @if (package == _selectedPackage && parameters.Any())
                                        {
                                            <div class="row mt-3">
                                                <div class="col">
                                                    <h6 class="mx-2">Parameters</h6>
                                                    <dl class="row mx-3">
                                                        @foreach (var param in parameters)
                                                        {
                                                            var prefix = param.ProjectParameter ? "$Project::" : "$Package::";
                                                            var defaultValue = param.DefaultValue ?? param.DesignDefaultValue;
                                                            <dt>@prefix@(param.ParameterName) (@param.ParameterType)</dt>
                                                            <dd>@defaultValue</dd>
                                                        }
                                                    </dl>
                                                </div>
                                            </div>
                                        }
                                    </div>

                                }
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectPackageAsync"
                  Enabled="_selectedPackage is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
        
            <div class="form-check ms-auto d-flex align-items-center">
                <input type="checkbox" class="form-check-input" id="show_connection_manager_parameters"
                   checked=@_showConnectionManagerParameters
                   @onchange="args => _showConnectionManagerParameters = (bool)args.Value!">
                <label class="form-check-label fw-normal ms-2" for="show_connection_manager_parameters">Show connection manager parameters</label>
            </div>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public EventCallback<CatalogPackage> OnPackageSelected { get; set; }

    private readonly Dictionary<CatalogFolder, bool> _folderExpandedStates = [];
    private readonly Dictionary<CatalogProject, bool> _projectExpandedStates = [];

    private HxOffcanvas? _offcanvas;
    private SSISCatalog? _catalog;
    private string _filterText = string.Empty;
    private CatalogPackage? _selectedPackage;
    private bool _showConnectionManagerParameters = false;

    private async Task SelectPackageAsync()
    {
        if (_selectedPackage is not null)
        {
            await OnPackageSelected.InvokeAsync(_selectedPackage);
            await _offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    private void ToggleFolder(CatalogFolder folder)
    {
        var folderExpanded = _folderExpandedStates.GetValueOrDefault(folder);
        _folderExpandedStates[folder] = !folderExpanded;
    }

    private void ToggleProject(CatalogProject project)
    {
        var projectExpanded = _projectExpandedStates.GetValueOrDefault(project);
        _projectExpandedStates[project] = !projectExpanded;
    }

    private void TogglePackage(CatalogPackage package)
    {
        if (_selectedPackage == package)
        {
            _selectedPackage = null;
            return;
        }
        _selectedPackage = package;
    }

    public async Task ShowAsync(MsSqlConnection connection)
    {
        _folderExpandedStates.Clear();
        _projectExpandedStates.Clear();
        _catalog = null;
        _selectedPackage = null;
        _filterText = string.Empty;

        await _offcanvas.LetAsync(x => x.ShowAsync());
        
        try
        {
            _catalog = await connection.GetCatalogPackagesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading catalog", ex.Message);
        }
    }

}
