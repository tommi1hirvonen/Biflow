@inject IHxMessengerService Messenger
@inject SqlServerHelperService SqlServerHelperService

<HxOffcanvas @ref="Offcanvas" Size="OffcanvasSize.Regular" Title="Select package">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                <CxIcon Icon="FeatherIcon.Folder" />
                                Folders
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Catalog is null)
                        {
                            <tr><td class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td></tr>
                        }
                        else if (Catalog.Folders.Count == 0)
                        {
                            <tr><td>No folders</td></tr>
                        }
                        else
                        {
                            foreach (var folder in Catalog.Folders.Values)
                            {
                                <tr style="cursor: pointer;" @onclick="() => OnFolderChanged(folder)"
                                    class="@(folder == SelectedFolder ? "bg-body-tertiary fw-bold" : null)">
                                    <td>@folder.FolderName</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                <CxIcon Icon="FeatherIcon.Briefcase" />
                                Projects
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Catalog is not null && SelectedFolder is not null)
                        {
                            var projects = SelectedFolder.Projects.Values;
                            if (projects.Count == 0)
                            {
                                <tr><td>No projects</td></tr>
                            }
                            else
                            {
                                foreach (var project in projects)
                                {
                                    <tr style="cursor: pointer;" @onclick="() => OnProjectChanged(project)"
                                        class="@(project == SelectedProject ? "bg-body-tertiary fw-bold" : null)">
                                        <td>@project.ProjectName</td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <CxIcon Icon="FeatherIcon.Filter" />
                    </div>
                    <input type="search" class="form-control" @bind-value="FilterText" @bind-value:event="oninput"
                           placeholder="Filter by name" autocomplete="off" />
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                <CxIcon Icon="FeatherIcon.Package" />
                                Packages
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Catalog is not null && SelectedFolder is not null && SelectedProject is not null)
                        {
                            var packages = SelectedProject.Packages.Values;
                            if (packages.Count == 0)
                            {
                                <tr><td>No packages</td></tr>
                            }
                            else
                            {
                                foreach (var package in packages.Where(p => p.PackageName.ContainsIgnoreCase(FilterText)).OrderBy(p => p.PackageName))
                                {
                                    var parameters = package.Parameters.Values
                                        .Where(p => !p.ConnectionManagerParameter || ShowConnectionManagerParameters)
                                        .OrderBy(p => p.ProjectParameter)
                                        .ThenBy(p => p.ParameterName);
                                    
                                        <tr style="cursor: pointer;" @onclick="() => SelectedPackage = package"
                                        class="@(package == SelectedPackage ? "bg-body-tertiary fw-bold" : null)">
                                        <td>
                                            <HighlightableText Text="@package.PackageName" PartToHighlight="@FilterText" />
                                        </td>
                                    </tr>

                                    @if (package == SelectedPackage && parameters.Any())
                                    {
                                        <tr class="no-hover">
                                            <td colspan="2" class="bg-body-tertiary">
                                                <div class="row">
                                                    <div class="col">
                                                        <h6 class="mx-2">Parameters</h6>
                                                        <dl class="row mx-3 small">
                                                            @foreach (var param in parameters)
                                                            {
                                                                var prefix = param.ProjectParameter ? "$Project::" : "$Package::";
                                                                var defaultValue = param.DefaultValue ?? param.DesignDefaultValue;
                                                                <dt>@prefix@param.ParameterName (@param.ParameterType)</dt>
                                                                <dd>@defaultValue</dd>
                                                            }
                                                        </dl>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectPackageAsync"
                  Enabled="SelectedPackage is not null && SelectedProject is not null && SelectedFolder is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
        
            <div class="form-check ms-auto d-flex align-items-center">
                <input type="checkbox" class="form-check-input" id="show_connection_manager_parameters"
                   checked=@ShowConnectionManagerParameters
                   @onchange="args => ShowConnectionManagerParameters = (bool)args.Value!">
                <label class="form-check-label fw-normal ms-2" for="show_connection_manager_parameters">Show connection manager parameters</label>
            </div>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public EventCallback<PackageSelectedResponse> OnPackageSelected { get; set; }

    private HxOffcanvas? Offcanvas { get; set; }

    private Guid ConnectionId { get; set; }

    private SSISCatalog? Catalog { get; set; }

    private string FilterText { get; set; } = string.Empty;

    private CatalogFolder? SelectedFolder { get; set; }
    private CatalogProject? SelectedProject { get; set; }
    private CatalogPackage? SelectedPackage { get; set; }

    private bool ShowConnectionManagerParameters { get; set; } = false;

    private void OnFolderChanged(CatalogFolder folder)
    {
        if (folder != SelectedFolder)
        {
            SelectedPackage = null;
            SelectedProject = null;
        }
        SelectedFolder = folder;
    }

    private void OnProjectChanged(CatalogProject project)
    {
        if (project != SelectedProject)
        {
            SelectedPackage = null;
        }
        SelectedProject = project;
    }

    private async Task SelectPackageAsync()
    {
        if (SelectedFolder is not null && SelectedProject is not null && SelectedPackage is not null)
        {
            var package = new PackageSelectedResponse(SelectedFolder.FolderName, SelectedProject.ProjectName, SelectedPackage.PackageName);
            await OnPackageSelected.InvokeAsync(package);
            await Offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    public async Task ShowAsync(Guid connectionId)
    {
        Catalog = null;
        SelectedFolder = null;
        SelectedProject = null;
        SelectedPackage = null;
        FilterText = string.Empty;

        await Offcanvas.LetAsync(x => x.ShowAsync());
        
        try
        {
            Catalog = await SqlServerHelperService.GetCatalogPackages(connectionId);
            ConnectionId = connectionId;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error reading catalog", ex.Message);
        }
    }

}
