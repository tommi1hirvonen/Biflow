@inject ToasterService Toaster
@inject IDbContextFactory<AppDbContext> DbContextFactory

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Large" Title="Select file">

    <BodyTemplate>
        <div class="row justify-content-between">
            <div class="col-sm-6">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <SvgIcon Icon="FeatherIcon.Filter" />
                    </div>
                    <input type="search" class="form-control" @bind-value="_filterText" @bind-value:event="oninput"
                           placeholder="Filter by name" autocomplete="off" />
                </div>
            </div>
            <div class="col-auto">
                <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="LoadWorkspaceAsync">
                    <SvgIcon Icon="FeatherIcon.RefreshCw" />
                    Refresh
                </HxButton>
            </div>
        </div>
        <div class="row mt-3" style="height: calc(100vh - 210px); overflow-y: scroll;">
            <div class="col">
                <div class="list-group">
                    @if (_root is null)
                    {
                        <div class="list-group-item text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </div>
                    }
                    else if (!_root.Files.Any() && !_root.Folders.Any())
                    {
                        <div class="list-group-item small">
                            No files
                        </div>
                    }
                    else
                    {
                        <DatabricksFolderListGroupItem Folder="_root"
                                                       ExpandStatuses="_folderExpandedStates"
                                                       SelectedFile="_selectedFile"
                                                       OnFileSelected="ToggleFile"
                                                       FilterText="@_filterText" />
                    }
                </div>
            </div>

        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectFileAsync"
                  Enabled="_selectedFile is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [CascadingParameter] public UserState UserState { get; set; } = new();

    [Parameter] public EventCallback<string> OnFileSelected { get; set; }

    private readonly Dictionary<DatabricksFolder, bool> _folderExpandedStates = [];

    private HxOffcanvas? _offcanvas;
    private DatabricksFolder? _root;
    private DatabricksFile? _selectedFile;
    private string _filterText = string.Empty;
    private Guid _workspaceId;

    private async Task SelectFileAsync()
    {
        if (_selectedFile is not null)
        {
            await OnFileSelected.InvokeAsync(_selectedFile.Path);
            await _offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    public async Task ShowAsync(Guid workspaceId)
    {
        _workspaceId = workspaceId;
        _folderExpandedStates.Clear();
        _root = null;
        _selectedFile = null;
        _filterText = string.Empty;

        await _offcanvas.LetAsync(x => x.ShowAsync());

        if (UserState.StepEdit.DatabricksWorkspaceFolders.TryGetValue(workspaceId, out var folder))
        {
            _root = folder;
            StateHasChanged();
            return;
        }

        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var workspace = await context.DatabricksWorkspaces
                .AsNoTrackingWithIdentityResolution()
                .FirstAsync(w => w.WorkspaceId == workspaceId);
            using var client = workspace.CreateClient();
            _root = await client.GetWorkspaceAsync();
            UserState.StepEdit.DatabricksWorkspaceFolders[workspaceId] = _root;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading workspace content", ex.Message);
        }
    }

    private async Task LoadWorkspaceAsync()
    {
        _folderExpandedStates.Clear();
        _root = null;
        _selectedFile = null;
        
        StateHasChanged();

        await using var context = await DbContextFactory.CreateDbContextAsync();
        var workspace = await context.DatabricksWorkspaces
            .AsNoTrackingWithIdentityResolution()
            .FirstAsync(w => w.WorkspaceId == _workspaceId);
        using var client = workspace.CreateClient();
        _root = await client.GetWorkspaceAsync();
        UserState.StepEdit.DatabricksWorkspaceFolders[_workspaceId] = _root;
    }

    private void ToggleFile(DatabricksFile file)
    {
        if (_selectedFile == file)
        {
            _selectedFile = null;
            return;
        }
        _selectedFile = file;
    }
}
