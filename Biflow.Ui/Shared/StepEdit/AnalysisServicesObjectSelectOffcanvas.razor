@inject ToasterService Toaster

<HxOffcanvas @ref="offcanvas" Size="OffcanvasSize.Regular" OnClosed="OnClosed" Title="Select Analysis Services object">
    <BodyTemplate>
        @if (AllowAppRegistrationChange)
        {
            <div class="row mb-3 align-items-end">
                <div class="col">
                    <label class="form-label">Connection</label>
                    <div class="input-group input-group-sm">
                        <div class="input-group-text">
                            <SvgIcon Icon="FeatherIcon.Database" />
                        </div>
                        <select class="form-select form-select-sm" @bind="connectionId">
                            @foreach (var connection in Connections ?? [])
                            {
                                <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-auto">
                    <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="LoadAsync">
                        <SvgIcon Icon="FeatherIcon.RefreshCw" />
                        Refresh
                    </HxButton>
                </div>
            </div>
        }
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>
                                <SvgIcon Icon="FeatherIcon.Box" />
                                Models
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (server is null)
                        {
                            <tr><td class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td></tr>
                        }
                        else if (!server.Models.Any())
                        {
                            <tr><td class="text-secondary">No models</td></tr>
                        }
                        else
                        {
                            foreach (var model in server.Models.OrderBy(m => m.ModelName))
                            {
                                <tr style="cursor: pointer;"
                                    class="@(model == selectedModel ? "bg-body-tertiary fw-bold" : null)"
                                    @onclick="() => SelectModel(model)">
                                    <td>@model.ModelName</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>
                                <SvgIcon Icon="FeatherIcon.Table" />
                                Tables
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (server is null)
                        {
                            <tr><td class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td></tr>
                        }
                        else if (selectedModel is null)
                        {
                            <tr><td class="text-secondary">Select a model to view tables</td></tr>
                        }
                        else if (!selectedModel.Tables.Any())
                        {
                            <tr><td class="text-secondary">No tables</td></tr>
                        }
                        else
                        {
                            foreach (var table in selectedModel.Tables.OrderBy(t => t.TableName))
                            {
                                <tr style="cursor: pointer;"
                                    class="@(table == selectedTable ? "bg-body-tertiary fw-bold" : null)"
                                    @onclick="() => SelectTable(table)">
                                    <td>@table.TableName</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>
                                <SvgIcon Icon="FeatherIcon.PieChart" />
                                Partitions
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (server is null)
                        {
                            <tr><td class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td></tr>
                        }
                        else if (selectedTable is null)
                        {
                            <tr><td class="text-secondary">Select a table to view partitions</td></tr>
                        }
                        else if (!selectedTable.Partitions.Any())
                        {
                            <tr><td class="text-secondary">No partitions</td></tr>
                        }
                        else
                        {
                            foreach (var partition in selectedTable.Partitions.OrderBy(p => p.PartitionName))
                            {
                                <tr style="cursor: pointer;"
                                    class="@(partition == selectedPartition ? "bg-body-tertiary fw-bold" : null)"
                                    @onclick="() => SelectPartition(partition)">
                                    <td>@partition.PartitionName</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectObjectAsync"
                  Enabled="selectedModel is not null || selectedTable is not null || selectedPartition is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public IEnumerable<AnalysisServicesConnection>? Connections { get; set; }

    [Parameter]
    public EventCallback<AnalysisServicesObjectSelectedResponse> OnObjectSelected { get; set; }

    [Parameter]
    public bool AllowAppRegistrationChange { get; set; } = false;

    private Guid connectionId;
    private HxOffcanvas? offcanvas;
    private AsServer? server;
    private AsModel? selectedModel;
    private AsTable? selectedTable;
    private AsPartition? selectedPartition;

    private void OnClosed()
    {
        server = null;
        selectedModel = null;
        selectedTable = null;
        selectedPartition = null;
    }

    private void SelectModel(AsModel model)
    {
        selectedPartition = null;
        selectedTable = null;
        selectedModel = selectedModel == model ? null : model;
    }

    private void SelectTable(AsTable table)
    {
        selectedPartition = null;
        selectedTable = selectedTable == table ? null : table;
    }

    private void SelectPartition(AsPartition partition) => selectedPartition = selectedPartition == partition ? null : partition;

    private async Task SelectObjectAsync()
    {
        if (selectedPartition is not null)
        {
            var obj = new AnalysisServicesObjectSelectedResponse(
                selectedPartition.Table.Model.Server.Name,
                selectedPartition.Table.Model.ModelName,
                selectedPartition.Table.TableName,
                selectedPartition.PartitionName);
            await OnObjectSelected.InvokeAsync(obj);
            await offcanvas.LetAsync(x => x.HideAsync());
        }
        else if (selectedTable is not null)
        {
            var obj = new AnalysisServicesObjectSelectedResponse(selectedTable.Model.Server.Name, selectedTable.Model.ModelName, selectedTable.TableName);
            await OnObjectSelected.InvokeAsync(obj);
            await offcanvas.LetAsync(x => x.HideAsync());
        }
        else if (selectedModel is not null)
        {
            var obj = new AnalysisServicesObjectSelectedResponse(selectedModel.Server.Name, selectedModel.ModelName);
            await OnObjectSelected.InvokeAsync(obj);
            await offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    public async Task ShowAsync(Guid? connectionId = null)
    {
        if (connectionId is Guid id)
        {
            this.connectionId = id;
        }
        else
        {
            this.connectionId = Connections?.FirstOrDefault()?.ConnectionId ?? Guid.Empty;
        }

        if (this.connectionId == Guid.Empty)
        {
            Toaster.AddWarning("No connections found");
            return;
        }

        await offcanvas.LetAsync(x => x.ShowAsync());
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        server = null;
        selectedModel = null;
        selectedTable = null;
        selectedPartition = null;
        try
        {
            ArgumentNullException.ThrowIfNull(Connections);
            var connection = Connections.FirstOrDefault(c => c.ConnectionId == connectionId);
            ArgumentNullException.ThrowIfNull(connection);
            server = await connection.GetAnalysisServicesModelsAsync();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading Analysis Services objects", ex.Message);
        }
    }
}
