@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster

@if (Execution is not null)
{
    <div class="row mt-3">
        <div class="col">
            <HxButtonGroup>
                <FilterDropdown TItem="StepExecutionStatus"
                                FilterSet="statusFilter"
                                Items="Statuses"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Info" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepExecutionStatusBadge ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                          @onclick="() => { statusFilter.Clear(); }">
                    <CxIcon Icon="FeatherIcon.X" />
                    Clear
                </HxButton>
            </HxButtonGroup>
        </div>
        <div class="col d-flex">
            <HxButtonGroup>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                          @onclick="AddAll">
                    <CxIcon Icon="FeatherIcon.ChevronsRight" />
                    Select all
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="() => selectedAttempts.Clear()">
                    <CxIcon Icon="FeatherIcon.ChevronsLeft" />
                    Deselect all
                </HxButton>
            </HxButtonGroup>

            <HxDropdownButtonGroup CssClass="ms-auto">
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Primary">
                    Mark status as...
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    @foreach (var status in Enum.GetValues<StepExecutionStatus>())
                    {
                        <HxDropdownItem OnClick="() => UpdateExecutionStatusAsync(status)">
                            <StepExecutionStatusBadge ExecutionStatus="status" />
                        </HxDropdownItem>
                    }
                </HxDropdownMenu>
            </HxDropdownButtonGroup>
        </div>
    </div>

    <div class="card shadow-sm mt-3 pt-1 mb-4">
        <div class="row g-0">
            <div class="col">
                <h6 class="mx-2">Available steps</h6>
                <div style="overflow-y: scroll; height: calc(100vh - 270px);">
                    <table class="table table-hover table-sm">
                        <tbody>
                            @foreach (var attempt in AvailableAttempts)
                            {
                                <tr style="cursor: pointer;" @onclick="() => selectedAttempts.Add(attempt)">
                                    <td>
                                        <StepTypeIcon StepType="@attempt.StepType" />
                                        &nbsp;
                                        @attempt.StepExecution.StepName
                                    </td>
                                    <td>
                                        <StepExecutionStatusBadge ExecutionStatus="attempt.ExecutionStatus" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="col">
                <h6 class="mx-2">Selected steps</h6>
                <div style="overflow-y: scroll; height: calc(100vh - 270px);">
                    <table class="table table-hover table-sm">
                        <tbody>
                            @foreach (var attempt in selectedAttempts)
                            {
                                <tr style="cursor: pointer;" @onclick="() => selectedAttempts.Remove(attempt)">
                                    <td>
                                        <StepTypeIcon StepType="@attempt.StepType" />
                                        &nbsp;
                                        @attempt.StepExecution.StepName
                                    </td>
                                    <td>
                                        <StepExecutionStatusBadge ExecutionStatus="attempt.ExecutionStatus" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Execution? Execution { get; set; }

    private readonly HashSet<StepExecutionStatus> statusFilter = [];
    private readonly HashSet<StepExecutionAttempt> selectedAttempts = [];

    private IEnumerable<StepExecutionAttempt> AvailableAttempts => Execution
        ?.StepExecutions
        .SelectMany(e => e.StepExecutionAttempts)
        .Where(a => statusFilter.Count == 0 || statusFilter.Contains(a.ExecutionStatus))
        .Where(a => !selectedAttempts.Contains(a))
        ?? [];

    private IEnumerable<StepExecutionStatus> Statuses => Execution?.StepExecutions
        .SelectMany(e => e.StepExecutionAttempts)
        .Select(e => e.ExecutionStatus)
        .Distinct()
        .Order() ?? Enumerable.Empty<StepExecutionStatus>();

    private void AddAll()
    {
        foreach (var attempt in AvailableAttempts.ToArray()) // copy to array because the enumerable changes during iteration
        {
            selectedAttempts.Add(attempt);
        }
    }

    private async Task UpdateExecutionStatusAsync(StepExecutionStatus status)
    {
        try
        {
            foreach (var attempt in selectedAttempts)
            {
                attempt.ExecutionStatus = status;
                attempt.StartedOn ??= DateTimeOffset.Now;
                attempt.EndedOn ??= DateTimeOffset.Now;
            }
            await Mediator.SendAsync(new UpdateStepExecutionAttemptsCommand(selectedAttempts));
            Toaster.AddInformation("Statuses updated successfully");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error updating statuses", ex.Message);
        }
    }
}
