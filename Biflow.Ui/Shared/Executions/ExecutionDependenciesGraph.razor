@if (Execution?.ExecutionMode == ExecutionMode.ExecutionPhase)
{
    <HxAlert Color="ThemeColor.Warning" CssClass="mt-3">
        Job executed in execution phase mode. Dependencies have no effect.
    </HxAlert>
}

<div class="row align-items-end mb-3">
    <div class="col-xl-5 col-lg-5 col-12">
        <HxAutosuggest @bind-Value="dependencyGraphStepFilter"
                       @bind-Value:after="LoadGraphAsync"
                       DataProvider="ProvideSuggestions"
                       TextSelector="TextSelector"
                       MinimumLength="0"
                       Delay="1"
                       InputSize="InputSize.Small"
                       Placeholder="Filter step">
            <ItemTemplate Context="item">
                <StepTypeIcon StepType="item.StepType" />
                @item.StepName
            </ItemTemplate>
            <EmptyTemplate>
                <span class="p-2">No matching steps</span>
            </EmptyTemplate>
        </HxAutosuggest>
    </div>
    <div class="col-lg-auto d-flex flex-row align-items-end">
        <div class="form-group">
            <label class="form-label">Depth backwards</label>
            <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@("<p>The depth of traversal backwards when drawing the dependency graph starting from the filtered step.</p><p>Available only when the graph has been filtered.</p><p>0 = no limit</p>")">
                 <ChildContent>
                     <span style="cursor: pointer;">
                         <CxIcon Icon="FeatherIcon.Info" />
                     </span>
                 </ChildContent>
             </HxPopover>
             <input class="form-control form-control-sm" type="number" @bind-value="FilterDepthBackwards" disabled=@(dependencyGraphStepFilter is null) style="max-width: 9rem;" />
         </div>
         <div class="form-group ms-3">
             <label class="form-label">Depth forwards</label>
             <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@("<p>The depth of traversal forwards when drawing the dependency graph starting from the filtered step.</p><p>Available only when the graph has been filtered.</p><p>0 = no limit</p>")">
                 <ChildContent>
                     <span style="cursor: pointer;">
                         <CxIcon Icon="FeatherIcon.Info" />
                     </span>
                 </ChildContent>
             </HxPopover>
             <input class="form-control form-control-sm" type="number" @bind-value="FilterDepthForwards" disabled=@(dependencyGraphStepFilter is null) style="max-width: 9rem;" />
         </div>
        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="ms-3">
            <HxButton CssClass="btn-auto" Size="ButtonSize.Small" Color="ThemeColor.None" OnClick="LoadGraphAsync">
                Apply depth filters
            </HxButton>
            <HxDropdownButtonGroup AutoClose="DropdownAutoClose.Outside">
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                    Direction
                </HxDropdownToggleButton>
                <HxDropdownContent CssClass="p-3">
                    <div class="row mt-2" style="min-width: 12rem;">
                        <div class="col">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" id="direction_radio_admin"
                                       checked=@(direction == DependencyGraphDirection.LeftToRight)
                                       @onchange="@(e => SetDirectionAsync(DependencyGraphDirection.LeftToRight))">
                                <label class="form-check-label fw-normal" for="direction_radio_admin">
                                    <CxIcon Icon="FeatherIcon.ArrowRight" />
                                    Left to right
                                </label>
                            </div>
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="radio" id="direction_radio_editor"
                                       checked=@(direction == DependencyGraphDirection.RightToLeft)
                                       @onchange="@(e => SetDirectionAsync(DependencyGraphDirection.RightToLeft))">
                                <label class="form-check-label fw-normal" for="direction_radio_editor">
                                    <CxIcon Icon="FeatherIcon.ArrowLeft" />
                                    Right to left
                                </label>
                            </div>
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="radio" id="direction_radio_operator"
                                       checked=@(direction == DependencyGraphDirection.TopToBottom)
                                       @onchange="@(e => SetDirectionAsync(DependencyGraphDirection.TopToBottom))">
                                <label class="form-check-label fw-normal" for="direction_radio_operator">
                                    <CxIcon Icon="FeatherIcon.ArrowDown" />
                                    Top to bottom
                                </label>
                            </div>
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="radio" id="direction_radio_viewer"
                                       checked=@(direction == DependencyGraphDirection.BottomToTop)
                                       @onchange="@(e => SetDirectionAsync(DependencyGraphDirection.BottomToTop))">
                                <label class="form-check-label fw-normal" for="direction_radio_viewer">
                                    <CxIcon Icon="FeatherIcon.ArrowUp" />
                                    Bottom to top
                                </label>
                            </div>
                        </div>
                    </div>
                </HxDropdownContent>
            </HxDropdownButtonGroup>
        </HxButtonGroup>
     </div>
 </div>

 @if (Execution is not null)
{
    <DependencyGraph @ref="dependencyGraph"
                     TItem="StepExecution"
                     ItemFromNodeIdSelector="@(nodeId => Execution?.StepExecutions.FirstOrDefault(s => $"{s.ExecutionId}_{s.StepId}" == nodeId))"
                     AfterRender="LoadGraphAsync"
                     CssClass="dependency-graph">
        <ContextMenuTemplate Context="step">
            <li>
                <h6 class="dropdown-header">
                    <StepTypeIcon StepType="step.StepType" />
                    @step.StepName
                </h6>
            </li>
            <li>
                <span class="dropdown-item" role="button" @onclick="async () => { dependencyGraphStepFilter = step; await LoadGraphAsync(); }">
                    <CxIcon Icon="FeatherIcon.Filter" />
                    Limit graph to this
                </span>
            </li>
            <li>
                <span class="dropdown-item" role="button" @onclick="() => ShowStepExecutionOffcanvas(step)">
                    <CxIcon Icon="FeatherIcon.Info" />
                    Details
                </span>
            </li>
            <li>
                <span class="dropdown-item" role="button" @onclick="() => stepHistoryOffcanvas.LetAsync(x => x.ShowAsync(step.StepId))">
                    <CxIcon Icon="LucideIcon.History" />
                    History
                </span>
            </li>
        </ContextMenuTemplate>
    </DependencyGraph>
}

<StepExecutionDetailsOffcanvas @ref="stepExecutionDetailsOffcanvas" />

<StepHistoryOffcanvas @ref="stepHistoryOffcanvas" />

@code {
    [Parameter] public Execution? Execution { get; set; }

    [Parameter] public Guid? InitialStepId { get; set; }

    private DependencyGraph<StepExecution>? dependencyGraph;
    private StepExecution? dependencyGraphStepFilter;
    private StepExecutionDetailsOffcanvas? stepExecutionDetailsOffcanvas;
    private StepHistoryOffcanvas? stepHistoryOffcanvas;
    private DependencyGraphDirection direction = DependencyGraphDirection.LeftToRight;

    private int FilterDepthBackwards
    {
        get => _filterDepthBackwards;
        set => _filterDepthBackwards = value >= 0 ? value : _filterDepthBackwards;
    }

    private int _filterDepthBackwards;

    private int FilterDepthForwards
    {
        get => _filterDepthForwards;
        set => _filterDepthForwards = value >= 0 ? value : _filterDepthForwards;
    }

    private int _filterDepthForwards;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (InitialStepId is Guid filterStepId)
            {
                dependencyGraphStepFilter = Execution?.StepExecutions?.FirstOrDefault(s => s.StepId == filterStepId);
                StateHasChanged();
            }
        }
    }

    private Task SetDirectionAsync(DependencyGraphDirection direction)
    {
        if (this.direction == direction)
        {
            return Task.CompletedTask;
        }
        this.direction = direction;
        return LoadGraphAsync();
    }

    public async Task LoadGraphAsync()
    {
        ArgumentNullException.ThrowIfNull(dependencyGraph);
        ArgumentNullException.ThrowIfNull(Execution);

        DependencyGraphNode[] nodes;
        DependencyGraphEdge[] edges;
        if (dependencyGraphStepFilter is null)
        {
            // Create a list of steps and dependencies and send them through JSInterop as JSON objects.
            var crossExecutionDependencies = Execution.StepExecutions
                .SelectMany(e => e.MonitoredStepExecutions.Where(m => m.MonitoringReason is MonitoringReason.UpstreamDependency or MonitoringReason.DownstreamDependency))
                .Select(e => e.MonitoredStepExecution)
                .Where(e => e.ExecutionId != Execution.ExecutionId);
            nodes = Execution.StepExecutions
                .Concat(crossExecutionDependencies)
                .Select(step =>
                {
                    var status = step.ExecutionStatus.ToString() ?? "";
                    var @internal = step.ExecutionId == Execution.ExecutionId;
                    return new DependencyGraphNode(
                        Id: $"{step.ExecutionId}_{step.StepId}",
                        Name: step.StepName,
                        CssClass: $"enabled {status.ToLower()} {(@internal ? "internal" : "external")}",
                        TooltipText: $"{step.StepType}, {status}, {step.GetDurationInSeconds().SecondsToReadableFormat()}",
                        EnableOnClick: true
                    );
                }).ToArray();

            var crossExecutionEdgesUpstream = Execution.StepExecutions
                .SelectMany(e => e.MonitoredStepExecutions.Where(m => m.MonitoringReason == MonitoringReason.UpstreamDependency))
                .Where(m => m.MonitoredExecutionId != Execution.ExecutionId)
                .Select(m => 
                {
                    var dependencyType = m.StepExecution.ExecutionDependencies
                        .FirstOrDefault(d => d.DependantOnStepId == m.MonitoredStepId)
                        ?.DependencyType
                        ?? DependencyType.OnCompleted;
                    return new DependencyGraphEdge(
                        Id: $"{m.ExecutionId}_{m.StepId}",
                        DependsOnId: $"{m.MonitoredExecutionId}_{m.MonitoredStepId}",
                        CssClass: dependencyType.ToString().ToLower());
                });
            var crossExecutionEdgesDownstream = Execution.StepExecutions
                .SelectMany(e => e.MonitoredStepExecutions.Where(m => m.MonitoringReason == MonitoringReason.DownstreamDependency))
                .Where(m => m.MonitoredExecutionId != Execution.ExecutionId)
                .Select(m =>
                {
                    return new DependencyGraphEdge(
                        Id: $"{m.MonitoredExecutionId}_{m.MonitoredStepId}",
                        DependsOnId: $"{m.ExecutionId}_{m.StepId}",
                        CssClass: DependencyType.OnCompleted.ToString().ToLower());
                });
            edges = Execution.StepExecutions
                .SelectMany(step => step.ExecutionDependencies)
                .Where(dep => Execution.StepExecutions.Any(s => dep.DependantOnStepId == s.StepId))
                .Select(dep => new DependencyGraphEdge(
                    Id: $"{dep.ExecutionId}_{dep.StepId}",
                    DependsOnId: $"{dep.ExecutionId}_{dep.DependantOnStepId}",
                    CssClass: dep.DependencyType.ToString().ToLower()
                ))
                .Concat(crossExecutionEdgesUpstream)
                .Concat(crossExecutionEdgesDownstream)
                .ToArray();
        }
        else
        {
            var startStep = Execution?.StepExecutions.FirstOrDefault(s => s.StepId == dependencyGraphStepFilter.StepId);
            if (startStep is not null)
            {
                var steps = RecurseDependenciesBackward(startStep, [], 0);
                steps.Remove(startStep);
                steps = RecurseDependenciesForward(startStep, steps, 0);

                nodes = steps.Select(step => new DependencyGraphNode(
                    Id: step.StepId.ToString(),
                    Name: step.StepName,
                    CssClass: $"enabled {step.ExecutionStatus?.ToString().ToLower() ?? ""} internal",
                    TooltipText: $"{step.StepType}",
                    EnableOnClick: true
                )).ToArray();
                edges = steps
                    .SelectMany(step => step.ExecutionDependencies)
                    .Where(d => steps.Any(s => d.DependantOnStepId == s.StepId) && steps.Any(s => d.StepId == s.StepId)) // only include dependencies whose step is included
                    .Select(dep => new DependencyGraphEdge(
                        Id: dep.StepId.ToString(),
                        DependsOnId: ((Guid)dep.DependantOnStepId!).ToString(),
                        CssClass: dep.DependencyType.ToString().ToLower()
                    )).ToArray();
            }
            else
            {
                return;
            }
        }
        await dependencyGraph.DrawAsync(nodes, edges, direction);
        StateHasChanged();
    }

    private List<StepExecution> RecurseDependenciesBackward(StepExecution step, List<StepExecution> processedSteps, int depth)
    {
        ArgumentNullException.ThrowIfNull(Execution?.StepExecutions);

        // If the step was already handled, return.
        // This way we do not loop indefinitely in case of circular dependencies.
        if (processedSteps.Any(s => s.StepId == step.StepId))
        {
            return processedSteps;
        }

        if (depth++ > FilterDepthBackwards && FilterDepthBackwards > 0)
        {
            depth--;
            return processedSteps;
        }

        processedSteps.Add(step);

        // Get dependency steps.
        List<StepExecution> dependencySteps = Execution.StepExecutions.Where(s => step.ExecutionDependencies.Any(d => s.StepId == d.DependantOnStepId)).ToList();

        // Loop through the dependencies and handle them recursively.
        foreach (var depencyStep in dependencySteps)
        {
            RecurseDependenciesBackward(depencyStep, processedSteps, depth);
        }

        depth--;

        return processedSteps;
    }

    private List<StepExecution> RecurseDependenciesForward(StepExecution step, List<StepExecution> processedSteps, int depth)
    {
        ArgumentNullException.ThrowIfNull(Execution?.StepExecutions);
        if (processedSteps.Any(s => s.StepId == step.StepId))
        {
            return processedSteps;
        }

        if (depth++ > FilterDepthForwards && FilterDepthForwards > 0)
        {
            depth--;
            return processedSteps;
        }

        processedSteps.Add(step);

        List<StepExecution> dependencySteps = Execution.StepExecutions.Where(s => s.ExecutionDependencies.Any(d => d.DependantOnStepId == step.StepId)).ToList();

        foreach (var depencyStep in dependencySteps)
        {
            RecurseDependenciesForward(depencyStep, processedSteps, depth);
        }

        depth--;

        return processedSteps;
    }

    private async Task ShowStepExecutionOffcanvas(StepExecution step)
    {
        var attempt = step?.StepExecutionAttempts.OrderByDescending(s => s.StartedOn).First();
        if (attempt is null)
        {
            return;
        }
        StateHasChanged();
        await stepExecutionDetailsOffcanvas.LetAsync(x => x.ShowAsync(attempt));
    }

    private Task<AutosuggestDataProviderResult<StepExecution>> ProvideSuggestions(AutosuggestDataProviderRequest request)
    {
        ArgumentNullException.ThrowIfNull(Execution);
        var filtered = Execution.StepExecutions.Where(s => s.StepName?.ContainsIgnoreCase(request.UserInput) ?? false);
        return Task.FromResult(new AutosuggestDataProviderResult<StepExecution>
            {
                Data = filtered
            });
    }

    private static string TextSelector(StepExecution step) => step.StepName ?? "";
}
