@using System.Globalization;

@inject ToasterService Toaster
@inject IExecutorService ExecutorService
@inject IHxMessageBoxService Confirmer

<div class="row mx-1 my-2">

    <HxDropdownButtonGroup>
        <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto position-absolute border-0">
            <SvgIcon Icon="LucideIcon.SortDesc" />
            Sort by: <span class="fw-normal">@SortMode</span>
        </HxDropdownToggleButton>
        <HxDropdownMenu>
            <HxDropdownItem CssClass="@(SortMode == ExecutionSortMode.CreatedDesc ? "active" : null)" OnClick="() => SetSortMode(ExecutionSortMode.CreatedDesc)">
                Created<sup>desc</sup>
            </HxDropdownItem>
            <HxDropdownItem CssClass="@(SortMode == ExecutionSortMode.StartedAsc ? "active" : null)" OnClick="() => SetSortMode(ExecutionSortMode.StartedAsc)">
                Started<sup>asc</sup>
            </HxDropdownItem>
            <HxDropdownItem CssClass="@(SortMode == ExecutionSortMode.StartedDesc ? "active" : null)" OnClick="() => SetSortMode(ExecutionSortMode.StartedDesc)">
                Started<sup>desc</sup>
            </HxDropdownItem>
            <HxDropdownItem CssClass="@(SortMode == ExecutionSortMode.EndedAsc ? "active" : null)" OnClick="() => SetSortMode(ExecutionSortMode.EndedAsc)">
                Ended<sup>asc</sup>
            </HxDropdownItem>
            <HxDropdownItem CssClass="@(SortMode == ExecutionSortMode.EndedDesc ? "active" : null)" OnClick="() => SetSortMode(ExecutionSortMode.EndedDesc)">
                Ended<sup>desc</sup>
            </HxDropdownItem>
            <HxDropdownItem CssClass="@(SortMode == ExecutionSortMode.DurationAsc ? "active" : null)" OnClick="() => SetSortMode(ExecutionSortMode.DurationAsc)">
                Duration<sup>asc</sup>
            </HxDropdownItem>
            <HxDropdownItem CssClass="@(SortMode == ExecutionSortMode.DurationDesc ? "active" : null)" OnClick="() => SetSortMode(ExecutionSortMode.DurationDesc)">
                Duration<sup>desc</sup>
            </HxDropdownItem>
            <HxDropdownItem CssClass="@(SortMode == ExecutionSortMode.JobAsc ? "active" : null)" OnClick="() => SetSortMode(ExecutionSortMode.JobAsc)">
                Job<sup>asc</sup>
            </HxDropdownItem>
            <HxDropdownItem CssClass="@(SortMode == ExecutionSortMode.JobDesc ? "active" : null)" OnClick="() => SetSortMode(ExecutionSortMode.JobDesc)">
                Job<sup>desc</sup>
            </HxDropdownItem>
        </HxDropdownMenu>
    </HxDropdownButtonGroup>

    <div class="col">
        <div class="row" style="height: 40px;">
            <div class="col-xl-3 col-lg-4 col-5 py-1 d-flex align-items-center justify-content-end">
            </div>
            <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center" style="position: relative;">
                @for (int i = 0; i <= Columns; i++)
                {
                    var percentage = i * 100.0 / Columns;
                    @*With screen sizes < xl only show every other line*@
                    <div class="@(i % 2 != 0 ? "d-none d-xl-flex" : "d-flex") align-items-center text-body-secondary"
                     style="height: 100%; border-left: 1px dashed var(--bs-border-color); position: absolute; left: @(percentage.ToString("F10", CultureInfo.InvariantCulture))%;">
                        @if (i < Columns)
                        {
                            <small>@GetDateFromPercentage(percentage)<br />@GetTimeFromPercentage(percentage)</small>
                        }
                    </div>
                }
            </div>
        </div>
        @if (Executions is not null)
        {
            var executions = Executions
                .Where(e => e.StartedOn is not null)
                .GroupBy(e =>
                {
                    var overlapsWithSelf = Executions
                        .Where(other => other.JobId == e.JobId && other.JobName == e.JobName && e.ExecutionId != other.ExecutionId)
                        .Any(other => e.StartedOn >= other.StartedOn && e.StartedOn <= (other.EndedOn ?? DateTime.Now));
                    return (e.JobId, e.JobName, overlapsWithSelf ? e.ExecutionId : Guid.Empty);
                })
                .OrderBy(g => g.Min(e => e.StartedOn))
                .ToList();
            <Virtualize Context="group" Items="executions" ItemSize="32.5714f">
                <div class="row border-top gantt-row">
                    <div class="col-xl-3 col-lg-4 col-5 text-end py-1">
                        <small>
                            @group.Key.JobName
                        </small>
                    </div>
                    <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center" style="position: relative;">
                        @for (var i = 0; i <= Columns; i++)
                        {
                            var percentage = i * 100.0 / Columns;
                            <div class="d-flex align-items-center" style="height: 100%; border-left: 1px dashed var(--bs-border-color); position: absolute; left: @(percentage.ToString("F10", CultureInfo.InvariantCulture))%;"></div>
                        }
                        @foreach (var execution in group)
                        {
                            var (offset, width) = (execution.StartedOn, execution.EndedOn)
                                .GetGanttGraphDimensions(Executions.Select(e => (e.StartedOn, e.EndedOn)));
                            <ContextMenuToggle AlsoOverrideOnClick
                                               CssClass="@($"progress hover cursor-pointer {execution.ExecutionStatus.ToString().ToLower()}")"
                                               style="@($"position: absolute; width: {width.ToString("F10", CultureInfo.InvariantCulture)}%; left: {offset.ToString("F10", CultureInfo.InvariantCulture)}%;")"
                                               title="@($"{execution.ExecutionStatus}, {execution.ExecutionInSeconds?.SecondsToReadableFormat()}")">
                                <ChildContent>
                                    <div class="progress-bar" style="width: 100%;"></div>
                                </ChildContent>
                                <MenuContent>
                                    <DropdownMenuHeader>
                                        @execution.JobName
                                    </DropdownMenuHeader>
                                    <DropdownMenuLink href="@($"executions/{execution.ExecutionId}/list")">
                                        <SvgIcon Icon="LucideIcon.MoveRight" />
                                        Go to details
                                    </DropdownMenuLink>
                                    <DropdownMenuItem @onclick="async () => await _jobHistoryOffcanvas.LetAsync(x => x.ShowAsync(execution.JobId))">
                                        <SvgIcon Icon="LucideIcon.Activity" />
                                        History
                                    </DropdownMenuItem>
                                    @if (execution.ExecutionStatus == ExecutionStatus.Running)
                                    {
                                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                            <DropdownMenuItem @onclick="() => StopExecutionAsync(execution)">
                                                <SvgIcon Icon="LucideIcon.OctagonX" />
                                                Stop...
                                            </DropdownMenuItem>
                                        </AuthorizeView>
                                    }
                                </MenuContent>
                            </ContextMenuToggle>
                        }
                    </div>
                </div>
            </Virtualize>
        }
    </div>
</div>

<JobHistoryOffcanvas @ref="_jobHistoryOffcanvas" />

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter] public IEnumerable<ExecutionProjection>? Executions { get; set; }

    [Parameter] public ExecutionSortMode SortMode { get; set; }

    [Parameter] public EventCallback<ExecutionSortMode> OnSortingChanged { get; set; }

    private const int Columns = 12;

    private JobHistoryOffcanvas? _jobHistoryOffcanvas;

    private void SetSortMode(ExecutionSortMode sort)
    {
        OnSortingChanged.InvokeAsync(sort);
    }

    private DateTime MinTime => Executions?.Any() ?? false ? Executions.Min(e => e.StartedOn?.LocalDateTime) ?? DateTime.Now : DateTime.Now;
    private DateTime MaxTime => Executions?.Any() ?? false ? Executions.Max(e => e.EndedOn?.LocalDateTime ?? DateTime.Now) : DateTime.Now;
    private long MinTicks => MinTime.Ticks;
    private long MaxTicks => MaxTime.Ticks;

    private string GetTimeFromPercentage(double percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("T");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100;
        var time = new DateTime(Convert.ToInt64(ticks));
        return time.ToString("T");
    }

    private string GetDateFromPercentage(double percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("d");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100;
        var time = new DateTime(Convert.ToInt64(ticks));
        return time.ToString("d");
    }

    private async Task StopExecutionAsync(ExecutionProjection execution)
    {
        if (!await Confirmer.ConfirmAsync("Stop execution", $"Are you sure you want to stop this execution of job {execution.JobName}"))
        {
            return;
        }

        try
        {
            ArgumentNullException.ThrowIfNull(AuthenticationState);
            var authState = await AuthenticationState;
            var username = authState.User.Identity?.Name;
            ArgumentNullException.ThrowIfNull(username);
            await ExecutorService.StopExecutionAsync(execution.ExecutionId, username);
            Toaster.AddSuccess("Cancellations requested successfully");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error stopping execution", ex.Message);
        }
    }
}
