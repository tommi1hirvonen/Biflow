@using System.Globalization;
@inject NavigationManager NavigationManager

<div class="row mx-1 my-2">
    <div class="col">
        <div class="row" style="height: 40px;">
            <div class="col-xl-3 col-lg-4 col-5 py-1 d-flex align-items-center justify-content-end">
            </div>
            <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center" style="position: relative;">
                @for (int i = 0; i <= Columns; i++)
                {
                    var percentage = i * 100.0 / Columns;
                    @*With screen sizes < xl only show every other line*@
                    <div class="@(i % 2 != 0 ? "d-none d-xl-flex" : "d-flex") align-items-center text-body-secondary"
                     style="height: 100%; border-left: 1px dashed var(--bs-border-color); position: absolute; left: @(percentage.ToString("F10", CultureInfo.InvariantCulture))%;">
                        @if (i < Columns)
                        {
                            <small>@GetDateFromPercentage(percentage)<br />@GetTimeFromPercentage(percentage)</small>
                        }
                    </div>
                }
            </div>
        </div>
        @if (Executions is not null)
        {
            var executions = Executions
                .Where(e => e.StartedOn is not null)
                .GroupBy(e =>
                {
                    var overlapsWithSelf = Executions
                        .Where(other => other.JobId == e.JobId && other.JobName == e.JobName && e.ExecutionId != other.ExecutionId)
                        .Any(other => e.StartedOn >= other.StartedOn && e.StartedOn <= (other.EndedOn ?? DateTime.Now));
                    return (e.JobId, e.JobName, overlapsWithSelf ? e.ExecutionId : Guid.Empty);
                })
                .OrderBy(g => g.Min(e => e.StartedOn))
                .ToList();
            <Virtualize Context="group" Items="executions" ItemSize="32.5714f">
                <div class="row border-top">
                    <div class="col-xl-3 col-lg-4 col-5 text-end py-1">
                        <small>
                            @group.Key.JobName
                        </small>
                    </div>
                    <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center" style="position: relative;">
                        @for (int i = 0; i <= Columns; i++)
                        {
                            var percentage = i * 100.0 / Columns;
                            <div class="d-flex align-items-center" style="height: 100%; border-left: 1px dashed var(--bs-border-color); position: absolute; left: @(percentage.ToString("F10", CultureInfo.InvariantCulture))%;"></div>
                        }
                        @foreach (var execution in group)
                        {
                            (var offset, var width) = (execution.StartedOn, execution.EndedOn)
                                .GetGanttGraphDimensions(Executions.Select(e => (e.StartedOn, e.EndedOn)));
                            <div class="progress hover @execution.ExecutionStatus.ToString().ToLower()"
                                 style="cursor: pointer; position: absolute; width: @($"{width.ToString("F10", CultureInfo.InvariantCulture)}%"); left: @($"{offset.ToString("F10", CultureInfo.InvariantCulture)}%");"
                                 title="@($"{execution.ExecutionStatus}, {execution.ExecutionInSeconds?.SecondsToReadableFormat()}")"
                                 @onclick="() => GoToExecutionDetails(execution.ExecutionId)">
                                <div class="progress-bar" style="width: 100%;"></div>
                            </div>
                        }
                    </div>
                </div>
            </Virtualize>
        }
    </div>
</div>

@code {
    [Parameter] public IEnumerable<ExecutionProjection>? Executions { get; set; }

    private const int Columns = 12;

    private DateTime MinTime => Executions?.Any() ?? false ? Executions.Min(e => e.StartedOn?.LocalDateTime) ?? DateTime.Now : DateTime.Now;
    private DateTime MaxTime => Executions?.Any() ?? false ? Executions.Max(e => e.EndedOn?.LocalDateTime ?? DateTime.Now) : DateTime.Now;
    private long MinTicks => MinTime.Ticks;
    private long MaxTicks => MaxTime.Ticks;

    private string GetTimeFromPercentage(double percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("T");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100;
        var time = new DateTime(Convert.ToInt64(ticks));
        return time.ToString("T");
    }

    private string GetDateFromPercentage(double percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("d");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100;
        var time = new DateTime(Convert.ToInt64(ticks));
        return time.ToString("d");
    }

    private void GoToExecutionDetails(Guid executionId)
    {
        NavigationManager.NavigateTo($"executions/{executionId}/list");
    }
}
