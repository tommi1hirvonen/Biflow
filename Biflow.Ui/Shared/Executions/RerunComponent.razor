@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject IHxMessengerService Messenger
@inject IHttpContextAccessor HttpContextAccessor
@inject DbHelperService DbHelperService

@if (Loading)
{
    <div class="row py-3">
        <div class="col text-center">
            <HxSpinner Color="ThemeColor.Secondary" />
        </div>
    </div>
    return;
}
else if (Job is null || Steps is null)
{
    <div class="row py-3">
        <div class="col text-center">
            The job and its steps could not be found.
        </div>
    </div>
    return;
}

<div class="row">
    <div class="row">
        <div class="col">
            <CxIcon Icon="FeatherIcon.Tag" />
            <span class="me-3">Tags</span>
            @if (!Tags.Any())
            {
                <small class="text-secondary me-2">No tags</small>
            }
            @foreach (var tag in Tags)
            {
                <TagComponent Tag="tag"
                          Selected="TagFilter.Contains(tag)"
                          CssClass="mx-1"
                          Style="cursor: pointer;"
                          OnClick="() => { if (TagFilter.Contains(tag)) TagFilter.Remove(tag); else TagFilter.Add(tag); }" />
            }
        </div>
    </div>
    <div class="row mt-3">
        <div class="col">
            <div class="row">
                <div class="col input-group input-group-sm">
                    <div class="input-group-text">
                        <CxIcon Icon="FeatherIcon.Filter" />
                    </div>
                    <input type="search" class="form-control" @bind-value="StepNameFilter" @bind-value:event="oninput"
                           placeholder="Filter by name" autocomplete="off" />
                </div>
                <div class="col-auto">
                    <HxButtonGroup>
                        <FilterDropdown TItem="StepType"
                                        FilterSet="StepTypeFilter"
                                        Items="Steps.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                                        OnChange="StateHasChanged">
                            <TitleTemplate>
                                <CxIcon Icon="FeatherIcon.Tool" />
                                Step type
                            </TitleTemplate>
                            <ItemTemplate Context="item">
                                <StepTypeIconComponent StepType_="item" />
                                @item.ToString()
                            </ItemTemplate>
                        </FilterDropdown>
                        <FilterDropdown TItem="StepExecutionStatus"
                                        FilterSet="StatusFilter"
                                        Items="Statuses"
                                        OnChange="StateHasChanged">
                            <TitleTemplate>
                                <CxIcon Icon="FeatherIcon.Info" />
                                Status
                            </TitleTemplate>
                            <ItemTemplate Context="item">
                                <StepExecutionStatusBadgeComponent ExecutionStatus="item" />
                            </ItemTemplate>
                        </FilterDropdown>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                  @onclick="() => { TagFilter.Clear(); StepTypeFilter.Clear(); StatusFilter.Clear(); StepNameFilter = string.Empty; }">
                            <CxIcon Icon="FeatherIcon.X" />
                            Clear
                        </HxButton>
                    </HxButtonGroup>
                </div>
            </div>
        </div>
        <div class="col">
            <HxButtonToolbar>
                <HxButtonGroup>
                    @*Add all available AND enabled steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                @onclick="() => StepsToExecute.AddRange(StepsAvailableToExecute.Where(step => step.IsEnabled))">
                        <CxIcon Icon="FeatherIcon.ChevronRight" />
                        Select enabled
                    </HxButton>
                    @*Add all available steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                @onclick="() => StepsToExecute.AddRange(StepsAvailableToExecute)">
                        <CxIcon Icon="FeatherIcon.ChevronsRight" />
                        Select all
                    </HxButton>
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="() => StepsToExecute.Clear()">
                        <CxIcon Icon="FeatherIcon.ChevronsLeft" />
                        Deselect all
                    </HxButton>
                </HxButtonGroup>

                <HxDropdownButtonGroup AutoClose="DropdownAutoClose.Outside" CssClass="ms-auto">
                        <HxDropdownToggleButton Color="ThemeColor.Secondary" Size="ButtonSize.Small">
                            <CxIcon Icon="FeatherIcon.Bell" />
                            Notifications
                        </HxDropdownToggleButton>
                        <HxDropdownContent>
                            <div class="row p-3" style="min-width: 20rem;">
                                <div class="col">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="execute_notify"
                                               checked=@Notify
                                               @bind-value="Notify">
                                        <label class="form-check-label" for="execute_notify">Notify based on subscriptions</label>
                                    </div>
                                    <h6 class="mt-3">Notify me</h6>
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" id="radio_notify_me_none"
                                               checked=@(NotifyMe is null)
                                               @onchange="() => NotifyMe = null">
                                        <label class="form-check-label" for="radio_notify_me_none">None</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" id="radio_notify_me_completion"
                                               checked=@(NotifyMe == SubscriptionType.OnCompletion)
                                               @onchange="() => NotifyMe = SubscriptionType.OnCompletion">
                                        <label class="form-check-label" for="radio_notify_me_completion">On completion</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" id="radio_notify_me_failure"
                                               checked=@(NotifyMe == SubscriptionType.OnFailure)
                                               @onchange="() => NotifyMe = SubscriptionType.OnFailure">
                                        <label class="form-check-label" for="radio_notify_me_failure">On failure</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" id="radio_notify_me_success"
                                               checked=@(NotifyMe == SubscriptionType.OnSuccess)
                                               @onchange="() => NotifyMe = SubscriptionType.OnSuccess">
                                        <label class="form-check-label" for="radio_notify_me_success">On success</label>
                                    </div>
                                    <div class="form-check mt-3">
                                        <input type="checkbox" class="form-check-input" id="execute_notify_me_overtime"
                                               checked=@NotifyMeOvertime
                                               @bind-value="NotifyMeOvertime">
                                        <label class="form-check-label" for="execute_notify_me_overtime">On overtime</label>
                                    </div>
                                </div>
                            </div>
                        </HxDropdownContent>
                    </HxDropdownButtonGroup>

                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Primary" CssClass="ms-3" @onclick="Execute">
                    <CxIcon Icon="FeatherIcon.Play" />
                    Execute
                </HxButton>
            </HxButtonToolbar>
        </div>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <h6>Available steps</h6>
        <div style="overflow-y: scroll; height: calc(100vh - 360px);">
            <table class="table table-hover table-sm">
                <tbody>
                    @foreach (var step in StepsAvailableToExecute)
                    {
                        var status = GetStepExecutionStatus(step);
                        <tr style="cursor: pointer;" @onclick="() => { if (!StepsToExecute.Any(s => s.StepId == step.StepId)) StepsToExecute.Add(step); }">
                            <td class="@(step.IsEnabled ? null : "text-secondary") align-middle">
                                <StepTypeIconComponent StepType_="@step.StepType" />
                                &nbsp;
                                <HighlightableText Text="@step.StepName" PartToHighlight="@StepNameFilter" />
                            </td>
                            <td>
                                <StepExecutionStatusBadgeComponent ExecutionStatus="status" />
                            </td>
                            <td class="text-end"
                            style="@(Job.UseDependencyMode == true ? "color: #ccc;" : null)">
                                @step.ExecutionPhase
                                &nbsp;
                                <CxIcon Icon="FeatherIcon.Layers" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="col">
        <h6>Selected steps</h6>
        <div style="overflow-y: scroll; height: calc(100vh - 360px);">
            <table class="table table-hover table-sm">
                <tbody>
                    @{
                        if (Job.UseDependencyMode == true)
                        {
                            var comparer = new TopologicalStepComparer(StepsToExecute);
                            StepsToExecute.Sort(comparer);
                        }
                        else
                        {
                            StepsToExecute.Sort();
                        }
                    }
                    @foreach (var step in StepsToExecute)
                    {
                        <tr style="cursor: pointer;" @onclick="() => StepsToExecute.Remove(step)">
                            <td class="@(step.IsEnabled ? null : "text-secondary")">
                                <StepTypeIconComponent StepType_="@step.StepType" />
                                &nbsp;
                                @step.StepName
                            </td>
                            <td class="text-end"
                            style="@(Job.UseDependencyMode == true ? "color: #ccc;" : null)">
                                @step.ExecutionPhase
                                &nbsp;
                                <CxIcon Icon="FeatherIcon.Layers" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

</div>

@code {
    [Parameter] public Execution? Execution { get; set; }

    private Job? Job { get; set; }

    private List<Step>? Steps { get; set; }

    private List<Step> StepsToExecute { get; set; } = new();

    private string StepNameFilter { get; set; } = string.Empty;

    private HashSet<Tag> TagFilter { get; set; } = new();

    private HashSet<StepType> StepTypeFilter { get; } = new();

    private HashSet<StepExecutionStatus> StatusFilter { get; } = new();

    private bool Loading { get; set; } = true;

    private bool Notify { get; set; } = false;
    
    private SubscriptionType? NotifyMe { get; set; } = null;
    
    private bool NotifyMeOvertime { get; set; } = false;

    private IEnumerable<StepExecutionStatus> Statuses => Execution?.StepExecutions
        .Select(e => e.StepExecutionAttempts)
        .Select(e => e.MaxBy(a => a.RetryAttemptIndex))
        .Where(e => e is not null)
        .Select(e => e!.ExecutionStatus)
        .Distinct()
        .Order() ?? Enumerable.Empty<StepExecutionStatus>();

    private IEnumerable<Tag> Tags => Steps?
        .SelectMany(step => step.Tags)
        .Select(tag => tag with { Steps = null! })
        .Distinct()
        .OrderBy(t => t.TagName) ?? Enumerable.Empty<Tag>();

    private IEnumerable<Step> StepsAvailableToExecute => Steps?
        .Where(step => !StepsToExecute.Any(e => e.StepId == step.StepId)) // Not yet added to list of steps to execute
        .Where(step => step.StepName?.ContainsIgnoreCase(StepNameFilter) == true) // Step name filter
        .Where(step => !StepTypeFilter.Any() || StepTypeFilter.Contains(step.StepType)) // Filter based on step type
        .Where(step => TagFilter.All(tag => step.Tags.Any(t => t.TagName == tag.TagName))) // Tag filter
        .Where(step =>
        {
            if (!StatusFilter.Any()) return true;
            var status = GetStepExecutionStatus(step);
            return status is not null ? StatusFilter.Contains((StepExecutionStatus)status) : false;
        }) // Status filter
        ?? Enumerable.Empty<Step>();

    protected override async Task OnParametersSetAsync()
    {
        if (Execution is null || Job is not null || Steps is not null)
        {
            return;
        }

        var stepIds = Execution.StepExecutions.Select(e => e.StepId);
        using var context = await DbContextFactory.CreateDbContextAsync();
        Job = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .FirstOrDefaultAsync(j => j.JobId == Execution.JobId);
        Steps = await context.Steps
            .AsNoTrackingWithIdentityResolution()
            .Where(s => s.JobId == Execution.JobId)
            .Where(s => stepIds.Contains(s.StepId))
            .Include(s => s.Tags)
            .Include(s => s.Dependencies)
            .ToListAsync();
        Loading = false;
    }

    private StepExecutionStatus? GetStepExecutionStatus(Step step)
    {
        var stepExecution = Execution?.StepExecutions.FirstOrDefault(e => e.StepId == step.StepId);
        var attempt = stepExecution?.StepExecutionAttempts.MaxBy(a => a.RetryAttemptIndex);
        return attempt?.ExecutionStatus;
    }

    private async Task Execute()
    {
        if (StepsToExecute.Count == 0)
        {
            return;
        }

        string user = HttpContextAccessor.HttpContext?.User?.Identity?.Name ?? throw new ArgumentNullException(nameof(user), "User was null");
        try
        {
            var stepIds = StepsToExecute.Select(step => step.StepId.ToString()).ToList();
            await DbHelperService.StartExecutionAsync(
                job: Job ?? throw new ArgumentNullException(nameof(Job), "Job was null"),
                username: user,
                stepIds: stepIds,
                notify: Notify,
                notifyMe: NotifyMe,
                notifyMeOvertime: NotifyMeOvertime);
            Messenger.AddInformation("Execution started successfully");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error starting execution", ex.Message);
        }
    }
}
