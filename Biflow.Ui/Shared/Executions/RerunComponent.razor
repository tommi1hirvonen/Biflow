@using System.Linq.Expressions;
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IHxMessengerService Messenger
@inject IHttpContextAccessor HttpContextAccessor
@inject IExecutionBuilderFactory<AppDbContext> BuilderFactory
@inject IExecutorService Executor

@if (lastStartedExecutionId is not null)
{
    <div class="alert alert-success show alert-dismissible col-xl-6" role="alert">
        <CxIcon Icon="FeatherIcon.CheckCircle" />
        Execution started successfully – <a href="executions/@lastStartedExecutionId/list" class="alert-link">view execution</a>
        <button type="button" class="btn-close" @onclick="() => lastStartedExecutionId = null"></button>
    </div>
}

@if (loading)
{
    <div class="row py-3">
        <div class="col text-center">
            <HxSpinner Color="ThemeColor.Secondary" />
        </div>
    </div>
    return;
}
else if (builder is null)
{
    <div class="row py-3">
        <div class="col text-center">
            The job and its steps could not be found.
        </div>
    </div>
    return;
}

<div class="row">
    <div class="col">
        <div class="row">
            <div class="col-auto mt-3">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <CxIcon Icon="FeatherIcon.Filter" />
                    </div>
                    <input type="search" class="form-control" @bind-value="stepNameFilter" @bind-value:event="oninput"
                            placeholder="Filter by name" autocomplete="off" style="min-width: 15rem; max-width: 15rem;" />
                </div>
            </div>
            <div class="col-auto mt-3">
                <HxButtonGroup>
                    <FilterDropdown TItem="StepType"
                                    FilterSet="stepTypeFilter"
                                    Items="builder?.Steps.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                                    OnChange="StateHasChanged">
                        <TitleTemplate>
                            <CxIcon Icon="FeatherIcon.Tool" />
                            Step type
                        </TitleTemplate>
                        <ItemTemplate Context="item">
                            <StepTypeIconComponent StepType="item" />
                            @item.ToString()
                        </ItemTemplate>
                    </FilterDropdown>
                    <FilterDropdown TItem="ITag"
                                    FilterSet="tagFilter"
                                    Items="Tags"
                                    IdSelector="tag => tag.TagId.ToString()"
                                    TextSelector="tag => tag.TagName"
                                    IsSearchable
                                    OnChange="StateHasChanged">
                            <TitleTemplate>
                                <CxIcon Icon="FeatherIcon.Tag" />
                                Tags
                            </TitleTemplate>
                            <ItemTemplate Context="item">
                                <TagComponent Tag="item" />
                            </ItemTemplate>
                        </FilterDropdown>
                    <FilterDropdown TItem="StepExecutionStatus"
                                    FilterSet="statusFilter"
                                    Items="Statuses"
                                    OnChange="StateHasChanged">
                        <TitleTemplate>
                            <CxIcon Icon="FeatherIcon.Info" />
                            Status
                        </TitleTemplate>
                        <ItemTemplate Context="item">
                            <StepExecutionStatusBadgeComponent ExecutionStatus="item" />
                        </ItemTemplate>
                    </FilterDropdown>
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                @onclick="() => { tagFilter.Clear(); stepTypeFilter.Clear(); statusFilter.Clear(); stepNameFilter = string.Empty; }">
                        <CxIcon Icon="FeatherIcon.X" />
                        Clear
                    </HxButton>
                </HxButtonGroup>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="row justify-content-xxl-between justify-content-end">
            <div class="col-auto mt-3">
                <HxButtonGroup>
                    @*Add all available AND enabled steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                @onclick="() => builder.AddAll(s => s.IsEnabled && StepsAvailableToExecute.Any(available => s.StepId == available.StepId))">
                        <CxIcon Icon="FeatherIcon.ChevronRight" />
                        Select enabled
                    </HxButton>
                    @*Add all available steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                @onclick="() => builder.AddAll(step => StepsAvailableToExecute.Any(available => step.StepId == available.StepId))">
                        <CxIcon Icon="FeatherIcon.ChevronsRight" />
                        Select all
                    </HxButton>
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="() => builder?.Clear()">
                        <CxIcon Icon="FeatherIcon.ChevronsLeft" />
                        Deselect all
                    </HxButton>
                </HxButtonGroup>
            </div>
                <div class="col-auto ms-auto mt-3">
                    <HxDropdownButtonGroup AutoClose="DropdownAutoClose.Outside" CssClass="ms-auto">
                        <HxDropdownToggleButton Color="ThemeColor.Secondary" Size="ButtonSize.Small" Enabled="builder is not null">
                            <CxIcon Icon="FeatherIcon.Bell" />
                            Notifications
                        </HxDropdownToggleButton>
                        <HxDropdownContent>
                            @if (builder is not null)
                        {
                            <div class="row p-3" style="min-width: 20rem;">
                                <div class="col">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="execute_notify"
                                                checked=@builder.Notify
                                                @bind-value="builder.Notify">
                                        <label class="form-check-label" for="execute_notify">Notify based on subscriptions</label>
                                    </div>
                                    <h6 class="mt-3">Notify me</h6>
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" id="radio_notify_me_none"
                                                checked=@(builder.NotifyCaller is null)
                                                @onchange="() => builder.NotifyCaller = null">
                                        <label class="form-check-label" for="radio_notify_me_none">None</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" id="radio_notify_me_completion"
                                                checked=@(builder.NotifyCaller == AlertType.OnCompletion)
                                                @onchange="() => builder.NotifyCaller = AlertType.OnCompletion">
                                        <label class="form-check-label" for="radio_notify_me_completion">On completion</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" id="radio_notify_me_failure"
                                                checked=@(builder.NotifyCaller == AlertType.OnFailure)
                                                @onchange="() => builder.NotifyCaller = AlertType.OnFailure">
                                        <label class="form-check-label" for="radio_notify_me_failure">On failure</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="radio" class="form-check-input" id="radio_notify_me_success"
                                                checked=@(builder.NotifyCaller == AlertType.OnSuccess)
                                                @onchange="() => builder.NotifyCaller = AlertType.OnSuccess">
                                        <label class="form-check-label" for="radio_notify_me_success">On success</label>
                                    </div>
                                    <div class="form-check mt-3">
                                        <input type="checkbox" class="form-check-input" id="execute_notify_me_overtime"
                                                checked=@builder.NotifyCallerOvertime
                                                @bind-value="builder.NotifyCallerOvertime">
                                        <label class="form-check-label" for="execute_notify_me_overtime">On overtime</label>
                                    </div>
                                </div>
                            </div>
                        }
                    </HxDropdownContent>
                </HxDropdownButtonGroup>
            </div>
            <div class="col-auto ms-auto mt-3">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Primary" @onclick="Execute"
                            Enabled="(builder?.StepExecutions.Any() ?? false) && !startingExecution" Spinner="startingExecution">
                    <CxIcon Icon="FeatherIcon.Play" />
                    Execute
                </HxButton>
            </div>
        </div>
    </div>
</div>

<div class="card shadow-sm mt-3 pt-1 mb-4">
    <div class="row g-0">
        <div class="col">
            <h6 class="mx-2">Available steps</h6>
            <div style="overflow-y: scroll; height: calc(100vh - 300px);">
                <table class="table table-hover table-sm">
                    <tbody>
                        @foreach (var step in StepsAvailableToExecute)
                        {
                            var status = GetStepExecutionStatus(step.StepId);
                            <tr style="cursor: pointer;" @onclick="() => step.AddToExecution()">
                                <td class="@(step.IsEnabled ? null : "text-secondary") align-middle">
                                    <StepTypeIconComponent StepType="@step.StepType" />
                                    &nbsp;
                                    <HighlightableText Text="@step.StepName" PartToHighlight="@stepNameFilter" />
                                </td>
                                <td>
                                    <StepExecutionStatusBadgeComponent ExecutionStatus="status" />
                                </td>
                                <td class="@(builder?.DependencyMode == true ? "text-body-tertiary" : null)">
                                    <CxIcon Icon="FeatherIcon.Layers" />
                                    <sup>@step.ExecutionPhase</sup>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="col">
            <h6 class="mx-2">Selected steps</h6>
            <div style="overflow-y: scroll; height: calc(100vh - 300px);">
                <table class="table table-hover table-sm">
                    <tbody>
                        @foreach (var step in builder?.StepExecutions ?? Enumerable.Empty<ExecutionBuilderStepExecution>())
                        {
                            <tr style="cursor: pointer;" @onclick="() => step.RemoveFromExecution()">
                                <td>
                                    <StepTypeIconComponent StepType="@step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                                <td class="@(builder?.DependencyMode == true ? "text-body-tertiary" : null)">
                                    <CxIcon Icon="FeatherIcon.Layers" />
                                    <sup>@step.ExecutionPhase</sup>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Execution? Execution { get; set; }

    private readonly HashSet<StepType> stepTypeFilter = new();
    private readonly HashSet<StepExecutionStatus> statusFilter = new();

    private ExecutionBuilder? builder;
    private string stepNameFilter = string.Empty;
    private HashSet<ITag> tagFilter = new();
    private bool loading = true;
    private bool startingExecution = false;
    private Guid? lastStartedExecutionId;

    private IEnumerable<StepExecutionStatus> Statuses => Execution?.StepExecutions
        .Select(e => e.StepExecutionAttempts)
        .Select(e => e.MaxBy(a => a.RetryAttemptIndex))
        .Where(e => e is not null)
        .Select(e => e!.ExecutionStatus)
        .Distinct()
        .Order() ?? Enumerable.Empty<StepExecutionStatus>();

    private IEnumerable<ITag> Tags => builder?.Steps
        .SelectMany(step => step.Tags)
        .DistinctBy(t => t.TagName)
        .OrderBy(t => t.TagName)
        ?? Enumerable.Empty<ITag>();

    private IEnumerable<ExecutionBuilderStep> StepsAvailableToExecute => builder?.Steps
        .Where(step => step.StepName?.ContainsIgnoreCase(stepNameFilter) == true) // Step name filter
        .Where(step => !stepTypeFilter.Any() || stepTypeFilter.Contains(step.StepType)) // Filter based on step type
        .Where(step => tagFilter.All(tag => step.Tags.Any(t => t.TagName == tag.TagName))) // Tag filter
        .Where(step =>
        {
            if (!statusFilter.Any()) return true;
            var status = GetStepExecutionStatus(step.StepId);
            return status is not null ? statusFilter.Contains((StepExecutionStatus)status) : false;
        }) // Status filter
        ?? Enumerable.Empty<ExecutionBuilderStep>();

    protected override async Task OnParametersSetAsync()
    {
        if (Execution is null || builder is not null)
        {
            return;
        }
        try
        {
            ArgumentNullException.ThrowIfNull(Execution.JobId);
            string user = HttpContextAccessor.HttpContext?.User?.Identity?.Name
                ?? throw new ArgumentNullException(nameof(user), "User was null");
            var stepIds = Execution.StepExecutions
                .Select(e => e.StepId)
                .ToArray();
            builder = await BuilderFactory.CreateAsync((Guid)Execution.JobId, user, context => step => stepIds.Contains(step.StepId));
        }
        catch (Exception ex)
        {
            Messenger.AddError(ex.Message);
        }
        loading = false;
    }

    private StepExecutionStatus? GetStepExecutionStatus(Guid stepId)
    {
        var stepExecution = Execution?.StepExecutions.FirstOrDefault(e => e.StepId == stepId);
        var attempt = stepExecution?.StepExecutionAttempts.MaxBy(a => a.RetryAttemptIndex);
        return attempt?.ExecutionStatus;
    }

    private async Task Execute()
    {
        startingExecution = true;
        StateHasChanged();
        try
        {
            ArgumentNullException.ThrowIfNull(builder);
            var execution = await builder.SaveExecutionAsync();
            if (execution is not null)
            {
                lastStartedExecutionId = execution.ExecutionId;
                await Executor.StartExecutionAsync(execution.ExecutionId);
            }
            builder.Reset();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error starting execution", ex.Message);
        }
        startingExecution = false;
    }
}
