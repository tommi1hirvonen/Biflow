@{
    var count = Executions?.Count() ?? 0;
    var selectedText = selectedSteps.Count switch
    {
        1 => $"{selectedSteps.Count} selected step",
        > 1 => $"{selectedSteps.Count} selected steps",
        _ => ""
    };
}

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
    @if (selectedSteps.Count > 0)
    {
        var executions = selectedSteps.Select(id => Executions?.FirstOrDefault(e => e.ExecutionId == id.ExecutionId && e.StepId == id.StepId && e.RetryAttemptIndex == id.RetryAttemptIndex));
        var enabled = executions.Any(e => e?.CanBeStopped == true);
        <HoverBox Header="@selectedText">
            <HxButtonGroup Size="ButtonGroupSize.Small">
                <HxButton Size="ButtonSize.Small"
                          Color="ThemeColor.None"
                          CssClass="btn-auto text-danger"
                          Enabled="enabled"
                          OnClick="StopSelectedStepsAsync">
                    <SvgIcon Icon="FeatherIcon.XOctagon" />
                    Stop...
                </HxButton>
                <HxDropdownButtonGroup>
                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                        Mark status as...
                    </HxDropdownToggleButton>
                    <HxDropdownMenu>
                        @foreach (var status in Enum.GetValues<StepExecutionStatus>())
                        {
                            <HxDropdownItem OnClick="() => UpdateExecutionStatusAsync(status)">
                                <StepExecutionStatusBadge ExecutionStatus="status" />
                            </HxDropdownItem>
                        }
                    </HxDropdownMenu>
                </HxDropdownButtonGroup>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" OnClick="selectedSteps.Clear">
                    <SvgIcon Icon="FeatherIcon.X" />
                    Cancel
                </HxButton>
            </HxButtonGroup>
        </HoverBox>
    }
</AuthorizeView>

<table class="table table-sm table-hover">
    <thead>
        <tr>
            @if (ShowDetailed)
            {
                <th>
                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                        <TriStateCheckbox CssClass="me-0"
                                          Checked="@(selectedSteps.Count > 0 && count > 0)"
                                          Indeterminate="@(selectedSteps.Any() && selectedSteps.Count != count)"
                                          CheckedChanged="value => ToggleStepsSelected(value)" />
                    </AuthorizeView>
                    @if (!string.IsNullOrEmpty(selectedText))
                    {
                        <div class="text-muted small fw-normal d-inline me-3">@selectedText</div>
                    }
                    <span class="sortable" @onclick="ToggleJobSortMode">
                        Job
                    </span>
                    <span class="ms-2">
                        @if (SortMode == StepExecutionSortMode.JobAsc)
                        {
                            <SvgIcon Icon="FeatherIcon.ArrowUp" />
                        }
                        else if (SortMode == StepExecutionSortMode.JobDesc)
                        {
                            <SvgIcon Icon="FeatherIcon.ArrowDown" />
                        }
                    </span>
                </th>
            }
            <th>
                @if (!ShowDetailed)
                {
                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                        <TriStateCheckbox CssClass="me-0"
                                          Checked="@(selectedSteps.Count > 0 && count > 0)"
                                          Indeterminate="@(selectedSteps.Any() && selectedSteps.Count != count)"
                                          CheckedChanged="value => ToggleStepsSelected(value)" />
                    </AuthorizeView>
                    @if (!string.IsNullOrEmpty(selectedText))
                    {
                        <div class="text-muted small fw-normal d-inline me-3">@selectedText</div>
                    }
                }
                <span class="sortable" @onclick="ToggleStepSortMode">
                    Step
                </span>
                <span class="ms-2">
                    @if (SortMode == StepExecutionSortMode.StepAsc)
                    {
                        <SvgIcon Icon="FeatherIcon.ArrowUp" />
                    }
                    else if (SortMode == StepExecutionSortMode.StepDesc)
                    {
                        <SvgIcon Icon="FeatherIcon.ArrowDown" />
                    }
                </span>
            </th>
            <th>
                Execution phase
            </th>
            <th>
                <span class="sortable" @onclick="ToggleStartedSortMode">
                    Started
                </span>
                <span class="ms-2">
                    @if (SortMode == StepExecutionSortMode.StartedAsc)
                    {
                        <SvgIcon Icon="FeatherIcon.ArrowUp" />
                    }
                    else if (SortMode == StepExecutionSortMode.StartedDesc)
                    {
                        <SvgIcon Icon="FeatherIcon.ArrowDown" />
                    }
                </span>
            </th>
            <th>
                <span class="sortable" @onclick="ToggleEndedSortMode">
                    Ended
                </span>
                <span class="ms-2">
                    @if (SortMode == StepExecutionSortMode.EndedAsc)
                    {
                        <SvgIcon Icon="FeatherIcon.ArrowUp" />
                    }
                    else if (SortMode == StepExecutionSortMode.EndedDesc)
                    {
                        <SvgIcon Icon="FeatherIcon.ArrowDown" />
                    }
                </span>
            </th>
            <th>
                <span class="sortable" @onclick="ToggleDurationSortMode">
                    Duration
                </span>
                <span class="ms-2">
                    @if (SortMode == StepExecutionSortMode.DurationAsc)
                    {
                        <SvgIcon Icon="FeatherIcon.ArrowUp" />
                    }
                    else if (SortMode == StepExecutionSortMode.DurationDesc)
                    {
                        <SvgIcon Icon="FeatherIcon.ArrowDown" />
                    }
                </span>
            </th>
            <th>
                Status
            </th>
        </tr>
    </thead>
    <tbody>
        @if (Executions is null)
        {
            <tr><td colspan="@(ShowDetailed ? 7 : 6)" class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td></tr>
        }
        else if (!Executions.Any())
        {
            <tr><td colspan="@(ShowDetailed ? 7 : 6)">No executions</td></tr>
        }
        else
        {
            foreach (var item in Executions)
            {
                var id = new StepExecutionId(item.ExecutionId, item.StepId, item.RetryAttemptIndex);
                var checkBoxId = $"select_step_{item.StepId}_{item.RetryAttemptIndex}";
                <ContextMenuToggle ContainerHtmlTag="tr"
                                   CssClass="@(selectedStepExecution == item ? "bg-body-tertiary" : null)"
                                   CssClassDelegate="@(open => open ? "bg-body-tertiary" : null)"
                                   style="cursor: pointer;"
                                   @onclick="async () => await ToggleSelectedStepExecutionAsync(item)">
                    <ChildContent>
                        @if (ShowDetailed)
                        {
                            <td>
                                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")" Context="auth">
                                    <div class="form-check form-check-inline me-0">
                                        <input type="checkbox" class="form-check-input" id="@checkBoxId"
                                               checked=@selectedSteps.Contains(id)
                                               @onclick:stopPropagation="true"
                                               @onchange="args => ToggleStepSelected(item)">
                                        <label class="form-check-label" for="@checkBoxId"></label>
                                    </div>
                                </AuthorizeView>
                                @item.JobName
                            </td>
                        }
                        <td>
                            @if (!ShowDetailed)
                            {
                                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")" Context="auth">
                                    <div class="form-check form-check-inline me-0">
                                        <input type="checkbox" class="form-check-input" id="@checkBoxId"
                                               checked=@selectedSteps.Contains(id)
                                               @onclick:stopPropagation="true"
                                               @onchange="args => ToggleStepSelected(item)">
                                        <label class="form-check-label" for="@checkBoxId"></label>
                                    </div>
                                </AuthorizeView>
                            }
                            <StepTypeIcon StepType="item.StepType" />
                            &nbsp;
                            @item.StepName
                        </td>
                        <td class="@(item.ExecutionMode == ExecutionMode.Dependency ? "text-body-tertiary" : "text-body")" style="">
                            <SvgIcon Icon="FeatherIcon.Layers" />
                            <sup>@item.ExecutionPhase</sup>
                        </td>
                        <td>
                            @item.StartedOn?.LocalDateTime
                        </td>
                        <td>
                            @item.EndedOn?.LocalDateTime
                        </td>
                        <td>
                            <text>@item.ExecutionInSeconds?.SecondsToReadableFormat()</text>
                        </td>
                        <td>
                            <StepExecutionStatusBadge ExecutionStatus="@item.StepExecutionStatus" />
                        </td>
                    </ChildContent>
                    <MenuContent>
                        <DropdownMenuHeader>
                            <StepTypeIcon StepType="item.StepType" />
                            @item.StepName
                        </DropdownMenuHeader>
                        <DropdownMenuItem @onclick="async () => await StepExecutionMonitorsOffcanvas.LetAsync(x => x.ShowAsync(item))">
                            <SvgIcon Icon="LucideIcon.Monitor" />
                            Monitors
                        </DropdownMenuItem>
                        <DropdownMenuItem @onclick="async () => await stepHistoryOffcanvas.LetAsync(x => x.ShowAsync(item.StepId))">
                            <SvgIcon Icon="LucideIcon.History" />
                            History
                        </DropdownMenuItem>
                        <DropdownMenuItem @onclick="@(() => NavigationManager.NavigateTo($"executions/{item.ExecutionId}/graph/{item.StepId}"))">
                            <SvgIcon Icon="LucideIcon.Workflow" />
                            Dependencies
                        </DropdownMenuItem>
                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                            @if (item.CanBeStopped)
                            {
                                <DropdownMenuItem @onclick="async () => await StopStepExecutionAsync(item.ExecutionId, item.StepId, item.StepName)">
                                    <SvgIcon Icon="FeatherIcon.XOctagon" />
                                    Stop...
                                </DropdownMenuItem>
                            }
                        </AuthorizeView>
                    </MenuContent>
                </ContextMenuToggle>
                @if (selectedStepExecution == item)
                {
                    if (detailStep is null)
                    {
                        <tr>
                            <td colspan="7" class="text-center">
                                <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr class="table-borderless no-hover bg-body-tertiary">
                            <td colspan="7" class="px-3">
                                <HxButtonGroup CssClass="mb-3 mt-1 ms-2">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto border-1" @onclick="() => ToggleSelectedStepExecutionAsync(selectedStepExecution)">
                                        <SvgIcon Icon="FeatherIcon.X" />
                                        Close
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto border-1" @onclick="async () => await StepExecutionMonitorsOffcanvas.LetAsync(x => x.ShowAsync(item))">
                                        <SvgIcon Icon="LucideIcon.Monitor" />
                                        Monitors
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto border-1" @onclick="async () => await stepHistoryOffcanvas.LetAsync(x => x.ShowAsync(item.StepId))">
                                        <SvgIcon Icon="LucideIcon.History" />
                                        History
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto border-1" @onclick="@(() => NavigationManager.NavigateTo($"executions/{item.ExecutionId}/graph/{item.StepId}"))">
                                        <SvgIcon Icon="LucideIcon.Workflow" />
                                        Dependencies
                                    </HxButton>
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                        @if (detailStep.CanBeStopped)
                                        {
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto border-1 text-danger"
                                                      @onclick="async () => await StopStepExecutionAsync(item.ExecutionId, item.StepId, item.StepName)">
                                                <SvgIcon Icon="FeatherIcon.XOctagon" />
                                                Stop...
                                            </HxButton>
                                        }
                                    </AuthorizeView>
                                </HxButtonGroup>

                                <StepExecutionDetails StepExecutionAttempt="detailStep" />
                            </td>
                        </tr>
                    }
                }
            }
        }
    </tbody>
</table>

<StepHistoryOffcanvas @ref="stepHistoryOffcanvas" />