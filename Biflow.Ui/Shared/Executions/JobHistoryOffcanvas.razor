@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<HxOffcanvas @ref="offcanvas" Size="OffcanvasSize.Large" Title="@JobName" OnClosed="OnClosed">
    <BodyTemplate>
        <div class="row">
            <div class="col-auto d-inline-flex align-items-center">
                <label>No of executions</label>
                <input @bind-value="maxExecutions" class="form-control form-control-sm ms-3" type="number" style="max-width: 5rem;">
            </div>
            <div class="col">
                <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="ReloadAsync">
                    <SvgIcon Icon="FeatherIcon.RefreshCw" />
                    Refresh
                </HxButton>
            </div>
        </div>
        <div class="row mt-1">
            <div class="col">
                <small class="text-muted">Actual no of executions: @executions?.Count()</small>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <LineChart Dataset="lineChartDataset" />
            </div>
        </div>

        <div class="row mt-3">
            <div class="col">
                <table class="table table-sm table-hover small">
                    <thead>
                        <tr>
                            <th>Created by</th>
                            <th>Started</th>
                            <th>Ended</th>
                            <th>Duration</th>
                            <th>Steps</th>
                            <th>Status</th>
                        </tr>
                        <tr>
                            <th></th>
                            <th></th>
                            <th>@AverageDurationInSeconds.SecondsToReadableFormat()</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (executions is null)
                        {
                            <tr><td colspan="4" class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td></tr>
                        }
                        else if (!executions.Any())
                        {
                            <tr><td colspan="4">No executions</td></tr>
                        }
                        else
                        {
                            @foreach (var execution in executions)
                            {
                                var createdBy = execution switch
                                {
                                    { ScheduleName: { Length: > 0 } scheduleName } => scheduleName,
                                    { CreatedBy: { Length: > 0 } username } => username,
                                    _ => ""
                                };
                                <tr style="cursor: pointer;" @onclick="() => GoToExecutionDetails(execution.ExecutionId)">
                                    <td class="align-middle small">@createdBy</td>
                                    <td class="align-middle">@execution.StartedOn?.LocalDateTime</td>
                                    <td class="align-middle">@execution.EndedOn?.LocalDateTime</td>
                                    <td class="align-middle">@execution.ExecutionInSeconds?.SecondsToReadableFormat()</td>
                                    <td class="align-middle">@execution.StepExecutionCount</td>
                                    <td><JobExecutionStatusBadge ExecutionStatus="execution.ExecutionStatus" /></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await offcanvas.LetAsync(x => x.HideAsync())">Close</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    private CancellationTokenSource cts = new();
    private HxOffcanvas? offcanvas;
    private LineChartDataset? lineChartDataset;
    private IEnumerable<ExecutionProjection>? executions;
    private int maxExecutions = DefaultMaxExecutions;
    private Guid jobId;

    private const int DefaultMaxExecutions = 50;

    private string JobName => executions?.FirstOrDefault()?.JobName ?? "";

    private double AverageDurationInSeconds =>
        (int)(executions
            ?.Where(e => e.ExecutionStatus == ExecutionStatus.Succeeded)
            .Average(e => e.ExecutionInSeconds)
            ?? 0);

    public async Task ShowAsync(Guid jobId)
    {
        this.jobId = jobId;
        executions = null;
        maxExecutions = DefaultMaxExecutions;
        await offcanvas.LetAsync(x => x.ShowAsync());
        await ReloadAsync();
        StateHasChanged();
    }

    private async Task ReloadAsync()
    {
        var context = await DbFactory.CreateDbContextAsync();
        try
        {
            executions = await context.Executions
                .AsNoTracking()
                .IgnoreQueryFilters()
                .Where(e => e.JobId == jobId)
                .OrderByDescending(execution => execution.CreatedOn)
                .ThenByDescending(Execution => Execution.StartedOn)
                .Take(maxExecutions)
                .Select(e => new ExecutionProjection(
                    e.ExecutionId,
                    e.JobId,
                    e.JobName,
                    e.ScheduleId,
                    e.ScheduleName,
                    e.CreatedBy,
                    e.CreatedOn,
                    e.StartedOn,
                    e.EndedOn,
                    e.ExecutionStatus,
                    e.StepExecutions.Count(),
                    Array.Empty<TagProjection>()
                ))
                .ToArrayAsync(cts.Token);
        }
        catch (OperationCanceledException)
        {
            return;
        }

        var datapoints = executions
            .Where(e => e.StartedOn is not null)
            .GroupBy(group => ((DateTimeOffset)group.StartedOn!).Date)
            .Select(select => new TimeSeriesDataPoint(DateOnly.FromDateTime(select.Key.Date), select.Average(total => (decimal)(total.ExecutionInSeconds ?? 0) / 60))) // Calculate avg. duration in minutes per day
            .ToArray();
        var series = new LineChartSeries[]
        {
            new LineChartSeries("Avg. duration", datapoints)
        };
        lineChartDataset = new LineChartDataset(series, "min", 0);
    }

    private void GoToExecutionDetails(Guid executionId)
    {
        NavigationManager.NavigateTo($"executions/{executionId}/list");
    }

    private void OnClosed()
    {
        cts.Cancel();
        cts.Dispose();
        cts = new();
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
