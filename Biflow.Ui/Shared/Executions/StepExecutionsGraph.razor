@using System.Globalization

@inject ToasterService Toaster
@inject IExecutorService ExecutorService
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject IHxMessageBoxService Confirmer

<div class="row mx-1 my-2">
    <div class="col">
        <div class="row" style="height: 40px;">
            <div class="col-xl-3 col-lg-4 col-5 py-1 d-flex align-items-center justify-content-end">
            </div>
            <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center" style="position: relative;">
                @for (int i = 0; i <= Columns; i++)
                {
                    var percentage = i * 100.0 / Columns;
                    @*With screen sizes < xl only show every other line*@
                    <div class="@(i % 2 != 0 ? "d-none d-xl-flex" : "d-flex") align-items-center text-body-secondary"
                     style="height: 100%; border-left: 1px dashed var(--bs-border-color); position: absolute; left: @(percentage.ToString("F10", CultureInfo.InvariantCulture))%;">
                        @if (i < Columns)
                        {
                            <small>@GetDateFromPercentage(percentage)<br />@GetTimeFromPercentage(percentage)</small>
                        }
                    </div>
                }
            </div>
        </div>
        @if (Executions is not null)
        {
            var executions = Executions
                .Where(e => e.StartedOn is not null)
                .GroupBy(e =>
                {
                    var overlapsWithSelf = Executions
                        .Where(other => other.StepId == e.StepId && e.ExecutionId != other.ExecutionId)
                        .Any(other => e.StartedOn >= other.StartedOn && e.StartedOn <= (other.EndedOn ?? DateTime.Now));
                    return (e.StepId, e.StepName, e.StepType, overlapsWithSelf ? e.ExecutionId : Guid.Empty);
                })
                .OrderBy(g => SortMode == SortMode.DurationAsc ? g.Max(e => e.ExecutionInSeconds) : null)
                .OrderByDescending(g => SortMode == SortMode.DurationDesc ? g.Max(e => e.ExecutionInSeconds) : null)
                .ThenBy(g => SortMode == SortMode.StartedAsc ? g.Min(e => e.StartedOn) : null)
                .ThenByDescending(g => SortMode == SortMode.StartedDesc ? g.Min(e => e.StartedOn) : null)
                .ToList();
            <Virtualize Context="group" Items="executions" ItemSize="32.5714f">
                <div class="row border-top">
                    <div class="col-xl-3 col-lg-4 col-5 text-end py-1">
                        <small>
                            @group.Key.StepName
                            &nbsp;
                            <StepTypeIcon StepType="group.Key.StepType" />
                        </small>
                    </div>
                    <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center" style="position: relative;">
                        @for (int i = 0; i <= Columns; i++)
                        {
                            var percentage = i * 100.0 / Columns;
                            <div class="d-flex align-items-center" style="height: 100%; border-left: 1px dashed var(--bs-border-color); position: absolute; left: @(percentage.ToString("F10", CultureInfo.InvariantCulture))%;"></div>
                        }
                        @foreach (var execution in group)
                        {
                            (var offset, var width) = (execution.StartedOn, execution.EndedOn)
                                .GetGanttGraphDimensions(Executions.Select(e => (e.StartedOn, e.EndedOn)));
                            <ContextMenuToggle ContainerHtmlTag="div"
                                               CssClass="@($"progress hover {(execution == selectedStepExecution ? "active" : null)} {execution.StepExecutionStatus.ToString().ToLower()}")"
                                               title="@($"{execution.StepExecutionStatus}, {execution.ExecutionInSeconds?.SecondsToReadableFormat()}")"
                                               style="@($"cursor: pointer; position: absolute; width: {width.ToString("F10", CultureInfo.InvariantCulture)}%; left: {offset.ToString("F10", CultureInfo.InvariantCulture)}%;")"
                                               @onclick="() => ToggleSelectedStepExecutionAsync(execution)">
                                <ChildContent>
                                    <div class="progress-bar" style="width: 100%;"></div>
                                </ChildContent>
                                <MenuContent>
                                    <DropdownMenuHeader>
                                        <StepTypeIcon StepType="execution.StepType" />
                                        @execution.StepName
                                    </DropdownMenuHeader>
                                    <DropdownMenuItem @onclick="async () => await stepHistoryOffcanvas.LetAsync(x => x.ShowAsync(execution.StepId))">
                                        <CxIcon Icon="LucideIcon.History" />
                                        History
                                    </DropdownMenuItem>
                                    <DropdownMenuItem @onclick="@(() => NavigationManager.NavigateTo($"executions/{execution.ExecutionId}/graph/{execution.StepId}"))">
                                        <CxIcon Icon="LucideIcon.Workflow" />
                                        Dependencies
                                    </DropdownMenuItem>
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                        @if (execution.CanBeStopped)
                                        {
                                            <DropdownMenuItem @onclick="async () => await StopStepExecutionAsync(execution.ExecutionId, execution.StepId, execution.StepName)">
                                                <CxIcon Icon="FeatherIcon.XOctagon" />
                                                Stop...
                                            </DropdownMenuItem>
                                        }
                                    </AuthorizeView>
                                </MenuContent>
                            </ContextMenuToggle>
                        }
                    </div>
                </div>
                @if (selectedStepExecution is not null && group.Contains(selectedStepExecution))
                {
                    if (detailStep is null)
                    {
                        <div class="row bg-body-tertiary">
                            <div class="col text-center">
                                <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row bg-body-tertiary">
                            <div class="col">
                                <HxButtonToolbar CssClass="mb-3 mt-2 ms-2">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="() => ToggleSelectedStepExecutionAsync(selectedStepExecution)">
                                        <CxIcon Icon="FeatherIcon.X" />
                                        Close
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto ms-3" @onclick="async () => await stepHistoryOffcanvas.LetAsync(x => x.ShowAsync(detailStep.StepId))">
                                        <CxIcon Icon="LucideIcon.History" />
                                        History
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto ms-3" @onclick="@(() => NavigationManager.NavigateTo($"executions/{detailStep.ExecutionId}/graph/{detailStep.StepId}"))">
                                        <CxIcon Icon="LucideIcon.Workflow" />
                                        Dependencies
                                    </HxButton>
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                        @if (detailStep.CanBeStopped)
                                        {
                                            <DropdownMenuItem @onclick="async () => await StopStepExecutionAsync(detailStep.ExecutionId, detailStep.StepId, detailStep.StepExecution.StepName)">
                                                <CxIcon Icon="FeatherIcon.XOctagon" />
                                                Stop...
                                            </DropdownMenuItem>
                                        }
                                    </AuthorizeView>
                                </HxButtonToolbar>

                                <StepExecutionDetails StepExecutionAttempt="detailStep" ShowExtraDetails />
                        </div>
                    </div>
                    }
                }
            </Virtualize>
        }
    </div>
</div>

<StepHistoryOffcanvas @ref="stepHistoryOffcanvas" />

@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter] public IEnumerable<StepExecutionProjection>? Executions { get; set; }

    [Parameter] public SortMode SortMode { get; set; } = SortMode.StartedAsc;

    [Parameter] public Func<StepExecutionProjection, StepExecutionAttempt?>? DetailStepProvider { get; set; }

    private const int Columns = 12;

    private StepExecutionProjection? selectedStepExecution;
    private StepHistoryOffcanvas? stepHistoryOffcanvas;
    private StepExecutionAttempt? detailStep;

    private async Task ToggleSelectedStepExecutionAsync(StepExecutionProjection execution)
    {
        if (selectedStepExecution == execution)
        {
            selectedStepExecution = null;
            detailStep = null;
        }
        else
        {
            selectedStepExecution = execution;

            if (DetailStepProvider is not null)
            {
                detailStep = DetailStepProvider(execution);
            }
            else
            {
                using var context = await DbContextFactory.CreateDbContextAsync();
                detailStep = await context.StepExecutionAttempts
                    .AsNoTrackingWithIdentityResolution()
                    .Include($"{nameof(StepExecutionAttempt.StepExecution)}.{nameof(IHasStepExecutionParameters.StepExecutionParameters)}.{nameof(StepExecutionParameterBase.InheritFromExecutionParameter)}")
                    .Include($"{nameof(StepExecutionAttempt.StepExecution)}.{nameof(IHasStepExecutionParameters.StepExecutionParameters)}.{nameof(StepExecutionParameterBase.ExpressionParameters)}")
                    .Include(e => e.StepExecution)
                    .ThenInclude(e => e.Execution)
                    .ThenInclude(e => e.ExecutionParameters)
                    .Include(e => e.StepExecution)
                    .ThenInclude(e => e.ExecutionConditionParameters)
                    .ThenInclude(e => e.ExecutionParameter)
                    .Include(e => e.StepExecution)
                    .FirstOrDefaultAsync(e => e.ExecutionId == execution.ExecutionId && e.StepId == execution.StepId && e.RetryAttemptIndex == execution.RetryAttemptIndex);
                if (detailStep is not null)
                {
                    var step = await context.Steps.FirstOrDefaultAsync(s => s.StepId == detailStep.StepId);
                    detailStep.StepExecution.SetStep(step);
                }
            }
        }
        StateHasChanged();
    }

    private async Task StopStepExecutionAsync(Guid executionId, Guid stepId, string stepName)
    {
        if (!await Confirmer.ConfirmAsync("Stop step execution", $"Are you sure you want to stop \"{stepName}\"?"))
        {
            return;
        }
        try
        {
            ArgumentNullException.ThrowIfNull(AuthenticationState);
            var authState = await AuthenticationState;
            var username = authState.User.Identity?.Name;
            ArgumentNullException.ThrowIfNull(username);

            await ExecutorService.StopExecutionAsync(executionId, stepId, username);
            Toaster.AddSuccess("Stop request sent successfully to the executor service");
        }
        catch (TimeoutException)
        {
            Toaster.AddError("Operation timed out", "The executor process may no longer be running");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error stopping execution", ex.Message);
        }
    }

    private DateTime MinTime => Executions?.Any() ?? false ? Executions.Min(e => e.StartedOn?.LocalDateTime) ?? DateTime.Now : DateTime.Now;
    private DateTime MaxTime => Executions?.Any() ?? false ? Executions.Max(e => e.EndedOn?.LocalDateTime ?? DateTime.Now) : DateTime.Now;
    private long MinTicks => MinTime.Ticks;
    private long MaxTicks => MaxTime.Ticks;

    private string GetTimeFromPercentage(double percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("T");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100;
        var time = new DateTime(Convert.ToInt64(ticks));
        return time.ToString("T");
    }

    private string GetDateFromPercentage(double percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("d");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100;
        var time = new DateTime(Convert.ToInt64(ticks));
        return time.ToString("d");
    }

}
