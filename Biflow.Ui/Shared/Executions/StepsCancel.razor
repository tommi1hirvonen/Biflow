@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster
@inject IExecutorService Executor

@if (Execution is not null)
{
    <div class="row mt-3">
        <div class="col">
            <HxButtonGroup>
                <FilterDropdown TItem="StepExecutionStatus?"
                                FilterSet="statusFilter"
                                Items="Statuses"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Info" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepExecutionStatusBadge ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                          @onclick="() => { statusFilter.Clear(); }">
                    <CxIcon Icon="FeatherIcon.X" />
                    Clear
                </HxButton>
            </HxButtonGroup>
        </div>
        <div class="col d-flex">
            <HxButtonGroup>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                          @onclick="AddAll">
                    <CxIcon Icon="FeatherIcon.ChevronsRight" />
                    Select all
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="() => selectedSteps.Clear()">
                    <CxIcon Icon="FeatherIcon.ChevronsLeft" />
                    Deselect all
                </HxButton>
            </HxButtonGroup>

            <HxDropdownButtonGroup CssClass="ms-auto">
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Danger" Outline="true">
                    <CxIcon Icon="FeatherIcon.XOctagon" />
                    Stop
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    <HxDropdownItem OnClick="CancelStepsAsync">Confirm</HxDropdownItem>
                </HxDropdownMenu>
            </HxDropdownButtonGroup>
        </div>
    </div>

    <div class="card shadow-sm mt-3 pt-1 mb-4">
        <div class="row g-0">
            <div class="col">
                <h6 class="mx-2">Available steps</h6>
                <div style="overflow-y: scroll; height: calc(100vh - 270px);">
                    <table class="table table-hover table-sm">
                        <tbody>
                            @foreach (var step in AvailableSteps)
                            {
                                <tr style="cursor: pointer;" @onclick="() => selectedSteps.Add(step)">
                                    <td>
                                        <StepTypeIcon StepType="@step.StepType" />
                                        &nbsp;
                                        @step.StepName
                                    </td>
                                    <td>
                                        <StepExecutionStatusBadge ExecutionStatus="step.ExecutionStatus" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="col">
                <h6 class="mx-2">Selected steps</h6>
                <div style="overflow-y: scroll; height: calc(100vh - 270px);">
                    <table class="table table-hover table-sm">
                        <tbody>
                            @foreach (var step in selectedSteps)
                            {
                                <tr style="cursor: pointer;" @onclick="() => selectedSteps.Remove(step)">
                                    <td>
                                        <StepTypeIcon StepType="@step.StepType" />
                                        &nbsp;
                                        @step.StepName
                                    </td>
                                    <td>
                                        <StepExecutionStatusBadge ExecutionStatus="step.ExecutionStatus" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter]
    public Execution? Execution { get; set; }

    private readonly HashSet<StepExecution> selectedSteps = [];
    private readonly HashSet<StepExecutionStatus?> statusFilter =
    [
        StepExecutionStatus.NotStarted,
        StepExecutionStatus.Queued,
        StepExecutionStatus.Running,
        StepExecutionStatus.AwaitingRetry
    ];

    private IEnumerable<StepExecution> AvailableSteps => Execution
        ?.StepExecutions
        .Where(a => statusFilter.Count == 0 || statusFilter.Contains(a.ExecutionStatus))
        .Where(a => !selectedSteps.Contains(a))
        ?? [];

    private IEnumerable<StepExecutionStatus?> Statuses => Execution?.StepExecutions
        .Select(e => e.ExecutionStatus)
        .Distinct()
        .Order()
        .AsEnumerable()
        ?? [];

    private void AddAll()
    {
        foreach (var attempt in AvailableSteps.ToArray()) // copy to array because the enumerable changes during iteration
        {
            selectedSteps.Add(attempt);
        }
    }

    private async Task CancelStepsAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(AuthenticationState);
            var authState = await AuthenticationState;
            var username = authState.User.Identity?.Name;
            ArgumentNullException.ThrowIfNull(username);

            foreach (var step in selectedSteps)
            {
                await Executor.StopExecutionAsync(step.ExecutionId, step.StepId, username);
            }
            Toaster.AddSuccess("Cancellation requested successfully");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error canceling step", ex.Message);
        }
    }
}
