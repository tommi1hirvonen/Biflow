@typeparam TParameter where TParameter : DynamicParameter

@inject ToasterService Toaster

<HxOffcanvas @ref="_offcanvas" Backdrop="OffcanvasBackdrop.False" Title="@(_parameter?.DisplayName ?? "")" OnClosed="OnClosed">
    <BodyTemplate>
        @if (_parameter is not null)
        {
            <div class="row">
                <div class="col">
                    <label class="form-label">
                        Dynamic expression
                    </label>
                    <CodeEditor @ref="_editor"
                                InitialValueExpression="() => _parameter.Expression.Expression"
                                MinimapEnabled="false"
                                Language="csharp"
                                OnValueChanged="async (value) => { _parameter.Expression.Expression = value; await OnExpressionChanged.InvokeAsync(); }" />
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <HxButton OnClick="() => TestEvaluate(_parameter)" Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small">
                        <SvgIcon Icon="FeatherIcon.Check" />
                        Test evaluate / validate
                    </HxButton>
                </div>
            </div>
            @if (ChildContent is not null)
            {
                @ChildContent(_parameter)
            }
        }

        <div class="row mt-4">
            <div class="col text-secondary">
                Use C# expressions to dynamically evaluate parameter values during job/step executions.
            </div>
            <div class="col-auto">
                <HxButton CssClass="btn-auto" OnClick="() => _helpOpen = !_helpOpen">
                    <SvgIcon Icon="FeatherIcon.HelpCircle" />
                </HxButton>
            </div>
        </div>

        @if (_helpOpen)
        {
            <DynamicExpressionHelp />
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" OnClick="() => _offcanvas.LetAsync(x => x.HideAsync())">
            Close
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public RenderFragment<TParameter>? ChildContent { get; set; }

    [Parameter] public EventCallback OnExpressionChanged { get; set; }

    [Parameter] public EventCallback OnClosed { get; set; }

    private HxOffcanvas? _offcanvas;
    private TParameter? _parameter;
    private CodeEditor? _editor;
    private bool _helpOpen;

    public async Task ShowAsync(TParameter parameter)
    {
        _parameter = parameter;
        await _editor.LetAsync(x => x.SetValueAsync(parameter.Expression.Expression));
        StateHasChanged(); // To update offcanvas title text
        await _offcanvas.LetAsync(x => x.ShowAsync());
    }

    private async Task TestEvaluate(TParameter parameter)
    {
        try
        {
            var result = await parameter.EvaluateAsync();
            Toaster.AddInformation($"Evaluation result: {result}");
        }
        catch (Exception ex)
        {
            Toaster.AddError(ex.Message);
        }
    }
}