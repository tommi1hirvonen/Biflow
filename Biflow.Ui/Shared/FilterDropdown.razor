@typeparam TItem

<HxDropdownButtonGroup AutoClose="DropdownAutoClose.Outside" CssClass="@CssClass" @attributes="Attributes">
    @if (ToggleElementTemplate is not null)
    {
        <HxDropdownToggleElement CssClass="@TitleCssClass" OnShown="OnDropdownShown" OnHidden="OnHidden">
            @ToggleElementTemplate
        </HxDropdownToggleElement>
    }
    else
    {
        var badgeClass = FilterSet.Any() ? "bg-primary" : "bg-secondary";
        var itemsCount = Items?.Count() ?? 0;
        var badgeText = FilterSet.Any() ? $"{FilterSet.Count} / {itemsCount}" : itemsCount.ToString();
        <HxDropdownToggleButton Size="ButtonSize"
                                Color="ThemeColor.None" 
                                CssClass="@TitleCssClass" 
                                OnShown="OnDropdownShown" 
                                OnHidden="OnHidden"
                                Enabled="Enabled">
            @TitleTemplate
            @if (ShowPill)
            {
                <span class="badge rounded-pill mx-1 @badgeClass">
                    @badgeText
                </span>
            }
        </HxDropdownToggleButton>
    }
    <HxDropdownContent CssClass="p-3">
        <div class="row" style="min-width: 15rem; max-width: 25rem; max-height: 380px; overflow-y: auto; white-space: nowrap;">
            <div class="col">
                <div class="row mb-2">
                    <div class="col">
                        <a href="javascript:void(0)"
                        @onclick="SelectAll">Select all</a>
                    </div>
                    <div class="col d-flex justify-content-end">
                        <a href="javascript:void(0)"
                        @onclick="Reset">Reset</a>
                    </div>
                </div>
                @if (Mode is FilterDropdownMode.All or FilterDropdownMode.Any)
                {
                    <div class="row mb-2">
                        <div class="col">
                            <div class="form-check form-check-inline">
                                <input type="radio" class="form-check-input" id="@($"_{_componentInstanceId}_any_")"
                                checked=@(Mode is FilterDropdownMode.Any)
                                @onchange="() => SetMode(FilterDropdownMode.Any)">
                                <label class="form-check-label fw-normal" for="@($"_{_componentInstanceId}_any_")">
                                    Any
                                    <HxPopover Trigger="PopoverTrigger.Hover" Content="Match with any selected filter value" Html WrapperCssClass="d-inline-flex ms-1 mt-1 align-self-start">
                                        <SvgIcon Icon="FeatherIcon.Info" />
                                    </HxPopover>
                                </label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input type="radio" class="form-check-input" id="@($"_{_componentInstanceId}_all_")"
                                checked=@(Mode is FilterDropdownMode.All)
                                @onchange="() => SetMode(FilterDropdownMode.All)">
                                <label class="form-check-label fw-normal" for="@($"_{_componentInstanceId}_all_")">
                                    All
                                    <HxPopover Trigger="PopoverTrigger.Hover" Content="Match with all selected filter values" Html WrapperCssClass="d-inline-flex ms-1 mt-1 align-self-start">
                                        <SvgIcon Icon="FeatherIcon.Info" />
                                    </HxPopover>
                                </label>
                            </div>
                        </div>
                    </div>
                }
                @if (IsSearchable)
                {
                    <div class="row mb-2">
                        <div class="col">
                            <div class="input-group input-group-sm">
                                <div class="input-group-text">
                                    <SvgIcon Icon="FeatherIcon.Search" />
                                </div>
                                <input type="search" class="form-control" @bind-value="_searchText" @bind-value:event="oninput" placeholder="Search" />
                            </div>
                        </div>
                    </div>
                }
                @*
                    The number of items could be significant.
                    For performance reasons, items can be rendered only when the dropdown is first opened.
                *@
                @if (!DelayItemsRender || _renderItems)
                {
                    @foreach (var item in FilteredItems)
                    {
                        var id = IdSelector?.Invoke(item) ?? item?.ToString();
                        <div class="row">
                            <div class="col">
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="@($"{_componentInstanceId}_{id}")"
                                    checked=@FilterSet.Contains(item)
                                    @onchange="args => Toggle((bool)args.Value!, item)">
                                    <label class="form-check-label fw-normal" for="@($"{_componentInstanceId}_{id}")">
                                        @if (ItemTemplate is not null)
                                        {
                                            @ItemTemplate(item)
                                        }
                                        else
                                        {
                                            @(TextSelector?.Invoke(item) ?? item?.ToString())
                                        }
                                    </label>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </HxDropdownContent>
</HxDropdownButtonGroup>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? Attributes { get; set; }

    [Parameter]
    public RenderFragment TitleTemplate { get; set; } = @<p></p>
    ;

    [Parameter]
    public RenderFragment? ToggleElementTemplate { get; set; }

    [Parameter]
    public ISet<TItem> FilterSet { get; set; } = new HashSet<TItem>();

    [Parameter]
    public IEnumerable<TItem>? Items { get; set; } = new List<TItem>();

    [Parameter]
    public EventCallback OnChange { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; }

    [Parameter]
    public Func<TItem, string>? IdSelector { get; set; }

    [Parameter]
    public Func<TItem, string>? TextSelector { get; set; }

    [Parameter]
    public RenderFragment<TItem>? ItemTemplate { get; set; }

    [Parameter]
    public EventCallback OnShown { get; set; }

    [Parameter]
    public EventCallback OnHidden { get; set; }

    /// <summary>
    /// Default value "btn-auto"
    /// </summary>
    [Parameter]
    public string? TitleCssClass { get; set; } = "btn-auto";

    [Parameter]
    public ButtonSize ButtonSize { get; set; } = ButtonSize.Small;

    [Parameter]
    public bool DelayItemsRender { get; set; }

    [Parameter]
    public string? CssClass { get; set; }

    [Parameter]
    public bool ShowPill { get; set; } = true;

    [Parameter]
    public bool Enabled { get; set; } = true;

    [Parameter]
    public FilterDropdownMode Mode { get; set; } = FilterDropdownMode.None;

    [Parameter]
    public EventCallback<FilterDropdownMode> ModeChanged { get; set; }

    private readonly Guid _componentInstanceId = Guid.NewGuid();
    private bool _renderItems = false;
    private string _searchText = "";

    private IEnumerable<TItem> FilteredItems => Items?
        .Where(i => string.IsNullOrEmpty(_searchText)
                    || TextSelector?.Invoke(i).ContainsIgnoreCase(_searchText) == true
                    || i?.ToString()?.ContainsIgnoreCase(_searchText) == true) ?? [];

    private Task OnDropdownShown()
    {
        _renderItems = true;
        return OnShown.InvokeAsync();
    }

    private void Toggle(bool selected, TItem item)
    {
        if (selected)
        {
            FilterSet.Add(item);
        }
        else
        {
            FilterSet.Remove(item);
        }
        OnChange.InvokeAsync();
    }

    private void Reset()
    {
        FilterSet.Clear();
        OnChange.InvokeAsync();
    }

    private void SelectAll()
    {
        FilterSet.Clear();
        foreach (var item in FilteredItems)
        {
            FilterSet.Add(item);
        }
        OnChange.InvokeAsync();
    }

    private void SetMode(FilterDropdownMode mode)
    {
        ModeChanged.InvokeAsync(mode);
        OnChange.InvokeAsync();
    }
}
