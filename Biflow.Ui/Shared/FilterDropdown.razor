@typeparam TItem

@{
    var fontWeigth = FilterSet.Any() ? "fw-bold" : null;
    var cssClass = $"btn-auto {fontWeigth}";
}

<HxDropdownButtonGroup AutoClose="DropdownAutoClose.Outside">
    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="@cssClass" OnShown="OnShown" OnHidden="OnHidden">
        @TitleTemplate
    </HxDropdownToggleButton>
    <HxDropdownContent CssClass="p-3">
        <div class="row" style="min-width: 15rem; max-width: 25rem; max-height: 380px; overflow-y: auto; white-space: nowrap;">
            <div class="col">
                <div class="row mb-2">
                    <div class="col">
                        <a href="javascript:void(0)"
                           @onclick="SelectAll">Select all</a>
                    </div>
                    <div class="col d-flex justify-content-end">
                        <a href="javascript:void(0)"
                           @onclick="Reset">Reset</a>
                    </div>
                </div>
                @if (IsSearchable)
                {
                    <div class="row mb-2">
                        <div class="col">
                            <div class="input-group input-group-sm">
                                <div class="input-group-text">
                                    <CxIcon Icon="FeatherIcon.Search" />
                                </div>
                                <input type="search" class="form-control" @bind-value="SearchText" @bind-value:event="oninput" placeholder="Search" />
                            </div>
                        </div>
                    </div>
                }
                @foreach (var item in FilteredItems)
                {
                    var id = IdSelector?.Invoke(item) ?? item.ToString();
                    <div class="row">
                        <div class="col">
                            <div class="form-check form-check-inline">
                                <input type="checkbox" class="form-check-input" id="@($"{ComponentInstanceId}_{id}")"
                                       checked=@FilterSet.Contains(item)
                                       @onchange="args => Toggle((bool)args.Value!, item)">
                                <label class="form-check-label fw-normal" for="@($"{ComponentInstanceId}_{id}")">
                                    @if (ItemTemplate is not null)
                                    {
                                        @ItemTemplate(item)
                                    }
                                    else
                                    {
                                        @(TextSelector?.Invoke(item) ?? item.ToString())
                                    }
                                </label>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </HxDropdownContent>
</HxDropdownButtonGroup>

@code {
    [Parameter]
    public RenderFragment TitleTemplate { get; set; } = @<p></p>
    ;

    [Parameter]
    public ISet<TItem> FilterSet { get; set; } = new HashSet<TItem>();

    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = new List<TItem>();

    private IEnumerable<TItem> FilteredItems => Items
        .Where(i => string.IsNullOrEmpty(SearchText)
                    || TextSelector?.Invoke(i).ContainsIgnoreCase(SearchText) == true
                    || i.ToString()?.ContainsIgnoreCase(SearchText) == true);

    [Parameter]
    public EventCallback OnChange { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; } = false;

    [Parameter]
    public Func<TItem, string>? IdSelector { get; set; }

    [Parameter]
    public Func<TItem, string>? TextSelector { get; set; }

    [Parameter]
    public RenderFragment<TItem>? ItemTemplate { get; set; }

    [Parameter]
    public EventCallback OnShown { get; set; }

    [Parameter]
    public EventCallback OnHidden { get; set; }

    private Guid ComponentInstanceId { get; } = Guid.NewGuid();

    private string SearchText { get; set; } = "";

    private void Toggle(bool selected, TItem item)
    {
        if (selected)
        {
            FilterSet.Add(item);
        }
        else
        {
            FilterSet.Remove(item);
        }
        OnChange.InvokeAsync();
    }

    private void Reset()
    {
        FilterSet.Clear();
        OnChange.InvokeAsync();
    }

    private void SelectAll()
    {
        FilterSet.Clear();
        foreach (var item in FilteredItems)
        {
            FilterSet.Add(item);
        }
        OnChange.InvokeAsync();
    }

}
