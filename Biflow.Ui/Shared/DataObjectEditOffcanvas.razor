@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster

<HxModal @ref="_offcanvas" Size="ModalSize.Large">
    <BodyTemplate>
        @if (_editObject is not null)
        {
            <EditForm id="data_object_edit" Model="_editObject" OnValidSubmit="SubmitDataObjectAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col">
                        <label class="form-label">Uri</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <SvgIcon Icon="LucideIcon.Link" />
                            </div>
                            <InputText class="form-control form-control-sm font-monospace" autocomplete="off" @bind-Value="_editObject.ObjectUri" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label class="form-label">Max concurrent writes</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <SvgIcon Icon="LucideIcon.SlidersVertical" />
                            </div>
                            <InputNumber style="max-width: 10rem;" class="form-control form-control-sm" @bind-Value="_editObject.MaxConcurrentWrites" />
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit FormId="data_object_edit" Color="ThemeColor.Success">
            Save
        </HxSubmit>
        <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" OnClick="() => _offcanvas.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public EventCallback<DataObject> OnDataObjectSubmitted { get; set; }

    private HxModal? _offcanvas;
    private DataObject? _editObject;

    private async Task SubmitDataObjectAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(_editObject);
            await Mediator.SendAsync(new UpdateDataObjectCommand(_editObject));
            await _offcanvas.LetAsync(x => x.HideAsync());
            await OnDataObjectSubmitted.InvokeAsync(_editObject);
            _editObject = null;
        }
        catch (DbUpdateConcurrencyException)
        {
            Toaster.AddError("Concurrency error", "The data object was modified outside of this session. Reload the page to view the most recent values.");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error updating data object", ex.Message);
        }
    }

    public async Task ShowAsync(Guid dataObjectId)
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _editObject = await context.DataObjects
            .Include(o => o.Steps)
            .ThenInclude(r => r.Step)
            .ThenInclude(s => s.Job)
            .FirstAsync(o => o.ObjectId == dataObjectId);
        await _offcanvas.LetAsync(x => x.ShowAsync());
    }
}
