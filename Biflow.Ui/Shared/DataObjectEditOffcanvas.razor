@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IHxMessengerService Messenger

<HxOffcanvas @ref="offcanvas" Size="OffcanvasSize.Large">
    <BodyTemplate>
        @if (editObject is not null)
        {
            <EditForm id="data_object_edit" Model="editObject" OnValidSubmit="SubmitDataObjectAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col">
                        <label class="form-label">Server</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <CxIcon Icon="FeatherIcon.Server" />
                            </div>
                            <InputText class="form-control form-control-sm" autocomplete="off" @bind-Value="editObject.ServerName" />
                        </div>
                    </div>
                    <div class="col">
                        <label class="form-label">Database</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <CxIcon Icon="FeatherIcon.Database" />
                            </div>
                            <InputText class="form-control form-control-sm" autocomplete="off" @bind-Value="editObject.DatabaseName" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-5">
                        <label class="form-label">Schema</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <CxIcon Icon="FeatherIcon.Folder" />
                            </div>
                            <InputText class="form-control form-control-sm" autocomplete="off" @bind-Value="editObject.SchemaName" />
                        </div>
                    </div>
                    <div class="col-7">
                        <label class="form-label">Object</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <CxIcon Icon="FeatherIcon.Table" />
                            </div>
                            <InputText class="form-control form-control-sm" autocomplete="off" @bind-Value="editObject.ObjectName" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label class="form-label">Max concurrent writes</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <CxIcon Icon="FeatherIcon.Sliders" />
                            </div>
                            <InputNumber style="max-width: 10rem;" class="form-control form-control-sm" @bind-Value="editObject.MaxConcurrentWrites" />
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit FormId="data_object_edit" Color="ThemeColor.Success">
            Save
        </HxSubmit>
        <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" OnClick="() => offcanvas.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public EventCallback<DataObject> OnDataObjectSubmitted { get; set; }

    private HxOffcanvas? offcanvas;
    private DataObject? editObject;
    private AppDbContext? editContext;

    private async Task SubmitDataObjectAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(editContext);
            await editContext.SaveChangesAsync();
            await offcanvas.LetAsync(x => x.HideAsync());
            await OnDataObjectSubmitted.InvokeAsync(editObject);
            editObject = null;
            editContext.Dispose();
            editContext = null;
        }
        catch (DbUpdateConcurrencyException)
        {
            Messenger.AddError("Concurrency error", "The data object was modified outside of this session. Reload the page to view the most recent values.");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error updating data object", ex.Message);
        }
    }

    public async Task ShowAsync(Guid dataObjectId)
    {
        editContext = await DbContextFactory.CreateDbContextAsync();
        editObject = await editContext.DataObjects
            .Include(o => o.Readers)
            .ThenInclude(s => s.Job)
            .Include(o => o.Writers)
            .ThenInclude(s => s.Job)
            .FirstAsync(o => o.ObjectId == dataObjectId);
        await offcanvas.LetAsync(x => x.ShowAsync());
    }

    public void Dispose() => editContext?.Dispose();
}
