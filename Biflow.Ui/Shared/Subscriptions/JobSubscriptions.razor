@inject ToasterService Toaster
@inject IMediator Mediator

<div class="row">
    <div class="col">
        <HxButton Color="ThemeColor.Success" OnClick="() => _selectJobOffcanvas.LetAsync(x => x.ShowAsync())">
            Add subscription
        </HxButton>
    </div>
</div>

<div class="card shadow-sm mt-3">
    <div class="card-body px-0">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                        Job
                    </th>
                    <th>
                        Alert
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (User is null || Jobs is null)
                {
                    <tr><td colspan="3" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
                }
                else
                {
                    var subscriptions = User.Subscriptions
                        .OfType<JobSubscription>()
                        .Select(s => (Subscription: s, Job: Jobs.FirstOrDefault(j => j.JobId == s.JobId)))
                        .OrderBy(s => s.Job?.JobName)
                        .ToArray();
                    @if (!subscriptions.Any())
                    {
                        <tr>
                            <td colspan="3">No job subscriptions</td>
                        </tr>
                    }
                    foreach (var (sub, job) in subscriptions)
                    {
                        <tr>
                            <td>
                                @job?.JobName
                            </td>
                            <td>
                                <div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="@(sub.SubscriptionId + "_none")"
                                               checked=@(sub.AlertType is null)
                                        @onchange="() => ToggleSubscription(sub, null)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId + "_none")">None</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="@(sub.SubscriptionId + "_failure")"
                                               checked=@(sub.AlertType == AlertType.OnFailure)
                                        @onchange="() => ToggleSubscription(sub, AlertType.OnFailure)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId + "_failure")">On failure</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="@(sub.SubscriptionId + "_success")"
                                               checked=@(sub.AlertType == AlertType.OnSuccess)
                                        @onchange="() => ToggleSubscription(sub, AlertType.OnSuccess)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId + "_success")">On success</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="@(sub.SubscriptionId + "_completion")"
                                               checked=@(sub.AlertType == AlertType.OnCompletion)
                                        @onchange="() => ToggleSubscription(sub, AlertType.OnCompletion)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId + "_completion")">On completion</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="checkbox" class="form-check-input" id="@(sub.SubscriptionId + "_overtime")"
                                               checked=@(sub.NotifyOnOvertime)
                                        @onchange="args => ToggleSubscription(sub, (bool)args.Value!)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId + "_overtime")">On overtime</label>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <HxButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto" title="Remove subscription" OnClick="() => RemoveSubscriptionAsync(sub)">
                                    <SvgIcon Icon="FeatherIcon.Delete" />
                                </HxButton>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<HxOffcanvas @ref="_selectJobOffcanvas" Title="Select job" Backdrop="OffcanvasBackdrop.False">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="input-group">
                    <div class="input-group-text">
                        <SvgIcon Icon="FeatherIcon.Search" />
                    </div>
                    <input type="search" class="form-control form-control-sm" placeholder="Search jobs" @bind-value="_jobSearchTerm" @bind-value:event="oninput" />
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <div class="list-group">
                    @{
                        var jobs = Jobs?
                            .Where(j => string.IsNullOrEmpty(_jobSearchTerm) || j.JobName.ContainsIgnoreCase(_jobSearchTerm))
                            .Where(j => Subscriptions.All(s => j.JobId != s.JobId))
                            .OrderBy(j => j.JobName)
                            .AsEnumerable() ?? [];
                    }
                    @foreach (var job in jobs)
                    {
                        <div class="list-group-item list-group-item-action" @onclick="() => AddSubscriptionAsync(job.JobId)" style="cursor: pointer;">
                            <HighlightableText Text="@job.JobName" PartToHighlight="@_jobSearchTerm" />
                        </div>
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" OnClick="() => _selectJobOffcanvas.LetAsync(x => x.HideAsync())" Spinner="false">
            Close
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public User? User { get; set; }

    [Parameter]
    public IEnumerable<JobProjection>? Jobs { get; set; }

    [Parameter]
    public EventCallback OnSubscriptionCountChanged { get; set; }

    private HxOffcanvas? _selectJobOffcanvas;
    private string _jobSearchTerm = "";

    private IEnumerable<JobSubscription> Subscriptions => User?.Subscriptions.OfType<JobSubscription>() ?? [];

    private async Task RemoveSubscriptionAsync(Subscription subscription)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(User);
            await Mediator.SendAsync(new DeleteSubscriptionCommand(subscription.SubscriptionId));
            User.Subscriptions.Remove(subscription);
            await OnSubscriptionCountChanged.InvokeAsync();
        }
        catch (Exception)
        {
            Toaster.AddError("Error", "Error removing subscription");
        }
    }

    private async Task AddSubscriptionAsync(Guid jobId)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(User);
            var subscription = new JobSubscription(User.UserId, jobId);
            await Mediator.SendAsync(new CreateSubscriptionCommand(subscription));
            User.Subscriptions.Add(subscription);
            await OnSubscriptionCountChanged.InvokeAsync();
        }
        catch
        {
            Toaster.AddError("Error", "Error adding subscription");
        }
    }

    private async Task ToggleSubscription(JobSubscription subscription, AlertType? alert)
    {
        try
        {
            subscription.AlertType = alert;
            await Mediator.SendAsync(new UpdateSubscriptionCommand(subscription));
        }
        catch (Exception)
        {
            Toaster.AddError("Error", "Error toggling subscription");
        }
    }

    private async Task ToggleSubscription(JobSubscription subscription, bool onOvertime)
    {
        try
        {
            subscription.NotifyOnOvertime = onOvertime;
            await Mediator.SendAsync(new UpdateSubscriptionCommand(subscription));
        }
        catch (Exception)
        {
            Toaster.AddError("Error", "Error toggling subscription");
        }
    }
}
