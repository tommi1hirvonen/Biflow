@inject IHttpContextAccessor HttpContextAccessor
@inject IDbContextFactory<BiflowContext> DbFactory



<div class="row mt-4">
    <div class="col">
        @if (User is not null && string.IsNullOrWhiteSpace(User.Email))
        {
            <HxAlert Color="ThemeColor.Warning" CssClass="mb-3">
                Email address for account <strong>@User.Username</strong> was not set. Go to the <a class="alert-link" href="account">Account page</a> to enter a valid email address.
            </HxAlert>
        }
        <div class="row">
            <div class="col">
                <ul class="nav nav-tabs mb-3">
                    <li class="nav-item">
                        <span class="nav-link @(ShowType == SubscriptionType.Job ? "active" : null)"
                        @onclick="() => ShowType = SubscriptionType.Job">
                            Job subscriptions
                        </span>
                    </li>
                    <li class="nav-item">
                        <span class="nav-link @(ShowType == SubscriptionType.JobTag ? "active" : null)"
                        @onclick="() => ShowType = SubscriptionType.JobTag">
                            Job-tag subscriptions
                        </span>
                    </li>
                    <li class="nav-item">
                        <span class="nav-link @(ShowType == SubscriptionType.Tag ? "active" : null)"
                        @onclick="() => ShowType = SubscriptionType.Tag">
                            Tag subscriptions
                        </span>
                    </li>
                    <li class="nav-item">
                        <span class="nav-link @(ShowType == SubscriptionType.Step ? "active" : null)"
                        @onclick="() => ShowType = SubscriptionType.Step">
                            Step subscriptions
                        </span>
                    </li>
                </ul>
            </div>
        </div>
        @if (ShowType == SubscriptionType.Job)
        {
            <JobSubscriptions User="User" Jobs="Jobs" />
        }
        else if (ShowType == SubscriptionType.JobTag)
        {
            // TODO Implement job-tag subscriptions
        }
        else if (ShowType == SubscriptionType.Tag)
        {
            // TODO Implement tag subscriptions
        }
        else if (ShowType == SubscriptionType.Step)
        {
            <StepSubscriptions User="User" Jobs="Jobs" Steps="Steps" />
        }
    </div>
</div>

@code {
    private string? Username => HttpContextAccessor.HttpContext?.User?.Identity?.Name;

    private User? User { get; set; }

    private IEnumerable<JobProjection>? Jobs { get; set; }

    private IEnumerable<Tag>? Tags { get; set; }

    private IEnumerable<StepProjection>? Steps { get; set; }

    private SubscriptionType ShowType { get; set; } = SubscriptionType.Job;

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run(DbFactory.CreateDbContext);
        User = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(user => user.Subscriptions)
            .FirstAsync(user => user.Username == Username);
        Jobs = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(job => job.JobName)
            .Select(j => new JobProjection(j.JobId, j.JobName, j.UseDependencyMode, j.CategoryId, j.Category))
            .ToArrayAsync();
        Steps = await context.Steps
            .AsNoTrackingWithIdentityResolution()
            .Select(s => new StepProjection(s.StepId, s.JobId, s.StepName, s.StepType, s.ExecutionPhase, s.IsEnabled, s.Tags.ToArray(), s.Dependencies.Select(d => d.DependantOnStepId).ToArray()))
            .ToArrayAsync();
        Tags = await context.Tags
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(t => t.TagName)
            .ToArrayAsync();
    }

    
}
