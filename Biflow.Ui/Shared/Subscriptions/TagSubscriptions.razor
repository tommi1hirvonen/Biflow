@inject ToasterService Toaster
@inject IMediator Mediator

<div class="row">
    <div class="col">
        <HxButton Color="ThemeColor.Success" OnClick="() => _selectTagOffcanvas.LetAsync(x => x.ShowAsync())">
            Add subscription
        </HxButton>
    </div>
</div>

<div class="card mt-3">
    <div class="card-body px-0">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                        Tag
                    </th>
                    <th>
                        Alert
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (User is null || Tags is null)
                {
                    <tr><td colspan="3" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
                }
                else
                {
                    var subscriptions = User.Subscriptions
                        .OfType<TagSubscription>()
                        .Select(s => (Subscription: s, Tag: Tags.FirstOrDefault(t => t.TagId == s.TagId)))
                        .OrderBy(s => s.Tag?.TagName)
                        .ToArray();
                    @if (!subscriptions.Any())
                    {
                        <tr>
                            <td colspan="3">No tag subscriptions</td>
                        </tr>
                    }
                    foreach (var (sub, tag) in subscriptions)
                    {
                        <tr>
                            <td>
                                <TagBadge Tag="tag" />
                            </td>
                            <td>
                                <div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="@(sub.SubscriptionId + "_failure")"
                                               checked=@(sub.AlertType == AlertType.OnFailure)
                                        @onchange="() => ToggleSubscription(sub, AlertType.OnFailure)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId + "_failure")">On failure</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="@(sub.SubscriptionId + "_success")"
                                               checked=@(sub.AlertType == AlertType.OnSuccess)
                                        @onchange="() => ToggleSubscription(sub, AlertType.OnSuccess)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId + "_success")">On success</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="@(sub.SubscriptionId + "_completion")"
                                               checked=@(sub.AlertType == AlertType.OnCompletion)
                                        @onchange="() => ToggleSubscription(sub, AlertType.OnCompletion)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId + "_completion")">On completion</label>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <HxButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto" title="Remove subscription" OnClick="() => RemoveSubscriptionAsync(sub)">
                                    <SvgIcon Icon="FeatherIcon.Delete" />
                                </HxButton>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<HxOffcanvas @ref="_selectTagOffcanvas" Title="Select tag" Backdrop="OffcanvasBackdrop.False">
    <BodyTemplate>
        <div class="row">
            <div class="col d-flex flex-wrap">
                @{
                    var tags = Tags
                        ?.Where(t => Subscriptions.All(s => t.TagId != s.TagId))
                        .Order()
                        .ToArray()
                        ?? [];
                }
                @if (!tags.Any())
                {
                    <span class="text-muted m-2">No tags available</span>
                }
                @foreach (var tag in tags)
                {
                    <TagBadge Tag="tag" CssClass="m-2" OnClick="() => AddSubscriptionAsync(tag.TagId)" style="cursor: pointer;" />
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" OnClick="() => _selectTagOffcanvas.LetAsync(x => x.HideAsync())" Spinner="false">
            Close
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public User? User { get; set; }

    [Parameter]
    public IEnumerable<StepTag>? Tags { get; set; }

    [Parameter]
    public EventCallback OnSubscriptionCountChanged { get; set; }

    private HxOffcanvas? _selectTagOffcanvas;

    private IEnumerable<TagSubscription> Subscriptions => User?.Subscriptions.OfType<TagSubscription>() ?? [];

    private async Task AddSubscriptionAsync(Guid tagId)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(User);
            var subscription = new TagSubscription(User.UserId, tagId);
            await Mediator.SendAsync(new CreateSubscriptionCommand(subscription));
            User.Subscriptions.Add(subscription);
            await OnSubscriptionCountChanged.InvokeAsync();
        }
        catch
        {
            Toaster.AddError("Error", "Error adding subscription");
        }
    }

    private async Task ToggleSubscription(TagSubscription subscription, AlertType alert)
    {
        try
        {
            subscription.AlertType = alert;
            await Mediator.SendAsync(new UpdateSubscriptionCommand(subscription));
        }
        catch (Exception)
        {
            Toaster.AddError("Error", "Error toggling subscription");
        }
    }

    private async Task RemoveSubscriptionAsync(Subscription subscription)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(User);
            await Mediator.SendAsync(new DeleteSubscriptionCommand(subscription.SubscriptionId));
            User.Subscriptions.Remove(subscription);
            await OnSubscriptionCountChanged.InvokeAsync();
        }
        catch (Exception)
        {
            Toaster.AddError("Error", "Error removing subscription");
        }
    }
}
