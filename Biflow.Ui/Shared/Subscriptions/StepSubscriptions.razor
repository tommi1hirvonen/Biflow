@inject ToasterService Toaster
@inject IMediator Mediator
@inject IJSRuntime Js

<div class="row">
    <div class="col">
        <HxButton Color="ThemeColor.Success" OnClick="() => _selectStepOffcanvas.LetAsync(x => x.ShowAsync())">
            Add subscription
        </HxButton>
    </div>
</div>

<div class="card mt-3">
    <div class="card-body px-0">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                        Job
                    </th>
                    <th>
                        Step
                    </th>
                    <th>
                        Alert
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (User is null || Jobs is null || Steps is null)
                {
                    <tr><td colspan="4" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
                }
                else
                {
                    var subscriptions = User.Subscriptions
                        .OfType<StepSubscription>()
                        .Select(sub =>
                        {
                            var step = Steps.FirstOrDefault(s => s.StepId == sub.StepId);
                            var job = Jobs.FirstOrDefault(j => j.JobId == step?.JobId);
                            return (sub, job, step);
                        })
                        .OrderBy(s => s.job?.JobName)
                        .ThenBy(s => s.step?.StepName)
                        .ToArray();
                    @if (!subscriptions.Any())
                    {
                        <tr>
                            <td colspan="3">No step subscriptions</td>
                        </tr>
                    }
                    foreach (var (sub, job, step) in subscriptions)
                    {
                        <tr>
                            <td>
                                @job?.JobName
                            </td>
                            <td>
                                <StepTypeIcon StepType="@step?.StepType" />
                                @step?.StepName
                            </td>
                            <td>
                                <div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="@(sub.SubscriptionId.ToString() + "_failure")"
                                               checked=@(sub.AlertType == AlertType.OnFailure)
                                        @onchange="() => ToggleSubscription(sub, AlertType.OnFailure)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId.ToString() + "_failure")">On failure</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="@(sub.SubscriptionId.ToString() + "_success")"
                                               checked=@(sub.AlertType == AlertType.OnSuccess)
                                        @onchange="() => ToggleSubscription(sub, AlertType.OnSuccess)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId.ToString() + "_success")">On success</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="radio" class="form-check-input" id="@(sub.SubscriptionId.ToString() + "_completion")"
                                               checked=@(sub.AlertType == AlertType.OnCompletion)
                                        @onchange="() => ToggleSubscription(sub, AlertType.OnCompletion)">
                                        <label class="form-check-label" for="@(sub.SubscriptionId.ToString() + "_completion")">On completion</label>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <HxButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto" title="Remove subscription" OnClick="() => RemoveSubscriptionAsync(sub)">
                                    <SvgIcon Icon="LucideIcon.Delete" />
                                </HxButton>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<HxOffcanvas @ref="_selectStepOffcanvas" Title="Select step" Backdrop="OffcanvasBackdrop.False">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <div class="input-group">
                    <div class="input-group-text">
                        <SvgIcon Icon="LucideIcon.Search" />
                    </div>
                    <input type="search" class="form-control form-control-sm" placeholder="Search jobs" @bind-value="_jobSearchTerm" @bind-value:event="oninput" />
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <div class="input-group">
                    <div class="input-group-text">
                        <SvgIcon Icon="LucideIcon.Search" />
                    </div>
                    <input type="search" class="form-control form-control-sm" placeholder="Search steps" @bind-value="_stepSearchTerm" @bind-value:event="oninput" />
                </div>
            </div>
            <div class="col-auto">
                <FilterDropdown FilterSet="_stepTypeFilter" Items="Steps?.Select(s => s.StepType).Distinct()" OnChange="StateHasChanged">
                    <TitleTemplate>
                        <SvgIcon Icon="LucideIcon.Wrench" />
                        Step type
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIcon StepType="item" />
                        @item.ToString()
                    </ItemTemplate>
                </FilterDropdown>
            </div>
        </div>
        <div class="row mt-3" style="height: calc(100vh - 260px); overflow-y: scroll;">
            <div class="col">
                <div class="list-group">
                    @if (Steps is not null && Jobs is not null)
                    {
                        var jobs = Jobs
                            .Where(j => string.IsNullOrEmpty(_jobSearchTerm) || j.JobName.ContainsIgnoreCase(_jobSearchTerm))
                            .OrderBy(j => j.JobName)
                            .Select(j =>
                            {
                                var expanded = _jobExpandState.GetValueOrDefault(j.JobId);
                                var availableSteps = GetAvailableSteps(j);
                                return (j, expanded, availableSteps);
                            })
                            .Where(j => j.availableSteps.Length > 0);
                        @foreach (var (job, expanded, availableSteps) in jobs)
                        {
                            <div class="list-group-item cursor-pointer" @onclick="() => _jobExpandState[job.JobId] = !expanded">
                                <h6>
                                    @if (expanded)
                                    {
                                        <SvgIcon Icon="LucideIcon.ChevronDown" />
                                    }
                                    else
                                    {
                                        <SvgIcon Icon="LucideIcon.ChevronRight" />
                                    }
                                    <HighlightableText Text="@job.JobName" PartToHighlight="@_jobSearchTerm" />
                                </h6>
                            </div>
                            @if (expanded)
                            {
                                @foreach (var step in availableSteps)
                                {
                                    <div class="ps-5 list-group-item list-group-item-action cursor-pointer" @onclick="() => AddSubscriptionAsync(step.StepId)">
                                        <StepTypeIcon StepType="step.StepType" />
                                        <HighlightableText Text="@step.StepName" PartToHighlight="@_stepSearchTerm" />
                                    </div>
                                }
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" OnClick="() => _selectStepOffcanvas.LetAsync(x => x.HideAsync())" Spinner="false">
            Close
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter]
    public User? User { get; set; }

    [Parameter]
    public IEnumerable<StepProjection>? Steps { get; set; }

    [Parameter]
    public IEnumerable<JobProjection>? Jobs { get; set; }

    [Parameter]
    public EventCallback OnSubscriptionCountChanged { get; set; }

    private static readonly JsonSerializerOptions JsonOptions = new() { WriteIndented = true };
    private readonly HashSet<StepType> _stepTypeFilter = [];
    private readonly Dictionary<Guid, bool> _jobExpandState = [];

    private HxOffcanvas? _selectStepOffcanvas;
    private string _stepSearchTerm = "";
    private string _jobSearchTerm = "";

    private IEnumerable<StepSubscription> Subscriptions => User?.Subscriptions.OfType<StepSubscription>() ?? [];

    private StepProjection[] GetAvailableSteps(JobProjection job)
    {
        if (Steps is null)
        {
            return [];
        }

        var steps = Steps
            .Where(s => s.JobId == job.JobId)
            .ToArray();

        IComparer<StepProjection> comparer = Comparer<StepProjection>.Default;
        if (job.ExecutionMode == ExecutionMode.Dependency)
        {
            try
            {
                comparer = new TopologicalStepProjectionComparer(steps);
            }
            catch (CyclicDependencyException ex)
            {
                var message = JsonSerializer.Serialize(ex.CyclicObjects, JsonOptions);
                Js.InvokeVoidAsync("console.log", message);
                Toaster.AddError("Error sorting steps", "Cyclic dependencies detected. See browser console for detailed output.");
            }
            catch (Exception ex)
            {
                Toaster.AddError("Error sorting steps", ex.Message);
            }
        }

        return steps
            .Where(s => string.IsNullOrEmpty(_stepSearchTerm) || (s.StepName?.ContainsIgnoreCase(_stepSearchTerm) ?? false))
            .Where(s => !_stepTypeFilter.Any() || _stepTypeFilter.Contains(s.StepType))
            .Where(s => Subscriptions.All(sub => s.StepId != sub.StepId))
            .OrderBy(s => s, comparer)
            .ToArray();
    }

    private async Task AddSubscriptionAsync(Guid stepId)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(User);
            var subscription = new StepSubscription(User.UserId, stepId);
            await Mediator.SendAsync(new CreateSubscriptionCommand(subscription));
            User.Subscriptions.Add(subscription);
            await OnSubscriptionCountChanged.InvokeAsync();
        }
        catch
        {
            Toaster.AddError("Error", "Error adding subscription");
        }
    }

    private async Task ToggleSubscription(StepSubscription subscription, AlertType alert)
    {
        try
        {
            subscription.AlertType = alert;
            await Mediator.SendAsync(new UpdateSubscriptionCommand(subscription));
        }
        catch (Exception)
        {
            Toaster.AddError("Error", "Error toggling subscription");
        }
    }

    private async Task RemoveSubscriptionAsync(Subscription subscription)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(User);
            await Mediator.SendAsync(new DeleteSubscriptionCommand(subscription.SubscriptionId));
            User.Subscriptions.Remove(subscription);
            await OnSubscriptionCountChanged.InvokeAsync();
        }
        catch (Exception)
        {
            Toaster.AddError("Error", "Error removing subscription");
        }
    }
}
