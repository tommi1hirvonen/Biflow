@inject MarkupHelperService MarkupHelper
@inject IDbContextFactory<BiflowContext> DbFactory
@inject SubscriptionsHelperService SubscriptionHelper
@inject IHxMessengerService Messenger

<div class="row mt-3">
    <div class="col">
        <div class="input-group input-group-sm me-3" style="max-width: 30rem;">
            <div class="input-group-text">
                @MarkupHelper.FromFile("icons/feather/filter.svg")
            </div>
            <input type="search" class="form-control" @bind-value="UsernameFilter" @bind-value:event="oninput" placeholder="Filter by user" />
            <input type="search" class="form-control" @bind-value="JobNameFilter" @bind-value:event="oninput" placeholder="Filter by job" />
        </div>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>
                                User
                            </th>
                            <th>
                                Email
                            </th>
                            <th>
                                Job
                            </th>
                            <th>
                                Subscription
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Users is null || Jobs is null)
                        {
                            <tr><td colspan="4">Loading...</td></tr>
                        }
                        else
                        {
                            @foreach (var user in Users
                                .Where(u => !UsernameFilter.Any() || (u.Username?.ContainsIgnoreCase(UsernameFilter) ?? false))
                                .OrderBy(u => u.Username))
                            {
                                foreach (var job in Jobs
                                    .Where(j => !JobNameFilter.Any() || (j.JobName?.ContainsIgnoreCase(JobNameFilter) ?? false))
                                    .OrderBy(j => j.JobName))
                                {
                                    var sub = user.Subscriptions.FirstOrDefault(s => s.JobId == job.JobId);
                                    <tr>
                                        <td>
                                            <HighlightableText Text="@user.Username" PartToHighlight="@UsernameFilter" />
                                        </td>
                                        <td>
                                            @user.Email
                                        </td>
                                        <td>
                                            <HighlightableText Text="@job.JobName" PartToHighlight="@JobNameFilter" />
                                        </td>
                                        <td>
                                            <div>
                                                <div class="form-check form-check-inline">
                                                    <input type="radio" class="form-check-input" id="@($"{user.Username}{job.JobId}none")"
                                                           checked=@(sub is null)
                                                           @onchange="() => RemoveSubscription(user, job)">
                                                    <label class="form-check-label" for="@($"{user.Username}{job.JobId}none")">None</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input type="radio" class="form-check-input" id="@($"{user.Username}{job.JobId}failure")"
                                                           checked=@(sub?.SubscriptionType == SubscriptionType.OnFailure)
                                                           @onchange="() => ToggleSubscription(user, job, SubscriptionType.OnFailure)">
                                                    <label class="form-check-label" for="@($"{user.Username}{job.JobId}failure")">On failure</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input type="radio" class="form-check-input" id="@($"{user.Username}{job.JobId}success")"
                                                           checked=@(sub?.SubscriptionType == SubscriptionType.OnSuccess)
                                                           @onchange="() => ToggleSubscription(user, job, SubscriptionType.OnSuccess)">
                                                    <label class="form-check-label" for="@($"{user.Username}{job.JobId}success")">On success</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input type="radio" class="form-check-input" id="@($"{user.Username}{job.JobId}completion")"
                                                           checked=@(sub?.SubscriptionType == SubscriptionType.OnCompletion)
                                                           @onchange="() => ToggleSubscription(user, job, SubscriptionType.OnCompletion)">
                                                    <label class="form-check-label" for="@($"{user.Username}{job.JobId}completion")">On completion</label>
                                                </div>
                                                <div class="form-check form-check-inline">
                                                    <input type="checkbox" class="form-check-input" id="@($"{user.Username}{job.JobId}overtime")"
                                                           checked=@(sub?.NotifyOnOvertime == true)
                                                           @onchange="args => ToggleSubscription(user, job, (bool)args.Value!)">
                                                    <label class="form-check-label" for="@($"{user.Username}{job.JobId}overtime")">On overtime</label>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {

    private IEnumerable<Job>? Jobs { get; set; }

    private IEnumerable<User>? Users { get; set; }

    private string UsernameFilter { get; set; } = string.Empty;

    private string JobNameFilter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<BiflowContext>(DbFactory.CreateDbContext);
        Users = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(u => u.Subscriptions)
            .ToListAsync();
        Jobs = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
    }

    private async Task RemoveSubscription(User user, Job job)
    {
        try
        {
            await SubscriptionHelper.RemoveSubscription(user, job);
        }
        catch (Exception)
        {
            Messenger.AddError("Error", "Error removing subscription");
        }
    }

    private async Task ToggleSubscription(User user, Job job, SubscriptionType subscriptionType)
    {
        try
        {
            await SubscriptionHelper.ToggleSubscription(user, job, subscriptionType);
        }
        catch (Exception)
        {
            Messenger.AddError("Error", "Error toggling subscription");
        }
    }

    private async Task ToggleSubscription(User user, Job job, bool onOvertime)
    {
        try
        {
            await SubscriptionHelper.ToggleSubscription(user, job, onOvertime);
        }
        catch (Exception)
        {
            Messenger.AddError("Error", "Error toggling subscription");
        }
    }
}
