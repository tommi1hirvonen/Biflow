@inject IDbContextFactory<BiflowContext> DbFactory
@inject SubscriptionsHelperService SubscriptionHelper
@inject IHxMessengerService Messenger

<div class="row mt-3 align-items-center">
    <div class="col-auto">
        <CxIcon Icon="FeatherIcon.Filter" />
        Filter
    </div>
    <div class="col-auto">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            <FilterDropdown TItem="User"
                            FilterSet="UserFilter"
                            Items="Users ?? Enumerable.Empty<User>()"
                            IdSelector="u => u.Username"
                            OnChange="StateHasChanged"
                            IsSearchable
                            TextSelector="u => u.Username">
                <ItemTemplate>
                    @context.Username
                </ItemTemplate>
                <TitleTemplate>
                    <CxIcon Icon="FeatherIcon.User" />
                    Users
                </TitleTemplate>
            </FilterDropdown>
            <FilterDropdown TItem="Job"
                            FilterSet="JobFilter"
                            Items="Jobs ?? Enumerable.Empty<Job>()"
                            IdSelector="j => j.JobId.ToString()"
                            OnChange="StateHasChanged"
                            IsSearchable
                            TextSelector="j => j.JobName">
                <ItemTemplate>
                    @context.JobName
                </ItemTemplate>
                <TitleTemplate>
                    <CxIcon Icon="LucideIcon.ClipboardList" />
                    Jobs
                </TitleTemplate>
            </FilterDropdown>
        </HxButtonGroup>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>
                                User
                            </th>
                            <th>
                                Email
                            </th>
                            <th>
                                Job
                            </th>
                            <th>
                                Subscription
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Users is null || Jobs is null)
                        {
                            <tr><td colspan="4" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
                        }
                        else if (!UserFilter.Any() && !JobFilter.Any())
                        {
                            <tr>
                                <td colspan="4">Apply filters to view subscriptions</td>
                            </tr>
                        }
                        else
                        {
                            var users = Users.Where(u => !UserFilter.Any() || UserFilter.Any(f => f.Username == u.Username)).ToList();
                            var jobs = Jobs.Where(j => !JobFilter.Any() || JobFilter.Any(f => f.JobId == j.JobId)).ToList();
                            var items = users.SelectMany(u => jobs.Select(j => (u, j))).ToList();
                            <Virtualize Items="items" SpacerElement="tr" Context="item">
                                @{
                                    var (user, job) = item;
                                    var sub = user.Subscriptions.FirstOrDefault(s => s.JobId == job.JobId);
                                }
                                <tr>
                                    <td>
                                        @user.Username
                                    </td>
                                    <td>
                                        @user.Email
                                    </td>
                                    <td>
                                        @job.JobName
                                    </td>
                                    <td>
                                        <div>
                                            <div class="form-check form-check-inline">
                                                <input type="radio" class="form-check-input" id="@($"{user.Username}{job.JobId}none")"
                                                   checked=@(sub is null)
                                                   @onchange="() => RemoveSubscription(user, job)">
                                                <label class="form-check-label" for="@($"{user.Username}{job.JobId}none")">None</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input type="radio" class="form-check-input" id="@($"{user.Username}{job.JobId}failure")"
                                                   checked=@(sub?.SubscriptionType == SubscriptionType.OnFailure)
                                                   @onchange="() => ToggleSubscription(user, job, SubscriptionType.OnFailure)">
                                                <label class="form-check-label" for="@($"{user.Username}{job.JobId}failure")">On failure</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input type="radio" class="form-check-input" id="@($"{user.Username}{job.JobId}success")"
                                                   checked=@(sub?.SubscriptionType == SubscriptionType.OnSuccess)
                                                   @onchange="() => ToggleSubscription(user, job, SubscriptionType.OnSuccess)">
                                                <label class="form-check-label" for="@($"{user.Username}{job.JobId}success")">On success</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input type="radio" class="form-check-input" id="@($"{user.Username}{job.JobId}completion")"
                                                   checked=@(sub?.SubscriptionType == SubscriptionType.OnCompletion)
                                                   @onchange="() => ToggleSubscription(user, job, SubscriptionType.OnCompletion)">
                                                <label class="form-check-label" for="@($"{user.Username}{job.JobId}completion")">On completion</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input type="checkbox" class="form-check-input" id="@($"{user.Username}{job.JobId}overtime")"
                                                   checked=@(sub?.NotifyOnOvertime == true)
                                                   @onchange="args => ToggleSubscription(user, job, (bool)args.Value!)">
                                                <label class="form-check-label" for="@($"{user.Username}{job.JobId}overtime")">On overtime</label>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {

    private IEnumerable<Job>? Jobs { get; set; }

    private IEnumerable<User>? Users { get; set; }

    private HashSet<User> UserFilter { get; set; } = new();

    private HashSet<Job> JobFilter { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run(DbFactory.CreateDbContext);
        Users = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(u => u.Subscriptions)
            .OrderBy(u => u.Username)
            .ToListAsync();
        Jobs = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(j => j.JobName)
            .ToListAsync();
    }

    private async Task RemoveSubscription(User user, Job job)
    {
        try
        {
            await SubscriptionHelper.RemoveSubscription(user, job);
        }
        catch (Exception)
        {
            Messenger.AddError("Error", "Error removing subscription");
        }
    }

    private async Task ToggleSubscription(User user, Job job, SubscriptionType subscriptionType)
    {
        try
        {
            await SubscriptionHelper.ToggleSubscription(user, job, subscriptionType);
        }
        catch (Exception)
        {
            Messenger.AddError("Error", "Error toggling subscription");
        }
    }

    private async Task ToggleSubscription(User user, Job job, bool onOvertime)
    {
        try
        {
            await SubscriptionHelper.ToggleSubscription(user, job, onOvertime);
        }
        catch (Exception)
        {
            Messenger.AddError("Error", "Error toggling subscription");
        }
    }
}
