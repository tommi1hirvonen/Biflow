@inject ISchedulerService SchedulerService

@code {
    [Parameter] public EventCallback<string?> OnStatusMessageResolved { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get the scheduler service status and notify the user of a possible error.
            try
            {
                var status = await SchedulerService.GetStatusAsync();
                var message = status.Match<string?>(
                    (Success _) => null,
                    (AuthorizationError _) => "Authorization failed when getting scheduler service status. Check the scheduler service auth configuration.",
                    (SchedulerError _) => "Scheduler service reported internal error. Check the scheduler service log for details.",
                    (UndefinedError _) => "Undefined error getting scheduler service status. Make sure the service is configured and running correctly.");
                if (message is not null)
                {
                    await OnStatusMessageResolved.InvokeAsync(message);
                }
            }
            catch
            {
                await OnStatusMessageResolved.InvokeAsync("Error getting scheduler service status. Make sure the service is configured and running correctly.");
            }
        }
    }
}
