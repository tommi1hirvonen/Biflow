@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject IMediator Mediator

@{
    var title = job.JobId == Guid.Empty ? "New job" : $"Edit {job.JobName}";
}

<HxOffcanvas @ref="offcanvas" Title="@title">
    <BodyTemplate>
        <EditForm Model="job" OnValidSubmit="OnSubmit" id="job_edit_form">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row">
                <div class="col">
                    <label class="form-label">Name</label>
                    <InputText @bind-Value="job.JobName" class="form-control" />
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit Color="ThemeColor.Success" FormId="job_edit_form">
            Save
        </HxSubmit>
        <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" OnClick="() => offcanvas.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public EventCallback<Job> OnJobSubmitted { get; set; }

    private HxOffcanvas? offcanvas;
    private Job job = new();

    private async Task OnSubmit()
    {
        try
        {
            IRequest command = job.JobId == Guid.Empty
                ? new CreateJobCommand(job)
                : new UpdateJobCommand(job);
            await Mediator.SendAsync(command);
            await offcanvas.LetAsync(x => x.HideAsync());
            await OnJobSubmitted.InvokeAsync(job);
            job = new();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error submitting job", ex.Message);
        }
    }

    public async Task ShowAsync(Job? job = null)
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            if (job is not null)
            {
                this.job = await context.Jobs
                    .AsNoTracking()
                    .FirstAsync(j => j.JobId == job.JobId);
            }
            else
            {
                this.job = new();
            }
            await offcanvas.LetAsync(x => x.ShowAsync());
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error loading job", ex.Message);
        }
    }

}
