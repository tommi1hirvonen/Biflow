@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject IMediator Mediator

@{
    var title = _job.JobId == Guid.Empty ? "New job" : $"Edit {_job.JobName}";
}

<HxOffcanvas @ref="_offcanvas" Title="@title">
    <BodyTemplate>
        <EditForm Model="_job" OnValidSubmit="OnSubmit" id="job_edit_form">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row">
                <div class="col">
                    <label class="form-label">Name</label>
                    <InputText @bind-Value="_job.JobName" class="form-control" />
                </div>
            </div>

            <div class="row mt-3">
                <div class="col">
                    <label class="form-label">Tags</label>
                    <TagInput TTag="JobTag"
                              Items="_allTags"
                              AllowCustomValues
                              SelectedItems="_job.Tags"
                              NewItemFromText="text => new JobTag(text) { Color = TagColor.DarkGray }" />
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit Color="ThemeColor.Success" FormId="job_edit_form">
            Save
        </HxSubmit>
        <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" OnClick="() => _offcanvas.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public EventCallback<Job> OnJobSubmitted { get; set; }

    private HxOffcanvas? _offcanvas;
    private Job _job = new();
    private List<JobTag> _allTags = [];

    private async Task OnSubmit()
    {
        try
        {
            await HandleTagsAsync(_job);
            if (_job.JobId == Guid.Empty)
            {
                var command = new CreateJobCommand(JobName: _job.JobName,
                    JobDescription: _job.JobDescription,
                    ExecutionMode: _job.ExecutionMode,
                    StopOnFirstError: _job.StopOnFirstError,
                    MaxParallelSteps: _job.MaxParallelSteps,
                    OvertimeNotificationLimitMinutes: _job.OvertimeNotificationLimitMinutes,
                    TimeoutMinutes: _job.TimeoutMinutes,
                    IsEnabled: true,
                    IsPinned: false,
                    JobTagIds: _job.Tags.Select(t => t.TagId).ToArray());
                var job = await Mediator.SendAsync(command);
                await OnJobSubmitted.InvokeAsync(job);
            }
            else
            {
                var command = new UpdateJobCommand(
                    JobId: _job.JobId,
                    JobName: _job.JobName,
                    JobDescription: _job.JobDescription,
                    ExecutionMode: _job.ExecutionMode,
                    StopOnFirstError: _job.StopOnFirstError,
                    OvertimeNotificationLimitMinutes: _job.OvertimeNotificationLimitMinutes,
                    TimeoutMinutes: _job.TimeoutMinutes,
                    JobTagIds: _job.Tags.Select(t => t.TagId).ToArray());
                _ = await Mediator.SendAsync(command);
                await OnJobSubmitted.InvokeAsync(_job);
            }
            await _offcanvas.LetAsync(x => x.HideAsync());
            _job = new();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error submitting job", ex.Message);
        }
    }

    public async Task ShowAsync(Job? job = null)
    {
        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            _allTags = await context.JobTags.ToListAsync();
            _allTags.Sort();
            if (job is not null)
            {
                _job = await context.Jobs
                    .AsNoTrackingWithIdentityResolution()
                    .Include(j => j.Tags)
                    .FirstAsync(j => j.JobId == job.JobId);
            }
            else
            {
                _job = new();
            }
            await _offcanvas.LetAsync(x => x.ShowAsync());
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error loading job", ex.Message);
        }
    }

    private async Task HandleTagsAsync(Job job)
    {
        var newTags = job.Tags.Where(t => t.TagId == Guid.Empty).ToArray();
        foreach (var tag in newTags)
        {
            var command = new CreateJobTagCommand(tag.TagName, tag.Color, tag.SortOrder);
            var createdTag = await Mediator.SendAsync(command);
            job.Tags.Remove(tag);
            job.Tags.Add(createdTag);
        }
    }
}
