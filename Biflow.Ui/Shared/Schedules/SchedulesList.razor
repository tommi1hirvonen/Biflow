@inject ToasterService Toaster
@inject IHxMessageBoxService Confirmer
@inject ISchedulerService SchedulerService
@inject IMediator Mediator

@{
    var triggerText = (UserState.Schedules.TriggersAfter, UserState.Schedules.TriggersBefore) switch
    {
        (DateTime a, DateTime b) => $"between {a} and {b}",
        (DateTime a, _) => $"after {a}",
        (_, DateTime b) => $"before {b}",
        _ => "any time"
    };
}

<div class="row mt-3">
    <div class="col-auto">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            <HxDropdownButtonGroup>
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" AutoClose="DropdownAutoClose.Outside">
                    Triggers: <span class="fw-normal">@triggerText</span>
                </HxDropdownToggleButton>
                <HxDropdownContent CssClass="p-3" style="min-width: 15rem;">
                    <div class="row">
                        <div class="col">
                            <label class="form-label">After</label>
                            <div class="input-group">
                                <input @bind="UserState.Schedules.TriggersAfter"
                                       @bind:format="yyyy-MM-ddTHH:mm:ss"
                                       class="form-control form-control-sm"
                                       type="datetime-local">
                                <button class="btn btn-sm btn-auto" @onclick="() => UserState.Schedules.TriggersAfter = null" title="Clear">
                                    <CxIcon Icon="FeatherIcon.X" />
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col">
                            <label class="form-label">Before</label>
                            <div class="input-group">
                                <input @bind="UserState.Schedules.TriggersBefore"
                                       @bind:format="yyyy-MM-ddTHH:mm:ss"
                                       class="form-control form-control-sm"
                                       type="datetime-local">
                                <button class="btn btn-sm btn-auto" @onclick="() => UserState.Schedules.TriggersBefore = null" title="Clear">
                                    <CxIcon Icon="FeatherIcon.X" />
                                </button>
                            </div>
                        </div>
                    </div>
                </HxDropdownContent>
            </HxDropdownButtonGroup>
            <HxDropdownButtonGroup>
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                    Presets
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    <HxDropdownItem OnClick="() => UserState.Schedules.SetTriggersInNext(TimeSpan.FromHours(1))">
                        Next 1h
                    </HxDropdownItem>
                    <HxDropdownItem OnClick="() => UserState.Schedules.SetTriggersInNext(TimeSpan.FromHours(3))">
                        Next 3h
                    </HxDropdownItem>
                    <HxDropdownItem OnClick="() => UserState.Schedules.SetTriggersInNext(TimeSpan.FromHours(12))">
                        Next 12h
                    </HxDropdownItem>
                    <HxDropdownItem OnClick="() => UserState.Schedules.SetTriggersInNext(TimeSpan.FromHours(24))">
                        Next 24h
                    </HxDropdownItem>
                </HxDropdownMenu>
            </HxDropdownButtonGroup>
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                      OnClick="() => { UserState.Schedules.TriggersAfter = null; UserState.Schedules.TriggersBefore = null; }"
                      title="Clear">
                <CxIcon Icon="FeatherIcon.X" />
            </HxButton>
        </HxButtonGroup>
    </div>
</div>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
    <div class="row mt-3">
        <div class="col-auto">
            <div class="row">
                <div class="col-auto">
                    <HxButton Color="ThemeColor.Success"
                              @onclick="async () => await editModal.LetAsync(x => x.ShowAsync(Guid.Empty))"
                              Enabled="Jobs is not null && Jobs?.Any() == true">
                        Add schedule
                    </HxButton>
                    <HxButton CssClass="ms-3" Color="ThemeColor.Primary" @onclick="SynchronizeSchedulerService">
                        <CxIcon Icon="FeatherIcon.RefreshCw" />
                        Synchronize
                    </HxButton>
                    <HxButton CssClass="ms-3 btn-auto" Color="ThemeColor.None" OnClick="ShowStatusOffcanvasAsync" Spinner="false" title="Show scheduler service status">
                        <CxIcon Icon="FeatherIcon.Info" />
                        Status
                    </HxButton>
                </div>
                <div class="col-xl-auto mt-xl-0 mt-3 d-flex align-items-center">
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" id="radio_all"
                               checked=@(UserState.Schedules.StateFilter == StateFilter.All)
                               @onchange="() => UserState.Schedules.StateFilter = StateFilter.All">
                        <label class="form-check-label" for="radio_all">All</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" id="radio_enabled"
                               checked=@(UserState.Schedules.StateFilter == StateFilter.Enabled)
                               @onchange="() => UserState.Schedules.StateFilter = StateFilter.Enabled">
                        <label class="form-check-label" for="radio_enabled">Enabled</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" id="radio_disabled"
                               checked=@(UserState.Schedules.StateFilter == StateFilter.Disabled)
                               @onchange="() => UserState.Schedules.StateFilter = StateFilter.Disabled">
                        <label class="form-check-label" for="radio_disabled">Disabled</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-auto ms-auto">
            <HxButton Color="ThemeColor.None" CssClass="btn-auto" OnClick="async () => await helpModal.LetAsync(x => x.ShowAsync())">
                <CxIcon Icon="FeatherIcon.HelpCircle" />
            </HxButton>
        </div>
    </div>
</AuthorizeView>

@{
    var schedules = FilteredSchedules
        ?.Where(s => UserState.Schedules.StateFilter switch { StateFilter.Enabled => s.IsEnabled, StateFilter.Disabled => !s.IsEnabled, _ => true })
        .Where(s => s.TriggersBetween(UserState.Schedules.TriggersAfter, UserState.Schedules.TriggersBefore))
        .OrderBy(s => s.Job.JobName)
        .ThenBy(s => s.ScheduleName)
        .AsEnumerable()
        ?? [];
    var count = FilteredSchedules?.Count() ?? 0;
    var selectedText = selectedSchedules.Count switch
    {
        1 => $"{selectedSchedules.Count} selected schedule",
        > 1 => $"{selectedSchedules.Count} selected schedules",
        _ => ""
    };
}

<Paginator TItem="Schedule"
           @ref="paginator"
           Items="schedules"
           Context="items"
           InitialPageSize="UserState.Schedules.PageSize"
           InitialPage="UserState.Schedules.CurrentPage"
           OnPageChanged="page => UserState.Schedules.CurrentPage = page"
           OnPageSizeChanged="size => UserState.Schedules.PageSize = size">
    
    <div class="row justify-content-xl-between sticky-top mt-1 py-2 bg-body" style="z-index: 999;">
        <div class="col">
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                @if (selectedSchedules.Count > 0)
                {
                    <HxButtonGroup Size="ButtonGroupSize.Small">
                        <HxDropdownButtonGroup>
                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                <CxIcon Icon="FeatherIcon.ToggleRight" />
                                Enable
                            </HxDropdownToggleButton>
                            <HxDropdownMenu>
                                <HxDropdownItem @onclick="() => ToggleSelectedEnabled(true)">
                                    Confirm
                                </HxDropdownItem>
                            </HxDropdownMenu>
                        </HxDropdownButtonGroup>
                        <HxDropdownButtonGroup>
                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                <CxIcon Icon="FeatherIcon.ToggleLeft" />
                                Disable
                            </HxDropdownToggleButton>
                            <HxDropdownMenu>
                                <HxDropdownItem @onclick="() => ToggleSelectedEnabled(false)">
                                    Confirm
                                </HxDropdownItem>
                            </HxDropdownMenu>
                        </HxDropdownButtonGroup>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="DeleteSelectedSchedulesAsync">
                            <CxIcon Icon="FeatherIcon.Trash2" />
                            Delete...
                        </HxButton>
                    </HxButtonGroup>
                }
            </AuthorizeView>
        </div>
        <div class="col-xl-auto mt-xl-0 mt-3 d-flex justify-content-end">
            <PaginationControls Paginator="paginator" />
        </div>
    </div>

    <div class="card shadow-sm pt-2 mb-4">
        <table class="table table-hover table-sm">
            <thead>
                <tr>
                    <th>
                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                            <div class="col text-muted d-flex align-items-center">
                                <TriStateCheckbox Checked="@(selectedSchedules.Count > 0 && FilteredSchedules?.Any() == true && count > 0)"
                                                  Indeterminate="@(selectedSchedules.Any() && selectedSchedules.Count != count)"
                                                  CheckedChanged="ToggleAllSchedulesSelected" />
                                <div class="text-muted small fw-normal">@selectedText</div>
                            </div>
                        </AuthorizeView>
                    </th>
                    <th>
                        Enabled
                    </th>
                    <th>
                        Cron expression
                    </th>
                    <th>
                        Next execution
                    </th>
                    <th>
                        Tag filters
                    </th>
                    <th>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (FilteredSchedules is null)
                {
                    <tr><td colspan="6" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
                }
                else if (FilteredSchedules.Count() == 0)
                {
                    <tr><td colspan="6">No schedules</td></tr>
                }
                else
                {
                    @foreach (var item in items)
                    {
                        <tr class="schedule-row @(item.IsEnabled ? null : "disabled")">
                            <td class="align-middle">
                                <div class="row g-1">
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                        <div class="col-auto align-items-center d-flex">
                                            <div class="form-check form-check me-0">
                                                <input type="checkbox" class="form-check-input" id="select_schedule_@item.ScheduleId"
                                                       checked=@selectedSchedules.Contains(item)
                                                       @onchange="args => { if (selectedSchedules.Contains(item)) selectedSchedules.Remove(item); else selectedSchedules.Add(item); }">
                                                <label class="form-check-label" for="select_schedule_@item.ScheduleId"></label>
                                            </div>
                                        </div>
                                    </AuthorizeView>
                                    <div class="col">
                                        <div class="row">
                                            <div class="col fw-semibold small">
                                                <HighlightableText Text="@item.ScheduleName" PartToHighlight="@UserState.Schedules.ScheduleFilter" />
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col">
                                                <a class="text-body small" href="@($"jobs/{item.JobId}/schedules")">
                                                    @item.Job.JobName
                                                </a>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col">
                                                @foreach (var tag in item.Tags.OrderBy(t => t.TagName))
                                                {
                                                    <TagBadge Tag="tag" CssClass="m-1" />
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td class="align-middle">
                                <div class="form-check form-switch">
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                        <input type="checkbox" class="form-check-input" id="@item.ScheduleId" checked=@item.IsEnabled @onchange="args => ToggleEnabled(args, item)">
                                        <label class="form-check-label" for="@item.ScheduleId"></label>
                                    </AuthorizeView>
                                    <AuthorizeView Roles="@(Roles.Viewer)">
                                        <input type="checkbox" class="form-check-input" disabled checked=@item.IsEnabled>
                                        <label class="form-check-label" for="@item.ScheduleId"></label>
                                    </AuthorizeView>
                                </div>
                            </td>
                            <td class="align-middle small">
                                <span>@item.CronExpression</span>
                                <br />
                                <span class="text-secondary small">@item.GetScheduleDescription()</span>
                            </td>
                            <td class="align-middle small">
                                <div class="d-inline-flex @(!item.IsEnabled || !item.Job.IsEnabled ? "text-body-tertiary" : null)">
                                    @item.NextFireTimes().FirstOrDefault()
                                    &nbsp;&nbsp;
                                    <HxTooltip Placement="TooltipPlacement.Auto"
                                       Text="@("Next execution(s) (first 15):\n" + string.Join("\n", item.NextFireTimes().Take(15)))"
                                       CssClass="white-space-pre">
                                        <CxIcon Icon="FeatherIcon.Info" />
                                    </HxTooltip>
                                </div>
                                <br />
                                <span class="text-body-tertiary small">
                                    @(!item.IsEnabled ? "(Schedule disabled)" : null)
                                    @(!item.Job.IsEnabled ? "(Job disabled)" : null)
                                </span>
                            </td>
                            <td class="align-middle small">
                                @if (!item.TagFilter.Any())
                                {
                                    <span class="text-secondary ms-2">No tag filters</span>
                                }
                                @foreach (var tag in item.TagFilter.OrderBy(t => t.TagName))
                                {
                                    <TagBadge Tag="tag" CssClass="m-1" />
                                }
                            </td>
                            <td class="align-middle" align="center">
                                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                    <HxButtonGroup Size="ButtonGroupSize.Small">
                                        <HxButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto"
                                                  @onclick="async () => await editModal.LetAsync(x => x.ShowAsync(item.ScheduleId))">
                                            <CxIcon Icon="FeatherIcon.Edit2" />
                                        </HxButton>
                                        <HxDropdownButtonGroup>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                                <CxIcon Icon="FeatherIcon.Trash2" />
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu>
                                                <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                <HxDropdownItem @onclick="() => DeleteScheduleAsync(item)">Confirm</HxDropdownItem>
                                            </HxDropdownMenu>
                                        </HxDropdownButtonGroup>
                                    </HxButtonGroup>
                                </AuthorizeView>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

</Paginator>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
    <ScheduleEditModal @ref="editModal" Jobs="Jobs" OnSubmit="OnScheduleSubmitAsync" />
</AuthorizeView>

<SchedulesHelpModal @ref="helpModal" />

<HxOffcanvas @ref="statusOffcanvas" Title="Scheduler service status" Backdrop="OffcanvasBackdrop.False">
    <BodyTemplate>
        @if (schedulerStatus is null)
        {
            <div class="row">
                <div class="col text-center">
                    <HxSpinner Color="ThemeColor.Secondary" />
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col">
                    <CodeEditor @ref="editor"
                                Language="json"
                                ReadOnly="true"
                                MinimapEnabled="false"
                                FontSize="12"
                                InitialValueExpression="() => schedulerStatus"
                                InitialHeight="calc(100vh - 170px)" />
                </div>
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" OnClick="() => statusOffcanvas.LetAsync(x => x.HideAsync())">
            Close
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [CascadingParameter] public UserState UserState { get; set; } = null!;

    [Parameter] public List<Schedule>? Schedules { get; set; }

    [Parameter] public List<Job>? Jobs { get; set; }

    [Parameter] public IEnumerable<Schedule>? FilteredSchedules { get; set; }

    [Parameter] public EventCallback OnSchedulesChanged { get; set; }

    private static readonly JsonSerializerOptions SerializerOptions = new() { WriteIndented = true };

    private ScheduleEditModal? editModal;
    private SchedulesHelpModal? helpModal;
    private HxOffcanvas? statusOffcanvas;
    private CodeEditor? editor;
    private string? schedulerStatus = null;
    private Paginator<Schedule>? paginator;
    private HashSet<Schedule> selectedSchedules = [];

    private async Task ToggleEnabled(ChangeEventArgs args, Schedule schedule)
    {
        bool value = (bool)args.Value!;
        try
        {
            await Mediator.SendAsync(new ToggleScheduleCommand(schedule.ScheduleId, value));
            schedule.IsEnabled = value;
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error toggling schedule", ex.Message);
        }
    }

    private async Task ToggleSelectedEnabled(bool value)
    {
        try
        {
            foreach (var schedule in selectedSchedules)
            {
                await Mediator.SendAsync(new ToggleScheduleCommand(schedule.ScheduleId, value));
                schedule.IsEnabled = value;
            }

        }
        catch (Exception ex)
        {
            Toaster.AddError("Error toggling schedule", ex.Message);
        }
    }

    private async Task OnScheduleSubmitAsync(Schedule schedule)
    {
        ArgumentNullException.ThrowIfNull(Jobs);
        ArgumentNullException.ThrowIfNull(Schedules);

        var job = Jobs.First(j => j.JobId == schedule.JobId);
        if (job.Schedules.FirstOrDefault(s => s.ScheduleId == schedule.ScheduleId) is Schedule s)
        {
            job.Schedules.Remove(s);
        }
        job.Schedules.Add(schedule);
        schedule.Job = job;
        Schedules.RemoveAll(s => s.ScheduleId == schedule.ScheduleId);
        Schedules.Add(schedule);
        await OnSchedulesChanged.InvokeAsync();
    }

    private async Task DeleteScheduleAsync(Schedule schedule)
    {
        try
        {
            await Mediator.SendAsync(new DeleteScheduleCommand(schedule.ScheduleId));
            Schedules?.Remove(schedule);
            await OnSchedulesChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error deleting schedule", ex.Message);
        }
    }

    private async Task DeleteSelectedSchedulesAsync()
    {
        if (!await Confirmer.ConfirmAsync("Delete selected schedules", $"Delete {selectedSchedules.Count} schedule(s)?"))
        {
            return;
        }
        try
        {
            foreach (var schedule in selectedSchedules)
            {
                await Mediator.SendAsync(new DeleteScheduleCommand(schedule.ScheduleId));
                Schedules?.Remove(schedule);
            }
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error deleting schedules", ex.Message);
        }
        selectedSchedules.Clear();
        await OnSchedulesChanged.InvokeAsync();
    }

    private void ToggleAllSchedulesSelected(bool value)
    {
        if (value)
        {
            var schedulesToAdd = FilteredSchedules?.Where(s => !selectedSchedules.Contains(s)) ?? [];
            foreach (var s in schedulesToAdd) selectedSchedules.Add(s);
        }
        else
        {
            selectedSchedules.Clear();
        }
    }

    private async Task ShowStatusOffcanvasAsync()
    {
        schedulerStatus = null;
        StateHasChanged();
        await statusOffcanvas.LetAsync(x => x.ShowAsync());
        try
        {
            var status = await SchedulerService.GetStatusAsync();
            schedulerStatus = status.Match(
                (Success success) => GenerateStatusJson(success.Jobs),
                (AuthorizationError error1) => "Authorization failed when getting scheduler service status. Check the scheduler service auth configuration.",
                (SchedulerError error2) => "Scheduler service reported internal error. Check the scheduler service log for details.",
                (UndefinedError error3) => "Undefined error getting scheduler service status. Make sure the service is configured and running correctly.");
        }
        catch (Exception ex)
        {
            schedulerStatus = $"Error getting scheduler service status. Make sure the service is configured and running correctly.\n\n{ex.Message}";
        }
    }

    private string GenerateStatusJson(IEnumerable<Scheduler.Core.JobStatus> jobs)
    {
        // Add names if they can be found from the component state's lists.
        var statuses = jobs.Select(j =>
        {
            var jobName = Jobs?.FirstOrDefault(job => job.JobId.ToString().ToLower() == j.JobId.ToLower())?.JobName;
            var schedules = j.Schedules.Select(s =>
            {
                var scheduleName = Schedules?.FirstOrDefault(sched => sched.ScheduleId.ToString().ToLower() == s.ScheduleId.ToLower())?.ScheduleName;
                return new ScheduleStatus(s.ScheduleId, scheduleName, s.CronExpression, s.IsEnabled, s.IsRunning, s.DisallowConcurrentExecution);
            }).OrderBy(s => s.ScheduleName);

            return new JobStatus(j.JobId, jobName, schedules);
        }).OrderBy(j => j.JobName);
        return JsonSerializer.Serialize(statuses, SerializerOptions);
    }

    private async Task SynchronizeSchedulerService()
    {
        try
        {
            await SchedulerService.SynchronizeAsync();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error synchronizing", ex.Message);
        }
    }

    private record JobStatus(string JobId, string? JobName, IEnumerable<ScheduleStatus> Schedules);

    private record ScheduleStatus(string ScheduleId, string? ScheduleName, string? CronExpression, bool IsEnabled, bool IsRunning, bool DisallowConcurrentExecution);
}
