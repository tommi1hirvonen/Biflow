@using System.Globalization

@inject ToasterService Toaster
@inject IMediator Mediator
@inject IHxMessageBoxService Confirmer

<div class="row justify-content-between gap-2 mt-3">
    <div class="col-auto">
        <form class="d-inline-flex align-items-center" id="executions_form" @onsubmit="StateHasChanged" style="flex-direction: unset !important;">
            <label class="me-2">From</label>
            <div class="input-group">
                <div class="input-group-text">
                    <SvgIcon Icon="LucideIcon.Calendar" />
                </div>
                <input @bind="Start" @bind:format="yyyy-MM-ddTHH:mm:ss" class="form-control form-control-sm" type="datetime-local">
            </div>
            <label class="mx-2">To</label>
            <div class="input-group">
                <div class="input-group-text">
                    <SvgIcon Icon="LucideIcon.Calendar" />
                </div>
                <input @bind="End" @bind:format="yyyy-MM-ddTHH:mm:ss" class="form-control form-control-sm" type="datetime-local">
            </div>
        </form>
    </div>
    <div class="col-auto">
        <div class="alert alert-secondary">
            Only enabled jobs and schedules are displayed in the schedules forecast graph.
        </div>
    </div>
</div>

@{
    var currentTimePercentage = GetCurrentTimePercentage();
}

<div class="row my-2">
    <div class="col">
        <div class="card">
            <div class="card-body">
                <div class="row" style="height: 40px;">
                    <div class="col-xl-3 col-lg-4 col-5 py-1 d-flex align-items-center justify-content-end">
                    </div>
                    <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center" style="position: relative;">
                        @for (int i = 0; i <= Columns; i++)
                        {
                            var percentage = i * 100.0 / Columns;
                            @*With screen sizes < xl only show every other line*@
                            <div class="@(i % 2 != 0 ? "d-none d-xl-flex" : "d-flex") align-items-center text-body-secondary"
                             style="height: 100%; border-left: 1px dashed var(--bs-border-color); position: absolute; left: @($"{percentage.ToString("F10", CultureInfo.InvariantCulture)}%");">
                                @if (i < Columns)
                                {
                                    <small>@GetDateFromPercentage(percentage)<br />@GetTimeFromPercentage(percentage)</small>
                                }
                            </div>
                        }
                        @if (currentTimePercentage is > 0 and < 100)
                        {
                            <div class="d-flex align-items-center" style="height: 100%; border-left: 1px solid var(--bs-danger); position: absolute; left: @(currentTimePercentage.ToString("F10", CultureInfo.InvariantCulture))%;"></div>
                        }
                    </div>
                </div>
                @if (FilteredSchedules is not null)
                {
                    var jobs = FilteredSchedules
                        .GroupBy(key => key.Job)
                        .Where(g => g.Key.IsEnabled)
                        .OrderBy(g => g.Key.JobName)
                        .Select(g =>
                        {
                            var schedules = g
                                .Where(s => s.IsEnabled)
                                .Select(s =>
                                {
                                    var nextFireTimes = s.NextFireTimes(Start)
                                        .TakeWhile(t => t is not null && t < End)
                                        .Cast<DateTime>()
                                        .ToArray();
                                    return (Schedule: s, NextFireTimes: nextFireTimes);
                                })
                                .Where(s => s.NextFireTimes.Length > 0)
                                .ToArray();
                            return (Job: g.Key, Schedules: schedules);
                        })
                        .Where(j => j.Schedules.Length > 0)
                        .ToArray();
                    if (jobs.Length == 0)
                    {
                        <div class="row border-top">
                            <div class="col py-1">
                                <small>
                                    No active jobs and schedules for selected time range
                                </small>
                            </div>
                        </div>
                    }
                    foreach (var (job, schedules) in jobs)
                    {
                        <div class="row border-top">
                            <div class="col-xl-3 col-lg-4 col-5 text-end py-1">
                                <small>
                                    @job.JobName
                                </small>
                            </div>
                            <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center" style="position: relative;">
                                @for (double i = 0; i <= Columns; i++)
                                {
                                    var percentage = i * 100.0 / Columns;
                                    <div class="d-flex align-items-center" style="height: 100%; border-left: 1px dashed var(--bs-border-color); position: absolute; left: @($"{percentage.ToString("F10", CultureInfo.InvariantCulture)}%");"></div>
                                }
                                @if (currentTimePercentage is > 0 and < 100)
                                {
                                    <div class="d-flex align-items-center" style="height: 100%; border-left: 1px solid var(--bs-danger); position: absolute; left: @(currentTimePercentage.ToString("F10", CultureInfo.InvariantCulture))%;"></div>
                                }
                                @foreach (var (schedule, nextFireTimes) in schedules)
                                {
                                    foreach (var dt in nextFireTimes)
                                    {
                                        var offset = GetOffset(dt);
                                        <HxDropdown CssClass="d-flex align-items-center" style="@($"height: 70%; width: 10px; background: var(--bs-primary); position: absolute; left: {offset.ToString("F10", CultureInfo.InvariantCulture)}%;")">
                                            <HxDropdownToggleElement style="cursor: pointer; width: 100%; height: 100%;" title="@($"{schedule.ScheduleName}; {schedule.GetScheduleDescription()}; {dt}")">
                                                &nbsp;
                                            </HxDropdownToggleElement>
                                            <HxDropdownMenu>
                                                <HxDropdownHeader>
                                                    @schedule.ScheduleName
                                                </HxDropdownHeader>
                                                <HxDropdownItem OnClick="() => DisableScheduleAsync(schedule)">
                                                    <SvgIcon Icon="LucideIcon.CirclePause" />
                                                    Disable schedule
                                                </HxDropdownItem>
                                                <HxDropdownItem OnClick="() => DeleteScheduleAsync(schedule)">
                                                    <SvgIcon Icon="LucideIcon.Trash2" />
                                                    Delete schedule...
                                                </HxDropdownItem>
                                            </HxDropdownMenu>
                                        </HxDropdown>
                                    }
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<Schedule>? Schedules { get; set; }

    [Parameter] public IEnumerable<Schedule>? FilteredSchedules { get; set; }

    [Parameter] public EventCallback OnSchedulesChanged { get; set; }

    private const int Columns = 12;

    private DateTime Start
    {
        get => _start;
        set
        {
            try
            {
                if (value >= _end)
                {
                    var diff = value - _start;
                    _end = _end.Add(diff);
                }
                _start = value;
            }
            catch (ArgumentOutOfRangeException) { }
        }
    }

    private DateTime _start = DateTime.Today;

    private DateTime End
    {
        get => _end;
        set
        {
            try
            {
                if (value <= _start)
                {
                    var diff = value - _end;
                    _start = _start.Add(diff);
                }
                _end = value;
            }
            catch (ArgumentOutOfRangeException) { }
        }
    }

    private DateTime _end = DateTime.Today.AddDays(1);

    private long MinTicks => Start.Ticks;

    private long MaxTicks => End.Ticks;

    private double GetCurrentTimePercentage()
    {
        var result = (double)(DateTime.Now.Ticks - MinTicks) / (MaxTicks - MinTicks) * 100;
        return result;
    }

    private string GetTimeFromPercentage(double percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("t");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100.0;
        var time = new DateTime(Convert.ToInt64(ticks));
        return time.ToString("t");
    }

    private string GetDateFromPercentage(double percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("d");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100.0;
        var time = new DateTime(Convert.ToInt64(ticks));
        return time.ToString("d");
    }

    private double GetOffset(DateTime dt)
    {
        var ticks = dt.Ticks;
        var offset = (double)(ticks - MinTicks) / (MaxTicks - MinTicks) * 100;
        return offset;
    }

    private async Task DeleteScheduleAsync(Schedule schedule)
    {
        if (!await Confirmer.ConfirmAsync("Delete schedule", $"Delete schedule {schedule.ScheduleName}?"))
        {
            return;
        }
        try
        {
            await Mediator.SendAsync(new DeleteScheduleCommand(schedule.ScheduleId));
            Schedules?.Remove(schedule);
            await OnSchedulesChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error deleting schedule", ex.Message);
        }
    }

    private async Task DisableScheduleAsync(Schedule schedule)
    {
        try
        {
            await Mediator.SendAsync(new ToggleScheduleCommand(schedule.ScheduleId, false));
            schedule.IsEnabled = !schedule.IsEnabled;
            await OnSchedulesChanged.InvokeAsync();
            Toaster.AddSuccess("Schedule disabled", 2500);
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error toggling schedule", ex.Message);
        }
    }
}
