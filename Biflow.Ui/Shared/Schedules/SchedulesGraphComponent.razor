@using System.Globalization

<div class="row justify-content-between gap-2">
    <div class="col-auto">
        <form class="d-inline-flex align-items-center" id="executions_form" @onsubmit="StateHasChanged" style="flex-direction: unset !important;">
            <label class="me-2">From</label>
            <div class="input-group">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.Calendar" />
                </div>
                <input @bind="Start" @bind:format="yyyy-MM-ddTHH:mm:ss" class="form-control form-control-sm" type="datetime-local">
            </div>
            <label class="mx-2">To</label>
            <div class="input-group">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.Calendar" />
                </div>
                <input @bind="End" @bind:format="yyyy-MM-ddTHH:mm:ss" class="form-control form-control-sm" type="datetime-local">
            </div>
        </form>
    </div>
    <div class="col-auto">
        <div class="alert alert-secondary">
            Only enabled jobs and schedules are displayed in the schedules forecast graph.
        </div>
    </div>
</div>

<div class="row mx-1 my-2">
    <div class="col">
        <div class="row" style="height: 40px;">
            <div class="col-xl-3 col-lg-4 col-5 py-1 d-flex align-items-center justify-content-end">
            </div>
            <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center" style="position: relative;">
                @for (int i = 0; i <= Columns; i++)
                {
                    var percentage = i * 100.0 / Columns;
                    @*With screen sizes < xl only show every other line*@
                    <div class="@(i % 2 != 0 ? "d-none d-xl-flex" : "d-flex") align-items-center"
                     style="height: 100%; border-left: 1px dashed #ccc; position: absolute; left: @($"{percentage.ToString("F10", CultureInfo.InvariantCulture)}%");">
                        @if (i < Columns)
                        {
                            <small>@GetDateFromPercentage(percentage)<br />@GetTimeFromPercentage(percentage)</small>
                        }
                    </div>
                }
            </div>
        </div>
        @if (Schedules is not null)
        {
            var jobs = Schedules.GroupBy(key => key.Job).OrderBy(g => g.Key.JobName);
            foreach (var job in jobs)
            {
                if (!job.Key.IsEnabled)
                {
                    continue;
                }
                <div class="row border-top">
                    <div class="col-xl-3 col-lg-4 col-5 text-end py-1">
                        <small>
                            @job.Key.JobName
                        </small>
                    </div>
                    <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center" style="position: relative;">
                        @for (double i = 0; i <= Columns; i++)
                        {
                            var percentage = i * 100.0 / Columns;
                            <div class="d-flex align-items-center" style="height: 100%; border-left: 1px dashed #ccc; position: absolute; left: @($"{percentage.ToString("F10", CultureInfo.InvariantCulture)}%");"></div>
                        }
                        @foreach (var schedule in job)
                        {
                            if (!schedule.IsEnabled)
                            {
                                continue;
                            }
                            var nextFireTimes = schedule.NextFireTimesSequence(Start).TakeWhile(t => t is not null && t < End).Cast<DateTime>();
                            foreach (var dt in nextFireTimes)
                            {
                                var offset = GetOffset(dt);
                                <div class="progress" style="position: absolute; width: 1%; left: @($"{offset.ToString("F10", CultureInfo.InvariantCulture)}%");" title="@schedule.ScheduleName; @schedule.GetScheduleDescription(); @dt">
                                    <div class="progress-bar" style="width: 100%;"></div>
                                </div>    
                            }
                        }
                    </div>
                </div>  
            }            
        }
    </div>
</div>

@code {
    [Parameter] public List<Schedule>? Schedules { get; set; }

    private const int Columns = 12;

    private DateTime Start
    {
        get => _start;
        set
        {
            if (value >= _end)
            {
                var diff = value - _start;
                _end = _end.Add(diff);
            }
            _start = value;
        }
    }

    private DateTime _start = DateTime.Today;

    private DateTime End
    {
        get => _end;
        set
        {
            if (value <= _start)
            {
                var diff = value - _end;
                _start = _start.Add(diff);
            }
            _end = value;
        }
    }

    private DateTime _end = DateTime.Today.AddDays(1);

    private long MinTicks => Start.Ticks;
    
    private long MaxTicks => End.Ticks;

    private string GetTimeFromPercentage(double percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("t");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100.0;
        var time = new DateTime(Convert.ToInt64(ticks));
        return time.ToString("t");
    }

    private string GetDateFromPercentage(double percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("d");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100.0;
        var time = new DateTime(Convert.ToInt64(ticks));
        return time.ToString("d");
    }

    private double GetOffset(DateTime dt)
    {
        var ticks = dt.Ticks;
        var offset = (double)(ticks - MinTicks) / (MaxTicks - MinTicks) * 100;
        return offset;
    }
}
