@inject IDbContextFactory<AppDbContext> DbFactory
@inject IHxMessengerService Messenger
@inject ISchedulerService SchedulerService

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
    <div class="row mt-3">
        <div class="col">
            <HxButton Color="ThemeColor.Success"
                      @onclick="async () => await EditModal.LetAsync(x => x.ShowAsync(Guid.Empty))"
                      Enabled="Jobs is not null && Jobs?.Any() == true">
                Add schedule
            </HxButton>
            <HxButton CssClass="ms-3" Color="ThemeColor.Primary" @onclick="SynchronizeSchedulerService">
                <CxIcon Icon="FeatherIcon.RefreshCw" />
                Synchronize
            </HxButton>
        </div>
        <div class="col text-end">
            <HxButton Color="ThemeColor.None" CssClass="btn-auto" OnClick="async () => await HelpModal.LetAsync(x => x.ShowAsync())">
                <CxIcon Icon="FeatherIcon.HelpCircle" />
            </HxButton>
        </div>
    </div>
</AuthorizeView>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Job
                </th>
                <th>
                    Schedule name
                </th>
                <th>
                    Enabled
                </th>
                <th>
                    Cron expression
                </th>
                <th>
                    Next execution
                </th>
                <th>
                    Tag filters
                </th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (FilteredSchedules is null)
            {
                <tr><td colspan="7" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (FilteredSchedules.Count() == 0)
            {
                <tr><td colspan="7">No schedules</td></tr>
            }
            else
            {
                @foreach (var item in FilteredSchedules)
                {
                    <tr class="schedule-row @(item.IsEnabled ? null : "disabled")">
                        <td class="align-middle">
                            <a class="text-body" href="@($"jobs/{item.JobId}/schedules")">
                                @item.Job.JobName
                            </a>
                        </td>
                        <td class="align-middle">
                            @item.ScheduleName
                        </td>
                        <td class="align-middle">
                            <div class="form-check form-switch">
                                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                    <input type="checkbox" class="form-check-input" id="@item.ScheduleId" checked=@item.IsEnabled @onchange="args => ToggleEnabled(args, item)">
                                    <label class="form-check-label" for="@item.ScheduleId"></label>
                                </AuthorizeView>
                                <AuthorizeView Roles="@(Roles.Viewer)">
                                    <input type="checkbox" class="form-check-input" disabled checked=@item.IsEnabled>
                                    <label class="form-check-label" for="@item.ScheduleId"></label>
                                </AuthorizeView>
                            </div>
                        </td>
                        <td>
                            <div class="d-inline-flex">
                                @item.CronExpression
                                &nbsp;&nbsp;
                                <HxTooltip Placement="TooltipPlacement.Auto"
                                   Text="@item.GetScheduleDescription()">
                                    <CxIcon Icon="FeatherIcon.Info" />
                                </HxTooltip>
                            </div>
                        </td>
                        <td>
                            <div class="d-inline-flex @(!item.IsEnabled || !item.Job.IsEnabled ? "text-body-tertiary" : null)">
                                @item.NextFireTimes().FirstOrDefault()
                                @(!item.IsEnabled ? "(Schedule disabled)" : null)
                                @(!item.Job.IsEnabled ? "(Job disabled)" : null)
                                &nbsp;&nbsp;
                                <HxTooltip Placement="TooltipPlacement.Auto"
                                   Text="@("Next execution(s) (first 15):\n" + string.Join("\n", item.NextFireTimes().Take(15)))"
                                   CssClass="white-space-pre">
                                    <CxIcon Icon="FeatherIcon.Info" />
                                </HxTooltip>
                            </div>
                        </td>
                        <td>
                            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                <HxButtonGroup Size="ButtonGroupSize.Small">
                                    <HxButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto"
                                      @onclick="async () => await EditModal.LetAsync(x => x.ShowAsync(item.ScheduleId))">
                                        <CxIcon Icon="FeatherIcon.Edit2" />
                                    </HxButton>
                                </HxButtonGroup>
                            </AuthorizeView>
                            @if (!item.Tags.Any())
                            {
                                <span class="text-secondary ms-2">No tag filters</span>
                            }
                            @foreach (var tag in item.Tags.OrderBy(t => t.TagName))
                            {
                                <TagComponent Tag="tag" CssClass="m-1" />
                            }
                        </td>
                        <td align="center">
                            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                        <CxIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteScheduleAsync(item)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
    <ScheduleEditModal @ref="EditModal" Jobs="Jobs" OnSubmit="OnScheduleSubmitAsync" />
</AuthorizeView>

<SchedulesHelpModal @ref="HelpModal" />

@code {
    [Parameter] public List<Schedule>? Schedules { get; set; }

    [Parameter] public List<Job>? Jobs { get; set; }

    [Parameter] public IEnumerable<Schedule>? FilteredSchedules { get; set; }

    [Parameter] public EventCallback OnSchedulesChanged { get; set; }

    private ScheduleEditModal? EditModal { get; set; }

    private SchedulesHelpModal? HelpModal { get; set; }

    private async Task ToggleEnabled(ChangeEventArgs args, Schedule schedule)
    {
        bool value = (bool)args.Value!;
        try
        {
            using var context = DbFactory.CreateDbContext();
            using var transaction = context.Database.BeginTransaction();
            context.Attach(schedule);
            schedule.IsEnabled = !schedule.IsEnabled;
            await context.SaveChangesAsync();
            try
            {
                await SchedulerService.ToggleScheduleEnabledAsync(schedule, value);
                await transaction.CommitAsync();
            }
            catch (Exception)
            {
                await transaction.RollbackAsync();
                schedule.IsEnabled = !schedule.IsEnabled;
                throw;
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling schedule", ex.Message);
        }
    }

    private async Task OnScheduleSubmitAsync(Schedule schedule)
    {
        Schedules?.RemoveAll(s => s.ScheduleId == schedule.ScheduleId);
        Schedules?.Add(schedule);
        await OnSchedulesChanged.InvokeAsync();
    }

    private async Task DeleteScheduleAsync(Schedule schedule)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            using var transaction = context.Database.BeginTransaction();
            context.Schedules.Remove(schedule);
            await context.SaveChangesAsync();
            try
            {
                await SchedulerService.RemoveScheduleAsync(schedule);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }

            Schedules?.Remove(schedule);
            await OnSchedulesChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting schedule", ex.Message);
        }
    }

    private async Task SynchronizeSchedulerService()
    {
        try
        {
            await SchedulerService.SynchronizeAsync();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error synchronizing", ex.Message);
        }
    }
}
