@using Quartz

@inject IHxMessengerService Messenger
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ISchedulerService SchedulerService
@inject IJSRuntime JS

<HxOffcanvas @ref="Offcanvas" Size="OffcanvasSize.Regular" Title="@(Schedule.ScheduleId == Guid.Empty ? "New schedule" : "Edit schedule")">
    <BodyTemplate>
        <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
        <EditForm id="schedule_form" Model="Schedule" OnValidSubmit="SubmitSchedule" Context="_context">
            <div class="row">
                <div class="col">
                    <DataAnnotationsValidator />
                    <div>
                        <label class="form-label">Job</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <CxIcon Icon="LucideIcon.ClipboardList" />
                            </div>
                            <InputSelect DisplayName="Job" class="form-select" @bind-Value="Schedule.JobId" disabled=@(Schedule.ScheduleId != Guid.Empty || Job is not null)>
                                @if (Job is not null)
                                {
                                    <option value="@Job.JobId">@Job.JobName</option>
                                }
                                else
                                {
                                    <option value="">Select job</option>
                                    foreach (var category in JobCategories)
                                    {
                                        <optgroup label="@(category?.CategoryName ?? "No category")">
                                            @foreach (var job in Jobs.Where(j => j.CategoryId == category?.CategoryId).OrderBy(j => j.JobName))
                                            {
                                                <option value="@job.JobId">
                                                    @job.JobName
                                                </option>
                                            }
                                        </optgroup>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <ValidationMessage For="() => Schedule.JobId" />
                    <div class="mt-3">
                        <label class="form-label">Name</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <CxIcon Icon="FeatherIcon.Edit3" />
                            </div>
                            <InputText DisplayName="Name" class="form-control" @bind-Value="Schedule.ScheduleName"></InputText>
                        </div>
                    </div>
                    <ValidationMessage For="() => Schedule.ScheduleName" />
                    <div class="mt-3">
                        <label class="form-label">
                            Cron expression
                            <HxPopover Trigger="PopoverTrigger.Hover" Content="Schedule cron expression cannot be edited once the schedule has been created. To change the expression, a new schedule needs to be created and the old one removed.">
                                <CxIcon Icon="FeatherIcon.Info" />
                            </HxPopover>
                        </label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <CxIcon Icon="FeatherIcon.Calendar" />
                            </div>
                            <OnInputText class="form-control" @bind-Value="Schedule.CronExpression" />
                        </div>
                    </div>
                    <ValidationMessage For="() => Schedule.CronExpression" />
                    @if (CronExpression.IsValidExpression(Schedule.CronExpression))
                    {
                        var nextFireTimes = Schedule.NextFireTimes().Take(10).ToList();
                        <small class="text-secondary">Description:</small>
                        <br />
                        <small class="text-secondary ms-3">@Schedule.GetScheduleDescription()</small>
                        <br />
                        <small class="text-secondary mt-2">Next execution(s) (showing first 10):</small>
                        <div class="row">
                            <div class="col">
                                @foreach (var fireTime in nextFireTimes.Take(5))
                                {
                                    <small class="row text-secondary ms-3">@fireTime</small>
                                }
                            </div>
                            <div class="col">
                                @foreach (var fireTime in nextFireTimes.Skip(5).Take(5))
                                {
                                    <small class="row text-secondary ms-3">@fireTime</small>
                                }
                            </div>
                        </div>
                    }
                    <div class="row mt-3">
                        <label class="form-label">Tag filters</label>
                        <HxInputTags @bind-Value="Tags"
                                     DataProvider="GetTagSuggestions"
                                     AllowCustomTags="false"
                                     SuggestMinimumLength="0"
                                     SuggestDelay="0"
                                     TagBadgeSettings="new BadgeSettings() { Color = ThemeColor.Secondary }" />
                        <div class="form-text">Use tag filters to only include steps with specific tags in scheduled executions.</div>
                    </div>
                    <div class="row mt-3">
                        <div class="col">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="schedule_concurrency_check"
                                       checked=@Schedule.DisallowConcurrentExecution
                                       @bind-value="Schedule.DisallowConcurrentExecution">
                                <label class="form-check-label fw-normal" for="schedule_concurrency_check">
                                    Disallow concurrent execution
                                    <HxPopover Trigger="PopoverTrigger.Hover" Content="Allow only one concurrent execution of this job and schedule. This option is useful in cases where the job's duration might overlap with the schedule's next fire time but concurrent execution should not be allowed.">
                                        <CxIcon Icon="FeatherIcon.Info" />
                                    </HxPopover>
                                </label>
                            </div>
                        </div>
                    </div>
                    
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit FormId="schedule_form" Color="ThemeColor.Success">Save</HxSubmit>
        <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    // Optional - new schedules will be locked to this job if provided
    [Parameter] public Job? Job { get; set; }

    [Parameter] public IEnumerable<Job> Jobs { get; set; } = Enumerable.Empty<Job>();

    [Parameter] public EventCallback<Schedule> OnSubmit { get; set; }

    private Schedule Schedule { get; set; } = new(Guid.Empty) { Tags = new List<Tag>() }; // assign placeholder

    private HxOffcanvas? Offcanvas { get; set; }

    private List<string> Tags { get; set; } = new();
    public IEnumerable<Tag> AllTags { get; set; } = Enumerable.Empty<Tag>();

    private IEnumerable<JobCategory?> JobCategories => Jobs
        .Select(j => j.Category)
        .Distinct()
        .OrderBy(c => c is null)
        .ThenBy(c => c?.CategoryName);

    private async Task<InputTagsDataProviderResult> GetTagSuggestions(InputTagsDataProviderRequest request)
    {
        await Task.Delay(50); // needed for the HxInputTags component to behave correctly (reopen dropdown after selecting one tag)
        return new InputTagsDataProviderResult
        {
             Data = AllTags
             .Select(t => t.TagName)
             .Where(t => t.ContainsIgnoreCase(request.UserInput))
             .Where(t => !Tags.Any(tag => t == tag))
             .OrderBy(t => t)
        };
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        AllTags = await context.Tags.ToListAsync();
    }

    private async Task SubmitSchedule()
    {
        // New schedule
        if (Schedule.ScheduleId == Guid.Empty)
        {
            try
            {
                using var context = DbContextFactory.CreateDbContext();

                var tags = await context.Tags.ToListAsync();
                foreach (var tagName in Tags)
                {
                    var tag = tags.FirstOrDefault(t => t.TagName == tagName);
                    if (tag is not null) Schedule.Tags.Add(tag);
                }

                using var transaction = context.Database.BeginTransaction();
                context.Schedules.Add(Schedule);
                await context.SaveChangesAsync();
                try
                {
                    await SchedulerService.AddScheduleAsync(Schedule);
                    transaction.Commit();
                }
                catch (Exception)
                {
                    transaction.Rollback();
                    throw;
                }

                Schedule.Job = Job is not null ? Job : Jobs?.FirstOrDefault(job => job.JobId == Schedule.JobId)
                    ?? throw new InvalidOperationException("Job cannot be null");

                await OnSubmit.InvokeAsync(Schedule);
                await Offcanvas.LetAsync(x => x.HideAsync());
                Tags.Clear();
            }
            catch (Exception ex)
            {
                Messenger.AddError("Error adding schedule", ex.Message);
            }
        }
        // Existing schedule
        else
        {
            try
            {
                using var context = DbContextFactory.CreateDbContext();
                context.Attach(Schedule).State = EntityState.Modified;
                var tags = await context.Tags.ToListAsync();

                // Synchronize tags
                foreach (var text in Tags.Where(str => !Schedule.Tags.Any(t => t.TagName == str)))
                {
                    // New tags
                    var tag = tags.FirstOrDefault(t => t.TagName == text) ?? new Tag(text);
                    Schedule.Tags.Add(tag);
                }
                foreach (var tag in Schedule.Tags.Where(t => !Tags.Contains(t.TagName)).ToList() ?? Enumerable.Empty<Tag>())
                {
                    Schedule.Tags.Remove(tag);
                }

                using var transaction = context.Database.BeginTransaction();
                await context.SaveChangesAsync();
                try
                {
                    await SchedulerService.UpdateScheduleAsync(Schedule);
                    transaction.Commit();
                }
                catch (Exception)
                {
                    transaction.Rollback();
                    throw;
                }

                await OnSubmit.InvokeAsync(Schedule);
                await Offcanvas.LetAsync(x => x.HideAsync());
                Tags.Clear();
            }
            catch (Exception ex)
            {
                Messenger.AddError("Error editing schedule", ex.Message);
            }
        }
    }

    public async Task ShowAsync(Guid scheduleId)
    {
        if (scheduleId != Guid.Empty)
        {
            using var context = DbContextFactory.CreateDbContext();
            Schedule = await context.Schedules
                .AsNoTracking()
                .Include(s => s.Tags)
                .Include(s => s.Job)
                .FirstAsync(s => s.ScheduleId == scheduleId);
        }
        else if (scheduleId == Guid.Empty)
        {
            var jobId = Job?.JobId ?? Jobs.FirstOrDefault()?.JobId;
            ArgumentNullException.ThrowIfNull(jobId);
            Schedule = new((Guid)jobId)
            {
                Tags = new List<Tag>()
            };
        }

        Tags = Schedule.Tags
                .Select(t => t.TagName)
                .OrderBy(t => t)
                .ToList();

        await Offcanvas.LetAsync(x => x.ShowAsync());
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
