@inject IHxMessengerService Messenger

@typeparam TParameter where TParameter : DynamicParameter

@if (Parameter is not null)
{
    <td class="align-middle">
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="@Id"
            checked=@Parameter.UseExpression @bind-value="Parameter.UseExpression">
            <label class="form-check-label fw-normal" for="@Id">Dynamic</label>
        </div>
    </td>
    @if (Parameter.UseExpression)
    {
        <td>
            <div class="d-flex">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        Expression
                    </div>
                    <input type="text" class="form-control form-control-sm font-monospace" @bind-value="Parameter.Expression.Expression" />
                    <HxButton Color="ThemeColor.Secondary" Size="ButtonSize.Small" Outline="true" OnClick="() => OnParameterEdit.InvokeAsync(Parameter)" title="Edit">
                        <CxIcon Icon="FeatherIcon.Edit2" />
                    </HxButton>
                    <HxButton Color="ThemeColor.Secondary" Size="ButtonSize.Small" Outline="true" OnClick="() => TestEvaluate(Parameter)" title="Test evaluate">
                        <CxIcon Icon="FeatherIcon.CheckCircle" />
                    </HxButton>
                </div>
            </div>
        </td>
    }
    else
    {
        @StaticEditTemplate
    }
}

@code {
    [Parameter, EditorRequired] public TParameter? Parameter { get; set; }

    [Parameter] public EventCallback<TParameter> OnParameterEdit { get; set; }

    [Parameter] public RenderFragment? StaticEditTemplate { get; set; }

    private Guid Id { get; } = Guid.NewGuid();

    private async Task TestEvaluate(TParameter parameter)
    {
        try
        {
            var result = await parameter.EvaluateAsync();
            Messenger.AddInformation($"Evaluation result: {result}");
        }
        catch (Exception ex)
        {
            Messenger.AddError(ex.Message);
        }
    }
}
