@inherits StepEditModal<SqlStep>

<StepEditModalTemplate Modal="this" TStep="SqlStep">
    @if (Step is not null)
    {
        <div class="row">
            <div class="col-md-4 d-md-flex justify-content-end">
                <label class="form-label mb-lg-0">Timeout (min)</label>
            </div>
            <div class="col-md-6">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <SvgIcon Icon="FeatherIcon.XOctagon" />
                    </div>
                    <InputNumber class="form-control form-control-sm" @bind-Value="Step.TimeoutMinutes" style="max-width: 5rem;"></InputNumber>
                </div>
                <span class="form-text">0 = indefinite</span>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                <label class="form-label mb-lg-0">Connection</label>
            </div>
            <div class="col-md-6 d-inline">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <ConnectionTypeIcon ConnectionType="Connection.ConnectionType" />
                    </div>
                    <InputSelect class="form-select form-select-sm" @bind-Value="Step.ConnectionId" @bind-Value:after="StateHasChanged">
                        @foreach (var connection in SqlConnections ?? [])
                        {
                            <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                        }
                    </InputSelect>
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="OpenStoredProcedureSelectModal">
                        <SvgIcon Icon="FeatherIcon.MoreHorizontal" />
                        Stored procedures
                    </HxButton>
                </div>
                
            </div>
        </div>

        <div class="row mt-3 justify-content-center">
            <div class="col-md-10">
                <label class="form-label">SQL statement</label>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-10">
                <CodeEditor @ref="editor"
                            Language="sql"
                            MinimapEnabled="false"
                            InitialValueExpression="() => Step?.SqlStatement"
                            OnValueChanged="value => Step.SqlStatement = value"
                            Resize="CodeEditor.CodeEditorResize.Both"/>
            </div>
        </div>

        <StoredProcedureSelectOffcanvas @ref="storedProcedureSelectModal" OnProcedureSelected="OnStoredProcedureSelected" />

        <div class="row mt-3">
            <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                <label class="form-label mb-md-0">
                    Capture scalar result
                    <HxPopover Trigger="PopoverTrigger.Hover" Content="Capture and assign the scalar result of the SQL statement to a job parameter">
                         <SvgIcon Icon="FeatherIcon.Info" />
                     </HxPopover>
                </label>
            </div>
            <div class="col-md-6">
                @{
                    var noneOption = Step.Job.JobParameters.Any() ? "None" : "None (job has no parameters)";
                }
                <InputSelect class="form-select form-select-sm" @bind-Value="Step.ResultCaptureJobParameterId" disabled=@(Step.Job.JobParameters.Any() == false)>
                    <option value="">@noneOption</option>
                    @foreach (var jobParam in Step.Job.JobParameters.OrderBy(p => p.ParameterName) ?? Enumerable.Empty<JobParameter>())
                    {
                        <option value="@jobParam.ParameterId">
                            @jobParam.ParameterName (@jobParam.ParameterValue.ValueType = @jobParam.ParameterValue.Value)
                        </option>
                    }
                </InputSelect>
            </div>
        </div>
        <StepParametersEditor Step="Step"
                              NewParameterDelegate="() => new() { Step = Step }"
                              OnImportParameters="Connection is MsSqlConnection ? ImportParametersAsync : null"
                              Title="SQL parameters"
                              InfoContent="@ParametersInfoContent" />
    }
</StepEditModalTemplate>