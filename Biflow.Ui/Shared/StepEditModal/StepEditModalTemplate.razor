@typeparam TStep where TStep : Step 

@inject SqlServerHelperService SqlServerHelper
@inject IJSRuntime JS
@inject StepValidator StepValidator
@inject StepParametersValidator StepParametersValidator

@*Set pt-0 for modal body (BodyCssClass). The DependenciesEditComponent has a sticky-top element that should be placed at the top without any padding*@
<HxModal @ref="Modal.Modal"
         Size="ModalSize.ExtraLarge"
         Scrollable="true"
         BodyCssClass="pt-0"
         OnClosed="OnClosed"
         Fullscreen="ModalFullscreen.ExtraLargeDown"
         Title="@(Modal.Step?.StepId == Guid.Empty ? "New step" : "Edit " + Modal.Step?.StepName)">
    <BodyTemplate>
        @if (Modal.Step is not null)
        {
            <div class="row mt-3">
                <div class="col mx-3">
                    <EditForm @ref="editForm" id="@Modal.FormId" Model="Modal.Step" OnValidSubmit="SubmitAsync">
                        <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
                        <div class="row">
                            <div class="col">
                                <ul class="nav nav-tabs">
                                    <li class="nav-item">
                                        <span class="nav-link @(Modal.CurrentView == StepEditModalView.Settings ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Settings">
                                            <CxIcon Icon="FeatherIcon.Settings" />
                                            Settings
                                        </span>
                                    </li>
                                    <li class="nav-item">
                                        <span class="nav-link @(Modal.CurrentView == StepEditModalView.Targets ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Targets">
                                            <CxIcon Icon="FeatherIcon.Download" />
                                            Targets
                                        </span>
                                    </li>
                                    <li class="nav-item">
                                        <span class="nav-link @(Modal.CurrentView == StepEditModalView.Sources ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Sources">
                                            <CxIcon Icon="FeatherIcon.Share" />
                                            Sources
                                        </span>
                                    </li>
                                    <li class="nav-item">
                                        <span class="nav-link @(Modal.CurrentView == StepEditModalView.Dependencies ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Dependencies">
                                            <CxIcon Icon="LucideIcon.Network" />
                                            Dependencies
                                        </span>
                                    </li>
                                    <li class="nav-item">
                                        <span class="nav-link @(Modal.CurrentView == StepEditModalView.Condition ? "active" : null)"
                                          @onclick="() => Modal.CurrentView = StepEditModalView.Condition">
                                            <CxIcon Icon="FeatherIcon.CheckSquare" />
                                            Condition
                                            @if (!string.IsNullOrWhiteSpace(Modal.Step.ExecutionConditionExpression.Expression))
                                            {
                                                <HxTooltip Trigger="TooltipTrigger.Hover" Text="Execution condition enabled">
                                                    <span style="color: var(--bs-warning);">
                                                        &nbsp;
                                                        <CxIcon Icon="FeatherIcon.Info" />
                                                    </span>
                                                </HxTooltip>
                                            }
                                        </span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                <ObjectGraphDataAnnotationsValidator />
                                <ValidationSummary />
                                <ValidationStateChangeListener OnValidationStateChanged="OnValidationStateChanged" />
                                <FluentValidationValidator @ref="fluentStepValidator" Validator="StepValidator" />
                                @if (Modal.Step is IHasStepParameters)
                                {
                                    <FluentValidationValidator @ref="fluentStepParametersValidator" Validator="StepParametersValidator" />
                                }
                            </div>
                        </div>

                        <CascadingValue Value="fluentStepValidator" Name="StepValidator">
                            @if (Modal.CurrentView == StepEditModalView.Dependencies)
                            {
                                @if (Modal.Steps is not null && Modal.StepSlims is not null && Modal.JobSlims is not null)
                                {
                                    <div class="row">
                                        <div class="col">
                                            <DependenciesEditComponent Step="Modal.Step"
                                                                       Steps="Modal.Steps"
                                                                       JobSlims="Modal.JobSlims"
                                                                       StepSlims="Modal.StepSlims" />
                                        </div>
                                    </div>
                                }
                            }
                            else if (Modal.CurrentView == StepEditModalView.Settings)
                            {
                                <div class="row">
                                    <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                                        <label class="form-label mb-lg-0">Step name</label>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="input-group input-group-sm">
                                            <div class="input-group-text">
                                                <CxIcon Icon="FeatherIcon.Edit3" />
                                            </div>
                                            <InputText class="form-control form-control-sm" @bind-Value="Modal.Step.StepName"></InputText>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                                        <label class="form-label mb-lg-0">Tags</label>
                                    </div>
                                    <div class="col-md-6">
                                        <HxInputTags @bind-Value="Modal.Tags"
                                                     DataProvider="Modal.GetTagSuggestions"
                                                     SuggestMinimumLength="0"
                                                     SuggestDelay="0"
                                                     TagBadgeSettings="new BadgeSettings() { Color = ThemeColor.Secondary }" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 d-md-flex justify-content-end">
                                        <label class="form-label mb-lg-0">Description</label>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="input-group input-group-sm">
                                            <div class="input-group-text">
                                                <CxIcon Icon="FeatherIcon.BookOpen" />
                                            </div>
                                            <InputTextArea class="form-control form-control-sm" @bind-Value="Modal.Step.StepDescription" rows="3"></InputTextArea>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                                        <label class="form-label mb-lg-0">Execution phase</label>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="input-group input-group-sm">
                                            <div class="input-group-text">
                                                <CxIcon Icon="FeatherIcon.Layers" />
                                            </div>
                                            <InputNumber class="form-control form-control-sm" @bind-Value="Modal.Step.ExecutionPhase" style="max-width: 6rem;"></InputNumber>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                                        <label class="form-label mb-lg-0">
                                            Duplicate execution behaviour
                                            <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@DuplicateBehaviourPopoverContent">
                                                <CxIcon Icon="FeatherIcon.Info" />
                                            </HxPopover>
                                        </label>
                                    </div>
                                    <div class="col-md-6">
                                        <InputSelect class="form-select form-select-sm" @bind-Value="Modal.Step.DuplicateExecutionBehaviour" style="max-width: 8rem;">
                                            @foreach (var type in Enum.GetValues<DuplicateExecutionBehaviour>())
                                            {
                                                <option>@type</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4 d-md-flex align-items-center justify-content-end">
                                        <label class="form-label mb-lg-0">Retries</label>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="input-group input-group-sm">
                                            <div class="input-group-text">
                                                <CxIcon Icon="FeatherIcon.Repeat" />
                                                &nbsp;
                                                Attempts
                                            </div>
                                            <InputNumber class="form-control form-control-sm" @bind-Value="Modal.Step.RetryAttempts" style="max-width: 5rem;"></InputNumber>
                                            <div class="input-group-text">
                                                <CxIcon Icon="FeatherIcon.Clock" />
                                                &nbsp;
                                                Interval (min)
                                            </div>
                                            <InputNumber class="form-control form-control-sm" @bind-Value="Modal.Step.RetryIntervalMinutes" style="max-width: 5rem;"></InputNumber>
                                        </div>
                                    </div>
                                </div>

                                <CascadingValue Value="fluentStepParametersValidator" Name="StepParametersValidator">
                                    <div class="row">
                                        <div class="col">
                                            @ChildContent
                                        </div>
                                    </div>
                                </CascadingValue>
                                
                            }
                            else if (Modal.CurrentView == StepEditModalView.Sources)
                            {
                                <div class="row">
                                    <div class="col">
                                        <DataObjectManagementComponent
                                        ListName="source"
                                        StepType="Modal.Step.StepType"
                                        DataObjects="Modal.Step.Sources"
                                        ComparisonObjects="Modal.Step.Targets"
                                        ConnectionId="ConnectionId"
                                        Connections="Modal.Connections"
                                        SqlStatement="@SqlStatement"
                                        GetMappingResult="dbObject => dbObject.SourceMappingResult"
                                        LoadDataObjectDependencies="SqlServerHelper.GetSourceObjectsAsync"
                                        LoadAllDataObjects="Modal.GetDataObjectsAsync"
                                        AddButtonText="Add source"
                                        NoDataObjectsText="No sources" />
                                    </div>
                                </div>
                            
                            }
                            else if (Modal.CurrentView == StepEditModalView.Targets)
                            {
                                <div class="row">
                                    <div class="col">
                                        <DataObjectManagementComponent
                                        ListName="target"
                                        StepType="Modal.Step.StepType"
                                        DataObjects="Modal.Step.Targets"
                                        ComparisonObjects="Modal.Step.Sources"
                                        ConnectionId="ConnectionId"
                                        Connections="Modal.Connections"
                                        SqlStatement="@SqlStatement"
                                        GetMappingResult="dbObject => dbObject.TargetMappingResult"
                                        LoadDataObjectDependencies="SqlServerHelper.GetTargetObjectsAsync"
                                        LoadAllDataObjects="Modal.GetDataObjectsAsync"
                                        AddButtonText="Add target"
                                        NoDataObjectsText="No targets" />
                                    </div>
                                </div>
                            }
                            else if (Modal.CurrentView == StepEditModalView.Condition)
                            {
                                <div class="row">
                                    <div class="col">
                                        <ExecutionConditionEditComponent Step="Modal.Step" OnExecutionConditionChanged="StateHasChanged" />
                                    </div>
                                </div>
                            }
                        </CascadingValue>
                    </EditForm>
                </div>
            </div>
            <SqlReferenceExplorerOffcanvas @ref="sqlReferenceOffcanvas" Connections="Modal.Connections" />
            <SqlDefinitionExplorerOffcanvas @ref="sqlDefinitionOffcanvas" Connections="Modal.Connections" />
        }
        else
        {
            <div class="row mt-5 mb-4">
                <div class="col text-center">
                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Regular" />
                </div>
            </div>
        }
    </BodyTemplate>

    <FooterTemplate>
        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="me-auto">
            <HxButton CssClass="btn-auto" Size="ButtonSize.Small" title="Explore database module definitions (e.g. stored procedures)"
                      @onclick="async () => await sqlDefinitionOffcanvas.LetAsync(x => x.ShowAsync(ConnectionId, SqlStatement))">
                <CxIcon Icon="FeatherIcon.MoreHorizontal" />
                SQL definition explorer
            </HxButton>
            <HxButton CssClass="btn-auto" Size="ButtonSize.Small" title="Explore references between database objects"
                      @onclick="async () => await sqlReferenceOffcanvas.LetAsync(x => x.ShowAsync(ConnectionId, SqlStatement))">
                <CxIcon Icon="FeatherIcon.MoreHorizontal" />
                SQL reference explorer
            </HxButton>
        </HxButtonGroup>

        @if (validationErrors.Any())
        {
            var errors = string.Join("<br />", validationErrors.Select(e => $"- {e}"));
            <div class="me-auto ms-3">
                <HxPopover Content="@errors" Html Trigger="PopoverTrigger.Hover" Placement="PopoverPlacement.Top">
                    <span class="border border-danger text-danger small rounded py-1 px-2">
                        <CxIcon Icon="FeatherIcon.AlertOctagon" />
                        Validation errors
                    </span>
                </HxPopover>
            </div>
        }

        <HxSubmit FormId="@Modal.FormId" Color="ThemeColor.Success" Spinner="Modal.Saving" Enabled="!Modal.Saving">
            Save
        </HxSubmit>
        
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Modal.Modal.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public StepEditModal<TStep> Modal { get; set; } = null!;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    private FluentValidationValidator? fluentStepValidator;
    private FluentValidationValidator? fluentStepParametersValidator;
    private SqlReferenceExplorerOffcanvas? sqlReferenceOffcanvas;
    private SqlDefinitionExplorerOffcanvas? sqlDefinitionOffcanvas;
    private EditForm? editForm;
    private IEnumerable<string> validationErrors = [];

    private string? SqlStatement => Modal?.Step switch
    {
        SqlStep sql => sql.SqlStatement,
        _ => null
    };

    private Guid? ConnectionId => Modal?.Step switch
    {
        IHasConnection<SqlConnectionInfo> sql => sql.ConnectionId,
        _ => null
    };

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }

    private void OnValidationStateChanged(IEnumerable<string> errors)
    {
        validationErrors = errors;
        StateHasChanged();
    }

    private void OnClosed()
    {
        validationErrors = [];
        Modal.OnClosed();
    }

    private async Task SubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(fluentStepValidator);
        await StepValidator.WaitForValidateAsync();
        if (editForm!.EditContext!.GetValidationMessages().Any())
        {
            return;
        }
        await Modal.SubmitStepAsync();
    }

    private const string DuplicateBehaviourPopoverContent =
        "<p>Behaviour when the same step is detected to be running under a different execution at the same time it is orchestrated to start</p>" +
        "<p><strong>Wait</strong> => Wait for the duplicate execution to complete before the step is started</p>" +
        "<p><strong>Allow</strong> => Allow duplicate executions and start the step regardless of duplicates</p>" +
        "<p><strong>Fail</strong> => Fail the step with 'Duplicate' status in case duplicates are detected</p>";
}