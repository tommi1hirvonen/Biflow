@typeparam TStep where TStep : Step 

@inject MarkupHelperService MarkupHelper
@inject SqlServerHelperService SqlServerHelper

@*Set pt-0 for modal body (BodyCssClass). The DependenciesEditComponent has a sticky-top element that should be placed at the top without any padding*@
<HxModal @ref="Modal.Modal"
         Size="ModalSize.Large"
         Scrollable="true"
         BodyCssClass="pt-0"
         OnClosed="Modal.OnClosed"
         Fullscreen="Fullscreen ? ModalFullscreen.Always : ModalFullscreen.LargeDown"
         Title="@(Modal.Step?.StepId == Guid.Empty ? "New step" : "Edit " + Modal.Step?.StepName)">
    <BodyTemplate>
        @if (Modal.Step is not null)
        {
            <div class="row mt-3">
                <div class="col mx-3">
                    <EditForm id="@Modal.FormId" Model="Modal.Step" OnValidSubmit="Modal.SubmitStep">

                        <div class="row">
                            <div class="col">
                                <HxButtonGroup Size="ButtonGroupSize.Small">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              CssClass="@(Modal.CurrentView == StepEditModalView.Settings ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Settings">
                                        @MarkupHelper.FromFile("icons/feather/settings.svg")
                                        Settings
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              CssClass="@(Modal.CurrentView == StepEditModalView.Targets ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Targets">
                                        @MarkupHelper.FromFile("icons/feather/download.svg")
                                        Targets
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              CssClass="@(Modal.CurrentView == StepEditModalView.Sources ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Sources">
                                        @MarkupHelper.FromFile("icons/feather/share.svg")
                                        Sources
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              CssClass="@(Modal.CurrentView == StepEditModalView.Dependencies ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Dependencies">
                                        @MarkupHelper.FromFile("icons/bootstrap/diagram-3-fill.svg")
                                        Dependencies
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              CssClass="@(Modal.CurrentView == StepEditModalView.Condition ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Condition">
                                        @MarkupHelper.FromFile("icons/feather/check-square.svg")
                                        Condition
                                    </HxButton>
                                </HxButtonGroup>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                            @onclick="async () => await SqlDefinitionOffcanvas.ShowAsync(ConnectionId, SqlStatement)">
                                    @MarkupHelper.FromFile("icons/feather/more-horizontal.svg")
                                    Definition explorer
                                </HxButton>
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                            @onclick="async () => await SqlReferenceOffcanvas.ShowAsync(ConnectionId, SqlStatement)">
                                    @MarkupHelper.FromFile("icons/feather/more-horizontal.svg")
                                    Reference explorer
                                </HxButton>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                <ObjectGraphDataAnnotationsValidator />
                                <ValidationSummary />
                                @if (!string.IsNullOrEmpty(Modal.StepError))
                                {
                                    <p class="text-danger">@Modal.StepError</p>
                                }
                            </div>
                        </div>

                        @if (Modal.CurrentView == StepEditModalView.Dependencies)
                        {
                            @if (Modal.Steps is not null)
                            {
                                <div class="row mt-3">
                                    <div class="@(Fullscreen ? "col-xl-6" : "col")">
                                        <DependenciesEditComponent Step="Modal.Step" Steps="Modal.Steps" Job="Modal.Job" />
                                    </div>
                                </div>
                            }
                        }
                        else if (Modal.CurrentView == StepEditModalView.Settings)
                        {
                            <div class="row mt-3">
                                <div class="@(Fullscreen ? "col-xl-6" : "col-12")">
                                    <div class="row">
                                        <div class="col">
                                            <label class="form-label">Step name</label>
                                            <div class="input-group input-group-sm">
                                                <div class="input-group-text">
                                                    @MarkupHelper.FromFile("icons/feather/edit-3.svg")
                                                </div>
                                                <InputText class="form-control form-control-sm" @bind-Value="Modal.Step.StepName"></InputText>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row mt-2">
                                        <div class="col">
                                            <label class="form-label">Description</label>
                                            <div class="input-group input-group-sm">
                                                <div class="input-group-text">
                                                    @MarkupHelper.FromFile("icons/feather/book-open.svg")
                                                </div>
                                                <InputTextArea class="form-control form-control-sm" @bind-Value="Modal.Step.StepDescription" rows="3"></InputTextArea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row mt-2">
                                        <div class="col">
                                            <label class="form-label">Tags</label>
                                            <HxInputTags @bind-Value="Modal.Tags" DataProvider="Modal.GetTagSuggestions" SuggestMinimumLength="0" SuggestDelay="0" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <label class="form-label">Execution phase</label>
                                            <div class="input-group input-group-sm">
                                                <div class="input-group-text">
                                                    @MarkupHelper.FromFile("icons/feather/layers.svg")
                                                </div>
                                                <InputNumber class="form-control form-control-sm" @bind-Value="Modal.Step.ExecutionPhase"></InputNumber>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <label class="form-label">Retry attempts</label>
                                            <div class="input-group input-group-sm">
                                                <div class="input-group-text">
                                                    @MarkupHelper.FromFile("icons/feather/repeat.svg")
                                                </div>
                                                <InputNumber class="form-control form-control-sm" @bind-Value="Modal.Step.RetryAttempts"></InputNumber>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <label class="form-label">Retry interval (min)</label>
                                            <div class="input-group input-group-sm">
                                                <div class="input-group-text">
                                                    @MarkupHelper.FromFile("icons/feather/clock.svg")
                                                </div>
                                                <InputNumber class="form-control form-control-sm" @bind-Value="Modal.Step.RetryIntervalMinutes"></InputNumber>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="@(Fullscreen ? "col-xl-6 mt-2 mt-xl-0" : "col-12 mt-2")">
                                    @ChildContent
                                </div>
                            </div>
                        }
                        else if (Modal.CurrentView == StepEditModalView.Sources)
                        {
                            <div class="row mt-3">
                                <div class="col">
                                    <SourceTargetManagementComponent
                                    ListName="source"
                                    StepType="Modal.Step.StepType"
                                    SourceTargetObjects="Modal.Step.Sources"
                                    ComparisonObjects="Modal.Step.Targets"
                                    ConnectionId="ConnectionId"
                                    Connections="Modal.Connections"
                                    SqlStatement="@SqlStatement"
                                    GetMappingResult="dbObject => dbObject.SourceMappingResult"
                                    LoadDatabaseObjectDependencies="SqlServerHelper.GetSourceObjectsAsync"
                                    LoadAllDatabaseObjects="Modal.GetSourceTargetObjectsAsync" />
                                </div>
                            </div>
                            
                        }
                        else if (Modal.CurrentView == StepEditModalView.Targets)
                        {
                            <div class="row mt-3">
                                <div class="col">
                                    <SourceTargetManagementComponent
                                    ListName="target"
                                    StepType="Modal.Step.StepType"
                                    SourceTargetObjects="Modal.Step.Targets"
                                    ComparisonObjects="Modal.Step.Sources"
                                    ConnectionId="ConnectionId"
                                    Connections="Modal.Connections"
                                    SqlStatement="@SqlStatement"
                                    GetMappingResult="dbObject => dbObject.TargetMappingResult"
                                    LoadDatabaseObjectDependencies="SqlServerHelper.GetTargetObjectsAsync"
                                    LoadAllDatabaseObjects="Modal.GetSourceTargetObjectsAsync" />
                                </div>
                            </div>
                        }
                        else if (Modal.CurrentView == StepEditModalView.Condition)
                        {
                            <div class="row mt-3">
                                <div class="col">
                                    <ExecutionConditionEditComponent Step="Modal.Step" JobParameters="Modal.Job?.JobParameters" />
                                </div>
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
            <SqlReferenceExplorerOffcanvas @ref="SqlReferenceOffcanvas" Connections="Modal.Connections" />
            <SqlDefinitionExplorerOffcanvas @ref="SqlDefinitionOffcanvas" Connections="Modal.Connections" />
        }

    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" @onclick="ToggleFullscreen" CssClass="me-auto">
            @if (Fullscreen)
            {
                @MarkupHelper.FromFile("icons/feather/minimize-2.svg")
            }
            else
            {
                @MarkupHelper.FromFile("icons/feather/maximize-2.svg")
            }
        </HxButton>
        
        <HxSubmit FormId="@Modal.FormId" Color="ThemeColor.Success">
            @(Modal.Step?.StepId == Guid.Empty ? "Create" : "Save")
        </HxSubmit>
        
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Modal.Modal.HideAsync()">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public StepEditModalBase<TStep> Modal { get; set; } = null!;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    private SqlReferenceExplorerOffcanvas SqlReferenceOffcanvas { get; set; } = null!;

    private SqlDefinitionExplorerOffcanvas SqlDefinitionOffcanvas { get; set; } = null!;

    private bool Fullscreen { get; set; } = false;

    private void ToggleFullscreen() => Fullscreen = !Fullscreen;

    private string? SqlStatement => Modal.Step switch
    {
        SqlStep sql => sql.SqlStatement,
        _ => null
    };

    private Guid? ConnectionId => Modal.Step switch
    {
        SqlStep sql => sql.ConnectionId,
        AgentJobStep agent => agent.ConnectionId,
        PackageStep package => package.ConnectionId,
        _ => null
    };
}