@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject AuthenticationMethodResolver AuthenticationResolver
@inject IHttpContextAccessor HttpContextAccessor
@using System.Security.Claims
@using System.Security.Principal

@*Toast container for HxMessenger service*@
<style>
    .hx-toast-container {
        margin-top: 1.5rem!important;
        z-index: 2000;
    }
</style>

<AuthorizeView Roles="Admin,Editor,Operator,Viewer">
    <Authorized>
        <HxMessenger Position="ToastContainerPosition.TopCenter" />
        <HxMessageBoxHost />
        <SchedulerStatusComponent OnStatusMessageResolved="message => SchedulerServiceErrorMessage = message" />
        <header>
            <nav class="navbar navbar-dark navbar-custom sticky-top flex-lg-nowrap navbar-expand-lg p-0 shadow @(SchedulerServiceErrorMessage is not null ? "bg-danger" : "bg-gradient-primary")">
                <text class="navbar-brand navbar-brand-bg me-0 px-3">Biflow</text>
                <button class="navbar-toggler position-absolute d-lg-none" type="button" aria-label="Toggle navigation" @onclick="ToggleSidebar">
                    <span class="navbar-toggler-icon"></span>
                </button>
                @if (SchedulerServiceErrorMessage is not null)
                {
                    <ul class="navbar-nav">
                        <li>
                            <strong class="navbar-text px-3">@SchedulerServiceErrorMessage</strong>
                        </li>
                    </ul>
                }
                <ul class="navbar-nav ms-auto">
                    <li>
                        <strong class="navbar-text px-3">
                            @(Configuration.GetValue<string>("EnvironmentName"))
                        </strong>
                    </li>
                </ul>
            </nav>
        </header>
        <div class="container-fluid">
            <div role="row">
                <NavMenu ClassString="@SidebarClass" OnNavLinkClick="CollapseSidebar" />
                <main class="main pt-4 flex-grow-1">
                    @Body
                </main>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container">
            <div class="row">
                <div class="col-sm-10 col-md-7 col-xl-5 mx-auto pt-5">
                    <section>
                        <div class="card shadow">
                            <h5 class="card-header">Unauthorized</h5>
                            <div class="card-body">
                                <p>Sorry, you are not authorized to access the site with this account.</p>
                                <strong>@HttpContextAccessor.HttpContext?.User?.Identity?.Name</strong>
                                <div class="d-grid mt-4 mb-3">
                                    <a class="btn btn-primary" href="MicrosoftIdentity/Account/SignOut">
                                        <CxIcon Icon="FeatherIcon.LogOut" />
                                        &nbsp;
                                        Sign out
                                    </a>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState>? AuthStat { get; set; }

    private bool collapseSidebar = true;
    private string? SidebarClass => collapseSidebar ? "collapse" : null;
    private string? SchedulerServiceErrorMessage { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.BuiltIn)
        {
            AuthenticationState authenticationState = await (AuthStat ?? throw new InvalidOperationException("Failed to get authentication state"));
            ClaimsPrincipal user = authenticationState.User;
            IIdentity identity = user.Identity ?? throw new InvalidOperationException("User identity was null");
            if (!identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo($"login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
                return;
            }
        }
    }

    private void ToggleSidebar()
    {
        collapseSidebar = !collapseSidebar;
    }

    private async Task CollapseSidebar()
    {
        // Do not instantly close the sidebar, as this might look "funky" to the user.
        await Task.Delay(100);
        collapseSidebar = true;
    }
}