@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject AuthenticationMethodResolver AuthenticationResolver
@inject ExecutorModeResolver ExecutorResolver

@*Toast container for HxToaster service*@
<style>
    .hx-toast-container {
        margin-top: 1.5rem!important;
        z-index: 2000;
    }

    #hx_message_box_host_container .modal-body {
        white-space: pre-wrap;
    }
</style>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}, {Roles.Viewer}")">
    <Authorized>
        <ContextMenu />
        <div id="hx_message_box_host_container">
            <HxMessageBoxHost />
        </div>
        <Toaster />
        <SchedulerStatusResolver OnStatusMessageResolved="message => _schedulerServiceErrorMessage = message" />
        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")" Context="auth2">
            <ExecuteMultipleModal @ref="_executeMultipleModal" />
        </AuthorizeView>
        <StepExecutionMonitorsOffcanvas @ref="_stepExecutionMonitorsOffcanvas" />
        <header>
            <nav class="navbar navbar-dark navbar-custom sticky-top flex-lg-nowrap navbar-expand-lg p-0 bg-gradient-primary">
                <div class="navbar-brand navbar-brand-bg d-flex align-items-center py-2 ps-3 me-0">
                    <img class="me-3" src="/images/vanamo_small.svg" style="width: 38px; height: 38px;" />
                    <div>
                        <div class="fw-semibold fs-4" style="margin-bottom: -8px; margin-top: -10px;">
                            vanamo
                        </div>
                        <div style="font-size: .78rem; color: #c8dfff;">
                            data orchestrator
                        </div>
                    </div>
                </div>
                
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="my-1 mx-3 d-lg-none text-white" OnClick="ToggleSidebar">
                    <SvgIcon Icon="LucideIcon.Menu" />
                    Menu
                </HxButton>
                <ThemeDropdown />
                <ul class="navbar-nav">
                    <li>
                        <strong class="navbar-text px-3">
                            @(Configuration.GetValue<string>("EnvironmentName"))
                        </strong>
                    </li>
                </ul>
            </nav>
        </header>
        <div class="container-fluid">
            <div role="row">
                <NavMenu ClassString="@SidebarClass" OnNavLinkClick="CollapseSidebar" />
                <main class="main pt-3 flex-grow-1">
                    @if (ExecutorResolver.ExecutorMode == ExecutorMode.SelfHosted)
                    {
                        <HxAlert Color="ThemeColor.Warning" Dismissible>
                            Self-hosted executor should only be used for development/testing.
                        </HxAlert>
                    }
                    @if (_schedulerServiceErrorMessage is not null)
                    {
                        <HxAlert Color="ThemeColor.Warning" Dismissible>
                            @_schedulerServiceErrorMessage
                        </HxAlert>
                    }
                    <CascadingValue Value="_userState">
                        <CascadingValue Value="_executeMultipleModal">
                            <CascadingValue Value="_stepExecutionMonitorsOffcanvas">
                                @Body
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </main>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        @if (!_redirecting)
        {
            <div class="container">
                <div class="row">
                    <div class="col-sm-10 col-md-7 col-xl-5 mx-auto pt-5">
                        <section>
                            <div class="card">
                                <h5 class="card-header">Unauthorized</h5>
                                <div class="card-body">
                                    @if (AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.AzureAd)
                                    {
                                        <p>Sorry, you are not authorized to access the site with this account.</p>
                                        <strong>@_username</strong>
                                        <div class="d-grid mt-4 mb-3">
                                            <a class="btn btn-primary" href="MicrosoftIdentity/Account/SignOut">
                                                <SvgIcon Icon="LucideIcon.LogOut" />
                                                &nbsp;
                                                Sign out
                                            </a>
                                        </div>
                                    }
                                    else if (AuthenticationResolver.AuthenticationMethod != AuthenticationMethod.Windows)
                                    {
                                        <p>Authorization failed most likely because the authentication cookie expired. Please try logging out and logging in again.</p>
                                        <strong>@_username</strong>
                                        <div class="d-grid mt-4 mb-3">
                                            <a class="btn btn-primary" href="javascript:void(0)" @onclick="@(() => NavigationManager.NavigateTo("logout", forceLoad: true))">
                                                <SvgIcon Icon="LucideIcon.LogOut" />
                                                &nbsp;
                                                Log out
                                            </a>
                                        </div>
                                    }
                                </div>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState>? AuthState { get; set; }

    private readonly UserState _userState = new();

    private string? _username;
    private bool _collapseSidebar = true;
    private string? _schedulerServiceErrorMessage;
    private bool _redirecting;
    private ExecuteMultipleModal? _executeMultipleModal;
    private StepExecutionMonitorsOffcanvas? _stepExecutionMonitorsOffcanvas;

    private string? SidebarClass => _collapseSidebar ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState is null)
        {
            throw new ApplicationException("Failed to get authentication state");
        }

        var state = await AuthState;
        var identity = state.User.Identity;
        _username = identity?.Name;

        if (AuthenticationResolver.AuthenticationMethod is AuthenticationMethod.BuiltIn or AuthenticationMethod.Ldap)
        {
            if (identity is null || !identity.IsAuthenticated)
            {
                _redirecting = true;

                var redirectUrl = Uri.EscapeDataString(NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
                var url = string.IsNullOrEmpty(redirectUrl)
                    ? "login"
                    : $"login?redirectUrl={redirectUrl}";
                NavigationManager.NavigateTo(url, true);
            }
        }
    }

    private void ToggleSidebar()
    {
        _collapseSidebar = !_collapseSidebar;
    }

    private async Task CollapseSidebar()
    {
        // Do not instantly close the sidebar, as this might look "funky" to the user.
        await Task.Delay(100);
        _collapseSidebar = true;
    }
}