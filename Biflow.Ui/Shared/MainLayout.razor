@using System.Security.Claims
@using System.Security.Principal

@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject AuthenticationMethodResolver AuthenticationResolver
@inject ExecutorModeResolver ExecutorResolver

@*Toast container for HxToaster service*@
<style>
    .hx-toast-container {
        margin-top: 1.5rem!important;
        z-index: 2000;
    }

    #hx_message_box_host_container .modal-body {
        white-space: pre-wrap;
    }
</style>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}, {Roles.Viewer}")">
    <Authorized>
        <ContextMenu />
        <div id="hx_message_box_host_container">
            <HxMessageBoxHost />
        </div>
        <Toaster />
        <SchedulerStatusResolver OnStatusMessageResolved="message => schedulerServiceErrorMessage = message" />
        <header>
            <nav class="navbar navbar-dark navbar-custom sticky-top flex-lg-nowrap navbar-expand-lg p-0 shadow bg-gradient-primary">
                <span class="navbar-brand navbar-brand-bg fw-bold ps-4 py-2 fs-4 me-0">biflow</span>
                <button class="navbar-toggler position-absolute d-lg-none" type="button" aria-label="Toggle navigation" @onclick="ToggleSidebar">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <ThemeDropdown />
                <ul class="navbar-nav">
                    <li>
                        <strong class="navbar-text px-3">
                            @(Configuration.GetValue<string>("EnvironmentName"))
                        </strong>
                    </li>
                </ul>
            </nav>
        </header>
        <div class="container-fluid">
            <div role="row">
                <NavMenu ClassString="@SidebarClass" OnNavLinkClick="CollapseSidebar" />
                <main class="main pt-3 flex-grow-1">
                    @if (ExecutorResolver.ExecutorMode == ExecutorMode.SelfHosted)
                    {
                        <HxAlert Color="ThemeColor.Warning">
                            Self-hosted executor should only be used for development/testing.
                        </HxAlert>
                    }
                    @if (schedulerServiceErrorMessage is not null)
                    {
                        <HxAlert Color="ThemeColor.Warning">
                            @schedulerServiceErrorMessage
                        </HxAlert>
                    }
                    <CascadingValue Value="userState">
                        @Body
                    </CascadingValue>
                </main>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        @if (!redirecting)
        {
            <div class="container">
                <div class="row">
                    <div class="col-sm-10 col-md-7 col-xl-5 mx-auto pt-5">
                        <section>
                            <div class="card shadow">
                                <h5 class="card-header">Unauthorized</h5>
                                <div class="card-body">
                                    @if (AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.AzureAd)
                                    {
                                        <p>Sorry, you are not authorized to access the site with this account.</p>
                                        <strong>@username</strong>
                                        <div class="d-grid mt-4 mb-3">
                                            <a class="btn btn-primary" href="MicrosoftIdentity/Account/SignOut">
                                                <CxIcon Icon="FeatherIcon.LogOut" />
                                                &nbsp;
                                                Sign out
                                            </a>
                                        </div>
                                    }
                                    else if (AuthenticationResolver.AuthenticationMethod != AuthenticationMethod.Windows)
                                    {
                                        <p>Authorization failed most likely because the authentication cookie expired. Please try logging out and logging in again.</p>
                                        <strong>@username</strong>
                                        <div class="d-grid mt-4 mb-3">
                                            <a class="btn btn-primary" href="javascript:void()" @onclick="@(() => NavigationManager.NavigateTo("logout", forceLoad: true))">
                                                <CxIcon Icon="FeatherIcon.LogOut" />
                                                &nbsp;
                                                Log out
                                            </a>
                                        </div>
                                    }
                                </div>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState>? AuthState { get; set; }

    private readonly UserState userState = new();

    private string? username = null;
    private bool collapseSidebar = true;
    private string? schedulerServiceErrorMessage = null;
    private bool redirecting;

    private string? SidebarClass => collapseSidebar ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState is null)
        {
            throw new ApplicationException("Failed to get authentication state");
        }

        var state = await AuthState;
        var identity = state.User.Identity;
        username = identity?.Name;

        if (AuthenticationResolver.AuthenticationMethod is AuthenticationMethod.BuiltIn or AuthenticationMethod.Ldap)
        {
            if (identity is null || !identity.IsAuthenticated)
            {
                redirecting = true;
                NavigationManager.NavigateTo("login", true);
                return;
            }
        }
    }

    private void ToggleSidebar()
    {
        collapseSidebar = !collapseSidebar;
    }

    private async Task CollapseSidebar()
    {
        // Do not instantly close the sidebar, as this might look "funky" to the user.
        await Task.Delay(100);
        collapseSidebar = true;
    }
}