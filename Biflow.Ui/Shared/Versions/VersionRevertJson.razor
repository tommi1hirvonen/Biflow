@using System.Text
@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster

<h4>Version revert</h4>

<div class="row mt-3">
    <div class="col">
        <a class="btn btn-sm btn-auto" href="versions">
            <SvgIcon Icon="FeatherIcon.ArrowLeft" />
            Back
        </a>
    </div>
</div>


<div class="row my-3">
    <div class="col-auto" style="max-width: 50rem;">
        <div class="card shadow-sm">
            <div class="card-body py-3 px-4">
                <div class="row mt-4">
                    <div class="col">
                        <VersionRevertInfo />
                    </div>
                </div>
                <div class="row mt-3 align-items-end">
                    <div class="col" style="max-width: 40rem;">
                        <div>
                            <label for="json_file" class="form-label">Select snapshot JSON file to load</label>
                            <InputFile id="json_file" class="form-control form-control-sm" disabled=@(revertTask is not null) OnChange="LoadFileAsync" />
                        </div>
                    </div>
                    <div class="col-auto">
                        @if (loadingFile)
                        {
                            <HxSpinner Color="ThemeColor.Secondary" />
                        }
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col">
                        <HxDropdownButtonGroup>
                            <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto text-danger me-3" Enabled="snapshot is not null && revertTask is null" Spinner="revertTask is not null">
                                <SvgIcon Icon="FeatherIcon.AlertCircle" />
                                Revert...
                            </HxDropdownToggleButton>
                            <HxDropdownMenu>
                                <HxDropdownItem OnClick="() => RevertAsync()">
                                    Start
                                </HxDropdownItem>
                            </HxDropdownMenu>
                        </HxDropdownButtonGroup>
                    </div>
                </div>
                @if (revertTask is not null)
                {
                    <div class="row mt-3">
                        <div class="col">
                            <HxAlert Color="ThemeColor.Info">
                                <p><strong>Version revert in progress</strong></p>
                                <p>Please do not leave or close this page.</p>
                                <p class="alert-link pointer" @onclick="CancelRevertTask">
                                    Cancel
                                </p>
                            </HxAlert>
                        </div>
                    </div>
                }
                @if (result is not null)
                {
                    <div class="row mt-3">
                        <div class="col">
                            <HxAlert Color="result.Color">
                                @if (result.Title is not null)
                                {
                                    <p><strong>@result.Title</strong></p>
                                }
                                @result.Message
                            </HxAlert>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private EnvironmentSnapshot? snapshot;
    private CancellationTokenSource cts = new();
    private Task? revertTask;
    private RevertResult? result;
    private bool loadingFile = false;

    private async Task LoadFileAsync(InputFileChangeEventArgs e)
    {
        loadingFile = true;

        string json;
        try
        {
            using var stream = e.File.OpenReadStream();
            using var reader = new StreamReader(stream);
            json = await reader.ReadToEndAsync(cts.Token);
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading snapshot file", ex.Message);
            loadingFile = false;
            return;
        }

        try
        {
            // Assume referencesPreserved = true, because only then is reverting of the snapshot supported.
            snapshot = EnvironmentSnapshot.FromJson(json, referencesPreserved: true);
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error deserializing snapshot JSON", ex.Message);
        }
        finally
        {
            loadingFile = false;
        }
    }

    private async Task RevertAsync()
    {
        if (revertTask is not null)
        {
            return;
        }

        ArgumentNullException.ThrowIfNull(snapshot);

        try
        {
            result = null;
            var command = new VersionRevertCommand(snapshot);
            revertTask = Mediator.SendAsync(command, cts.Token);
            StateHasChanged();
            await revertTask;
            result = new(ThemeColor.Success, null, "Version reverted successfully");
        }
        catch (OperationCanceledException)
        {
            cts.Dispose();
            cts = new();
            result = new(ThemeColor.Warning, null, "Revert was canceled");
        }
        catch (Exception ex)
        {
            var message = ex switch
            {
                { InnerException: not null } when ex.Message.ContainsIgnoreCase("see the inner exception") => ex.InnerException.Message,
                _ => ex.Message
            };
            result = new(ThemeColor.Danger, "Error reverting version", message);
        }
        finally
        {
            revertTask = null;
        }
    }

    private void CancelRevertTask()
    {
        if (revertTask is not null && !cts.IsCancellationRequested)
        {
            cts.Cancel();
        }
    }

    public void Dispose()
    {
        if (!cts.IsCancellationRequested)
        {
            cts.Cancel();
        }
        cts.Dispose();
    }

    private record RevertResult(ThemeColor Color, string? Title, string? Message);
}
