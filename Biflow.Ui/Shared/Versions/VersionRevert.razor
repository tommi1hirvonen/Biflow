@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster

<div class="row my-3">
    <div class="col-auto">
        <a class="btn btn-sm btn-auto" href="versions">
            <SvgIcon Icon="LucideIcon.MoveLeft" />
            Back
        </a>
    </div>
    <div class="col-10 d-flex justify-content-center">
        <div class="card d-flex justify-content-center w-100" style="max-width: 60rem;">
            <div class="card-body mx-auto py-4" style="max-width: 50rem;">
                <h5>Version revert</h5>
                <hr />
                @if (_version is not null)
                {
                    <div class="row">
                        <div class="col">
                            <dl>
                                <dt>Version id</dt>
                                <dd>@_version.VersionId</dd>
                                <dt>Description</dt>
                                <dd>@_version.Description</dd>
                                <dt>Created on</dt>
                                <dd>@_version.CreatedOn</dd>
                                <dt>Created by</dt>
                                <dd>@_version.CreatedBy</dd>
                            </dl>
                        </div>
                    </div>
                    <hr />
                    <div class="row mt-4">
                        <div class="col">
                            <VersionRevertInfo />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col">
                            @if (_revertTask is null)
                            {
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto text-danger me-3" Spinner="false">
                                        <SvgIcon Icon="LucideIcon.CircleAlert" />
                                        Revert...
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownItem OnClick="() => RevertAsync(_version.VersionId)">
                                            Start
                                        </HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            }
                        </div>
                    </div>
                    @if (_revertTask is not null)
                    {
                        <div class="row mt-2">
                            <div class="col">
                                <HxAlert Color="ThemeColor.Info">
                                    <p>
                                        @if (_revertTask is not null)
                                        {
                                            <HxSpinner Size="SpinnerSize.Small" Color="ThemeColor.None" />
                                        }
                                        <strong class="ms-1">
                                            Version revert in progress
                                        </strong>
                                    </p>
                                    <p>Please do not close or leave this page.</p>
                                    <span class="alert-link text-decoration-underline pointer" @onclick="CancelRevertTask">
                                        Cancel
                                    </span>
                                </HxAlert>
                            </div>
                        </div>
                    }
                    @if (_result is not null)
                    {
                        <div class="row mt-3">
                            <div class="col">
                                <HxAlert Color="_result.Color">
                                    @if (_result.Title is not null)
                                    {
                                        <p><strong>@_result.Title</strong></p>
                                    }
                                    @_result.Message
                                </HxAlert>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="row my-5">
                        <div class="col text-center">
                            <HxSpinner Color="ThemeColor.Secondary" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-1">

    </div>
</div>

@code {
    [Parameter] public int? VersionId { get; set; }

    private int _previousVersionId;
    private VersionProjection? _version;
    private CancellationTokenSource _cts = new();
    private Task? _revertTask;
    private RevertResult? _result;

    protected override async Task OnParametersSetAsync()
    {
        if (VersionId is { } versionId && versionId != _previousVersionId)
        {
            _previousVersionId = versionId;
            await using var context = await DbContextFactory.CreateDbContextAsync();
            _version = await context.EnvironmentVersions
                .Where(v => v.VersionId == versionId)
                .Select(v => new VersionProjection(v.VersionId, v.Description, v.CreatedOn, v.CreatedBy))
                .FirstOrDefaultAsync();
        }
    }

    private async Task RevertAsync(int versionId)
    {
        if (_revertTask is not null)
        {
            return;
        }

        try
        {
            _result = null;
            // TODO Get RetainIntegrationProperties value from user input.
            var command = new RevertVersionByIdCommand(versionId, RetainIntegrationProperties: false);
            _revertTask = Mediator.SendAsync(command, _cts.Token);
            StateHasChanged();
            await _revertTask;
            _result = new(ThemeColor.Success, null, "Version reverted successfully");
        }
        catch (OperationCanceledException)
        {
            _cts.Dispose();
            _cts = new();
            _result = new(ThemeColor.Warning, null, "Revert was canceled");
        }
        catch (Exception ex)
        {
            var message = ex switch
            {
                { InnerException: not null } when ex.Message.ContainsIgnoreCase("see the inner exception") => ex.InnerException.Message,
                _ => ex.Message
            };
            _result = new(ThemeColor.Danger, "Error reverting version", message);
        }
        finally
        {
            _revertTask = null;
        }
    }

    private void CancelRevertTask()
    {
        if (_revertTask is not null && !_cts.IsCancellationRequested)
        {
            _cts.Cancel();
        }
    }

    public void Dispose()
    {
        if (!_cts.IsCancellationRequested)
        {
            _cts.Cancel();
        }
        _cts.Dispose();
    }

    private record RevertResult(ThemeColor Color, string? Title, string? Message);
}
