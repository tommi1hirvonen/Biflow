@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster

<h4>Version revert</h4>

<div class="row mt-3">
    <div class="col">
        <a class="btn btn-sm btn-auto" href="versions">
            <SvgIcon Icon="FeatherIcon.ArrowLeft" />
            Back
        </a>
    </div>
</div>

@if (version is not null)
{
    <div class="row my-3">
        <div class="col-auto" style="max-width: 50rem;">
            <div class="card shadow-sm">
                <div class="card-body py-3 px-4">
                    <div class="row">
                        <div class="col">
                            <dl>
                                <dt>Version id</dt>
                                <dd>@version.VersionId</dd>
                                <dt>Description</dt>
                                <dd>@version.Description</dd>
                                <dt>Created on</dt>
                                <dd>@version.CreatedOn</dd>
                                <dt>Created by</dt>
                                <dd>@version.CreatedBy</dd>
                            </dl>
                        </div>
                    </div>
                    <hr />
                    <div class="row mt-4">
                        <div class="col">
                            <VersionRevertInfo />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col">
                            <HxDropdownButtonGroup>
                                <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto text-danger me-3" Enabled="revertTask is null" Spinner="revertTask is not null">
                                    <SvgIcon Icon="FeatherIcon.AlertCircle" />
                                    Revert...
                                </HxDropdownToggleButton>
                                <HxDropdownMenu>
                                    <HxDropdownItem OnClick="() => RevertAsync(version.VersionId)">
                                        Start
                                    </HxDropdownItem>
                                </HxDropdownMenu>
                            </HxDropdownButtonGroup>
                        </div>
                    </div>
                    @if (revertTask is not null)
                    {
                        <div class="row mt-3">
                            <div class="col">
                                <HxAlert Color="ThemeColor.Info">
                                    <p><strong>Version revert in progress</strong></p>
                                    <p>Please do not leave or close this page.</p>
                                    <p class="alert-link pointer" @onclick="CancelRevertTask">
                                        Cancel
                                    </p>
                                </HxAlert>
                            </div>
                        </div>
                    }
                    @if (result is not null)
                    {
                        <div class="row mt-3">
                            <div class="col">
                                <HxAlert Color="result.Color">
                                    @if (result.Title is not null)
                                    {
                                        <p><strong>@result.Title</strong></p>
                                    }
                                    @result.Message
                                </HxAlert>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row my-5">
        <div class="col text-center">
            <HxSpinner Color="ThemeColor.Secondary" />
        </div>
    </div>
}


@code {
    [Parameter] public int? VersionId { get; set; }

    private int previousVersionId;
    private EnvironmentVersion? version;
    private CancellationTokenSource cts = new();
    private Task? revertTask;
    private RevertResult? result;

    protected override async Task OnParametersSetAsync()
    {
        if (VersionId is int versionId && versionId != previousVersionId)
        {
            previousVersionId = versionId;
            using var context = DbContextFactory.CreateDbContext();
            version = await context.EnvironmentVersions
                .FirstOrDefaultAsync(v => v.VersionId == versionId);
        }
    }

    private async Task RevertAsync(int versionId)
    {
        if (revertTask is not null)
        {
            return;
        }

        try
        {
            result = null;

            using var context = DbContextFactory.CreateDbContext();
            var snapshotJson = await context.EnvironmentVersions
                .AsNoTracking()
                .Where(v => v.VersionId == versionId)
                .Select(v => v.Snapshot)
                .FirstOrDefaultAsync(cts.Token)
                ?? throw new NotFoundException<EnvironmentSnapshot>(versionId);
            var snapshot = EnvironmentSnapshot.FromJson(snapshotJson);
            ArgumentNullException.ThrowIfNull(snapshot);

            var command = new VersionRevertCommand(snapshot);
            revertTask = Mediator.SendAsync(command, cts.Token);
            StateHasChanged();
            await revertTask;
            result = new(ThemeColor.Success, null, "Version reverted successfully");
        }
        catch (OperationCanceledException)
        {
            cts.Dispose();
            cts = new();
            result = new(ThemeColor.Warning, null, "Revert was canceled");
        }
        catch (Exception ex)
        {
            var message = ex switch
            {
                { InnerException: not null } when ex.Message.ContainsIgnoreCase("see the inner exception") => ex.InnerException.Message,
                _ => ex.Message
            };
            result = new(ThemeColor.Danger, "Error reverting version", message);
        }
        finally
        {
            revertTask = null;
        }
    }

    private void CancelRevertTask()
    {
        if (revertTask is not null && !cts.IsCancellationRequested)
        {
            cts.Cancel();
        }
    }

    public void Dispose()
    {
        if (!cts.IsCancellationRequested)
        {
            cts.Cancel();
        }
        cts.Dispose();
    }

    private record RevertResult(ThemeColor Color, string? Title, string? Message);
}
