@using System.Text
@using System.IO.Compression

@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject EnvironmentSnapshotBuilder SnapshotBuilder
@inject ToasterService Toaster
@inject IJSRuntime JS
@inject ThemeService ThemeService

<div class="row justify-content-between">
    <div class="col d-flex align-items-start">
        <HxButton Color="ThemeColor.Success" OnClick="() => createModal.LetAsync(x => x.ShowAsync())">
            Create version
        </HxButton>
        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.VersionManager}")">
            <a role="button" class="btn btn-auto btn-sm ms-auto" href="versions/revertjson">
                Revert from JSON
            </a>
        </AuthorizeView>
    </div>
    <div class="col-auto" style="max-width: 33rem;">
        <HxAlert Color="ThemeService.CurrentTheme == Theme.Light ? ThemeColor.Light : ThemeColor.Dark" CssClass="small py-2">
            <div class="row g-3">
                <div class="col-auto">
                    <SvgIcon Icon="FeatherIcon.Info" />
                </div>
                <div class="col">
                    Environment versions are point-in-time snapshots of the environment configuration stored as a single JSON object. <a class="alert-link" href="versions/help">Read more</a>
                </div>
            </div>
        </HxAlert>
    </div>
</div>

<div class="row mb-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Description</th>
                            <th>Created on</th>
                            <th>Created by</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Versions is null)
                        {
                            <tr>
                                <td colspan="5" class="text-center">
                                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                                </td>
                            </tr>
                        }
                        else if (Versions.Count == 0)
                        {
                            <tr>
                                <td colspan="5">
                                    No versions
                                </td>
                            </tr>
                        }
                        else
                        {
                            foreach (var version in Versions)
                            {
                                var description = version.Description?.Length > 100
                                    ? $"{version.Description.Substring(0, 100)}..."
                                    : version.Description;
                                <ContextMenuToggle ContainerHtmlTag="tr">
                                    <ChildContent Context="menu">
                                        <td class="align-middle">
                                            <span class="pointer text-decoration-underline" @onclick="() => OpenDetailsAsync(version.VersionId)">
                                                @version.VersionId
                                            </span>
                                        </td>
                                        <td class="align-middle small">
                                            @description
                                        </td>
                                        <td class="align-middle">
                                            @version.CreatedDateTime.LocalDateTime
                                        </td>
                                        <td class="align-middle small">
                                            @version.CreatedBy
                                        </td>
                                        <td>
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" Spinner="false" CssClass="btn-auto" @onclick="e => menu.ShowContextMenuAsync(e)">
                                                <SvgIcon Icon="FeatherIcon.MoreHorizontal" />
                                            </HxButton>
                                        </td>
                                    </ChildContent>
                                    <MenuContent>
                                        <DropdownMenuHeader>Version id: @version.VersionId</DropdownMenuHeader>
                                        <DropdownMenuItem @onclick="() => OpenDetailsAsync(version.VersionId)">
                                            <SvgIcon Icon="LucideIcon.Braces" />
                                            Show JSON
                                        </DropdownMenuItem>
                                        <DropdownMenuItem @onclick="() => DownloadAsync(version.VersionId)">
                                            <SvgIcon Icon="FeatherIcon.Download" />
                                            Download JSON
                                        </DropdownMenuItem>
                                        <DropdownMenuLink href="@($"versions/compare/{version.VersionId}")">
                                            <SvgIcon Icon="LucideIcon.GitCompareArrows" />
                                            Compare to current
                                        </DropdownMenuLink>
                                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.VersionManager}")">
                                            <DropdownMenuLink href="@($"versions/revert/{version.VersionId}")">
                                                <SvgIcon Icon="LucideIcon.History" />
                                                Revert...
                                            </DropdownMenuLink>
                                        </AuthorizeView>
                                    </MenuContent>
                                </ContextMenuToggle>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<HxOffcanvas @ref="detailsOffcanvas" Size="OffcanvasSize.Large" Title="@($"Version {detailsVersion?.VersionId}")">
    <BodyTemplate>
        <div class="row justify-content-between">
            <div class="col-auto">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="simplified_json"
                           checked=@simplifiedJson
                           @onchange="args => simplifiedJson = (bool)args.Value!">
                    <label class="form-check-label" for="simplified_json">Simplified JSON</label>
                    <HxPopover Trigger="PopoverTrigger.Hover" WrapperCssClass="ms-2" Content="Simplified JSON is easier for humans to read and is recommended for diff comparisons. JSON with object references preserved (non-simplified) includes additional metadata properties that add complexity and reduce readability but are required when deserializing and reverting snapshots.">
                        <SvgIcon Icon="FeatherIcon.Info" />
                    </HxPopover>
                </div>
            </div>
            <div class="col-auto">
                <span class="text-secondary small text-decoration-underline pointer" @onclick="CopyToClipboard">
                    <SvgIcon Icon="LucideIcon.ClipboardCopy" />
                    Copy to clipboard
                </span>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col small font-monospace">
                <pre style="max-height: calc(100vh - 160px);">
                    @(simplifiedJson ? detailsVersion?.Snapshot : detailsVersion?.SnapshotWithReferencesPreserved)
                </pre>
            </div>
        </div>
    </BodyTemplate>
</HxOffcanvas>

<HxModal @ref="createModal" Title="Create new version snapshot" Size="ModalSize.Large" Scrollable="true">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <textarea class="form-control form-control-sm" @bind="description" rows="5" placeholder="Version description" />
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" OnClick="CreateVersionAsync">
            Save
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" OnClick="() => createModal.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter] public IList<VersionProjection>? Versions { get; set; }

    private HxOffcanvas? detailsOffcanvas;
    private EnvironmentVersion? detailsVersion;
    private HxModal? createModal;
    private string? description;
    private bool simplifiedJson = true; // inverse of whether to show JSON with references preserved

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += OnThemeChanged;
    }

    private void OnThemeChanged(Theme theme, bool isAuto) => StateHasChanged();

    private async Task CreateVersionAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(AuthenticationState);
            var authState = await AuthenticationState;
            var username = authState.User.Identity?.Name;
            var snapshot = await SnapshotBuilder.CreateAsync();
            var version = new EnvironmentVersion
            {
                Snapshot = snapshot.ToJson(preserveReferences: false),
                SnapshotWithReferencesPreserved = snapshot.ToJson(preserveReferences: true),
                Description = description,
                CreatedOn = DateTimeOffset.Now,
                CreatedBy = username
            };
            using var context = await DbContextFactory.CreateDbContextAsync();
            context.EnvironmentVersions.Add(version);
            await context.SaveChangesAsync();
            await createModal.LetAsync(x => x.HideAsync());
            description = null;
            Versions?.Insert(0, new(version.VersionId, version.Description, version.CreatedOn, version.CreatedBy));
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error creating version", ex.Message);
        }
    }

    private async Task OpenDetailsAsync(int versionId)
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        detailsVersion = await context.EnvironmentVersions.FirstOrDefaultAsync(v => v.VersionId == versionId);
        await detailsOffcanvas.LetAsync(x => x.ShowAsync());
    }

    private async Task DownloadAsync(int versionId)
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var version = await context.EnvironmentVersions.FirstOrDefaultAsync(v => v.VersionId == versionId);
            ArgumentNullException.ThrowIfNull(version);

            IEnumerable<(string Name, string Content)> files =
            [
                ("snapshot.json", version.Snapshot),
            ("snapshot_with_references.json", version.SnapshotWithReferencesPreserved)
            ];

            using var zipArchiveStream = new MemoryStream();
            // The ZipArchive object is written to the Stream when it is disposed.
            using (var zipArchive = new ZipArchive(zipArchiveStream, ZipArchiveMode.Create, leaveOpen: true))
            {

                foreach (var (name, content) in files)
                {
                    using var entryStream = zipArchive.CreateEntry(name).Open();
                    using var entryStreamWriter = new StreamWriter(entryStream);
                    await entryStreamWriter.WriteAsync(content);
                }
            }
            zipArchiveStream.Position = 0; // reset the stream position

            var filename = $"version_{version.VersionId}.zip";
            var bytes = zipArchiveStream.ToArray();
            using var stream = new MemoryStream(bytes);
            using var streamRef = new DotNetStreamReference(stream: stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error exporting version", ex.Message);
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            var text = simplifiedJson ? detailsVersion?.Snapshot : detailsVersion?.SnapshotWithReferencesPreserved;
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
            Toaster.AddInformation("Value copied to clipboard");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error copying to clipboard", ex.Message);
        }
    }

    public void Dispose() => ThemeService.OnThemeChanged -= OnThemeChanged;
}
