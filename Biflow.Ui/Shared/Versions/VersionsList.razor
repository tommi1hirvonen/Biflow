@using System.Text

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject EnvironmentSnapshotBuilder SnapshotBuilder
@inject ToasterService Toaster
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col">
        <HxButton Color="ThemeColor.Success" OnClick="() => createModal.LetAsync(x => x.ShowAsync())">
            Create version
        </HxButton>
    </div>
</div>

<div class="row my-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Version id</th>
                            <th>Description</th>
                            <th>Created on</th>
                            <th>Created by</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Versions is null)
                        {
                            <tr>
                                <td colspan="5" class="text-center">
                                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                                </td>
                            </tr>
                        }
                        else if (Versions.Count == 0)
                        {
                            <tr>
                                <td colspan="5">
                                    No versions
                                </td>
                            </tr>
                        }
                        else
                        {
                            foreach (var version in Versions)
                            {
                                <tr>
                                    <td class="align-middle">
                                        <span class="link-primary text-decoration-underline pointer" @onclick="() => OpenDetailsAsync(version.VersionId)">
                                            @version.VersionId
                                        </span>
                                    </td>
                                    <td class="align-middle">
                                        @version.Description
                                    </td>
                                    <td class="align-middle">
                                        @version.CreatedDateTime.LocalDateTime
                                    </td>
                                    <td class="align-middle">
                                        @version.CreatedBy
                                    </td>
                                    <td>
                                        <HxButtonGroup Size="ButtonGroupSize.Small">
                                            <HxButton Color="ThemeColor.None" CssClass="btn-auto" title="Compare to current" OnClick="@(() => NavigationManager.NavigateTo($"versions/compare/{version.VersionId}"))">
                                                <SvgIcon Icon="LucideIcon.GitCompareArrows" />
                                            </HxButton>
                                            <HxButton Color="ThemeColor.None" CssClass="btn-auto" title="Download JSON" OnClick="() => DownloadAsync(version.VersionId)">
                                                <SvgIcon Icon="FeatherIcon.Download" />
                                            </HxButton>
                                        </HxButtonGroup>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<HxOffcanvas @ref="detailsOffcanvas" Size="OffcanvasSize.Large" Title="@($"Version {detailsVersion?.VersionId}")">
    <BodyTemplate>
        <div>
            <CodeEditor @ref="detailsEditor"
                        Language="json"
                        ReadOnly
                        FontSize="12"
                        InitialHeight="calc(100vh - 120px)"
                        InitialValueExpression="() => detailsVersion?.Snapshot" />
        </div>
    </BodyTemplate>
</HxOffcanvas>

<HxModal @ref="createModal" Title="Create new version snapshot" Size="ModalSize.Large" Scrollable="true">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <textarea class="form-control form-control-sm" @bind="description" rows="5" placeholder="Version description" />
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" OnClick="CreateVersionAsync">
            Save
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" OnClick="() => createModal.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter] public IList<VersionProjection>? Versions { get; set; }

    private HxOffcanvas? detailsOffcanvas;
    private EnvironmentVersion? detailsVersion;
    private CodeEditor? detailsEditor;
    private HxModal? createModal;
    private string? description;

    private async Task CreateVersionAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(AuthenticationState);
            var authState = await AuthenticationState;
            var username = authState.User.Identity?.Name;
            var snapshot = await SnapshotBuilder.CreateAsync();
            var version = new EnvironmentVersion
            {
                Snapshot = snapshot,
                Description = description,
                CreatedOn = DateTimeOffset.Now,
                CreatedBy = username
            };
            using var context = await DbContextFactory.CreateDbContextAsync();
            context.EnvironmentVersions.Add(version);
            await context.SaveChangesAsync();
            await createModal.LetAsync(x => x.HideAsync());
            description = null;
            Versions?.Insert(0, new(version.VersionId, version.Description, version.CreatedOn, version.CreatedBy));
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error creating version", ex.Message);
        }
    }

    private async Task OpenDetailsAsync(int versionId)
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        detailsVersion = await context.EnvironmentVersions.FirstOrDefaultAsync(v => v.VersionId == versionId);
        await detailsOffcanvas.LetAsync(x => x.ShowAsync());
    }

    private async Task DownloadAsync(int versionId)
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var version = await context.EnvironmentVersions.FirstOrDefaultAsync(v => v.VersionId == versionId);
            ArgumentNullException.ThrowIfNull(version);
            var filename = $"version_{version.VersionId}.json";
            var bytes = Encoding.UTF8.GetBytes(version.Snapshot);
            using var stream = new MemoryStream(bytes);
            using var streamRef = new DotNetStreamReference(stream: stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error exporting version", ex.Message);
        }
    }
}
