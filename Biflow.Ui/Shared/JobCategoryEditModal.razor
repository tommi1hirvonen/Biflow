@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject IHxMessengerService Messenger

@{
    var title = category.CategoryId == Guid.Empty ? "New category" : $"Edit {category.CategoryName}";
}

<HxOffcanvas @ref="offcanvas" Title="@title" Size="OffcanvasSize.Regular">
    <BodyTemplate>
        <EditForm id="category_edit_form" Model="category" OnValidSubmit="SubmitAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label class="form-label">Category name</label>
                <InputText class="form-control" @bind-Value="category.CategoryName"></InputText>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit FormId="category_edit_form" Color="ThemeColor.Success">
            Save
        </HxSubmit>
        <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" OnClick="() => offcanvas.LetAsync(x => x.HideAsync())" Spinner="false">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public EventCallback<JobCategory> OnCategorySubmitted { get; set; }

    private HxOffcanvas? offcanvas;
    private JobCategory category = new();

    public async Task ShowAsync(JobCategory? category = null)
    {
        if (category is null)
        {
            this.category = new();
            await offcanvas.LetAsync(x => x.ShowAsync());
            return;
        }
        using var context = await DbContextFactory.CreateDbContextAsync();
        this.category = await context.JobCategories.FirstAsync(c => c.CategoryId == category.CategoryId);
        await offcanvas.LetAsync(x => x.ShowAsync());
    }

    public async Task SubmitAsync()
    {
        try
        {
            IRequest command = category.CategoryId == Guid.Empty
                ? new CreateJobCategoryCommand(category)
                : new UpdateJobCategoryCommand(category);
            await Mediator.Send(command);
            await OnCategorySubmitted.InvokeAsync(category);
            await offcanvas.LetAsync(x => x.HideAsync());
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error saving category", ex.Message);
        }
    }
}
