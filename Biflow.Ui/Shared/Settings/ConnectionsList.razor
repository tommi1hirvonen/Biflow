@inject IDbContextFactory<AppDbContext> DbFactory
@inject IMediator Mediator
@inject ToasterService Toaster

<style>
    tr a {
        text-decoration: none;
    }
        
        tr:hover a {
            text-decoration: underline;
        }
</style>

<PageTitle>Connections | Biflow</PageTitle>

<HxDropdownButtonGroup>
    <HxDropdownToggleButton Color="ThemeColor.Success" Enabled="connections is not null">
        Add connection
    </HxDropdownToggleButton>
    <HxDropdownMenu>
        <HxDropdownHeader>Connection type</HxDropdownHeader>
        @foreach (var connectionType in ConnectionTypes)
        {
            var (name, _, desc, type) = connectionType;
            <HxDropdownItem @onclick="async () => await ShowNewConnectionModalAsync(type)" title="@desc">
                <ConnectionTypeIcon ConnectionType="type" />
                @name
            </HxDropdownItem>
        }
    </HxDropdownMenu>
</HxDropdownButtonGroup>


<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Type
                </th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (connections is null)
            {
                <tr><td colspan="5" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (connections.Count == 0)
            {
                <tr><td colspan="5">No connections</td></tr>
            }
            else
            {
                @foreach (var connection in connections.OrderBy(c => c.ConnectionName))
                {
                    var steps = connection.Steps.Count();
                    var jobs = connection.Steps.Select(s => s.JobId).Distinct().Count();
                    
                    <tr>
                        <td class="align-middle">
                            @connection.ConnectionName
                        </td>
                        <td class="align-middle">
                            <ConnectionTypeIcon ConnectionType="connection.ConnectionType" />
                            @connection.ConnectionType.GetCategory()?.Name
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup>
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="async () => await ShowEditModalAsync(connection)">
                                    <SvgIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <SvgIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteConnection(connection)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                        </td>
                        <td class="align-middle">
                            <a class="text-body" href="javascript:void(0)"
                                @onclick="async () =>
                                {
                                    stepsConnection = connection;
                                    await stepsModal.LetAsync(x => x.ShowAsync());
                                }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </a>
                        </td>
                        <td class="align-middle">
                            @if (connection is MsSqlConnection ms)
                            {
                                var tables = ms.DataTables.Count();
                                <a class="text-body" href="javascript:void(0)"
                                   @onclick="async () =>
                                    {
                                        tablesConnection = ms;
                                        await tablesModal.LetAsync(x => x.ShowAsync());
                                    }">
                                    @(tables > 0 ? $"{tables} data table(s)" : null)
                                </a>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<AnalysisServicesConnectionEditModal @ref="connectionEditModals[ConnectionType.AnalysisServices]"
                                     Credentials="credentials"
                                     OnConnectionSubmit="OnConnectionSubmit" />

<MsSqlConnectionEditModal @ref="connectionEditModals[ConnectionType.Sql]"
                          Credentials="credentials"
                          OnConnectionSubmit="OnConnectionSubmit" />

<SnowflakeConnectionEditModal @ref="connectionEditModals[ConnectionType.Snowflake]"
                              OnConnectionSubmit="OnConnectionSubmit"/>

<HxModal @ref="stepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {stepsConnection?.ConnectionName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in stepsConnection?.Steps
                            .OrderBy(s => s.Job.JobName)
                            .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIcon StepType="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await stepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

<HxModal @ref="tablesModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Data tables using {tablesConnection?.ConnectionName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Data table</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var table in tablesConnection?.DataTables
                            .OrderBy(t => t.Category?.CategoryName)
                            .ThenBy(t => t.DataTableName) ?? Enumerable.Empty<MasterDataTable>())
                        {
                            <tr>
                                <td>
                                    @(table.Category?.CategoryName ?? "No category")
                                </td>
                                <td>
                                    @table.DataTableName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await tablesModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private readonly Dictionary<ConnectionType, IConnectionEditModal?> connectionEditModals = [];

    private List<Credential> credentials = [];
    private List<ConnectionBase>? connections;
    private ConnectionBase? stepsConnection;
    private MsSqlConnection? tablesConnection;
    private HxModal? stepsModal;
    private HxModal? tablesModal;

    private static readonly (string Name, int Ordinal, string? Description, ConnectionType Type)[] ConnectionTypes =
        Enum.GetValues<ConnectionType>().Select(c =>
        {
            var (name, ordinal) = c.GetCategory() ?? ("", 0);
            var desc = c.GetDescription();
            return (name, ordinal, desc, c);
        })
        .OrderBy(c => c.ordinal)
        .ToArray();

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<AppDbContext>(DbFactory.CreateDbContext);
        credentials = await context.Credentials
            .AsNoTracking()
            .OrderBy(c => c.Domain)
            .ThenBy(c => c.Username)
            .ToListAsync();
        connections = await context.Connections
            .AsNoTrackingWithIdentityResolution()
            .Include(c => (c as SnowflakeConnection)!.SqlSteps)
            .ThenInclude(step => step.Job)
            .Include(c => (c as MsSqlConnection)!.SqlSteps)
            .ThenInclude(step => step.Job)
            .Include(c => (c as MsSqlConnection)!.PackageSteps)
            .ThenInclude(step => step.Job)
            .Include(c => (c as MsSqlConnection)!.AgentJobSteps)
            .ThenInclude(step => step.Job)
            .Include(c => (c as AnalysisServicesConnection)!.TabularSteps)
            .ThenInclude(step => step.Job)
            .Include(c => (c as MsSqlConnection)!.DataTables)
            .ThenInclude(t => t.Category)
            .OrderBy(c => c.ConnectionName)
            .ToListAsync();
    }

    private async Task DeleteConnection(ConnectionBase connection)
    {
        try
        {
            await Mediator.SendAsync(new DeleteConnectionCommand(connection.ConnectionId));
            connections?.RemoveAll(c => c.ConnectionId == connection.ConnectionId);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting connection", message);
        }
    }

    private async Task OnConnectionSubmit(ConnectionBase connection)
    {
        if (connection.ConnectionId == Guid.Empty)
        {
            await Mediator.SendAsync(new CreateConnectionCommand(connection));
            connections?.Add(connection);
        }
        else
        {
            await Mediator.SendAsync(new UpdateConnectionCommand(connection));
            connections?.RemoveAll(c => c.ConnectionId == connection.ConnectionId);
            connections?.Add(connection);
        }
        connections?.Sort();
        StateHasChanged();
    }

    private async Task ShowEditModalAsync(ConnectionBase connection)
    {
        await OpenConnectionEditModalAsync(connection.ConnectionType, connection.ConnectionId);
    }

    private async Task ShowNewConnectionModalAsync(ConnectionType connectionType)
    {
        await OpenConnectionEditModalAsync(connectionType, Guid.Empty);
    }

    private async Task OpenConnectionEditModalAsync(ConnectionType connectionType, Guid connectionId)
    {
        await connectionEditModals[connectionType].LetAsync(x => x.ShowAsync(connectionId));
    }

}
