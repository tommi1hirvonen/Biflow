@inject ToasterService Toaster
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ProxyClientFactory ProxyClientFactory

<HxModal @ref="_modal"
         Size="ModalSize.Large"
         Title="@(_proxy?.ProxyId == Guid.Empty ? "New proxy" : "Edit " + _proxy?.ProxyName)">
    <BodyTemplate>
        @if (_proxy is not null)
        {
            <EditForm id="proxy_edit_form" Model="_proxy" OnValidSubmit="SubmitAsync">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div>
                            <label class="form-label">Proxy name</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <SvgIcon Icon="LucideIcon.PenLine" />
                                </div>
                                <InputText class="form-control" @bind-Value="_proxy.ProxyName"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">API base url</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="LucideIcon.Link" />
                                    </div>
                                    <InputText class="form-control" @bind-Value="_proxy.ProxyUrl"></InputText>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">API key</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="LucideIcon.Key" />
                                    </div>
                                    <InputTextArea class="form-control form-control-sm" rows="2"
                                                   @bind-Value="_proxy.ApiKey"></InputTextArea>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                          @onclick="TestConnectionAsync" Enabled="!_testingConnection">
                                    Test connection
                                </HxButton>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                @switch (_connectionTestSuccess)
                                {
                                    case true:
                                        <span class="badge bg-success">Success</span>
                                        break;
                                    case false:
                                        <span class="badge bg-danger">Failed</span>
                                        break;
                                }
                            </div>
                        </div>

                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="proxy_edit_form"
                  Color="ThemeColor.Success">@(_proxy?.ProxyId == Guid.Empty ? "Add" : "Save")
        </HxSubmit>
        <HxButton Color="ThemeColor.Secondary"
                  Spinner="false"
                  @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<Proxy> OnProxySubmit { get; set; }

    private HxModal? _modal;
    private Proxy? _proxy;
    private bool? _connectionTestSuccess;
    private bool _testingConnection;

    public async Task ShowAsync(Guid proxyId)
    {
        _proxy = null;
        _connectionTestSuccess = null;
        await _modal.LetAsync(x => x.ShowAsync());
        if (proxyId != Guid.Empty)
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            _proxy = await context.Proxies
                .AsNoTrackingWithIdentityResolution()
                .Include(x => x.ExeSteps)
                .ThenInclude(x => x.Job)
                .FirstAsync(x => x.ProxyId == proxyId);
        }
        else
        {
            _proxy = new();
        }
    }

    private async Task TestConnectionAsync()
    {
        ArgumentNullException.ThrowIfNull(_proxy);
        _connectionTestSuccess = null;
        _testingConnection = true;
        try
        {
            var client = ProxyClientFactory.Create(_proxy);
            await client.TestConnectionAsync();
            _connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            _connectionTestSuccess = false;
            Toaster.AddError("Connection test failed", ex.Message);
        }
        _testingConnection = false;
    }

    private async Task SubmitAsync()
    {
        await OnProxySubmit.InvokeAsync(_proxy);
        await _modal.LetAsync(x => x.HideAsync());
    }
}
