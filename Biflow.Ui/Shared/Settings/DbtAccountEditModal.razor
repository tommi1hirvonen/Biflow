@inject ToasterService Toaster
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IHttpClientFactory HttpClientFactory

<HxModal @ref="modal" Size="ModalSize.Large" Title="@(account?.DbtAccountId == Guid.Empty ? "New dbt account" : "Edit " + account?.DbtAccountName)">
    <BodyTemplate>
        @if (account is not null)
        {
            <EditForm id="dbt_account_edit_form" Model="account" OnValidSubmit="SubmitAsync">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div>
                            <label class="form-label">Account name</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <SvgIcon Icon="FeatherIcon.Edit3" />
                                </div>
                                <InputText class="form-control" @bind-Value="account.DbtAccountName"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">API base url</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="FeatherIcon.Link" />
                                    </div>
                                    <InputText class="form-control" @bind-Value="account.ApiBaseUrl"></InputText>
                                </div>
                                <div class="form-text">
                                    The API base url can be found on your account settings page in dbt Cloud.<br/>
                                    e.g. https://ab123.us1.dbt.com/
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <div>
                                    <label class="form-label">Account id</label>
                                    <div class="input-group">
                                        <InputText class="form-control" @bind-Value="account.AccountId"></InputText>
                                    </div>
                                    <div class="form-text">
                                        The account id is an integer value which can be found on your account settings page in dbt Cloud.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">API token</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="FeatherIcon.Key" />
                                    </div>
                                    <InputTextArea class="form-control form-control-sm" rows="2" @bind-Value="account.ApiToken"></InputTextArea>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="TestConnectionAsync" Enabled="!testingConnection">
                                    Test connection
                                </HxButton>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                @if (connectionTestSuccess == true)
                                {
                                    <span class="badge bg-success">Success</span>
                                }
                                else if (connectionTestSuccess == false)
                                {
                                    <span class="badge bg-danger">Failed</span>
                                }
                            </div>
                        </div>

                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="dbt_account_edit_form" Color="ThemeColor.Success">@(account?.DbtAccountId == Guid.Empty ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<DbtAccount> OnAccountSubmit { get; set; }

    private HxModal? modal;
    private DbtAccount? account;
    private bool? connectionTestSuccess = null;
    private bool testingConnection = false;

    public async Task ShowAsync(Guid dbtAccountId)
    {
        account = null;
        await modal.LetAsync(x => x.ShowAsync());
        if (dbtAccountId != Guid.Empty)
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            account = await context.DbtAccounts
                .AsNoTrackingWithIdentityResolution()
                .Include(c => c.Steps)
                .ThenInclude(s => s.Job)
                .FirstAsync(d => d.DbtAccountId == dbtAccountId);
        }
        else
        {
            account = new();
        }
    }

    private async Task TestConnectionAsync()
    {
        ArgumentNullException.ThrowIfNull(account);
        connectionTestSuccess = null;
        testingConnection = true;
        try
        {
            var client = account.CreateClient(HttpClientFactory);
            await client.TestConnectionAsync();
            connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            connectionTestSuccess = false;
            Toaster.AddError("Connection test failed", ex.Message);
        }
        testingConnection = false;
    }

    private async Task SubmitAsync()
    {
        await OnAccountSubmit.InvokeAsync(account);
        await modal.LetAsync(x => x.HideAsync());
    }
}
