@inject IDbContextFactory<AppDbContext> DbFactory
@inject ToasterService Toaster
@inject IJSRuntime Js

<HxModal @ref="_modal" Size="ModalSize.Large" OnClosed="() => _connectionTestSuccess = null" Title="@(_dataFactory?.PipelineClientId == Guid.Empty ? "New Data Factory" : "Edit " + _dataFactory?.PipelineClientName)">
    <BodyTemplate>
        @if (_dataFactory is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="_dataFactory" id="df_edit_form" OnValidSubmit="SubmitDataFactory">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col">
                                <label class="form-label">Data Factory name</label>
                                <InputText class="form-control" @bind-Value="_dataFactory.PipelineClientName"></InputText>
                            </div>
                        </div>

                        <div class=" row mt-3">
                            <div class="col-lg-6">
                                <label class="form-label">Service principal</label>
                                <InputSelect class="form-select" @bind-Value="_dataFactory.AzureCredentialId">
                                    @foreach (var app in AzureCredentials ?? Enumerable.Empty<AzureCredential>())
                                        {
                                        <option value="@app.AzureCredentialId">@app.AzureCredentialName</option>
                                        }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Subscription id</label>
                                <InputText class="form-control" @bind-Value="_dataFactory.SubscriptionId"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Resource group name</label>
                                <InputText class="form-control" @bind-Value="_dataFactory.ResourceGroupName"></InputText>
                            </div>
                            <div class="col-lg">
                                <label class="form-label">Resource name</label>
                                <InputText class="form-control" @bind-Value="_dataFactory.ResourceName"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="TestConnection" Enabled="!_testingConnection">
                                    Test connection
                                </HxButton>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                @switch (_connectionTestSuccess)
                                {
                                    case true:
                                        <span class="badge bg-success">Success</span>
                                        break;
                                    case false:
                                        <span class="badge bg-danger">Failed</span>
                                        break;
                                }
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Max concurrent pipeline step executions</label>
                                <InputNumber class="form-control" style="max-width: 10rem;" @bind-Value="_dataFactory.MaxConcurrentPipelineSteps"></InputNumber>
                                <div class="form-text">
                                    Limit the number of concurrently executing pipeline steps across all executions for this Data Factory.
                                    <br />
                                    0 = no limit
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="df_edit_form" Color="ThemeColor.Success">@(_dataFactory?.PipelineClientId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<DataFactory> OnDataFactorySubmit { get; set; }

    [Parameter]
    public List<ServicePrincipalCredential>? AzureCredentials { get; set; }

    private DataFactory? _dataFactory;
    private HxModal? _modal;
    private bool? _connectionTestSuccess = null;
    private bool _testingConnection = false;

    private async Task SubmitDataFactory()
    {
        await OnDataFactorySubmit.InvokeAsync(_dataFactory);
        await _modal.LetAsync(x => x.HideAsync());
    }

    private async Task TestConnection()
    {
        _connectionTestSuccess = null;
        _testingConnection = true;
        try
        {
            var azureCredential = AzureCredentials?.First(ar => ar.AzureCredentialId == _dataFactory?.AzureCredentialId)
                ?? throw new ArgumentException("Azure credential cannot be null");
            await (_dataFactory?.TestConnection(azureCredential) ?? Task.CompletedTask);
            _connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            _connectionTestSuccess = false;
            Toaster.AddError("Connection test failed", ex.Message);
        }
        _testingConnection = false;
    }

    private void OnOpenChanged(bool isOpen)
    {
        if (!isOpen)
            _connectionTestSuccess = null;
    }

    public async Task ShowAsync(Guid pipelineClientId)
    {
        _dataFactory = null;
        await _modal.LetAsync(x => x.ShowAsync());
        if (pipelineClientId != Guid.Empty)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            _dataFactory = await context.DataFactories
                .AsNoTrackingWithIdentityResolution()
                .Include(df => df.Steps)
                .ThenInclude(step => step.Job)
                .FirstAsync(df => df.PipelineClientId == pipelineClientId);
        }
        else
        {
            _dataFactory = new()
            {
                AzureCredentialId = AzureCredentials?.FirstOrDefault()?.AzureCredentialId,
            };
        }
        _connectionTestSuccess = null;
        _testingConnection = false;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
