@implements IDisposable

@inject AuthenticationMethodResolver AuthenticationResolver
@inject IDbContextFactory<BiflowContext> DbFactory
@inject MarkupHelperService MarkupHelper
@inject DbHelperService DbHelperService
@inject IHxMessengerService Messenger
@inject IJSRuntime JS

<HxModal @ref="Modal" Title="@(IsNewUser ? "New user" : $"Edit {PreviousUsername}")" Scrollable="true" Size="ModalSize.Large" OnClosed="OnClosed">
    <BodyTemplate>
        @if (User is not null)
        {
            var roleInfo = User.Role switch
            {
                "Admin" => "Admins have full edit and execute rights to all jobs and access to global settings including users.",
                "Editor" => "Editors have full edit and execute rights to all jobs.",
                "Operator" => "Operators have execute access to jobs the user has been authorized to execute and view.",
                "Viewer" => "Viewers can view executions and details related to jobs they have been authorized to view.",
                _ => null
            };

            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="User" id="user_edit_form" OnValidSubmit="SubmitUser">
                <div class="row">
                    <div class="col-md-10 mx-auto">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div>
                            <label class="form-label">Username</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    @MarkupHelper.FromFile("icons/feather/user.svg")
                                </div>
                                <InputText class="form-control" disabled=@(!IsNewUser) @bind-Value="User.Username"></InputText>
                            </div>
                        </div>
                        <div class="mt-3">
                            <label class="form-label">Role</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    @MarkupHelper.FromFile("icons/feather/users.svg")
                                </div>
                                <InputSelect class="form-select" @bind-Value="User.Role">
                                    <option>Viewer</option>
                                    <option>Operator</option>
                                    <option>Editor</option>
                                    <option>Admin</option>
                                </InputSelect>
                            </div>
                            <div class="form-text">@roleInfo</div>
                        </div>
                        <div class="mt-3">
                            <label class="form-label">Email</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    @MarkupHelper.FromFile("icons/feather/at-sign.svg")
                                </div>
                                <InputText class="form-control" type="email" @bind-Value="User.Email"></InputText>
                            </div>
                        </div>
                        @if (IsNewUser && AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.BuiltIn)
                        {
                            <div class="mt-3">
                                <label class="form-label">Password</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        @MarkupHelper.FromFile("icons/feather/lock.svg")
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="Password"></InputText>
                                </div>
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Confirm password</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        @MarkupHelper.FromFile("icons/feather/key.svg")
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="ConfirmPassword"></InputText>
                                </div>
                            </div>
                        }
                        @if (User.Role != "Admin" && User.Role != "Editor")
                        {
                            <div class="mt-4">
                                <strong>Authorization</strong>
                            </div>
                            <ul class="nav nav-pills mt-3">
                                <li class="nav-item">
                                    <a class="nav-link @(CurrentPane == AuthorizationPane.Jobs ? "active" : null)"
                                       href="javascript:void()"
                                       @onclick="() => CurrentPane = AuthorizationPane.Jobs">
                                        Jobs
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link @(CurrentPane == AuthorizationPane.DataTables ? "active" : null)"
                                       href="javascript:void()"
                                       @onclick="() => CurrentPane = AuthorizationPane.DataTables">
                                        Data tables
                                    </a>
                                </li>
                            </ul>
                            @if (CurrentPane == AuthorizationPane.Jobs)
                            {
                                <div class="mt-3">
                                    <div class="form-check form-check-inline">
                                        <input type="checkbox" class="form-check-input" id="authorize_all_jobs"
                                           checked=@User.AuthorizeAllJobs
                                           @bind-value="User.AuthorizeAllJobs">
                                        <label class="form-check-label" for="authorize_all_jobs">Authorize all jobs</label>
                                    </div>
                                </div>
                                @if (!User.AuthorizeAllJobs)
                                {
                                    <div class="list-group mt-3">
                                        @if (Jobs is null)
                                        {
                                            <div class="list-group-item text-center"><HxSpinner Color="ThemeColor.Secondary" /></div>
                                        }
                                        else if (!Jobs.Any())
                                        {
                                            <div class="list-group-item">No jobs</div>
                                        }
                                        else
                                        {
                                            foreach (var job in Jobs)
                                            {
                                                <div class="list-group-item">
                                                    <div class="row">
                                                        <div class="col">
                                                            @job.JobName
                                                        </div>
                                                        <div class="col-auto">
                                                            <div class="form-check form-check-inline">
                                                                <input type="checkbox" class="form-check-input" id="authorize_@job.JobId"
                                                                       checked=@User.Jobs.Any(j => j.JobId == job.JobId)
                                                                       @onchange="args => ToggleJobAuthorization(args, job)">
                                                                <label class="form-check-label" for="authorize_@job.JobId"></label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            }
                            else if (CurrentPane == AuthorizationPane.DataTables)
                            {
                                <div class="mt-3">
                                    <div class="form-check form-check-inline">
                                        <input type="checkbox" class="form-check-input" id="authorize_all_datatables"
                                           checked=@User.AuthorizeAllDataTables
                                           @bind-value="User.AuthorizeAllDataTables">
                                        <label class="form-check-label" for="authorize_all_datatables">Authorize all data tables</label>
                                    </div>
                                </div>
                                @if (!User.AuthorizeAllDataTables)
                                {
                                    <div class="list-group mt-3">
                                        @if (DataTables is null)
                                        {
                                            <div class="list-group-item text-center"><HxSpinner Color="ThemeColor.Secondary" /></div>
                                        }
                                        else if (!DataTables.Any())
                                        {
                                            <div class="list-group-item">No data tables</div>
                                        }
                                        else
                                        {
                                            foreach (var category in DataTables
                                                .GroupBy(t => t.Category?.CategoryName ?? "No category")
                                                .OrderBy(g => g.Key.Equals("No category"))
                                                .ThenBy(g => g.Key))
                                            {
                                                <div class="list-group-item fw-bold" style="background-color: #f7f7f7">
                                                    @category.Key
                                                </div>
                                                @foreach (var table in category.OrderBy(t => t.DataTableName))
                                                {
                                                    <div class="list-group-item">
                                                        <div class="row">
                                                            <div class="col">
                                                                @table.DataTableName
                                                            </div>
                                                            <div class="col-auto">
                                                                <div class="form-check form-check-inline">
                                                                    <input type="checkbox" class="form-check-input" id="authorize_@table.DataTableId"
                                                                           checked=@User.DataTables.Any(t => t.DataTableId == table.DataTableId)
                                                                           @onchange="args => ToggleDataTableAuthorization(args, table)">
                                                                    <label class="form-check-label" for="authorize_@table.DataTableId"></label>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        }
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    
    <FooterTemplate>
        <HxSubmit form="user_edit_form" Color="ThemeColor.Success">@(IsNewUser ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

    @code {
    [Parameter]
    public EventCallback<User> OnUserSubmit { get; set; }

    private List<Job>? Jobs { get; set; }
    private List<MasterDataTable>? DataTables { get; set; } 

    private HxModal? Modal { get; set; }

    private User? User { get; set; }

    private bool IsNewUser => PreviousUsername is null;
    private string? PreviousUsername { get; set; }

    private string? Password { get; set; }
    private string? ConfirmPassword { get; set; }

    private BiflowContext Context { get; set; } = null!;

    private AuthorizationPane CurrentPane { get; set; } = AuthorizationPane.Jobs;

    private async Task ResetContext()
    {
        if (Context is not null)
            await Context.DisposeAsync();

        Context = await DbFactory.CreateDbContextAsync();
    }

    private void ToggleJobAuthorization(ChangeEventArgs args, Job job)
    {
        var enabled = (bool)args.Value!;
        if (enabled)
        {
            User?.Jobs.Add(job);
        }
        else
        {
            User?.Jobs.Remove(job);
        }
    }

    private void ToggleDataTableAuthorization(ChangeEventArgs args, MasterDataTable table)
    {
        var enabled = (bool)args.Value!;
        if (enabled)
        {
            User?.DataTables.Add(table);
        }
        else
        {
            User?.DataTables.Remove(table);
        }
    }

    private void OnClosed()
    {
        User = null;
    }

    private async Task SubmitUser()
    {
        // New user
        if (IsNewUser)
        {
            Password = Password ?? string.Empty;
            ConfirmPassword = ConfirmPassword ?? string.Empty;

            if (AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.BuiltIn && Password.Length < 1 || Password.Length > 250)
            {
                Messenger.AddError("Password must be between 1 and 250 characters in length");
                return;
            }

            if (AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.BuiltIn && !Password.Equals(ConfirmPassword))
            {
                Messenger.AddError("The two passwords do not match");
                return;
            }

            try
            {
                var result = await DbHelperService.AddUserAsync(User ?? throw new ArgumentNullException(nameof(User), "User was null"), Password);
                if (result)
                {
                    // Add possible job authorizations.
                    var context = DbFactory.CreateDbContext();
                    var user = await context.Users
                        .Include(u => u.Jobs)
                        .Include(u => u.DataTables)
                        .FirstAsync(u => u.Username == User.Username);
                    var jobs = await context.Jobs.ToListAsync();
                    var dataTables = await context.MasterDataTables.ToListAsync();
                    user.AuthorizeAllJobs = User.AuthorizeAllJobs;
                    user.AuthorizeAllDataTables = User.AuthorizeAllDataTables;
                    foreach (var jobToAdd in User.Jobs)
                    {
                        var job = jobs.FirstOrDefault(j => j.JobId == jobToAdd.JobId);
                        if (job is not null)
                            user.Jobs.Add(job);
                    }
                    foreach (var tableToAdd in User.DataTables)
                    {
                        var table = dataTables.FirstOrDefault(t => t.DataTableId == tableToAdd.DataTableId);
                        if (table is not null)
                            user.DataTables.Add(table);
                    }

                    await context.SaveChangesAsync();

                    Password = null;
                    ConfirmPassword = null;
                    await OnUserSubmit.InvokeAsync(User);
                    await Modal.LetAsync(x => x.HideAsync());
                }
                else
                {
                    Messenger.AddError("Error creating user");
                }
            }
            catch (Exception ex)
            {
                Messenger.AddError("Error creating user", ex.Message);
            }
        }
        // Existing user
        else
        {
            try
            {
                await Context.SaveChangesAsync();
                await OnUserSubmit.InvokeAsync(User);
                await Modal.LetAsync(x => x.HideAsync());
            }
            catch (Exception ex)
            {
                Messenger.AddError("Error updating user", ex.Message);
            }
        }
    }

    public async Task ShowAsync(string? username)
    {
        await Modal.LetAsync(x => x.ShowAsync());
        PreviousUsername = username;
        if (username is null)
        {
            await ResetContext();
            User = new()
            {
                Role = "Viewer",
                Jobs = new List<Job>(),
                DataTables = new List<MasterDataTable>()
            };
        }
        else
        {
            await ResetContext();
            User = await Context.Users
                .Include(u => u.Jobs)
                .Include(u => u.DataTables)
                .FirstAsync(user => user.Username == username);            
        }
        Jobs = await Context.Jobs
            .OrderBy(j => j.JobName)
            .ToListAsync();
        DataTables = await Context.MasterDataTables
            .Include(t => t.Category)
            .OrderBy(t => t.DataTableName)
            .ToListAsync();
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }

    public void Dispose() => Context?.Dispose();

    private enum AuthorizationPane { Jobs, DataTables }
}
