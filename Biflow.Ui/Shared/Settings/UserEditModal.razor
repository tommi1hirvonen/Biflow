@implements IDisposable

@inject IDbContextFactory<BiflowContext> DbFactory
@inject MarkupHelperService MarkupHelper
@inject IJSRuntime JS
@inject DbHelperService DbHelperService

<HxModal @ref="Modal" Title="@(IsNewUser ? "New user" : $"Edit {PreviousUsername}")" Scrollable="true" Size="ModalSize.Large" OnClosed="OnClosed">
    <BodyTemplate>
        @if (User is not null)
        {
            <EditForm Model="User" id="user_edit_form" OnValidSubmit="SubmitUser">
                <div class="row">
                    <div class="col-md-10 mx-auto">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div>
                            <label class="form-label">Username</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    @MarkupHelper.FromFile("icons/feather/user.svg")
                                </div>
                                <InputText class="form-control" disabled=@(!IsNewUser) @bind-Value="User.Username"></InputText>
                            </div>
                        </div>
                        <div class="mt-3">
                            <label class="form-label">Role</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    @MarkupHelper.FromFile("icons/feather/users.svg")
                                </div>
                                <InputSelect class="form-select" @bind-Value="User.Role">
                                    <option>Viewer</option>
                                    <option>Operator</option>
                                    <option>Editor</option>
                                    <option>Admin</option>
                                </InputSelect>
                            </div>
                        </div>
                        <div class="mt-3">
                            <label class="form-label">Email</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    @MarkupHelper.FromFile("icons/feather/at-sign.svg")
                                </div>
                                <InputText class="form-control" type="email" @bind-Value="User.Email"></InputText>
                            </div>
                        </div>
                        @if (IsNewUser)
                        {
                            <div class="mt-3">
                                <label class="form-label">Password</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        @MarkupHelper.FromFile("icons/feather/lock.svg")
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="Password"></InputText>
                                </div>
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Confirm password</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        @MarkupHelper.FromFile("icons/feather/key.svg")
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="ConfirmPassword"></InputText>
                                </div>
                            </div>
                        }
                        @if (User.Role != "Admin" && User.Role != "Editor")
                        {
                            <div class="mt-3">
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="authorize_all_jobs"
                                           checked=@User.AuthorizeAllJobs
                                           @bind-value="User.AuthorizeAllJobs">
                                    <label class="form-check-label" for="authorize_all_jobs">Authorize all jobs</label>
                                </div>
                            </div>
                            <div class="mt-3">
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="authorize_all_datatables"
                                           checked=@User.AuthorizeAllDataTables
                                           @bind-value="User.AuthorizeAllDataTables">
                                    <label class="form-check-label" for="authorize_all_datatables">Authorize all data tables</label>
                                </div>
                            </div>
                            @if (!User.AuthorizeAllJobs)
                            {
                                <div class="mt-3">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>Job</th>
                                                <th>Authorize</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Jobs is null)
                                            {
                                                <tr>
                                                    <td colspan="2">Loading...</td>
                                                </tr>
                                            }
                                            else if (!Jobs.Any())
                                            {
                                                <tr>
                                                    <td colspan="2">No jobs</td>
                                                </tr>
                                            }
                                            else
                                            {
                                                @foreach (var job in Jobs)
                                                {
                                                    <tr>
                                                        <td>
                                                            @job.JobName
                                                        </td>
                                                        <td>
                                                            <div class="form-check form-check-inline">
                                                                <input type="checkbox" class="form-check-input" id="authorize_@job.JobId"
                                                                       checked=@User.Jobs.Any(j => j.JobId == job.JobId)
                                                                       @onchange="args => ToggleJobAuthorization(args, job)">
                                                                <label class="form-check-label" for="authorize_@job.JobId"></label>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            @if (!User.AuthorizeAllDataTables)
                            {
                                <div class="mt-3">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>Data table</th>
                                                <th>Authorize</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (DataTables is null)
                                            {
                                                <tr>
                                                    <td colspan="2">Loading...</td>
                                                </tr>
                                            }
                                            else if (!DataTables.Any())
                                            {
                                                <tr>
                                                    <td colspan="2">No data tables</td>
                                                </tr>
                                            }
                                            else
                                            {
                                                @foreach (var table in DataTables)
                                                {
                                                    <tr>
                                                        <td>
                                                            @table.DataTableName
                                                        </td>
                                                        <td>
                                                            <div class="form-check form-check-inline">
                                                                <input type="checkbox" class="form-check-input" id="authorize_@table.DataTableId"
                                                                       checked=@User.DataTables.Any(t => t.DataTableId == table.DataTableId)
                                                                       @onchange="args => ToggleDataTableAuthorization(args, table)">
                                                                <label class="form-check-label" for="authorize_@table.DataTableId"></label>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        }
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    
    <FooterTemplate>
        <HxSubmit form="user_edit_form" Color="ThemeColor.Success">@(IsNewUser ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Modal.HideAsync()">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<User> OnUserSubmit { get; set; }

    private List<Job>? Jobs { get; set; }
    private List<DataTable>? DataTables { get; set; } 

    private HxModal Modal { get; set; } = null!;

    private User? User { get; set; }

    private bool IsNewUser => PreviousUsername is null;
    private string? PreviousUsername { get; set; }

    private string? Password { get; set; }
    private string? ConfirmPassword { get; set; }

    private BiflowContext Context { get; set; } = null!;

    private async Task ResetContext()
    {
        if (Context is not null)
            await Context.DisposeAsync();

        Context = await DbFactory.CreateDbContextAsync();
    }

    private void ToggleJobAuthorization(ChangeEventArgs args, Job job)
    {
        var enabled = (bool)args.Value!;
        if (enabled)
        {
            User?.Jobs.Add(job);
        }
        else
        {
            User?.Jobs.Remove(job);
        }
    }

    private void ToggleDataTableAuthorization(ChangeEventArgs args, DataTable table)
    {
        var enabled = (bool)args.Value!;
        if (enabled)
        {
            User?.DataTables.Add(table);
        }
        else
        {
            User?.DataTables.Remove(table);
        }
    }

    private void OnClosed()
    {
        User = null;
    }

    private async Task SubmitUser()
    {
        // New user
        if (IsNewUser)
        {
            Password = Password ?? string.Empty;
            ConfirmPassword = ConfirmPassword ?? string.Empty;

            if (Password.Length < 1 || Password.Length > 250)
            {
                await JS.InvokeVoidAsync("alert", "Password must be between 1 and 250 characters in length");
                return;
            }

            if (!Password.Equals(ConfirmPassword))
            {
                await JS.InvokeVoidAsync("alert", "The two passwords do not match");
                return;
            }

            try
            {
                var result = await DbHelperService.AddUserAsync(User ?? throw new ArgumentNullException(nameof(User), "User was null"), Password);
                if (result)
                {
                    // Add possible job authorizations.
                    var context = DbFactory.CreateDbContext();
                    var user = await context.Users
                        .Include(u => u.Jobs)
                        .Include(u => u.DataTables)
                        .FirstAsync(u => u.Username == User.Username);
                    var jobs = await context.Jobs.ToListAsync();
                    var dataTables = await context.DataTables.ToListAsync();
                    user.AuthorizeAllJobs = User.AuthorizeAllJobs;
                    user.AuthorizeAllDataTables = User.AuthorizeAllDataTables;
                    foreach (var jobToAdd in User.Jobs)
                    {
                        var job = jobs.FirstOrDefault(j => j.JobId == jobToAdd.JobId);
                        if (job is not null)
                            user.Jobs.Add(job);
                    }
                    foreach (var tableToAdd in User.DataTables)
                    {
                        var table = dataTables.FirstOrDefault(t => t.DataTableId == tableToAdd.DataTableId);
                        if (table is not null)
                            user.DataTables.Add(table);
                    }

                    await context.SaveChangesAsync();

                    Password = null;
                    ConfirmPassword = null;
                    await OnUserSubmit.InvokeAsync(User);
                    await Modal.HideAsync();
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Error creating user");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", "Error creating user: " + ex.Message);
            }
        }
        // Existing user
        else
        {
            try
            {
                await Context.SaveChangesAsync();
                await OnUserSubmit.InvokeAsync(User);
                await Modal.HideAsync();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", "Error updating user: " + ex.Message);
            }
        }
    }

    public async Task ShowAsync(string? username)
    {
        await Modal.ShowAsync();
        PreviousUsername = username;
        if (username is null)
        {
            await ResetContext();
            User = new()
            {
                Role = "Viewer",
                Jobs = new List<Job>(),
                DataTables = new List<DataTable>()
            };
        }
        else
        {
            await ResetContext();
            User = await Context.Users
                .Include(u => u.Jobs)
                .Include(u => u.DataTables)
                .FirstAsync(user => user.Username == username);            
        }
        Jobs = await Context.Jobs.OrderBy(j => j.JobName).ToListAsync();
        DataTables = await Context.DataTables.OrderBy(t => t.DataTableName).ToListAsync();
    }


    public void Dispose() => Context?.Dispose();

}
