
<HxModal @ref="modal" Title="@(IsNewUser ? "New user" : $"Edit {currentUsername}")" Scrollable="true" Size="ModalSize.Large" OnClosed="OnClosed">
    <BodyTemplate>
        @if (model is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="model" id="user_edit_form" OnValidSubmit="SubmitUser">
                <div class="row">
                    <div class="col-md-10 mx-auto">
                        <ObjectGraphDataAnnotationsValidator />
                        <ValidationSummary />
                        <FluentValidationValidator Validator="validator" />
                        <div>
                            <label class="form-label">Username</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <SvgIcon Icon="FeatherIcon.User" />
                                </div>
                                <InputText class="form-control" @bind-Value="model.User.Username"></InputText>
                            </div>
                        </div>
                        <div class="mt-3">
                            <label class="form-label">Roles</label>
                        </div>
                        <div class="row mt-2">
                            <div class="col">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" id="role_radio_admin"
                                           checked=@model.User.Roles.Contains(Roles.Admin)
                                    @onchange="@(e => model.User.SetIsAdmin())">
                                    <label class="form-check-label fw-normal" for="role_radio_admin">
                                        Admin
                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Admins have full edit and execute rights to all jobs and access to global settings including users.">
                                            <SvgIcon Icon="FeatherIcon.Info" />
                                        </HxPopover>
                                    </label>
                                </div>
                                <div class="form-check mt-1">
                                    <input class="form-check-input" type="radio" id="role_radio_editor"
                                           checked=@model.User.Roles.Contains(Roles.Editor)
                                    @onchange="@(e => model.User.SetIsEditor())">
                                    <label class="form-check-label fw-normal" for="role_radio_editor">
                                        Editor
                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Editors have full edit and execute rights to all jobs.">
                                            <SvgIcon Icon="FeatherIcon.Info" />
                                        </HxPopover>
                                    </label>
                                </div>
                                <div class="form-check mt-1">
                                    <input class="form-check-input" type="radio" id="role_radio_operator"
                                           checked=@model.User.Roles.Contains(Roles.Operator)
                                    @onchange="@(e => model.User.SetIsOperator())">
                                    <label class="form-check-label fw-normal" for="role_radio_operator">
                                        Operator
                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Operators have execute access to jobs the user has been authorized to execute and view.">
                                            <SvgIcon Icon="FeatherIcon.Info" />
                                        </HxPopover>
                                    </label>
                                </div>
                                <div class="form-check mt-1">
                                    <input class="form-check-input" type="radio" id="role_radio_viewer"
                                           checked=@model.User.Roles.Contains(Roles.Viewer)
                                    @onchange="@(e => model.User.SetIsViewer())">
                                    <label class="form-check-label fw-normal" for="role_radio_viewer">
                                        Viewer
                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Viewers can view executions and details related to jobs they have been authorized to view.">
                                            <SvgIcon Icon="FeatherIcon.Info" />
                                        </HxPopover>
                                    </label>
                                </div>
                            </div>
                            <div class="col">
                                @if (!model.User.Roles.Contains(Roles.Admin))
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="role_radio_settings_editor"
                                               checked=@model.User.Roles.Contains(Roles.SettingsEditor)
                                               @onchange="@(e => model.User.SetIsSettingsEditor((bool)e.Value!))">
                                        <label class="form-check-label fw-normal" for="role_radio_settings_editor">
                                            Settings Editor
                                            <HxPopover Trigger="PopoverTrigger.Hover" Content="Settings editors can manage (create, edit, delete) connections, app registrations, pipeline clients, function apps and Qlik environments">
                                                <SvgIcon Icon="FeatherIcon.Info" />
                                            </HxPopover>
                                        </label>
                                    </div>
                                    <div class="form-check mt-1">
                                        <input class="form-check-input" type="checkbox" id="role_radio_datatable_maintainer"
                                               checked=@model.User.Roles.Contains(Roles.DataTableMaintainer)
                                        @onchange="@(e => model.User.SetIsDataTableMaintainer((bool)e.Value!))">
                                        <label class="form-check-label fw-normal" for="role_radio_datatable_maintainer">
                                            Data Table Maintainer
                                            <HxPopover Trigger="PopoverTrigger.Hover" Content="Data table maintainers can manage (create, edit delete) data tables and edit their content.">
                                                <SvgIcon Icon="FeatherIcon.Info" />
                                            </HxPopover>
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="mt-3">
                            <label class="form-label">Email</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <SvgIcon Icon="FeatherIcon.AtSign" />
                                </div>
                                <InputText class="form-control" type="email" @bind-Value="model.User.Email"></InputText>
                            </div>
                        </div>
                        @if (IsNewUser && AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.BuiltIn)
                        {
                            ArgumentNullException.ThrowIfNull(model.PasswordModel);
                            <div class="mt-3">
                                <label class="form-label">Password</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="FeatherIcon.Lock" />
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="model.PasswordModel.Password"></InputText>
                                </div>
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Confirm password</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="FeatherIcon.Key" />
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="model.PasswordModel.ConfirmPassword"></InputText>
                                </div>
                            </div>
                        }
                        @if (!model.User.Roles.Contains(Roles.Admin))
                        {
                            <div class="mt-4">
                                <strong>Authorization</strong>
                            </div>
                            <ul class="nav nav-tabs mt-3">
                                <li class="nav-item">
                                    <a class="nav-link @(currentPane == AuthorizationPane.Jobs ? "active" : null)"
                                       href="javascript:void()"
                                       @onclick="() => currentPane = AuthorizationPane.Jobs">
                                        Jobs
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link @(currentPane == AuthorizationPane.DataTables ? "active" : null)"
                                       href="javascript:void()"
                                       @onclick="() => currentPane = AuthorizationPane.DataTables">
                                        Data tables
                                    </a>
                                </li>
                            </ul>
                            @if (currentPane == AuthorizationPane.Jobs && model.User.Roles.Contains(Roles.Editor))
                            {
                                <div class="row mt-3">
                                    <div class="col">
                                        <span class="text-muted fst-italic mt-3">
                                            User has @Roles.Editor role and is implicitly authorized to edit all jobs.
                                        </span>
                                    </div>
                                </div>
                            }
                            else if (currentPane == AuthorizationPane.Jobs)
                            {
                                <div class="mt-3">
                                    <div class="form-check form-check-inline">
                                        <input type="checkbox" class="form-check-input" id="authorize_all_jobs"
                                           checked=@model.User.AuthorizeAllJobs
                                        @bind-value="model.User.AuthorizeAllJobs">
                                        <label class="form-check-label" for="authorize_all_jobs">Authorize all jobs</label>
                                    </div>
                                </div>
                                @if (!model.User.AuthorizeAllJobs)
                                {
                                    <div class="list-group mt-3">
                                        @if (jobs is null)
                                        {
                                            <div class="list-group-item text-center"><HxSpinner Color="ThemeColor.Secondary" /></div>
                                        }
                                        else if (!jobs.Any())
                                        {
                                            <div class="list-group-item">No jobs</div>
                                        }
                                        else
                                        {
                                            @foreach (var job in jobs.OrderBy(j => j.JobName))
                                            {
                                                <div class="list-group-item">
                                                    <div class="row">
                                                        <div class="col">
                                                            @job.JobName
                                                        </div>
                                                        <div class="col-auto">
                                                            <div class="form-check form-check-inline">
                                                                <input type="checkbox" class="form-check-input" id="authorize_@job.JobId"
                                                                        checked=@model.User.Jobs.Any(j => j.JobId == job.JobId)
                                                                        @onchange="args => ToggleJobAuthorization(args, job)">
                                                                <label class="form-check-label" for="authorize_@job.JobId"></label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            }
                            else if (currentPane == AuthorizationPane.DataTables && model.User.Roles.Contains(Roles.DataTableMaintainer))
                            {
                                <div class="row mt-3">
                                    <div class="col">
                                        <span class="text-muted fst-italic mt-3">
                                            User has @Roles.DataTableMaintainer role and is implicitly authorized to edit all data tables.
                                        </span>
                                    </div>
                                </div>
                            }
                            else if (currentPane == AuthorizationPane.DataTables)
                            {
                                <div class="mt-3">
                                    <div class="form-check form-check-inline">
                                        <input type="checkbox" class="form-check-input" id="authorize_all_datatables"
                                               checked=@model.User.AuthorizeAllDataTables
                                        @bind-value="model.User.AuthorizeAllDataTables">
                                        <label class="form-check-label" for="authorize_all_datatables">Authorize all data tables</label>
                                    </div>
                                </div>
                                @if (!model.User.AuthorizeAllDataTables)
                                {
                                    <div class="list-group mt-3">
                                        @if (dataTables is null)
                                        {
                                            <div class="list-group-item text-center"><HxSpinner Color="ThemeColor.Secondary" /></div>
                                        }
                                        else if (!dataTables.Any())
                                        {
                                            <div class="list-group-item">No data tables</div>
                                        }
                                        else
                                        {
                                            foreach (var category in dataTables
                                                .GroupBy(t => t.Category?.CategoryName ?? "No category")
                                                .OrderBy(g => g.Key.Equals("No category"))
                                                .ThenBy(g => g.Key))
                                            {
                                                <div class="list-group-item fw-bold list-group-header">
                                                    @category.Key
                                                </div>
                                                @foreach (var table in category.OrderBy(t => t.DataTableName))
                                                {
                                                    <div class="list-group-item">
                                                        <div class="row">
                                                            <div class="col">
                                                                @table.DataTableName
                                                            </div>
                                                            <div class="col-auto">
                                                                <div class="form-check form-check-inline">
                                                                    <input type="checkbox" class="form-check-input" id="authorize_@table.DataTableId"
                                                                           checked=@model.User.DataTables.Any(t => t.DataTableId == table.DataTableId)
                                                                           @onchange="args => ToggleDataTableAuthorization(args, table)">
                                                                    <label class="form-check-label" for="authorize_@table.DataTableId"></label>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        }
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    
    <FooterTemplate>
        <HxSubmit form="user_edit_form" Color="ThemeColor.Success">@(IsNewUser ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>
