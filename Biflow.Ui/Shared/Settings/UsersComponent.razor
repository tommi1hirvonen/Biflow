@inject IDbContextFactory<BiflowContext> DbFactory
@inject UserService UserService
@inject IHxMessengerService Messenger
@inject AuthenticationMethodResolver AuthenticationResolver

<PageTitle>Users | Biflow</PageTitle>

<HxButton Color="ThemeColor.Success" OnClick="async () => await ShowEditModalAsync(null)" Enabled="Users is not null" Spinner="false">
    Add user
</HxButton>

<div class="row my-4">
    <div class="col">
        <ul class="list-group shadow-sm">
            @if (Users is null)
            {
                <li class="list-group-item text-center"><HxSpinner Color="ThemeColor.Secondary" /></li>
            }
            else if (Users.Count == 0)
            {
                <li class="list-group-item">No users</li>
            }
            else
            {
                foreach (var user in Users.OrderBy(u => u.Username))
                {
                    <li class="list-group-item list-group-item-action">
                        <div class="row">
                            <div class="col">
                                @user.Username
                            </div>
                            <div class="col-auto">
                                <HxButtonGroup>
                                    <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" aria-label="edit" @onclick="async () => await ShowEditModalAsync(user)" title="Edit user">
                                        <CxIcon Icon="FeatherIcon.Edit2" />
                                    </HxButton>

                                    @if (AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.BuiltIn)
                                    {
                                        <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" aria-label="Change password" @onclick="() => ResetPasswordModal.LetAsync(x => x.ShowAsync(user.Username))" title="Reset password">
                                            <CxIcon Icon="FeatherIcon.Key" />
                                        </HxButton>
                                    }

                                    <HxDropdownButtonGroup>
                                        <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" aria-label="delete" title="Delete user">
                                            <CxIcon Icon="FeatherIcon.Trash2" />
                                        </HxDropdownToggleButton>
                                        <HxDropdownMenu>
                                            <HxDropdownHeader>Delete?</HxDropdownHeader>
                                            <HxDropdownItem @onclick="() => DeleteUser(user)">Confirm</HxDropdownItem>
                                        </HxDropdownMenu>
                                    </HxDropdownButtonGroup>
                                </HxButtonGroup>
                            </div>
                            <div class="col">
                                @user.Email
                            </div>
                            <div class="col">
                                @foreach (var role in user.Roles.OrderBy(r => r))
                                {
                                    var tag = new RoleTag(role);
                                    <TagComponent Tag="tag" CssClass="m-1" />
                                }
                            </div>
                            <div class="col">
                                Created on @user.CreatedDateTime.LocalDateTime
                            </div>
                        </div>
                    </li>
                }
            }
        </ul>
    </div>
</div>

<ResetPasswordModal @ref="ResetPasswordModal" />

<UserEditModal @ref="UserEditModal" OnUserSubmit="OnUserSubmit" />


@code {
    private List<User> Users { get; set; } = null!;

    private UserEditModal? UserEditModal { get; set; }
    private ResetPasswordModal? ResetPasswordModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run(DbFactory.CreateDbContext);
        Users = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(user => user.Username)
            .ToListAsync();
    }

    private async Task DeleteUser(User user)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Users.Remove(user);
            await context.SaveChangesAsync();
            Users.Remove(user);
        }
        catch (Exception)
        {
            Messenger.AddError("Error deleting user");
        }
    }

    private void OnUserSubmit(User user)
    {
        var existingUser = Users.FirstOrDefault(u => u.UserId == user.UserId);
        if (existingUser is not null)
        {
            Users.Remove(existingUser);
        }
        Users.Add(user);
        Users.Sort((u1, u2) => u1.Username.CompareTo(u2.Username));
    }

    private async Task ShowEditModalAsync(User? user)
    {
        await UserEditModal.LetAsync(x => x.ShowAsync(user?.UserId));
    }

}
