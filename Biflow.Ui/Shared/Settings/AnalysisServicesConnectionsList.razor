@inject IDbContextFactory<AppDbContext> DbFactory
@inject IMediator Mediator
@inject ToasterService Toaster

<style>
    tr a {
        text-decoration: none;
    }

    tr:hover a {
        text-decoration: underline;
    }
</style>

<PageTitle>Analysis Services | Biflow</PageTitle>

<HxButton Color="ThemeColor.Success" Enabled="_connections is not null" OnClick="() => _editModal.LetAsync(x => x.ShowAsync(Guid.Empty))">
    Add connection
</HxButton>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (_connections is null)
            {
                <tr><td colspan="4" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (_connections.Count == 0)
            {
                <tr><td colspan="4">No Analysis Services connections</td></tr>
            }
            else
            {
                @foreach (var connection in _connections.OrderBy(c => c.ConnectionName))
                {
                    var steps = connection.Steps.Count();
                    var jobs = connection.Steps.Select(s => s.JobId).Distinct().Count();

                    <tr>
                        <td class="align-middle">
                            @connection.ConnectionName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup>
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="() => _editModal.LetAsync(x => x.ShowAsync(connection.ConnectionId))">
                                    <SvgIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <SvgIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteConnection(connection)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                        </td>
                        <td class="align-middle">
                            <a class="text-body" href="javascript:void(0)"
                               @onclick="async () =>
                                {
                                    _stepsConnection = connection;
                                    await _stepsModal.LetAsync(x => x.ShowAsync());
                                }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<AnalysisServicesConnectionEditModal @ref="_editModal"
                                     Credentials="_credentials"
                                     OnConnectionSubmit="OnConnectionSubmit" />

<HxModal @ref="_stepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {_stepsConnection?.ConnectionName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in _stepsConnection?.Steps
                        .OrderBy(s => s.Job.JobName)
                        .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIcon StepType="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await _stepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private AnalysisServicesConnectionEditModal? _editModal;
    private List<AnalysisServicesConnection>? _connections;
    private List<Credential> _credentials = [];
    private AnalysisServicesConnection? _stepsConnection;
    private HxModal? _stepsModal;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _credentials = await context.Credentials
            .AsNoTracking()
            .OrderBy(c => c.Domain)
            .ThenBy(c => c.Username)
            .ToListAsync();
        _connections = await context.AnalysisServicesConnections
            .AsNoTrackingWithIdentityResolution()
            .Include(c => c.TabularSteps)
            .ThenInclude(step => step.Job)
            .OrderBy(c => c.ConnectionName)
            .ToListAsync();
    }

    private async Task DeleteConnection(AnalysisServicesConnection connection)
    {
        try
        {
            await Mediator.SendAsync(new DeleteConnectionCommand(connection.ConnectionId));
            _connections?.RemoveAll(c => c.ConnectionId == connection.ConnectionId);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting connection", message);
        }
    }

    private async Task OnConnectionSubmit(AnalysisServicesConnection connection)
    {
        if (connection.ConnectionId == Guid.Empty)
        {
            await Mediator.SendAsync(new CreateConnectionCommand(connection));
        }
        else
        {
            await Mediator.SendAsync(new UpdateConnectionCommand(connection));
            _connections?.RemoveAll(c => c.ConnectionId == connection.ConnectionId);
        }
        _connections?.Add(connection);
        _connections?.Sort();
        StateHasChanged();
    }
}
