@inject IDbContextFactory<AppDbContext> DbFactory
@inject IHxMessengerService Messenger
@inject IJSRuntime JS

<HxModal @ref="modal" Size="ModalSize.Large" OnClosed="() => connectionTestSuccess = null" Title="@(appRegistration?.AppRegistrationId == Guid.Empty ? "New App registration" : "Edit " + appRegistration?.AppRegistrationName)">
    <BodyTemplate>
        @if (appRegistration is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="appRegistration" id="pbi_edit_form" OnValidSubmit="SubmitAppRegistration">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col">
                                <label class="form-label">App registration name</label>
                                <InputText class="form-control" @bind-Value="appRegistration.AppRegistrationName"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Tenant id</label>
                                <InputText class="form-control" @bind-Value="appRegistration.TenantId"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Client id</label>
                                <InputText class="form-control" @bind-Value="appRegistration.ClientId"></InputText>
                            </div>
                            <div class="col-lg">
                                <label class="form-label">Client secret</label>
                                <InputText class="form-control" @bind-Value="appRegistration.ClientSecret"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="TestConnection" Enabled="!testingConnection">
                                    Test connection
                                </HxButton>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="TestPowerBIAccess" Enabled="!testingConnection">
                                    Test Power BI access
                                </HxButton>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col">
                                @if (connectionTestSuccess == true)
                                {
                                    <span class="badge bg-success">Success</span>
                                }
                                else if (connectionTestSuccess == false)
                                {
                                    <span class="badge bg-danger">Failed</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="pbi_edit_form" Color="ThemeColor.Success">@(appRegistration?.AppRegistrationId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate> 
</HxModal>

@code {
    [Parameter]
    public EventCallback<AppRegistration> OnAppRegistrationSubmit { get; set; }

    private AppRegistration? appRegistration;
    private HxModal? modal;
    private bool? connectionTestSuccess = null;
    private bool testingConnection = false;

    private async Task SubmitAppRegistration()
    {
        await OnAppRegistrationSubmit.InvokeAsync(appRegistration);
        await modal.LetAsync(x => x.HideAsync());
    }

    private async Task TestConnection()
    {
        connectionTestSuccess = null;
        testingConnection = true;
        try
        {
            if (appRegistration?.TenantId is null || appRegistration.ClientId is null || appRegistration.ClientSecret is null)
            {
                throw new ArgumentNullException("One or more of the App registration properties needed for connection testing was null");
            }
            await (appRegistration?.TestConnection() ?? Task.CompletedTask);
            connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            connectionTestSuccess = false;
            Messenger.AddError("Connection test failed", ex.Message);
        }
        testingConnection = false;
    }

    private async Task TestPowerBIAccess()
    {
        connectionTestSuccess = null;
        testingConnection = true;
        try
        {
            if (appRegistration?.TenantId is null || appRegistration.ClientId is null || appRegistration.ClientSecret is null)
            {
                throw new ArgumentNullException("One or more of the App registration properties needed for connection testing was null");
            }
            await (appRegistration?.TestPowerBIConnection() ?? Task.CompletedTask);
            connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            connectionTestSuccess = false;
            Messenger.AddError("Connection test failed", ex.Message);
        }
        testingConnection = false;
    }

    public async Task ShowAsync(Guid appRegistrationId)
    {
        appRegistration = null;
        connectionTestSuccess = null;
        await modal.LetAsync(x => x.ShowAsync());
        if (appRegistrationId != Guid.Empty)
        {
            using var context = DbFactory.CreateDbContext();
            appRegistration = await context.AppRegistrations
                .AsNoTrackingWithIdentityResolution()
                .Include(app => app.Steps)
                .ThenInclude(step => step.Job)
                .Include(app => app.PipelineClients)
                .Include(app => app.FunctionApps)
                .FirstAsync(r => r.AppRegistrationId == appRegistrationId);
        }
        else
        {
            appRegistration = new()
            {
                Steps = new List<DatasetStep>(),
                PipelineClients = new List<PipelineClient>(),
                FunctionApps = new List<FunctionApp>()
            };
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }

}
