@inject IDbContextFactory<AppDbContext> DbFactory
@inject ToasterService Toaster
@inject IJSRuntime Js
@inject IMediator Mediator

<HxModal @ref="_modal"
         Size="ModalSize.Large"
         OnClosed="() => _connectionTestSuccess = null"
         OnShown="() => _nameInput?.Element?.FocusAsync()"
         Title="@(_azureCredential?.AzureCredentialId == Guid.Empty ? "New Azure credential" : "Edit " + _azureCredential?.AzureCredentialName)">
    <BodyTemplate>
        @if (_azureCredential is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="_azureCredential" id="pbi_edit_form" OnValidSubmit="SubmitAzureCredentialAsync">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col">
                                <label class="form-label">Azure credential name</label>
                                <InputText @ref="_nameInput" class="form-control" @bind-Value="_azureCredential.AzureCredentialName"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Tenant id</label>
                                <InputText class="form-control" @bind-Value="_azureCredential.TenantId"></InputText>
                            </div>
                            <div class="col-lg">
                                <label class="form-label">Client id</label>
                                <InputText class="form-control" @bind-Value="_azureCredential.ClientId"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Username</label>
                                <InputText class="form-control" @bind-Value="_azureCredential.Username"></InputText>
                            </div>
                            <div class="col-lg">
                                <label class="form-label">Password</label>
                                <InputText class="form-control" type="password" @bind-Value="_azureCredential.Password"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="TestPowerBiAccess" Enabled="!_testingConnection">
                                    Test Power BI access
                                </HxButton>
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col">
                                @switch (_connectionTestSuccess)
                                {
                                    case true:
                                        <span class="badge bg-success">Success</span>
                                        break;
                                    case false:
                                        <span class="badge bg-danger">Failed</span>
                                        break;
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="pbi_edit_form" Color="ThemeColor.Success">@(_azureCredential?.AzureCredentialId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate> 
</HxModal>

@code {
    [Parameter]
    public EventCallback<AzureCredential> OnAzureCredentialSubmit { get; set; }

    private InputText? _nameInput;
    private OrganizationalAccountAzureCredential? _azureCredential;
    private HxModal? _modal;
    private bool? _connectionTestSuccess;
    private bool _testingConnection;

    private async Task SubmitAzureCredentialAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(_azureCredential);
            if (_azureCredential.AzureCredentialId == Guid.Empty)
            {
                var command = new CreateOrganizationalAccountAzureCredentialCommand(
                    _azureCredential.AzureCredentialName,
                    _azureCredential.TenantId,
                    _azureCredential.ClientId,
                    _azureCredential.Username,
                    _azureCredential.Password);
                var azureCredential = await Mediator.SendAsync(command);
                await OnAzureCredentialSubmit.InvokeAsync(azureCredential);
            }
            else
            {
                var command = new UpdateOrganizationalAccountAzureCredentialCommand(
                    _azureCredential.AzureCredentialId,
                    _azureCredential.AzureCredentialName,
                    _azureCredential.TenantId,
                    _azureCredential.ClientId,
                    _azureCredential.Username,
                    _azureCredential.Password);
                _ = await Mediator.SendAsync(command);
                await OnAzureCredentialSubmit.InvokeAsync(_azureCredential);
            }
            await _modal.LetAsync(x => x.HideAsync());
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error submitting Azure credential", ex.Message);
        }
    }

    private async Task TestPowerBiAccess()
    {
        _connectionTestSuccess = null;
        _testingConnection = true;
        try
        {
            if (_azureCredential?.TenantId is null || _azureCredential.ClientId is null ||
                _azureCredential.Username is null || _azureCredential.Password is null)
            {
                throw new ArgumentException("One or more of the Azure credential properties needed for connection testing was null");
            }
            await (_azureCredential?.TestPowerBiConnection() ?? Task.CompletedTask);
            _connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            _connectionTestSuccess = false;
            Toaster.AddError("Connection test failed", ex.Message);
        }
        _testingConnection = false;
    }

    public async Task ShowAsync(Guid azureCredentialId)
    {
        _azureCredential = null;
        _connectionTestSuccess = null;
        await _modal.LetAsync(x => x.ShowAsync());
        if (azureCredentialId != Guid.Empty)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            _azureCredential = await context.OrganizationalAccountCredentials
                .AsNoTrackingWithIdentityResolution()
                .Include(app => app.Steps)
                .ThenInclude(step => step.Job)
                .Include(app => app.PipelineClients)
                .Include(app => app.FunctionApps)
                .FirstAsync(r => r.AzureCredentialId == azureCredentialId);
        }
        else
        {
            _azureCredential = new();
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }

}
