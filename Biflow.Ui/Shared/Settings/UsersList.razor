@inject IDbContextFactory<AppDbContext> DbFactory
@inject IMediator Mediator
@inject ToasterService Toaster
@inject AuthenticationMethodResolver AuthenticationResolver

<PageTitle>Users | Biflow</PageTitle>

<div class="row">
    <div class="col-auto">
        <HxButton Color="ThemeColor.Success" OnClick="async () => await ShowEditModalAsync(null)" Enabled="_users is not null" Spinner="false">
            Add user
        </HxButton>
    </div>
    <div class="col-auto">
        <div class="btn-toolbar" role="toolbar">
            <div class="input-group me-3">
                <div class="input-group-text">
                    <SvgIcon Icon="LucideIcon.Search" />
                </div>
                <input type="search" class="form-control" @bind-value="_usernameFilter" @bind-value:event="oninput" placeholder="Search by username" style="max-width: 25rem;" />
            </div>
            <FilterDropdown ButtonSize="ButtonSize.Regular"
                            FilterSet="_roleFilter"
                            Items="_users?.SelectMany(u => u.Roles).Distinct().OrderBy(n => n)"
                            OnChange="StateHasChanged">
                <ItemTemplate Context="item">
                    <TagBadge Tag="new RoleTag(item)" />
                </ItemTemplate>
                <TitleTemplate>
                    Roles
                </TitleTemplate>
            </FilterDropdown>
        </div>
    </div>
</div>


<div class="row my-4">
    <div class="col">
        <ul class="list-group">
            <li class="list-group-item list-group-header">
                <div class="row fw-bold">
                    <div class="col-3">
                        Username
                    </div>
                    <div class="col-2">
                    </div>
                    <div class="col-3">
                        Roles
                    </div>
                    <div class="col-2">
                        Created on
                    </div>
                    <div class="col-2">
                        Last login on
                    </div>
                </div>
            </li>
            @if (_users is null)
            {
                <li class="list-group-item text-center"><HxSpinner Color="ThemeColor.Secondary" /></li>
            }
            else if (_users.Count == 0)
            {
                <li class="list-group-item">No users</li>
            }
            else
            {
                var filteredUsers = _users
                    .Where(u => string.IsNullOrEmpty(_usernameFilter) || u.Username.ContainsIgnoreCase(_usernameFilter))
                    .Where(u => !_roleFilter.Any() || _roleFilter.Any(r => u.Roles.Contains(r)))
                    .OrderBy(u => u.Username);
                foreach (var user in filteredUsers)
                {
                    <li class="list-group-item list-group-item-action">
                        <div class="row align-items-center">
                            <div class="col-3">
                                <HighlightableText Text="@user.Username" PartToHighlight="@_usernameFilter" />
                                <br/>
                                <span class="small text-muted">@@: </span>
                                @if (string.IsNullOrEmpty(user.Email))
                                {
                                    
                                    <span class="small text-muted">&nbsp; -</span>
                                }
                                else
                                {
                                    <span class="small text-muted">@user.Email</span>
                                }
                            </div>
                            <div class="col-2 text-center">
                                <HxButtonGroup>
                                    <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" aria-label="edit" @onclick="async () => await ShowEditModalAsync(user)" title="Edit user">
                                        <SvgIcon Icon="LucideIcon.Pen" />
                                    </HxButton>

                                    @if (AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.BuiltIn)
                                    {
                                        <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" aria-label="Change password" @onclick="() => _resetPasswordModal.LetAsync(x => x.ShowAsync(user.Username))" title="Reset password">
                                            <SvgIcon Icon="LucideIcon.Key" />
                                        </HxButton>
                                    }

                                    <HxDropdownButtonGroup>
                                        <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small" aria-label="delete" title="Delete user">
                                            <SvgIcon Icon="LucideIcon.Trash2" />
                                        </HxDropdownToggleButton>
                                        <HxDropdownMenu>
                                            <HxDropdownHeader>Delete?</HxDropdownHeader>
                                            <HxDropdownItem @onclick="() => DeleteUser(user)">Confirm</HxDropdownItem>
                                        </HxDropdownMenu>
                                    </HxDropdownButtonGroup>
                                </HxButtonGroup>
                            </div>
                            <div class="col-3">
                                @foreach (var role in user.Roles.OrderBy(r => r))
                                {
                                    var tag = new RoleTag(role);
                                    <TagBadge Tag="tag" CssClass="m-1" />
                                }
                            </div>
                            <div class="col-2 small">
                                @user.CreatedOn.LocalDateTime
                            </div>
                            <div class="col-2 small">
                                @user.LastLoginOn?.LocalDateTime
                            </div>
                        </div>
                    </li>
                }
            }
        </ul>
    </div>
</div>

<ResetPasswordModal @ref="_resetPasswordModal" />

<UserEditModal @ref="_userEditModal" OnUserSubmit="OnUserSubmit" />

@code {
    private readonly HashSet<string> _roleFilter = [];

    private List<User>? _users;
    private UserEditModal? _userEditModal;
    private ResetPasswordModal? _resetPasswordModal;
    private string _usernameFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _users = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(user => user.Username)
            .ToListAsync();
    }

    private async Task DeleteUser(User user)
    {
        try
        {
            await Mediator.SendAsync(new DeleteUserCommand(user.UserId));
            _users?.Remove(user);
        }
        catch (Exception)
        {
            Toaster.AddError("Error deleting user");
        }
    }

    private void OnUserSubmit(User user)
    {
        ArgumentNullException.ThrowIfNull(_users);
        var existingUser = _users.FirstOrDefault(u => u.UserId == user.UserId);
        if (existingUser is not null)
        {
            _users.Remove(existingUser);
        }
        _users.Add(user);
        _users.SortBy(u => u.Username);
    }

    private async Task ShowEditModalAsync(User? user)
    {
        await _userEditModal.LetAsync(x => x.ShowAsync(user?.UserId));
    }
    
    private readonly struct RoleTag(string role) : ITag
    {
        public Guid TagId => Guid.Empty;

        public string TagName { get; } = role;

        public TagColor Color { get; } = role switch
        {
            Roles.Admin => TagColor.Red,
            Roles.Editor => TagColor.Purple,
            Roles.Operator => TagColor.Green,
            Roles.DataTableMaintainer => TagColor.Blue,
            Roles.VersionManager => TagColor.Yellow,
            Roles.SettingsEditor => TagColor.Yellow,
            _ => TagColor.DarkGray
        };

        public int SortOrder => 0;
    }
}
