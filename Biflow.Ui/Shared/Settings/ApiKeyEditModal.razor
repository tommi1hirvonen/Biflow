@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject IJSRuntime JS

<HxModal @ref="modal" Size="ModalSize.Regular" Title="@(key?.Id == Guid.Empty ? "New API key" : "Edit API key")">
    <BodyTemplate>
        @if (key is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="key" id="api_key_edit_form" OnValidSubmit="SubmitApiKeyAsync">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <FluentValidationValidator Validator="validator" />

                        <div class="row">
                            <div class="col">
                                <label class="form-label">Name</label>
                                <div class="input-group input-group-sm">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="FeatherIcon.Edit3" />
                                    </div>
                                    <InputText class="form-control form-control-sm" @bind-Value="key.Name"></InputText>
                                </div>
                            </div>
                        </div>

                        @{
                            var keyDisplayValue = key.Id == Guid.Empty
                                ? key.Value
                                : new string('*', 64);
                        }
                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">API key</label>
                                <div class="input-group input-group-sm">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="FeatherIcon.Key" />
                                    </div>
                                    <textarea class="form-control form-control-sm font-monospace" disabled value="@keyDisplayValue" rows="3"></textarea>
                                    @if (key.Id == Guid.Empty)
                                    {
                                        <div class="form-text">Copy and save the API key someplace secure. You won't be able to view it in the UI after saving.</div>
                                        <a class="small" href="javascript:void(0)" @onclick="CopyToClipboard">Copy to clipboard</a>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Valid from</label>
                                <div class="input-group input-group-sm">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="FeatherIcon.Calendar" />
                                    </div>
                                    <InputDate class="form-control form-control-sm" Type="InputDateType.DateTimeLocal" @bind-Value="@key.ValidFrom" />
                                </div>
                            </div>
                            <div class="col">
                                <label class="form-label">Valid to</label>
                                <div class="input-group input-group-sm">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="FeatherIcon.Calendar" />
                                    </div>
                                    <InputDate class="form-control form-control-sm" Type="InputDateType.DateTimeLocal" @bind-Value="@key.ValidTo" />
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="api_key_edit_form" Color="ThemeColor.Success">@(key?.Id == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public EventCallback<ApiKey> OnApiKeySubmit { get; set; }

    private readonly ApiKeyValidator validator = new();

    private ApiKey? key;
    private HxModal? modal;

    private async Task SubmitApiKeyAsync()
    {
        await OnApiKeySubmit.InvokeAsync(key);
        await modal.LetAsync(x => x.HideAsync());
    }

    public async Task ShowAsync(Guid keyId)
    {
        key = null;
        await modal.LetAsync(x => x.ShowAsync());
        if (keyId != Guid.Empty)
        {
            using var context = DbContextFactory.CreateDbContext();
            key = await context.ApiKeys
                .AsNoTrackingWithIdentityResolution()
                .FirstAsync(k => k.Id == keyId);
        }
        else
        {
            key = new()
            {
                ValidFrom = DateTimeOffset.Now,
                ValidTo = DateTimeOffset.Now.AddYears(1)
            };
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", key?.Value);
            Toaster.AddInformation("Key value copied to clipboard");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error copying key value to clipboard", ex.Message);
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
