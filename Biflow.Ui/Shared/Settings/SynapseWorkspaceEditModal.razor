@implements IPipelineClientEditModal

@inject IDbContextFactory<AppDbContext> DbFactory
@inject IHxMessengerService Messenger
@inject IJSRuntime JS

<HxModal @ref="modal" Size="ModalSize.Large" OnClosed="() => connectionTestSuccess = null" Title="@(synapseWorkspace?.PipelineClientId == Guid.Empty ? "New Synapse workspace" : "Edit " + synapseWorkspace?.PipelineClientName)">
    <BodyTemplate>
        @if (synapseWorkspace is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="synapseWorkspace" id="df_edit_form" OnValidSubmit="SubmitSynapseAsync">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col">
                                <label class="form-label">Synapse workspace name</label>
                                <InputText class="form-control" @bind-Value="synapseWorkspace.PipelineClientName"></InputText>
                            </div>
                        </div>

                        <div class=" row mt-3">
                            <div class="col-lg-6">
                                <label class="form-label">App registration</label>
                                <InputSelect class="form-select" @bind-Value="synapseWorkspace.AppRegistrationId">
                                    @foreach (var app in AppRegistrations ?? Enumerable.Empty<AppRegistration>())
                                        {
                                        <option value="@app.AppRegistrationId">@app.AppRegistrationName</option>
                                        }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Synapse workspace URL</label>
                                <InputText class="form-control" @bind-Value="synapseWorkspace.SynapseWorkspaceUrl"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="TestConnection" Enabled="!testingConnection">
                                    Test connection
                                </HxButton>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                @if (connectionTestSuccess == true)
                                {
                                    <span class="badge bg-success">Success</span>
                                }
                                else if (connectionTestSuccess == false)
                                {
                                    <span class="badge bg-danger">Failed</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="df_edit_form" Color="ThemeColor.Success">@(synapseWorkspace?.PipelineClientId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<SynapseWorkspace> OnSynapseWorkspaceSubmit { get; set; }

    [Parameter]
    public List<AppRegistration>? AppRegistrations { get; set; }

    private SynapseWorkspace? synapseWorkspace;
    private HxModal? modal;
    private bool? connectionTestSuccess = null;
    private bool testingConnection = false;

    private async Task SubmitSynapseAsync()
    {
        await OnSynapseWorkspaceSubmit.InvokeAsync(synapseWorkspace);
        await modal.LetAsync(x => x.HideAsync());
    }

    private async Task TestConnection()
    {
        connectionTestSuccess = null;
        testingConnection = true;
        try
        {
            var appRegistration = AppRegistrations?.First(ar => ar.AppRegistrationId == synapseWorkspace?.AppRegistrationId)
                ?? throw new ArgumentNullException("App registration cannot be null");
            await (synapseWorkspace?.TestConnection(appRegistration) ?? Task.CompletedTask);
            connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            connectionTestSuccess = false;
            Messenger.AddError("Connection test failed", ex.Message);
        }
        testingConnection = false;
    }

    private void OnOpenChanged(bool isOpen)
    {
        if (!isOpen)
            connectionTestSuccess = null;
    }

    public async Task ShowAsync(Guid pipelineClientId)
    {
        synapseWorkspace = null;
        await modal.LetAsync(x => x.ShowAsync());
        if (pipelineClientId != Guid.Empty)
        {
            using var context = DbFactory.CreateDbContext();
            synapseWorkspace = await context.SynapseWorkspaces
                .AsNoTrackingWithIdentityResolution()
                .Include(s => s.Steps)
                .ThenInclude(step => step.Job)
                .FirstAsync(s => s.PipelineClientId == pipelineClientId);
        }
        else
        {
            synapseWorkspace = new(string.Empty)
            {
                AppRegistrationId = AppRegistrations?.FirstOrDefault()?.AppRegistrationId,
                Steps = new List<PipelineStep>()
            };
        }
        connectionTestSuccess = null;
        testingConnection = false;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
