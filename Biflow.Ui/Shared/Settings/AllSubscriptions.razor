@inject IDbContextFactory<AppDbContext> DbFactory

<PageTitle>All subscriptions | Biflow</PageTitle>

<div class="row">
    <div class="col-auto">
        <div class="input-group">
            <div class="input-group-text">
                <CxIcon Icon="FeatherIcon.User" />
            </div>
            <select class="form-select" @bind="userId" @bind:after="() => user = users?.FirstOrDefault(u => u.UserId == userId)">
                @if (users is not null)
                {
                    @foreach (var user in users.OrderBy(u => u.Username))
                    {
                        <option value="@user.UserId">@user.Username</option>
                    }
                }
            </select>
        </div>
    </div>
</div>

<UserSubscriptions User="user" Jobs="jobs" Steps="steps" Tags="tags">
    <MissingEmailAlertTemplate Context="user">
        <span>
            Email address for account <strong>@user.Username</strong> was not set. Go to the <a class="alert-link" href="settings/users">Users page</a> to enter a valid email address for the user.
        </span>
    </MissingEmailAlertTemplate>
</UserSubscriptions>

@code {
    private IEnumerable<JobProjection>? jobs;
    private IEnumerable<StepTag>? tags;
    private IEnumerable<StepProjection>? steps;
    private Guid? userId;
    private User? user;
    private IEnumerable<User>? users;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        users = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(u => u.Subscriptions)
            .ToArrayAsync();
        user = users.OrderBy(u => u.Username).FirstOrDefault();
        userId = user?.UserId;
        jobs = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(job => job.JobName)
            .Select(j => new JobProjection(j.JobId, j.JobName, j.ExecutionMode))
            .ToArrayAsync();
        steps = await context.Steps
            .AsNoTrackingWithIdentityResolution()
            .Select(s => new StepProjection(s.StepId, s.JobId, s.Job.JobName, s.StepName, s.StepType, s.ExecutionPhase, s.IsEnabled, s.Tags.ToArray(), s.Dependencies.Select(d => d.DependantOnStepId).ToArray()))
            .ToArrayAsync();
        tags = await context.Tags
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(t => t.TagName)
            .ToArrayAsync();
    }
}
