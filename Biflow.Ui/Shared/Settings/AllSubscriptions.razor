@inject IDbContextFactory<AppDbContext> DbFactory

<PageTitle>All subscriptions | Biflow</PageTitle>

<div class="row">
    <div class="col-auto">
        <div class="input-group">
            <div class="input-group-text">
                <SvgIcon Icon="LucideIcon.User" />
            </div>
            <select class="form-select" @bind="_userId" @bind:after="() => _user = _users?.FirstOrDefault(u => u.UserId == _userId)">
                @if (_users is not null)
                {
                    @foreach (var user in _users.OrderBy(u => u.Username))
                    {
                        <option value="@user.UserId">@user.Username</option>
                    }
                }
            </select>
        </div>
    </div>
</div>

<UserSubscriptions User="_user" Jobs="_jobs" Steps="_steps" Tags="_tags">
    <MissingEmailAlertTemplate Context="user">
        <span>
            Email address for account <strong>@user.Username</strong> was not set. Go to the <a class="alert-link" href="settings/users">Users page</a> to enter a valid email address for the user.
        </span>
    </MissingEmailAlertTemplate>
</UserSubscriptions>

@code {
    private IEnumerable<JobProjection>? _jobs;
    private List<StepTag>? _tags;
    private IEnumerable<StepProjection>? _steps;
    private Guid? _userId;
    private User? _user;
    private IEnumerable<User>? _users;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _users = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(u => u.Subscriptions)
            .ToArrayAsync();
        _user = _users.OrderBy(u => u.Username).FirstOrDefault();
        _userId = _user?.UserId;
        _jobs = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(job => job.JobName)
            .Select(j => new JobProjection(j.JobId, j.JobName, j.ExecutionMode))
            .ToArrayAsync();
        _steps = await context.Steps
            .AsNoTrackingWithIdentityResolution()
            .Select(s => new StepProjection(
                s.StepId,
                s.JobId,
                s.Job.JobName,
                s.StepName,
                s.StepType,
                s.ExecutionPhase,
                s.IsEnabled,
                s.Tags.ToArray(),
                s.Dependencies.Select(d => new DependencyProjection(d.StepId, d.DependantOnStepId, d.DependencyType)).ToArray()))
            .ToArrayAsync();
        _tags = await context.StepTags
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
        _tags.Sort();
    }
}
