@inject IDbContextFactory<AppDbContext> dbContextFactory
@inject IHxMessengerService messenger

<PageTitle>Qlik Cloud Clients | Biflow</PageTitle>

<HxButton Color="ThemeColor.Success"
@onclick="() => ShowEditModal(null)"
          Enabled="clients is not null">
    Add Qlik Cloud Client
</HxButton>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th>
                    Environment url
                </th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (clients is null)
            {
                <tr><td colspan="5" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (clients.Count == 0)
            {
                <tr><td colspan="5">No Qlik Cloud clients</td></tr>
            }
            else
            {
                @foreach (var client in clients)
                {
                    var jobs = client.Steps.Select(s => s.Job).Distinct().Count();
                    var steps = client.Steps.Count();
                    <tr>
                        <td class="align-middle">
                            @client.QlikCloudClientName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup Size="ButtonGroupSize.Small">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="() => ShowEditModal(client)">
                                    <CxIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <CxIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteClientAsync(client)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            @client.EnvironmentUrl
                        </td>
                        <td class="align-middle">
                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                        </td>
                        <td class="align-middle">
                            <a class="text-body" href="javascript:void(0)"
                            @onclick="async () =>
                            {
                                stepsClient = client;
                                await stepsModal.LetAsync(x => x.ShowAsync());
                            }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<QlikCloudClientEditModal @ref="editModal" OnClientSubmit="OnClientSubmitAsync" />

<HxModal @ref="stepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {stepsClient?.QlikCloudClientName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in stepsClient?.Steps
                        .OrderBy(s => s.Job.JobName)
                        .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIconComponent StepType_="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await stepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private List<QlikCloudClient>? clients;
    private QlikCloudClientEditModal? editModal;

    private QlikCloudClient? stepsClient;
    private HxModal? stepsModal;

    protected override async Task OnInitializedAsync()
    {
        using var context = await dbContextFactory.CreateDbContextAsync();
        clients = await context.QlikCloudClients
            .AsNoTrackingWithIdentityResolution()
            .Include(c => c.Steps)
            .ThenInclude(s => s.Job)
            .ToListAsync();
    }

    private async Task DeleteClientAsync(QlikCloudClient client)
    {
        try
        {
            using var context = await dbContextFactory.CreateDbContextAsync();
            await context.QlikCloudClients
                .Where(x => x.QlikCloudClientId == client.QlikCloudClientId)
                .ExecuteDeleteAsync();
            clients?.Remove(client);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            messenger.AddError("Error deleting Qlik Cloud client", message);
        }
    }

    private async Task OnClientSubmitAsync(QlikCloudClient client)
    {
        using var context = await dbContextFactory.CreateDbContextAsync();
        if (client.QlikCloudClientId == Guid.Empty)
        {
            context.Add(client);
            clients?.Add(client);
        }
        else
        {
            clients?.RemoveAll(c => c.QlikCloudClientId == client.QlikCloudClientId);
            clients?.Add(client);
            context.Update(client);
        }
        await context.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ShowEditModal(QlikCloudClient? client) =>
        await editModal.LetAsync(x => x.ShowAsync(client?.QlikCloudClientId?? Guid.Empty));
}
