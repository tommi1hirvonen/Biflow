@inject IDbContextFactory<AppDbContext> dbContextFactory
@inject IHxMessengerService messenger

<PageTitle>Qlik Cloud Clients | Biflow</PageTitle>

<HxButton Color="ThemeColor.Success"
@onclick="() => ShowEditModal(null)"
          Enabled="clients is not null">
    Add Qlik Cloud Client
</HxButton>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th>
                    Environment url
                </th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (clients is null)
            {
                <tr><td colspan="5" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (clients.Count == 0)
            {
                <tr><td colspan="5">No Qlik Cloud clients</td></tr>
            }
            else
            {
                @foreach (var client in clients)
                {
                    @* var jobs = client.Steps.Select(s => s.Job).Distinct().Count();
                    var steps = client.Steps.Count(); *@
                    <tr>
                        <td class="align-middle">
                            @client.QlikCloudClientName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup Size="ButtonGroupSize.Small">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="() => ShowEditModal(client)">
                                    <CxIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <CxIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteClientAsync(client)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            @client.EnvironmentUrl
                        </td>
                        @* <td class="align-middle">
                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                        </td>
                        <td class="align-middle">
                            <a class="text-body" href="javascript:void(0)"
                            @onclick="async () =>
                            {
                                StepsFunctionApp = app;
                                await StepsModal.LetAsync(x => x.ShowAsync());
                            }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </a>
                        </td> *@
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<QlikCloudClientEditModal @ref="editModal" OnClientSubmit="OnClientSubmitAsync" />

@code {
    private List<QlikCloudClient>? clients;
    private QlikCloudClientEditModal? editModal;

    protected override async Task OnInitializedAsync()
    {
        using var context = await dbContextFactory.CreateDbContextAsync();
        clients = await context.QlikCloudClients
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
    }

    private async Task DeleteClientAsync(QlikCloudClient client)
    {
        try
        {
            using var context = await dbContextFactory.CreateDbContextAsync();
            await context.QlikCloudClients
                .Where(x => x.QlikCloudClientId == client.QlikCloudClientId)
                .ExecuteDeleteAsync();
            clients?.Remove(client);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            messenger.AddError("Error deleting Qlik Cloud client", message);
        }
    }

    private async Task OnClientSubmitAsync(QlikCloudClient client)
    {
        using var context = await dbContextFactory.CreateDbContextAsync();
        if (client.QlikCloudClientId == Guid.Empty)
        {
            context.Add(client);
            clients?.Add(client);
        }
        else
        {
            clients?.RemoveAll(c => c.QlikCloudClientId == client.QlikCloudClientId);
            clients?.Add(client);
            context.Update(client);
        }
        await context.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ShowEditModal(QlikCloudClient? client) =>
        await editModal.LetAsync(x => x.ShowAsync(client?.QlikCloudClientId?? Guid.Empty));
}
