@inject ToasterService Toaster
@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IHttpClientFactory HttpClientFactory
@inject ITokenService TokenService

<HxOffcanvas @ref="Offcanvas" Size="OffcanvasSize.Large" OnClosed="OnClosed" Title="Select key">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                Type
                            </th>
                            <th>
                                Value
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (keys is null)
                        {
                            <tr>
                                <td colspan="2" class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td>
                            </tr>
                        }
                        else if (keys.Count == 0)
                        {
                            <tr>
                                <td colspan="2">No keys</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var key in keys)
                            {
                                <tr style="cursor: pointer;"
                                    @onclick="() => selectedKey = key.Key"
                                    class="@(key.Key == selectedKey ? "bg-body-tertiary fw-bold" : null)">
                                    <td>
                                        <small>
                                            @key.Type
                                        </small>
                                    </td>
                                    <td style="font-family: monospace;">
                                        <small>
                                            @key.Key
                                        </small>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectKey"
                  Enabled="selectedKey is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Offcanvas.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {

    private HxOffcanvas? Offcanvas { get; set; }

    [Parameter]
    public FunctionApp? FunctionApp { get; set; }

    [Parameter]
    public EventCallback<string> OnKeySelected { get; set; }

    private List<(string Type, string Key)>? keys;
    private string? selectedKey;

    private async Task SelectKey()
    {
        if (selectedKey is not null)
        {
            await OnKeySelected.InvokeAsync(selectedKey);
            await Offcanvas.LetAsync(x => x.HideAsync());
        }
    }

    public void OnClosed()
    {
        keys = null;
        selectedKey = null;
    }

    public async Task ShowAsync()
    {
        await Offcanvas.LetAsync(x => x.ShowAsync());
        if (FunctionApp is null) return;
        try
        {
            keys = await FunctionApp
                .CreateClient(TokenService, HttpClientFactory)
                .GetHostKeysAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading keys", ex.Message);
        }
    }

}
