@using System.Net

@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject IMediator Mediator
@inject ThemeService ThemeService
@inject ProxyClientFactory ProxyClientFactory

<style>
    tr .hover-text-decoration-underline {
        text-decoration: none;
    }

    tr:hover .hover-text-decoration-underline {
        text-decoration: underline;
    }
</style>

<PageTitle>Proxies | Biflow</PageTitle>

<div class="row flex-row-reverse justify-content-between align-items-end g-3">
    <div class="col-auto">
        <HxAlert Color="ThemeService.CurrentTheme == Theme.Light ? ThemeColor.Light : ThemeColor.Dark"
                 CssClass="small py-2 mb-0"
                 style="max-width: 40rem;">
            <div class="row g-3">
                <div class="col-auto">
                    <SvgIcon Icon="LucideIcon.Info" />
                </div>
                <div class="col">
                    Proxies can be used for remote execution of exe steps.
                    This allows running executables outside the main Biflow executor host while still orchestrating jobs and steps centrally.
                    Proxies can be installed on any system that is accessible networking-wise from the main Biflow application.
                </div>
            </div>
        </HxAlert>
    </div>
    <div class="col-auto">
        <HxButton Color="ThemeColor.Success"
                  @onclick="() => ShowEditModal(null)"
                  Enabled="_proxies is not null">
            Add proxy
        </HxButton>        
    </div>
</div>

<div class="card pt-2 my-4">
    <table class="table table-hover">
        <thead>
        <tr>
            <th></th>
            <th>Url</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @if (_proxies is null)
        {
            <tr><td colspan="5" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
        }
        else if (_proxies.Count == 0)
        {
            <tr><td colspan="5">No proxies</td></tr>
        }
        else
        {
            @foreach (var proxy in _proxies.OrderBy(x => x.ProxyName))
            {
                ConnectionTestState? state = _connectionTestStates.GetValueOrDefault(proxy.ProxyId);
                var tagColor = state switch
                {
                    ConnectionTestState.Running => TagColor.Green,
                    ConnectionTestState.Unauthorized or ConnectionTestState.Unavailable => TagColor.Red,
                    _ => TagColor.DarkGray
                };
                var steps = proxy.ExeSteps.Count();
                <tr>
                    <td class="align-middle">
                        @proxy.ProxyName
                    </td>
                    <td class="align-middle">
                        @proxy.ProxyUrl
                    </td>
                    <td class="align-middle text-center">
                        @switch (state)
                        {
                            case ConnectionTestState.Testing:
                                <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                                break;
                            case { } s:
                                <Badge Text="@s.ToString()" Color="@tagColor"  />
                                break;
                        }
                    </td>
                    <td class="align-middle">
                        <span class="hover-text-decoration-underline cursor-pointer"
                              @onclick="() => { _stepsProxy = proxy; _stepsModal.LetAsync(x => x.ShowAsync()); }">
                            @(steps > 0 ? $"{steps} step(s)" : null)
                        </span>
                    </td>
                    <td class="align-middle">
                        <HxButtonGroup Size="ButtonGroupSize.Small">
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="() => ShowEditModal(proxy)">
                                <SvgIcon Icon="LucideIcon.Pen" />
                            </HxButton>
                            <HxDropdownButtonGroup>
                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                    <SvgIcon Icon="LucideIcon.Trash2" />
                                </HxDropdownToggleButton>
                                <HxDropdownMenu>
                                    <HxDropdownHeader>Delete?</HxDropdownHeader>
                                    <HxDropdownItem @onclick="() => DeleteProxyAsync(proxy)">Confirm</HxDropdownItem>
                                </HxDropdownMenu>
                            </HxDropdownButtonGroup>
                        </HxButtonGroup>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

<ProxyEditModal @ref="_editModal" OnProxySubmit="OnProxySubmitAsync" />

<HxModal @ref="_stepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {_stepsProxy?.ProxyName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                    <tr>
                        <th>Job</th>
                        <th>Step</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var step in _stepsProxy?.ExeSteps
                                  .OrderBy(s => s.Job.JobName)
                                  .ThenBy(s => s.StepName)
                                  .AsEnumerable() ?? [])
                    {
                        <tr>
                            <td>
                                @step.Job.JobName
                            </td>
                            <td>
                                <StepTypeIcon StepType="step.StepType" />
                                &nbsp;
                                @step.StepName
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await _stepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private readonly Dictionary<Guid, ConnectionTestState> _connectionTestStates = [];
    
    private List<Proxy>? _proxies;
    private ProxyEditModal? _editModal;
    private Proxy? _stepsProxy;
    private HxModal? _stepsModal;
    
    private enum ConnectionTestState { Testing, Running, Unauthorized, Unavailable }
    
    public void Dispose() => ThemeService.OnThemeChanged -= OnThemeChanged;
    
    protected override void OnInitialized() => ThemeService.OnThemeChanged += OnThemeChanged;

    private void OnThemeChanged(Theme theme, bool isAuto) => StateHasChanged();
    
    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _proxies = await context.Proxies
            .AsNoTrackingWithIdentityResolution()
            .Include(x => x.ExeSteps).ThenInclude(x => x.Job)
            .OrderBy(x => x.ProxyName)
            .ToListAsync();
        foreach (var proxy in _proxies)
        {
            _connectionTestStates[proxy.ProxyId] = ConnectionTestState.Testing;
        }
        StateHasChanged();
        var tasks = _proxies.Select(RunConnectionTestAsync).ToArray();
        await Task.WhenAll(tasks);
    }
    
    private async Task OnProxySubmitAsync(Proxy proxy)
    {
        if (proxy.ProxyId == Guid.Empty)
        {
            var command = new CreateProxyCommand(
                proxy.ProxyName, proxy.ProxyUrl, proxy.ApiKey);
            var response = await Mediator.SendAsync(command);
            _proxies?.Add(response);
        }
        else
        {
            var command = new UpdateProxyCommand(
                proxy.ProxyId, proxy.ProxyName, proxy.ProxyUrl, proxy.ApiKey);
            _ = await Mediator.SendAsync(command);
            _proxies?.RemoveAll(x => x.ProxyId == proxy.ProxyId);
            _proxies?.Add(proxy);
        }

        _connectionTestStates[proxy.ProxyId] = ConnectionTestState.Testing;
        StateHasChanged();
        await RunConnectionTestAsync(proxy);
    }
    
    private async Task DeleteProxyAsync(Proxy proxy)
    {
        try
        {
            await Mediator.SendAsync(new DeleteProxyCommand(proxy.ProxyId));
            _proxies?.Remove(proxy);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting proxy", message);
        }
    }

    private async Task RunConnectionTestAsync(Proxy proxy)
    {
        try
        {
            var client = ProxyClientFactory.Create(proxy);
            await client.TestConnectionAsync();
            _connectionTestStates[proxy.ProxyId] = ConnectionTestState.Running;
        }
        catch (HttpRequestException httpException) when (httpException.StatusCode == HttpStatusCode.Unauthorized)
        {
            _connectionTestStates[proxy.ProxyId] = ConnectionTestState.Unauthorized;
        }
        catch (Exception)
        {
            _connectionTestStates[proxy.ProxyId] = ConnectionTestState.Unavailable;
        }
        StateHasChanged();
    }
    
    private Task ShowEditModal(Proxy? proxy) => _editModal.LetAsync(x => x.ShowAsync(proxy?.ProxyId ?? Guid.Empty));
}