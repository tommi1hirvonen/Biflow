@inject ToasterService Toaster
@inject IDbContextFactory<AppDbContext> DbContextFactory

<HxModal @ref="_modal" Size="ModalSize.Large" Title="@(_workspace?.WorkspaceId == Guid.Empty ? "New Databricks workspace" : "Edit " + _workspace?.WorkspaceName)">
    <BodyTemplate>
        @if (_workspace is not null)
        {
            <EditForm id="databricks_workspace_edit_form" Model="_workspace" OnValidSubmit="SubmitAsync">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div>
                            <label class="form-label">Workspace name</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <SvgIcon Icon="LucideIcon.PenLine" />
                                </div>
                                <InputText class="form-control" @bind-Value="_workspace.WorkspaceName"></InputText>
                            </div>

                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Workspace url</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="LucideIcon.Link" />
                                    </div>
                                    <InputText class="form-control" @bind-Value="_workspace.WorkspaceUrl"></InputText>
                                </div>
                                <div class="form-text">e.g. https://my-databricks.12.azuredatabricks.net</div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Token</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="LucideIcon.Key" />
                                    </div>
                                    <InputTextArea class="form-control form-control-sm" rows="6" @bind-Value="_workspace.ApiToken"></InputTextArea>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="TestConnectionAsync" Enabled="!_testingConnection">
                                    Test connection
                                </HxButton>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                @switch (_connectionTestSuccess)
                                {
                                    case true:
                                        <span class="badge bg-success">Success</span>
                                        break;
                                    case false:
                                        <span class="badge bg-danger">Failed</span>
                                        break;
                                }
                            </div>
                        </div>

                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="databricks_workspace_edit_form" Color="ThemeColor.Success">@(_workspace?.WorkspaceId == Guid.Empty ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<DatabricksWorkspace> OnWorkspaceSubmit { get; set; }

    private HxModal? _modal;
    private DatabricksWorkspace? _workspace;
    private bool? _connectionTestSuccess;
    private bool _testingConnection;

    public async Task ShowAsync(Guid workspaceId)
    {
        _workspace = null;
        _connectionTestSuccess = null;
        await _modal.LetAsync(x => x.ShowAsync());
        if (workspaceId != Guid.Empty)
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            _workspace = await context.DatabricksWorkspaces
                .AsNoTrackingWithIdentityResolution()
                .Include(c => c.Steps)
                .ThenInclude(s => s.Job)
                .FirstAsync(d => d.WorkspaceId == workspaceId);
        }
        else
        {
            _workspace = new();
        }
    }

    private async Task TestConnectionAsync()
    {
        ArgumentNullException.ThrowIfNull(_workspace);
        _connectionTestSuccess = null;
        _testingConnection = true;
        try
        {
            using var client = _workspace.CreateClient();
            await client.TestConnectionAsync();
            _connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            _connectionTestSuccess = false;
            Toaster.AddError("Connection test failed", ex.Message);
        }
        _testingConnection = false;
    }

    private async Task SubmitAsync()
    {
        await OnWorkspaceSubmit.InvokeAsync(_workspace);
        await _modal.LetAsync(x => x.HideAsync());
    }
}
