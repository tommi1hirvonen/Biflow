@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject IMediator Mediator
@inject ThemeService ThemeService

<PageTitle>Blob Clients | Biflow</PageTitle>

<div class="row flex-row-reverse justify-content-between align-items-end g-3">
    <div class="col-auto">
        <HxAlert Color="ThemeService.CurrentTheme == Theme.Light ? ThemeColor.Light : ThemeColor.Dark"
                 CssClass="small py-2 mb-0"
                 style="max-width: 40rem;">
            <div class="row g-3">
                <div class="col-auto">
                    <SvgIcon Icon="LucideIcon.Info" />
                </div>
                <div class="col">
                    Blob Storage clients allow you to more easily manage the optional data lineage (source & target data objects) for steps and jobs by enabling you to browse blob storage container contents when editing steps.
                </div>
            </div>
        </HxAlert>
    </div>
    <div class="col-auto">
        <HxButton Color="ThemeColor.Success"
                  @onclick="() => ShowEditModal(null)"
                  Enabled="_blobClients is not null">
            Add Blob Storage
        </HxButton>
    </div>
</div>

<div class="card pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>Connection method</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (_blobClients is null)
            {
                <tr><td colspan="3" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (_blobClients.Count == 0)
            {
                <tr><td colspan="3">No Blob Storage clients</td></tr>
            }
            else
            {
                @foreach (var client in _blobClients.OrderBy(c => c.BlobStorageClientName))
                {
                    <tr>
                        <td class="align-middle">
                            @client.BlobStorageClientName
                        </td>
                        <td class="align-middle">
                            @client.ConnectionMethod
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup Size="ButtonGroupSize.Small">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="() => ShowEditModal(client)">
                                    <SvgIcon Icon="LucideIcon.Pen" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <SvgIcon Icon="LucideIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteBlobClientAsync(client)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<BlobClientEditModal @ref="_blobClientEditModal" AppRegistrations="_appRegistrations" OnBlobClientSubmit="OnBlobClientSubmitAsync" />

@code {
    private List<BlobStorageClient>? _blobClients;
    private List<AzureCredential>? _appRegistrations;
    private BlobClientEditModal? _blobClientEditModal;
    
    protected override void OnInitialized() => ThemeService.OnThemeChanged += OnThemeChanged;
    
    public void Dispose() => ThemeService.OnThemeChanged -= OnThemeChanged;

    private void OnThemeChanged(Theme theme, bool isAuto) => StateHasChanged();

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _blobClients = await context.BlobStorageClients
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(f => f.BlobStorageClientName)
            .ToListAsync();
        _appRegistrations = await context.AzureCredentials
            .AsNoTracking()
            .OrderBy(ar => ar.AzureCredentialName)
            .ToListAsync();
    }

    private async Task DeleteBlobClientAsync(BlobStorageClient client)
    {
        try
        {
            await Mediator.SendAsync(new DeleteBlobStorageClientCommand(client.BlobStorageClientId));
            _blobClients?.Remove(client);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting blob storage client", message);
        }
    }

    private async Task OnBlobClientSubmitAsync(BlobStorageClient client)
    {
        if (client.BlobStorageClientId == Guid.Empty)
        {
            await Mediator.SendAsync(new CreateBlobStorageClientCommand(client));
            _blobClients?.Add(client);
        }
        else
        {
            await Mediator.SendAsync(new UpdateBlobStorageClientCommand(client));
            _blobClients?.RemoveAll(b => b.BlobStorageClientId == client.BlobStorageClientId);
            _blobClients?.Add(client);
        }
        StateHasChanged();
    }

    private async Task ShowEditModal(BlobStorageClient? blobClient) =>
        await _blobClientEditModal.LetAsync(x => x.ShowAsync(blobClient?.BlobStorageClientId ?? Guid.Empty));
}
