@inject IDbContextFactory<BiflowContext> DbFactory

<style>
    tr a {
        text-decoration: none;
    }
        
        tr:hover a {
            text-decoration: underline;
        }
</style>

<PageTitle>Connections | Biflow</PageTitle>

<HxDropdownButtonGroup>
    <HxDropdownToggleButton Color="ThemeColor.Success" Enabled="Connections is not null">
        Add connection
    </HxDropdownToggleButton>
    <HxDropdownMenu>
        <HxDropdownHeader>Connection type</HxDropdownHeader>
        @foreach (var connectionType in Enum.GetValues<ConnectionType>())
        {
            <HxDropdownItem @onclick="async () => await ShowNewConnectionModalAsync(connectionType)">
                @connectionType.ToString()
            </HxDropdownItem>
        }
    </HxDropdownMenu>
</HxDropdownButtonGroup>


<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>
                    Type
                </th>
                <th></th>
                <th></th>
                <th>
                    Connection string
                </th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Connections is null)
            {
                <tr><td colspan="7" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (Connections.Count == 0)
            {
                <tr><td colspan="7">No connections</td></tr>
            }
            else
            {
                @foreach (var connection in Connections)
                {
                    var steps = connection switch
                    {
                        SqlConnectionInfo sql => sql.SqlSteps.Count + sql.PackageSteps.Count + sql.AgentJobSteps.Count,
                        AnalysisServicesConnectionInfo analysis => analysis.TabularSteps.Count,
                        _ => 0
                    };
                    var jobs = connection switch
                    {
                        SqlConnectionInfo sql => sql.SqlSteps.Select(s => s.Job)
                                                        .Union(sql.PackageSteps.Select(s => s.Job))
                                                        .Union(sql.AgentJobSteps.Select(s => s.Job)).Count(),
                        AnalysisServicesConnectionInfo analysis => analysis.Steps.Select(s => s.Job).Distinct().Count(),
                        _ => 0
                    };
                    <tr>
                        <td class="align-middle">
                            @connection.ConnectionName
                        </td>
                        <td class="align-middle">
                            @connection.ConnectionType
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup CssClass="btn-row">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" aria-label="edit" @onclick="async () => await ShowEditModalAsync(connection)">
                                    <CxIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light" aria-label="delete">
                                        <CxIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteConnection(connection)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                        <td>
                            <HxButtonGroup CssClass="btn-row">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                            @onclick="() => ShowConnectionString[connection.ConnectionId] = !ShowConnectionString[connection.ConnectionId]">
                                    @if (ShowConnectionString[connection.ConnectionId])
                                    {
                                        <CxIcon Icon="FeatherIcon.EyeOff" />
                                    }
                                    else
                                    {
                                        <CxIcon Icon="FeatherIcon.Eye" />
                                    }
                                </HxButton>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle font-monospace small">
                            @if (ShowConnectionString[connection.ConnectionId])
                            {
                                @connection.ConnectionString
                            }
                            else
                            {
                                <text>************************************************************</text>
                            }
                        </td>
                        <td class="align-middle">
                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                        </td>
                        <td class="align-middle">
                            <a class="text-dark" href="javascript:void(0)"
                            @onclick="async () =>
                            {
                                StepsConnection = connection;
                                await StepsModal.LetAsync(x => x.ShowAsync());
                            }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<AnalysisServicesConnectionEditModal @ref="ConnectionEditModals[ConnectionType.AnalysisServices]"
                                     OnConnectionSubmit="OnConnectionSubmit" />

<SqlConnectionEditModal @ref="ConnectionEditModals[ConnectionType.Sql]"
                        OnConnectionSubmit="OnConnectionSubmit" />

<HxModal @ref="StepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {StepsConnection?.ConnectionName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in StepsConnection?.Steps
                            .OrderBy(s => s.Job.JobName)
                            .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIconComponent StepType_="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await StepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private List<ConnectionInfoBase>? Connections { get; set; }
    private Dictionary<Guid, bool> ShowConnectionString { get; set; } = new();

    Dictionary<ConnectionType, IConnectionEditModal?> ConnectionEditModals { get; } = new();

    private ConnectionInfoBase? StepsConnection { get; set; }
    private HxModal? StepsModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<BiflowContext>(DbFactory.CreateDbContext);
        Connections = await context.Connections
            .AsNoTrackingWithIdentityResolution()
            .Include(c => (c as SqlConnectionInfo)!.SqlSteps)
            .ThenInclude(step => step.Job)
            .Include(c => (c as SqlConnectionInfo)!.PackageSteps)
            .ThenInclude(step => step.Job)
            .Include(c => (c as SqlConnectionInfo)!.AgentJobSteps)
            .ThenInclude(step => step.Job)
            .Include(c => (c as AnalysisServicesConnectionInfo)!.TabularSteps)
            .ThenInclude(step => step.Job)
            .OrderBy(c => c.ConnectionName)
            .ToListAsync();
        ShowConnectionString = Connections.ToDictionary(key => key.ConnectionId, value => false);
    }

    private async Task DeleteConnection(ConnectionInfoBase connection)
    {
        using var context = DbFactory.CreateDbContext();
        var conn = await context.Connections.FirstAsync(c => c.ConnectionId == connection.ConnectionId);
        context.Connections.Remove(conn);
        await context.SaveChangesAsync();
        Connections?.RemoveAll(c => c.ConnectionId == connection.ConnectionId);
        ShowConnectionString.Remove(connection.ConnectionId);
    }

    private async void OnConnectionSubmit(ConnectionInfoBase connection)
    {
        using var context = DbFactory.CreateDbContext();
        if (connection.ConnectionId == Guid.Empty)
        {
            context.Add(connection);
            Connections?.Add(connection);
            ShowConnectionString[connection.ConnectionId] = false;
        }
        else
        {
            Connections?.RemoveAll(c => c.ConnectionId == connection.ConnectionId);
            Connections?.Add(connection);
            context.Attach(connection).State = EntityState.Modified;
        }
        Connections?.Sort();
        await context.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ShowEditModalAsync(ConnectionInfoBase connection)
    {
        await OpenConnectionEditModalAsync(connection.ConnectionType, connection.ConnectionId);
    }

    private async Task ShowNewConnectionModalAsync(ConnectionType connectionType)
    {
        await OpenConnectionEditModalAsync(connectionType, Guid.Empty);
    }

    private async Task OpenConnectionEditModalAsync(ConnectionType connectionType, Guid connectionId)
    {
        await ConnectionEditModals[connectionType].LetAsync(x => x.ShowAsync(connectionId));
    }

}
