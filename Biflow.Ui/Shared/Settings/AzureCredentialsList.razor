@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbFactory
@inject ToasterService Toaster
@inject IMediator Mediator
@inject ThemeService ThemeService

<style>
    tr a {
        text-decoration: none;
    }
        
        tr:hover a {
            text-decoration: underline;
        }
</style>

<PageTitle>Azure credentials | Biflow</PageTitle>

<div class="row flex-row-reverse justify-content-between align-items-end g-3">
    <div class="col-auto">
        <HxAlert Color="ThemeService.CurrentTheme == Theme.Light ? ThemeColor.Light : ThemeColor.Dark"
                 CssClass="small py-2 mb-0"
                 style="max-width: 40rem;">
            <div class="row g-3">
                <div class="col-auto">
                    <SvgIcon Icon="LucideIcon.Info" />
                </div>
                <div class="col">
                    Azure credentials allow you to create Power BI semantic model refresh steps. They also enable you to add integrations for Data Factories, Synapse workspaces and Function Apps.
                </div>
            </div>
        </HxAlert>
    </div>
    <div class="col-auto">
        <HxButton Color="ThemeColor.Success" @onclick="async () => await ShowEditModalAsync(null)" Enabled="_azureCredentials is not null">
            Add Azure credential
        </HxButton>
    </div>
</div>

<div class="card pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th>
                    Tenant id
                </th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (_azureCredentials is null)
            {
                <tr><td colspan="7" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (_azureCredentials.Count == 0)
            {
                <tr><td colspan="7">No Azure credentials</td></tr>
            }
            else
            {
                @foreach (var app in _azureCredentials.OrderBy(a => a.AzureCredentialName))
                {
                    var jobs = app.Steps.Select(s => s.Job).Distinct().Count();
                    var steps = app.Steps.Count();
                    var pipelineClients = app.PipelineClients.Count();
                    var functionApps = app.FunctionApps.Count();
                    <tr>
                        <td class="align-middle">
                            @app.AzureCredentialName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup>
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="async () => await ShowEditModalAsync(app)">
                                    <SvgIcon Icon="LucideIcon.Pen" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <SvgIcon Icon="LucideIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteAzureCredential(app)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="clear tokens">
                                        <SvgIcon Icon="LucideIcon.X" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Clear access tokens?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => ClearTokens(app)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            @app.TenantId
                        </td>
                        <td class="align-middle">
                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                        </td>
                        <td class="align-middle">
                            <a class="text-body" href="javascript:void(0)"
                                @onclick="async () =>
                                {
                                    _stepsAzureCredential = app;
                                    await _stepsModal.LetAsync(x => x.ShowAsync());
                                }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </a>
                        </td>
                        <td>
                            <a class="text-body" href="javascript:void(0)" @onclick="async () =>
                                {
                                    _pipelineClientsAzureCredential = app;
                                    await _pipelineClientsModal.LetAsync(x => x.ShowAsync());
                                }">
                                @(pipelineClients > 0 ? $"{pipelineClients} pipeline client(s)" : null)
                            </a>
                        </td>
                        <td>
                            <a class="text-body" href="javascript:void(0)" @onclick="async () =>
                                {
                                    _functionAppsAzureCredential = app;
                                    await _functionAppsModal.LetAsync(x => x.ShowAsync());
                                }">
                                @(functionApps > 0 ? $"{functionApps} Function App(s)" : null)
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<ServicePrincipalCredentialEditModal @ref="_azureCredentialEditModal" OnAzureCredentialSubmit="OnAzureCredentialSubmit" />

<HxModal @ref="_stepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {_stepsAzureCredential?.AzureCredentialName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in _stepsAzureCredential?.Steps
                            .OrderBy(s => s.Job.JobName)
                            .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIcon StepType="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await _stepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

<HxModal @ref="_pipelineClientsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Pipeline clients using {_stepsAzureCredential?.AzureCredentialName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Pipeline client name</th>
                            <th>Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var client in _pipelineClientsAzureCredential?.PipelineClients
                            .OrderBy(c => c.PipelineClientName) ?? Enumerable.Empty<PipelineClient>())
                        {
                            <tr>
                                <td>
                                    @client.PipelineClientName
                                </td>
                                <td>
                                    @client.PipelineClientType
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await _pipelineClientsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

<HxModal @ref="_functionAppsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Function Apps using {_stepsAzureCredential?.AzureCredentialName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Function App name</th>
                            <th>Resource group name</th>
                            <th>Resource name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var functionApp in _functionAppsAzureCredential?.FunctionApps
                            .OrderBy(fa => fa.FunctionAppName) ?? Enumerable.Empty<FunctionApp>())
                        {
                            <tr>
                                <td>
                                    @functionApp.FunctionAppName
                                </td>
                                <td>
                                    @functionApp.ResourceGroupName
                                </td>
                                <td>
                                    @functionApp.ResourceName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await _functionAppsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private List<AzureCredential>? _azureCredentials;
    private ServicePrincipalCredentialEditModal? _azureCredentialEditModal;
    private AzureCredential? _stepsAzureCredential;
    private HxModal? _stepsModal;
    private AzureCredential? _pipelineClientsAzureCredential;
    private HxModal? _pipelineClientsModal;
    private AzureCredential? _functionAppsAzureCredential;
    private HxModal? _functionAppsModal;
    
    protected override void OnInitialized() => ThemeService.OnThemeChanged += OnThemeChanged;
    
    public void Dispose() => ThemeService.OnThemeChanged -= OnThemeChanged;
    
    private void OnThemeChanged(Theme theme, bool isAuto) => StateHasChanged();

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _azureCredentials = await context.AzureCredentials
            .AsNoTrackingWithIdentityResolution()
            .Include(app => app.Steps)
            .ThenInclude(step => step.Job)
            .Include(app => app.PipelineClients)
            .Include(app => app.FunctionApps)
            .OrderBy(df => df.AzureCredentialName)
            .ToListAsync();
    }

    private async Task DeleteAzureCredential(AzureCredential azureCredential)
    {
        try
        {
            await Mediator.SendAsync(new DeleteAzureCredentialCommand(azureCredential.AzureCredentialId));
            _azureCredentials?.Remove(azureCredential);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting Azure credential", message);
        }
    }

    private async Task OnAzureCredentialSubmit(AzureCredential azureCredential)
    {
        if (azureCredential.AzureCredentialId == Guid.Empty)
        {
            await Mediator.SendAsync(new CreateAzureCredentialCommand(azureCredential));
        }
        else
        {
            await Mediator.SendAsync(new UpdateAzureCredentialCommand(azureCredential));
            _azureCredentials?.RemoveAll(a => a.AzureCredentialId == azureCredential.AzureCredentialId);
        }
        _azureCredentials?.Add(azureCredential);
        StateHasChanged();
    }

    private async Task ClearTokens(AzureCredential azureCredential)
    {
        await Mediator.SendAsync(new ClearAzureCredentialTokensCommand(azureCredential.AzureCredentialId));
    }

    private async Task ShowEditModalAsync(AzureCredential? azureCredential)
    {
        await _azureCredentialEditModal.LetAsync(x => x.ShowAsync(azureCredential?.AzureCredentialId ?? Guid.Empty));
    }
}
