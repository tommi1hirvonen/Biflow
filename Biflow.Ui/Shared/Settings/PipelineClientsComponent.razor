@inject IDbContextFactory<BiflowContext> DbFactory

<style>
    tr a {
        text-decoration: none;
    }
        
        tr:hover a {
            text-decoration: underline;
        }
</style>

<PageTitle>Pipeline clients | Biflow</PageTitle>

<HxDropdownButtonGroup>
    <HxDropdownToggleButton Color="ThemeColor.Success" Enabled="PipelineClients is not null">
        Add client
    </HxDropdownToggleButton>
    <HxDropdownMenu>
        <HxDropdownHeader>Client type</HxDropdownHeader>
        @foreach (var clientType in Enum.GetValues<PipelineClientType>())
        {
            <HxDropdownItem @onclick="async () => await ShowNewClientModalAsync(clientType)">
                <PipelineClientTypeIconComponent ClientType="clientType" />
                @clientType.ToString()
            </HxDropdownItem>
        }
    </HxDropdownMenu>
</HxDropdownButtonGroup>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th>
                    Client type
                </th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (PipelineClients is null)
            {
                <tr><td colspan="5" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (PipelineClients.Count == 0)
            {
                <tr><td colspan="5">No clients</td></tr>
            }
            else
            {
                @foreach (var client in PipelineClients)
                {
                    var jobs = client.Steps.Select(s => s.Job).Distinct().Count();
                    var steps = client.Steps.Count();
                    <tr>
                        <td class="align-middle">
                            @client.PipelineClientName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup>
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="async () => await ShowEditModalAsync(client)">
                                    <CxIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <CxIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteClient(client)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            <PipelineClientTypeIconComponent ClientType="client.PipelineClientType" />
                            @client.PipelineClientType
                        </td>
                        <td class="align-middle">
                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                        </td>
                        <td class="align-middle">
                            <a class="text-dark" href="javascript:void(0)"
                            @onclick="async () =>
                            {
                                StepsClient = client;
                                await StepsModal.LetAsync(x => x.ShowAsync());
                            }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<DataFactoryEditModal @ref="ClientEditModals[PipelineClientType.DataFactory]"
                      AppRegistrations="AppRegistrations"
                      OnDataFactorySubmit="OnClientSubmit" />

<SynapseEditModal @ref="ClientEditModals[PipelineClientType.Synapse]"
                  AppRegistrations="AppRegistrations"
                  OnSynapseSubmit="OnClientSubmit"/>

<HxModal @ref="StepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {StepsClient?.PipelineClientName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in StepsClient?.Steps
                            .OrderBy(s => s.Job.JobName)
                            .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIconComponent StepType_="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await StepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private List<PipelineClient>? PipelineClients { get; set; }
    private List<AppRegistration>? AppRegistrations { get; set; }

    private Dictionary<PipelineClientType, IPipelineClientEditModal?> ClientEditModals { get; } = new();

    private PipelineClient? StepsClient { get; set; }
    private HxModal? StepsModal { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        using var context = await Task.Run<BiflowContext>(DbFactory.CreateDbContext);
        PipelineClients = await context.PipelineClients
            .AsNoTrackingWithIdentityResolution()
            .Include(c => c.Steps)
            .ThenInclude(step => step.Job)
            .OrderBy(c => c.PipelineClientName)
            .ToListAsync();
        AppRegistrations = await context.AppRegistrations
            .AsNoTracking()
            .OrderBy(ar => ar.AppRegistrationName)
            .ToListAsync();
    }

    private async Task DeleteClient(PipelineClient client)
    {
        using var context = DbFactory.CreateDbContext();
        context.Remove(client);
        await context.SaveChangesAsync();
        PipelineClients?.Remove(client);
    }

    private async void OnClientSubmit(PipelineClient client)
    {
        using var context = DbFactory.CreateDbContext();
        if (client.PipelineClientId == Guid.Empty)
        {
            context.Add(client);
            PipelineClients?.Add(client);
        }
        else
        {
            PipelineClients?.RemoveAll(df => df.PipelineClientId == client.PipelineClientId);
            PipelineClients?.Add(client);
            context.Attach(client).State = EntityState.Modified;
        }
        await context.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ShowEditModalAsync(PipelineClient client)
    {
        await OpenClientEditModalAsync(client.PipelineClientType, client.PipelineClientId);
    }

    private async Task ShowNewClientModalAsync(PipelineClientType type)
    {
        await OpenClientEditModalAsync(type, Guid.Empty);
    }

    private async Task OpenClientEditModalAsync(PipelineClientType type, Guid clientId)
    {
        await ClientEditModals[type].LetAsync(x => x.ShowAsync(clientId));
    }
}
