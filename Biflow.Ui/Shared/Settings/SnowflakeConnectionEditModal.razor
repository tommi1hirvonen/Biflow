@inject IDbContextFactory<AppDbContext> DbFactory
@inject ToasterService Toaster
@inject IJSRuntime Js

<HxModal @ref="_modal" Size="ModalSize.Large" OnClosed="() => _connectionTestSuccess = null" Title="@(_connection?.ConnectionId == Guid.Empty ? "New Snowflake connection" : "Edit " + _connection?.ConnectionName)">
    <BodyTemplate>
        @if (_connection is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="_connection" id="snow_connection_edit_form" OnValidSubmit="SubmitConnection">
                <div class="row">
                    <div class="col-md-10 mx-auto">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <label class="form-label">Connection name</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <SvgIcon Icon="FeatherIcon.Edit2" />
                                </div>
                                <InputText class="form-control" @bind-Value="_connection.ConnectionName"></InputText>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <label class="form-label">Connection string</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <SvgIcon Icon="FeatherIcon.Database" />
                                </div>
                                <InputTextArea class="form-control" rows="4" @bind-Value="_connection.ConnectionString" style="font-family: monospace; font-size: 0.9em;"></InputTextArea>
                            </div>
                            <div class="form-text">
                                <a target="_blank" href="https://github.com/snowflakedb/snowflake-connector-net/blob/master/doc/Connecting.md">Connection string reference</a>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="TestConnection" Enabled="!_testingConnection">
                                    Test connection
                                </HxButton>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col">
                                @if (_connectionTestSuccess == true)
                                {
                                    <span class="badge bg-success">Success</span>
                                }
                                else if (_connectionTestSuccess == false)
                                {
                                    <span class="badge bg-danger">Failed</span>
                                }
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Max concurrent SQL step executions</label>
                                <InputNumber class="form-control" style="max-width: 10rem;" @bind-Value="_connection.MaxConcurrentSqlSteps"></InputNumber>
                                <div class="form-text">
                                    Limit the number of concurrently executing SQL steps across all executions for this connection.
                                    <br />
                                    0 = no limit
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="snow_connection_edit_form" Color="ThemeColor.Success">@(_connection?.ConnectionId == Guid.Empty ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<SnowflakeConnection> OnConnectionSubmit { get; set; }

    private SnowflakeConnection? _connection;
    private HxModal? _modal;
    private bool? _connectionTestSuccess = null;
    private bool _testingConnection = false;

    private async Task SubmitConnection()
    {
        ArgumentNullException.ThrowIfNull(_connection);
        await OnConnectionSubmit.InvokeAsync(_connection);
        await _modal.LetAsync(x => x.HideAsync());
    }

    private async Task TestConnection()
    {
        ArgumentNullException.ThrowIfNull(_connection);
        _connectionTestSuccess = null;
        _testingConnection = true;
        try
        {
            await _connection.TestConnectionAsync();
            _connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            _connectionTestSuccess = false;
            Toaster.AddError("Connection test failed", ex.Message);
        }
        _testingConnection = false;
    }

    public async Task ShowAsync(Guid connectionId)
    {
        _connection = null;
        await _modal.LetAsync(x => x.ShowAsync());
        if (connectionId != Guid.Empty)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            _connection = await context.SnowflakeConnections
                .AsNoTrackingWithIdentityResolution()
                .Include(c => c.SqlSteps)
                .ThenInclude(step => step.Job)
                .FirstAsync(c => c.ConnectionId == connectionId);
        }
        else
        {
            _connection = new();
        }
        _connectionTestSuccess = null;
        _testingConnection = false;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
