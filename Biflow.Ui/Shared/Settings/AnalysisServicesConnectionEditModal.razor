@implements IConnectionEditModal

@inject IDbContextFactory<AppDbContext> DbFactory
@inject IHxMessengerService Messenger
@inject IJSRuntime JS

<HxModal @ref="modal" Size="ModalSize.Large" OnClosed="() => connectionTestSuccess = null" Title="@(connection?.ConnectionId == Guid.Empty ? "New Analysis Services connection" : "Edit " + connection?.ConnectionName)">
    <BodyTemplate>
        @if (connection is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="connection" id="as_connection_edit_form" OnValidSubmit="SubmitConnection">
                <div class="row">
                    <div class="col-md-10 mx-auto">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <label class="form-label">Connection name</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <CxIcon Icon="FeatherIcon.Edit2" />
                                </div>
                                <InputText class="form-control" @bind-Value="connection.ConnectionName"></InputText>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <label class="form-label">Connection string</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <CxIcon Icon="FeatherIcon.Database" />
                                </div>
                                <InputTextArea class="form-control" rows="3" @bind-Value="connection.ConnectionString" style="font-family:monospace;"></InputTextArea>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="TestConnection" Enabled="!testingConnection">
                                    Test connection
                                </HxButton>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col">
                                @if (connectionTestSuccess == true)
                                {
                                    <span class="badge bg-success">Success</span>
                                }
                                else if (connectionTestSuccess == false)
                                {
                                    <span class="badge bg-danger">Failed</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="as_connection_edit_form" Color="ThemeColor.Success">@(connection?.ConnectionId == Guid.Empty ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<ConnectionInfoBase> OnConnectionSubmit { get; set; }

    private AnalysisServicesConnectionInfo? connection;
    private HxModal? modal;
    private bool? connectionTestSuccess = null;
    private bool testingConnection = false;

    private async Task SubmitConnection()
    {
        await OnConnectionSubmit.InvokeAsync(connection);
        await modal.LetAsync(x => x.HideAsync());
    }

    private async Task TestConnection()
    {
        connectionTestSuccess = null;
        testingConnection = true;
        try
        {
            await Task.Run(() =>
            {
                using var server = new Microsoft.AnalysisServices.Tabular.Server();
                server.Connect(connection?.ConnectionString);
            });
            connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            connectionTestSuccess = false;
            Messenger.AddError("Connection test failed", ex.Message);
        }
        testingConnection = false;
    }

    public async Task ShowAsync(Guid connectionId)
    {
        connection = null;
        await modal.LetAsync(x => x.ShowAsync());
        if (connectionId != Guid.Empty)
        {
            using var context = DbFactory.CreateDbContext();
            connection = await context.AnalysisServicesConnections
                .AsNoTrackingWithIdentityResolution()
                .Include(c => c.TabularSteps)
                .ThenInclude(step => step.Job)
                .FirstAsync(c => c.ConnectionId == connectionId);
        }
        else
        {
            connection = new()
            {
                TabularSteps = new List<TabularStep>()
            };
        }
        connectionTestSuccess = null;
        testingConnection = false;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
