@inject IDbContextFactory<AppDbContext> DbFactory
@inject ToasterService Toaster
@inject IMediator Mediator

<style>
    tr a {
        text-decoration: none;
    }

        tr:hover a {
            text-decoration: underline;
        }
</style>

<PageTitle>Databricks Workspaces | Biflow</PageTitle>

<HxButton Color="ThemeColor.Success"
          @onclick="() => ShowEditModalAsync(null)"
          Enabled="_workspaces is not null">
    Add workspace
</HxButton>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th>
                    Workspace url
                </th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (_workspaces is null)
            {
                <tr><td colspan="5" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (_workspaces.Count == 0)
            {
                <tr><td colspan="5">No Databricks workspaces</td></tr>
            }
            else
            {
                @foreach (var workspace in _workspaces.OrderBy(w => w.WorkspaceName))
                {
                    var jobs = workspace.Steps.Select(s => s.Job).Distinct().Count();
                    var steps = workspace.Steps.Count();
                    <tr>
                        <td class="align-middle">
                            @workspace.WorkspaceName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup Size="ButtonGroupSize.Small">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="() => ShowEditModalAsync(workspace)">
                                    <SvgIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <SvgIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteWorkspaceAsync(workspace)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            @workspace.WorkspaceUrl
                        </td>
                        <td class="align-middle">
                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                        </td>
                        <td class="align-middle">
                            <a class="text-body" href="javascript:void(0)"
                               @onclick="async () =>
                                {
                                _stepsWorkspace = workspace;
                                await _stepsModal.LetAsync(x => x.ShowAsync());
                                }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<DatabricksWorkspaceEditModal @ref="_editModal" OnWorkspaceSubmit="OnWorkspaceSubmitAsync" />

<HxModal @ref="_stepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {_stepsWorkspace?.WorkspaceName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in _stepsWorkspace?.Steps
                            .OrderBy(s => s.Job.JobName)
                            .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIcon StepType="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await _stepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private List<DatabricksWorkspace>? _workspaces;
    private DatabricksWorkspaceEditModal? _editModal;
    private DatabricksWorkspace? _stepsWorkspace;
    private HxModal? _stepsModal;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _workspaces = await context.DatabricksWorkspaces
            .AsNoTrackingWithIdentityResolution()
            .Include(f => f.Steps)
            .ThenInclude(step => step.Job)
            .OrderBy(f => f.WorkspaceName)
            .ToListAsync();
    }

    private async Task DeleteWorkspaceAsync(DatabricksWorkspace workspace)
    {
        try
        {
            await Mediator.SendAsync(new DeleteDatabricksWorkspaceCommand(workspace.WorkspaceId));
            _workspaces?.Remove(workspace);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting workspace", message);
        }
    }

    private async Task OnWorkspaceSubmitAsync(DatabricksWorkspace workspace)
    {
        if (workspace.WorkspaceId == Guid.Empty)
        {
            await Mediator.SendAsync(new CreateDatabricksWorkspaceCommand(workspace));
        }
        else
        {
            await Mediator.SendAsync(new UpdateDatabricksWorkspaceCommand(workspace));
            _workspaces?.RemoveAll(w => w.WorkspaceId == workspace.WorkspaceId);
        }
        _workspaces?.Add(workspace);
        StateHasChanged();
    }

    private async Task ShowEditModalAsync(DatabricksWorkspace? workspace) =>
        await _editModal.LetAsync(x => x.ShowAsync(workspace?.WorkspaceId ?? Guid.Empty));
}
