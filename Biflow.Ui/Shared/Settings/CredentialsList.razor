@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject IMediator Mediator

<style>
    tr .hover-text-decoration-underline {
        text-decoration: none;
    }

    tr:hover .hover-text-decoration-underline {
        text-decoration: underline;
    }
</style>

<PageTitle>Credentials | Biflow</PageTitle>

<HxButton Color="ThemeColor.Success"
          @onclick="() => ShowEditModal(null)"
          Enabled="_credentials is not null">
    Add credential
</HxButton>

<div class="card pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Username
                </th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (_credentials is null)
            {
                <tr><td colspan="2" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (_credentials.Count == 0)
            {
                <tr><td colspan="2">No credentials</td></tr>
            }
            else
            {
                @foreach (var cred in _credentials.OrderBy(c => c.Domain).ThenBy(c => c.Username))
                {
                    var steps = cred.ExeSteps.Count();
                    var connections = cred.Connections.Count();
                    <tr>
                        <td class="align-middle">
                            @cred.DisplayName
                        </td>
                        <td class="align-middle">
                            <span class="hover-text-decoration-underline pointer" @onclick="() => { _stepsCredential = cred; _stepsModal.LetAsync(x => x.ShowAsync()); }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </span>
                        </td>
                        <td class="align-middle">
                            <span class="hover-text-decoration-underline pointer" @onclick="() => { _connectionsCredential = cred; _connectionsModal.LetAsync(x => x.ShowAsync()); }">
                                @(connections > 0 ? $"{connections} connection(s)" : null)
                            </span>
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup Size="ButtonGroupSize.Small">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="() => ShowEditModal(cred)">
                                    <SvgIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <SvgIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteCredentialAsync(cred)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<CredentialEditModal @ref="_credentialEditModal" OnCredentialSubmit="OnCredentialSubmitAsync" />

<HxModal @ref="_stepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {_stepsCredential?.DisplayName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in _stepsCredential?.ExeSteps
                            .OrderBy(s => s.Job.JobName)
                            .ThenBy(s => s.StepName)
                            .AsEnumerable() ?? [])
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIcon StepType="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await _stepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

<HxModal @ref="_connectionsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Connections using {_connectionsCredential?.DisplayName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Connection</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var connection in _connectionsCredential?.Connections
                            .OrderBy(c => c.ConnectionName).AsEnumerable() ?? [])
                        {
                            <tr>
                                <td>
                                    @connection.ConnectionName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await _connectionsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private List<Credential>? _credentials;
    private CredentialEditModal? _credentialEditModal;

    private Credential? _stepsCredential;
    private Credential? _connectionsCredential;
    private HxModal? _stepsModal;
    private HxModal? _connectionsModal;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _credentials = await context.Credentials
            .AsNoTrackingWithIdentityResolution()
            .Include(c => c.ExeSteps).ThenInclude(s => s.Job)
            .Include(c => c.Connections)
            .OrderBy(c => c.Domain)
            .ThenBy(c => c.Username)
            .ToListAsync();
    }

    private async Task DeleteCredentialAsync(Credential credential)
    {
        try
        {
            await Mediator.SendAsync(new DeleteCredentialCommand(credential.CredentialId));
            _credentials?.Remove(credential);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting credential", message);
        }
    }

    private async Task OnCredentialSubmitAsync(Credential credential)
    {
        if (credential.CredentialId == Guid.Empty)
        {
            await Mediator.SendAsync(new CreateCredentialCommand(credential));
        }
        else
        {
            await Mediator.SendAsync(new UpdateCredentialCommand(credential));
            _credentials?.RemoveAll(c => c.CredentialId == credential.CredentialId);
        }
        _credentials?.Add(credential);
        StateHasChanged();
    }

    private async Task ShowEditModal(Credential? credential) =>
        await _credentialEditModal.LetAsync(x => x.ShowAsync(credential?.CredentialId ?? Guid.Empty));
}
