@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject IMediator Mediator

<PageTitle>Credentials | Biflow</PageTitle>

<HxButton Color="ThemeColor.Success"
          @onclick="() => ShowEditModal(null)"
          Enabled="credentials is not null">
    Add credential
</HxButton>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Username
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (credentials is null)
            {
                <tr><td colspan="2" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (credentials.Count == 0)
            {
                <tr><td colspan="2">No credentials</td></tr>
            }
            else
            {
                @foreach (var cred in credentials.OrderBy(c => c.Domain).ThenBy(c => c.Username))
                {
                    <tr>
                        <td class="align-middle">
                            @cred.DisplayName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup Size="ButtonGroupSize.Small">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="() => ShowEditModal(cred)">
                                    <CxIcon Icon="FeatherIcon.Edit2" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <CxIcon Icon="FeatherIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteCredentialAsync(cred)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<CredentialEditModal @ref="credentialEditModal" OnCredentialSubmit="OnCredentialSubmitAsync" />

@code {
    private List<Credential>? credentials;
    private CredentialEditModal? credentialEditModal;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        credentials = await context.Credentials
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(c => c.Domain)
            .ThenBy(c => c.Username)
            .ToListAsync();
    }

    private async Task DeleteCredentialAsync(Credential credential)
    {
        try
        {
            await Mediator.SendAsync(new DeleteCredentialCommand(credential.CredentialId));
            credentials?.Remove(credential);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting blob storage client", message);
        }
    }

    private async Task OnCredentialSubmitAsync(Credential credential)
    {
        if (credential.CredentialId == Guid.Empty)
        {
            await Mediator.SendAsync(new CreateCredentialCommand(credential));
            credentials?.Add(credential);
        }
        else
        {
            await Mediator.SendAsync(new UpdateCredentialCommand(credential));
            credentials?.RemoveAll(c => c.CredentialId == credential.CredentialId);
            credentials?.Add(credential);
        }
        StateHasChanged();
    }

    private async Task ShowEditModal(Credential? credential) =>
        await credentialEditModal.LetAsync(x => x.ShowAsync(credential?.CredentialId ?? Guid.Empty));
}
