@inject IConfiguration configuration
@inject IDbContextFactory<BiflowContext> DbFactory
@inject MarkupHelperService MarkupHelper
@inject ITokenService TokenService

<style>
    tr a {
        text-decoration: none;
    }
        
        tr:hover a {
            text-decoration: underline;
        }
</style>

<PageTitle>App registrations | Biflow</PageTitle>

<HxButton Color="ThemeColor.Success" @onclick="async () => await ShowEditModalAsync(null)" IsDisabled="AppRegistrations is null">
    Add App registration
</HxButton>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th>
                    Tenant id
                </th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (AppRegistrations is null)
            {
                <tr><td colspan="4">Loading...</td></tr>
            }
            else if (AppRegistrations.Count == 0)
            {
                <tr><td colspan="4">No App registrations</td></tr>
            }
            else
            {
                @foreach (var app in AppRegistrations)
                {
                    var jobs = app.Steps.Select(s => s.Job).Distinct().Count();
                    var steps = app.Steps.Count();
                    <tr>
                        <td class="align-middle">
                            @app.AppRegistrationName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup CssClass="btn-row">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" aria-label="edit" @onclick="async () => await ShowEditModalAsync(app)">
                                    @MarkupHelper.FromFile("icons/feather/edit-2.svg")
                                </HxButton>
                                <HxDropdown>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light" aria-label="delete">
                                        @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteAppRegistration(app)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdown>
                                <HxDropdown>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light" aria-label="clear tokens">
                                        @MarkupHelper.FromFile("icons/feather/x.svg")
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Clear access tokens?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => ClearTokens(app)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdown>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            @app.TenantId
                        </td>
                        <td class="align-middle">
                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                        </td>
                        <td class="align-middle">
                            <a class="text-dark" href="javascript:void(0)"
                            @onclick="async () =>
                            {
                                StepsAppRegistration = app;
                                await StepsModal.ShowAsync();
                            }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<AppRegistrationEditModal @ref="AppRegistrationEditModal" AppRegistrationId="EditAppRegistrationId" OnAppRegistrationSubmit="OnAppRegistrationSubmit" />

<HxModal @ref="StepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {StepsAppRegistration?.AppRegistrationName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in StepsAppRegistration?.Steps
                            .OrderBy(s => s.Job.JobName)
                            .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIconComponent StepType_="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="StepsModal.HideAsync">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private List<AppRegistration>? AppRegistrations { get; set; }

    private Guid EditAppRegistrationId { get; set; }
    private AppRegistrationEditModal AppRegistrationEditModal { get; set; } = null!;

    private AppRegistration? StepsAppRegistration { get; set; }
    private HxModal StepsModal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<BiflowContext>(DbFactory.CreateDbContext);
        AppRegistrations = await context.AppRegistrations
            .AsNoTrackingWithIdentityResolution()
            .Include(app => app.Steps)
            .ThenInclude(step => step.Job)
            .OrderBy(df => df.AppRegistrationName)
            .ToListAsync();
    }

    private async Task DeleteAppRegistration(AppRegistration appRegistration)
    {
        using var context = DbFactory.CreateDbContext();
        context.Remove(appRegistration);
        await context.SaveChangesAsync();
        AppRegistrations?.Remove(appRegistration);
    }

    private async void OnAppRegistrationSubmit(AppRegistration appRegistration)
    {
        using var context = DbFactory.CreateDbContext();
        if (appRegistration.AppRegistrationId == Guid.Empty)
        {
            context.Add(appRegistration);
            AppRegistrations?.Add(appRegistration);
        }
        else
        {
            AppRegistrations?.RemoveAll(a => a.AppRegistrationId == appRegistration.AppRegistrationId);
            AppRegistrations?.Add(appRegistration);
            context.Attach(appRegistration).State = EntityState.Modified;
        }
        await context.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ClearTokens(AppRegistration appRegistration)
    {
        using var context = DbFactory.CreateDbContext();
        var tokens = await context.AccessTokens.Where(t => t.AppRegistrationId == appRegistration.AppRegistrationId).ToListAsync();
        tokens.ForEach(t => context.Remove(t));
        await context.SaveChangesAsync();
        TokenService.Clear();
    }

    private async Task ShowEditModalAsync(AppRegistration? appRegistration)
    {
        EditAppRegistrationId = appRegistration?.AppRegistrationId ?? Guid.Empty;
        await AppRegistrationEditModal.ShowAsync();
    }
}
