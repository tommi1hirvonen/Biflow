@inject IHxMessengerService Messenger
@inject IMediator Mediator

<HxModal @ref="modal" Title="Reset password" Scrollable="true" Size="ModalSize.Regular" OnClosed="OnClosed">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <h6>User:</h6>
                <span>@username</span>
                <EditForm Model="passwordModel" OnValidSubmit="UpdatePassword" id="reset_password_form" class="mt-3">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label class="form-label">New password</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                <CxIcon Icon="FeatherIcon.Lock" />
                            </div>
                            <InputText class="form-control" type="password" @bind-Value="passwordModel.Password"></InputText>
                        </div>
                    </div>
                    <div>
                        <label class="form-label">Confirm new password</label>
                        <div class="input-group">
                            <div class="input-group-text rounded-left">
                                <CxIcon Icon="FeatherIcon.Key" />
                            </div>
                            <InputText class="form-control" type="password" @bind-Value="passwordModel.ConfirmPassword"></InputText>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="reset_password_form" Color="ThemeColor.Success">Save</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    private HxModal? modal;
    private string? username;
    private PasswordModel passwordModel = new();

    public async Task ShowAsync(string username)
    {
        this.username = username;
        passwordModel = new();
        if (modal is not null)
        {
            await modal.ShowAsync();
        }
    }

    private async Task UpdatePassword()
    {
        ArgumentNullException.ThrowIfNull(username);

        if (!passwordModel.Password.Equals(passwordModel.ConfirmPassword))
        {
            Messenger.AddWarning("Warning", "The two passwords do not match");
            return;
        }

        try
        {
            await Mediator.Send( new UpdateUserPasswordAdminCommand(username, passwordModel.Password));
            Messenger.AddInformation("Success", "Password updated successfully");
            passwordModel = new();
            if (modal is not null)
            {
                await modal.HideAsync();
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error updating password", ex.Message);
        }
    }

    private void OnClosed() => passwordModel = new();
}
