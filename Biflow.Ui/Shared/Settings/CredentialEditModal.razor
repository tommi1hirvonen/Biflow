@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IJSRuntime Js

<HxModal @ref="_modal"
         OnShown="() => _domainInput?.Element?.FocusAsync()"
         Title="@(_credential?.CredentialId == Guid.Empty ? "New credential" : "Edit credential")">
    <BodyTemplate>
        @if (_credential is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="_credential" id="credential_edit_form" OnValidSubmit="SubmitApiKeyAsync">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col">
                                <label class="form-label">Domain</label>
                                <div class="input-group input-group-sm">
                                    <InputText @ref="_domainInput" class="form-control form-control-sm" @bind-Value="_credential.Domain"></InputText>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Username</label>
                                <div class="input-group input-group-sm">
                                    <InputText class="form-control form-control-sm" @bind-Value="_credential.Username"></InputText>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Password</label>
                                <div class="input-group input-group-sm">
                                    <InputText class="form-control form-control-sm" @bind-Value="_credential.Password" type="password"></InputText>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="credential_edit_form" Color="ThemeColor.Success">@(_credential?.CredentialId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public EventCallback<Credential> OnCredentialSubmit { get; set; }

    private InputText? _domainInput;
    private Credential? _credential;
    private HxModal? _modal;

    private async Task SubmitApiKeyAsync()
    {
        await OnCredentialSubmit.InvokeAsync(_credential);
        await _modal.LetAsync(x => x.HideAsync());
    }

    public async Task ShowAsync(Guid credentialId)
    {
        _credential = null;
        await _modal.LetAsync(x => x.ShowAsync());
        if (credentialId != Guid.Empty)
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            _credential = await context.Credentials
                .AsNoTrackingWithIdentityResolution()
                .Include(c => c.ExeSteps).ThenInclude(s => s.Job)
                .Include(c => c.MsSqlConnections)
                .Include(c => c.AnalysisServicesConnections)
                .FirstAsync(c => c.CredentialId == credentialId);
        }
        else
        {
            _credential = new();
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
