@inject IDbContextFactory<AppDbContext> DbFactory
@inject ToasterService Toaster
@inject IJSRuntime Js

<HxModal @ref="_modal"
         Size="ModalSize.Large"
         OnClosed="() => _connectionTestSuccess = null"
         Title="@(_connection?.ConnectionId == Guid.Empty ? "New SQL connection" : "Edit " + _connection?.ConnectionName)"
         Scrollable="true"
         OnShown="() => _nameInput?.Element?.FocusAsync()">
    <BodyTemplate>
        @if (_connection is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="_connection" id="sql_connection_edit_form" OnValidSubmit="SubmitConnection">
                <div class="row">
                    <div class="col-md-10 mx-auto">

                        <div class="row mb-3">
                            <div class="col">
                                <ul class="nav nav-underline">
                                    <li class="nav-item cursor-pointer">
                                        <span
                                            class="nav-link @(!_showScdDefaults ? "active" : null)"
                                            @onclick="() => _showScdDefaults = false">
                                            General
                                        </span>
                                    </li>
                                    <li class="nav-item cursor-pointer">
                                        <span
                                            class="nav-link @(_showScdDefaults ? "active" : null)"
                                            @onclick="() => _showScdDefaults = true">
                                            SCD table defaults
                                        </span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        
                        @if (!_showScdDefaults)
                        {
                            <div class="row">
                                <label class="form-label">Connection name</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="LucideIcon.Pen"/>
                                    </div>
                                    <InputText @ref="_nameInput" class="form-control" @bind-Value="_connection.ConnectionName"></InputText>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <label class="form-label">Connection string</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="LucideIcon.Database"/>
                                    </div>
                                    <InputTextArea class="form-control" rows="4" @bind-Value="_connection.ConnectionString" style="font-family: monospace; font-size: 0.9em;"></InputTextArea>
                                </div>
                                <div class="form-text">
                                    Provide connection strings with syntax targeting Microsoft.Data.SqlClient.
                                    <br/>
                                    <a target="_blank" href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring?view=sqlclient-dotnet-core-5.2#remarks">Connection string reference</a>
                                    <br/>
                                    <a target="_blank" href="https://learn.microsoft.com/en-us/sql/connect/ado-net/sql/azure-active-directory-authentication?view=sql-server-ver16">Entra authentication</a> is also supported.
                                </div>
                            </div>

                            <div class=" row mt-3">
                                <div class="col">
                                    <label class="form-label">Impersonation</label>
                                    <InputSelect class="form-select"
                                                 @bind-Value="_connection.CredentialId"
                                                 @bind-Value:after="SetCredential">
                                        <option value="">No impersonation</option>
                                        @foreach (var credential in Credentials)
                                        {
                                            <option value="@credential.CredentialId">
                                                @credential.DisplayName
                                            </option>
                                        }
                                    </InputSelect>
                                    <div class="form-text">
                                        Impersonation is supported only when orchestration services are running on Windows.
                                    </div>
                                </div>
                            </div>

                            <dib class="row mt-3">
                                <label class="form-label">Execute SSIS packages as login (blank = no impersonation)</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="LucideIcon.User"/>
                                    </div>
                                    <InputText class="form-control" @bind-Value="_connection.ExecutePackagesAsLogin"></InputText>
                                </div>
                            </dib>

                            <div class="row mt-3">
                                <div class="col">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="TestConnection" Enabled="!_testingConnection">
                                        Test connection
                                    </HxButton>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <div class="col">
                                    @switch (_connectionTestSuccess)
                                    {
                                        case true:
                                            <span class="badge bg-success">Success</span>
                                            break;
                                        case false:
                                            <span class="badge bg-danger">Failed</span>
                                            break;
                                    }
                                </div>
                            </div>

                            <div class="row mt-3">
                                <div class="col">
                                    <h6>Max concurrent steps</h6>
                                </div>
                            </div>
                            <div class="row align-items-center mt-2">
                                <div class="col-3">
                                    <label class="form-label mb-0">
                                        <StepTypeIcon StepType="StepType.Sql"/>
                                        &nbsp;
                                        SQL
                                    </label>
                                </div>
                                <div class="col-9">
                                    <InputNumber class="form-control" style="max-width: 10rem;" @bind-Value="_connection.MaxConcurrentSqlSteps"></InputNumber>
                                </div>
                            </div>
                            <div class="row align-items-center mt-2">
                                <div class="col-3">
                                    <label class="form-label mb-0">
                                        <StepTypeIcon StepType="StepType.Package"/>
                                        &nbsp;
                                        Package
                                    </label>
                                </div>
                                <div class="col-9">
                                    <InputNumber class="form-control" style="max-width: 10rem;" @bind-Value="_connection.MaxConcurrentPackageSteps"></InputNumber>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-text">
                                        Limit the number of concurrently executing steps across all executions for this connection.
                                        <br/>
                                        0 = no limit
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col">
                                    <div class="form-text">
                                        Connection level defaults for SCD tables will be used when adding new SCD tables.
                                        They help to speed up the process of defining SCD tables and to keep naming conventions consistent.
                                        Existing SCD tables will not be affected by changes to connection level defaults.
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <label class="form-label">Target table schema</label>
                                <div class="input-group">
                                    <InputText class="form-control" placeholder="Same as source table schema" @bind-Value="_connection.ScdDefaultTargetSchema"></InputText>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <label class="form-label">Target table name suffix</label>
                                <div class="input-group">
                                    <InputText class="form-control" placeholder="No suffix" @bind-Value="_connection.ScdDefaultTargetTableSuffix"></InputText>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <label class="form-label">Staging table schema</label>
                                <div class="input-group">
                                    <InputText class="form-control" placeholder="Same as source table schema" @bind-Value="_connection.ScdDefaultStagingSchema"></InputText>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <label class="form-label">Staging table name suffix</label>
                                <div class="input-group">
                                    <InputText class="form-control" placeholder="No suffix" @bind-Value="_connection.ScdDefaultStagingTableSuffix"></InputText>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="sql_connection_edit_form" Color="ThemeColor.Success">@(_connection?.ConnectionId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public IEnumerable<Credential> Credentials { get; set; } = [];

    [Parameter]
    public EventCallback<MsSqlConnection> OnConnectionSubmit { get; set; }

    private InputText? _nameInput;
    private MsSqlConnection? _connection;
    private HxModal? _modal;
    private bool? _connectionTestSuccess;
    private bool _testingConnection;
    private bool _showScdDefaults;

    private async Task SubmitConnection()
    {
        ArgumentNullException.ThrowIfNull(_connection);
        _connection.Credential = null;
        await OnConnectionSubmit.InvokeAsync(_connection);
        await _modal.LetAsync(x => x.HideAsync());
    }

    private async Task TestConnection()
    {
        ArgumentNullException.ThrowIfNull(_connection);
        _connectionTestSuccess = null;
        _testingConnection = true;
        try
        {
            await _connection.TestConnectionAsync();
            _connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            _connectionTestSuccess = false;
            Toaster.AddError("Connection test failed", ex.Message);
        }
        _testingConnection = false;
    }

    public async Task ShowAsync(Guid connectionId)
    {
        _showScdDefaults = false;
        _connection = null;
        await _modal.LetAsync(x => x.ShowAsync());
        if (connectionId != Guid.Empty)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            _connection = await context.MsSqlConnections
                .AsNoTrackingWithIdentityResolution()
                .Include(c => c.SqlSteps)
                .ThenInclude(step => step.Job)
                .Include(c => c.PackageSteps)
                .ThenInclude(step => step.Job)
                .Include(c => c.AgentJobSteps)
                .ThenInclude(step => step.Job)
                .Include(c => c.DataTables)
                .ThenInclude(t => t.Category)
                .FirstAsync(c => c.ConnectionId == connectionId);
            SetCredential();
        }
        else
        {
            _connection = new();
        }
        _connectionTestSuccess = null;
        _testingConnection = false;
    }

    private void SetCredential()
    {
        if (_connection is null)
        {
            return;
        }
        var credential = Credentials.FirstOrDefault(c => c.CredentialId == _connection.CredentialId);
        _connection.Credential = credential;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
