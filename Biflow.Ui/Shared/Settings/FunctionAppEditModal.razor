@inject IDbContextFactory<AppDbContext> DbFactory
@inject ToasterService Toaster
@inject IHttpClientFactory HttpClientFactory
@inject ITokenService TokenService
@inject IJSRuntime Js

<HxModal @ref="_modal" Size="ModalSize.Large" OnClosed="() => _connectionTestSuccess = null" Title="@(_functionApp?.FunctionAppId == Guid.Empty ? "New Function App" : "Edit " + _functionApp?.FunctionAppName)" Scrollable="true">
    
    <BodyTemplate>
        @if (_functionApp is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="_functionApp" id="function_app_edit_form" OnValidSubmit="SubmitFunctionApp">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div>
                            <label class="form-label">Function App name</label>
                            <InputText class="form-control" @bind-Value="_functionApp.FunctionAppName"></InputText>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg-6">
                                <label class="form-label">Azure credential</label>
                                <InputSelect class="form-select" @bind-Value:get="_functionApp.AzureCredentialId" @bind-Value:set="AzureCredentialChanged">
                                    @foreach (var app in AzureCredentials ?? Enumerable.Empty<AzureCredential>())
                                    {
                                        <option value="@app.AzureCredentialId">@app.AzureCredentialName</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Subscription id</label>
                                <InputText class="form-control" @bind-Value="_functionApp.SubscriptionId"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Resource group name</label>
                                <InputText class="form-control" @bind-Value="_functionApp.ResourceGroupName"></InputText>
                            </div>
                            <div class="col-lg">
                                <label class="form-label">Resource name</label>
                                <InputText class="form-control" @bind-Value="_functionApp.ResourceName"></InputText>
                            </div>
                        </div>

                        <div class="row my-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="TestConnection" Enabled="!_testingConnection">
                                    Test connection
                                </HxButton>
                                @if (_connectionTestSuccess == true)
                                {
                                    <span class="badge bg-success ms-3">Success</span>
                                }
                                else if (_connectionTestSuccess == false)
                                {
                                    <span class="badge bg-danger ms-3">Failed</span>
                                }
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg">
                                <label class="form-label">Function App key</label>
                                <InputText class="form-control" @bind-Value="_functionApp.FunctionAppKey"></InputText>
                                <div class="form-text">Optionally set a Function App key to be used for all function invocations by default.</div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="OpenKeySelectOffcanvasAsync">
                                    <SvgIcon Icon="LucideIcon.Ellipsis" />
                                    Browse function app keys
                                </HxButton>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Max concurrent function step executions</label>
                                <InputNumber class="form-control" style="max-width: 10rem;" @bind-Value="_functionApp.MaxConcurrentFunctionSteps"></InputNumber>
                                <div class="form-text">
                                    Limit the number of concurrently executing function steps across all executions for this Function App.
                                    <br/>
                                    0 = no limit
                                </div>
                            </div>
                        </div>

                        <FunctionAppKeySelectOffcanvas @ref="_keySelectOffcanvas" FunctionApp="_functionApp" OnKeySelected="OnKeySelected" />

                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    
    <FooterTemplate>
        <HxSubmit form="function_app_edit_form" Color="ThemeColor.Success">@(_functionApp?.FunctionAppId == Guid.Empty ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<FunctionApp> OnFunctionAppSubmit { get; set; }

    [Parameter]
    public List<AzureCredential>? AzureCredentials { get; set; }

    private FunctionApp? _functionApp;
    private HxModal? _modal;
    private bool? _connectionTestSuccess = null;
    private bool _testingConnection = false;
    private FunctionAppKeySelectOffcanvas? _keySelectOffcanvas;

    private void AzureCredentialChanged(Guid id)
    {
        var azureCredential = AzureCredentials?.FirstOrDefault(a => a.AzureCredentialId == id);
        if (azureCredential is not null && _functionApp is not null)
        {
            _functionApp.AzureCredential = azureCredential;
        }
    }

    private void OnKeySelected(string key)
    {
        if (_functionApp is not null)
            _functionApp.FunctionAppKey = key;
    }

    private async Task OpenKeySelectOffcanvasAsync()
    {
        await _keySelectOffcanvas.LetAsync(x => x.ShowAsync());
    }

    private async Task SubmitFunctionApp()
    {
        await OnFunctionAppSubmit.InvokeAsync(_functionApp);
        await _modal.LetAsync(x => x.HideAsync());
    }

    private async Task TestConnection()
    {
        _connectionTestSuccess = null;
        _testingConnection = true;
        try
        {
            if (_functionApp is not null) await _functionApp.CreateClient(TokenService, HttpClientFactory).TestConnection();
            _connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            _connectionTestSuccess = false;
            Toaster.AddError("Connection test failed", ex.Message);
        }
        _testingConnection = false;
    }

    public async Task ShowAsync(Guid functionAppId)
    {
        ArgumentNullException.ThrowIfNull(AzureCredentials);
        _functionApp = null;
        _connectionTestSuccess = null;
        await _modal.LetAsync(x => x.ShowAsync());
        if (functionAppId != Guid.Empty)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            _functionApp = await context.FunctionApps
                .AsNoTrackingWithIdentityResolution()
                .Include(f => f.Steps)
                .ThenInclude(step => step.Job)
                .Include(f => f.AzureCredential)
                .FirstAsync(f => f.FunctionAppId == functionAppId);
        }
        else
        {
            var azureCredential = AzureCredentials?.FirstOrDefault();
            ArgumentNullException.ThrowIfNull(azureCredential);
            _functionApp = new()
            {
                AzureCredential = azureCredential
            };
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
