@inject IDbContextFactory<AppDbContext> DbFactory
@inject IHxMessengerService Messenger
@inject IHttpClientFactory HttpClientFactory
@inject ITokenService TokenService
@inject IJSRuntime JS

<HxModal @ref="modal" Size="ModalSize.Large" OnClosed="() => connectionTestSuccess = null" Title="@(functionApp?.FunctionAppId == Guid.Empty ? "New Function App" : "Edit " + functionApp?.FunctionAppName)">
    
    <BodyTemplate>
        @if (functionApp is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="functionApp" id="function_app_edit_form" OnValidSubmit="SubmitFunctionApp">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div>
                            <label class="form-label">Function App name</label>
                            <InputText class="form-control" @bind-Value="functionApp.FunctionAppName"></InputText>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg-6">
                                <label class="form-label">App registration</label>
                                <InputSelect class="form-select" @bind-Value="functionApp.AppRegistrationId" @onchange="args => AppRegistrationChanged(args.Value)">
                                    @foreach (var app in AppRegistrations ?? Enumerable.Empty<AppRegistration>())
                                    {
                                        <option value="@app.AppRegistrationId">@app.AppRegistrationName</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Subscription id</label>
                                <InputText class="form-control" @bind-Value="functionApp.SubscriptionId"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Resource group name</label>
                                <InputText class="form-control" @bind-Value="functionApp.ResourceGroupName"></InputText>
                            </div>
                            <div class="col-lg">
                                <label class="form-label">Resource name</label>
                                <InputText class="form-control" @bind-Value="functionApp.ResourceName"></InputText>
                            </div>
                        </div>

                        <div class="row my-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="TestConnection" Enabled="!testingConnection">
                                    Test connection
                                </HxButton>
                                @if (connectionTestSuccess == true)
                                {
                                    <span class="badge bg-success ms-3">Success</span>
                                }
                                else if (connectionTestSuccess == false)
                                {
                                    <span class="badge bg-danger ms-3">Failed</span>
                                }
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg">
                                <label class="form-label">Function App key</label>
                                <InputText class="form-control" @bind-Value="functionApp.FunctionAppKey"></InputText>
                                <div class="form-text">Optionally set a Function App key to be used for all function invocations by default.</div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="OpenKeySelectOffcanvasAsync">
                                    <CxIcon Icon="FeatherIcon.MoreHorizontal" />
                                    Browse function app keys
                                </HxButton>
                            </div>
                        </div>

                        <FunctionAppKeySelectOffcanvas @ref="keySelectOffcanvas" FunctionApp="functionApp" OnKeySelected="OnKeySelected" />

                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    
    <FooterTemplate>
        <HxSubmit form="function_app_edit_form" Color="ThemeColor.Success">@(functionApp?.FunctionAppId == Guid.Empty ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<FunctionApp> OnFunctionAppSubmit { get; set; }

    [Parameter]
    public List<AppRegistration>? AppRegistrations { get; set; }

    private FunctionApp? functionApp;
    private HxModal? modal;
    private bool? connectionTestSuccess = null;
    private bool testingConnection = false;
    private FunctionAppKeySelectOffcanvas? keySelectOffcanvas;

    private void AppRegistrationChanged(object? value)
    {
        var idString = value?.ToString();
        if (idString is not null)
        {
            var id = Guid.Parse(idString);
            var appRegistration = AppRegistrations?.FirstOrDefault(a => a.AppRegistrationId == id);
            if (appRegistration is not null && functionApp is not null)
            {
                functionApp.AppRegistration = appRegistration;
            }
        }
    }

    private void OnKeySelected(string key)
    {
        if (functionApp is not null)
            functionApp.FunctionAppKey = key;
    }

    private async Task OpenKeySelectOffcanvasAsync()
    {
        await keySelectOffcanvas.LetAsync(x => x.ShowAsync());
    }

    private async Task SubmitFunctionApp()
    {
        if (functionApp is not null) functionApp.AppRegistration = null!;
        await OnFunctionAppSubmit.InvokeAsync(functionApp);
        await modal.LetAsync(x => x.HideAsync());
    }

    private async Task TestConnection()
    {
        connectionTestSuccess = null;
        testingConnection = true;
        try
        {
            if (functionApp is not null) await functionApp.TestConnection(HttpClientFactory.CreateClient());
            connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            connectionTestSuccess = false;
            Messenger.AddError("Connection test failed", ex.Message);
        }
        testingConnection = false;
    }

    public async Task ShowAsync(Guid functionAppId)
    {
        functionApp = null;
        connectionTestSuccess = null;
        await modal.LetAsync(x => x.ShowAsync());
        if (functionAppId != Guid.Empty)
        {
            using var context = DbFactory.CreateDbContext();
            functionApp = await context.FunctionApps
                .AsNoTrackingWithIdentityResolution()
                .Include(f => f.Steps)
                .ThenInclude(step => step.Job)
                .Include(f => f.AppRegistration)
                .FirstAsync(f => f.FunctionAppId == functionAppId);
        }
        else
        {
            functionApp = new()
            {
                AppRegistrationId = AppRegistrations?.FirstOrDefault()?.AppRegistrationId,
                AppRegistration = AppRegistrations?.FirstOrDefault()!,
                Steps = new List<FunctionStep>()
            };
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
