@using Biflow.Core.Entities.Scd

<HxModal @ref="_modal" Size="ModalSize.Large" Title="@(_table?.ScdTableId == Guid.Empty ? "New SCD table" : "Edit " + _table?.ScdTableName)" Scrollable="true">
    <BodyTemplate>
        @if (_table is null || Connections is null)
        {
            <div class="row my-4">
                <div class="col text-center">
                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Regular" />
                </div>
            </div>
        }
        else
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm id="scd_table_edit_form" Model="_table" OnValidSubmit="SubmitAsync">
                <div class="row">
                    <div class="col">
                        <ul class="nav nav-underline">
                            <li class="nav-item cursor-pointer">
                                <span
                                    class="nav-link @(_view == View.Settings ? "active" : null)"
                                    @onclick="() => _view = View.Settings">
                                    Settings
                                </span>
                            </li>
                            <li class="nav-item cursor-pointer">
                                <span
                                    class="nav-link @(_view == View.PreLoadScript ? "active" : null)"
                                    @onclick="() => _view = View.PreLoadScript">
                                    Pre-load script
                                    @if (!string.IsNullOrWhiteSpace(_table.PreLoadScript))
                                    {
                                        <HxTooltip Trigger="TooltipTrigger.Hover" Text="Pre-load script enabled">
                                            <span class="text-warning">
                                                &nbsp;
                                                <SvgIcon Icon="LucideIcon.Info" />
                                            </span>
                                        </HxTooltip>
                                    }
                                </span>
                            </li>
                            <li class="nav-item cursor-pointer">
                                <span
                                    class="nav-link @(_view == View.PostLoadScript ? "active" : null)"
                                    @onclick="() => _view = View.PostLoadScript">
                                    Post-load script
                                    @if (!string.IsNullOrWhiteSpace(_table.PostLoadScript))
                                    {
                                        <HxTooltip Trigger="TooltipTrigger.Hover" Text="Post-load script enabled">
                                            <span class="text-warning">
                                                &nbsp;
                                                <SvgIcon Icon="LucideIcon.Info" />
                                            </span>
                                        </HxTooltip>
                                    }
                                </span>
                            </li>
                        </ul>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <FluentValidationValidator Validator="scdTableValidator"/>
                        
                        @switch (_view)
                        {
                            case View.Settings:
                            {
                                <div class="row">
                                    <div class="col">
                                        <label class="form-label">SCD table name</label>
                                        <div class="input-group">
                                            <InputText class="form-control form-control-sm" @bind-Value="_table.ScdTableName"></InputText>
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-3">
                                    <div class="col">
                                        <label class="form-label">Connection</label>
                                        <div class="input-group input-group-sm">
                                            <InputSelect class="form-select form-select-sm" @bind-Value="_table.ConnectionId">
                                                @foreach (var connection in Connections ?? [])
                                                {
                                                    <option value="@connection.ConnectionId">
                                                        @connection.ConnectionName
                                                    </option>
                                                }
                                            </InputSelect>
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                                      OnClick="ShowTablesOffcanvasAsync">
                                                <SvgIcon Icon="LucideIcon.Ellipsis"/>
                                                Select source
                                            </HxButton>
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-3">
                                    <div class="col">
                                        <label class="form-label">
                                            Source table/view
                                            &nbsp;
                                            <HxPopover Trigger="PopoverTrigger.Hover"
                                                       Content="The source table or view for the Slowly Changing Dimension. The source must have a unique key candidate of one or multiple columns which can be defined in the columns section below. Create a view on top of the raw table to build additional logic, clean data or to rename columns before it is historized in the target table.">
                                                <span>
                                                    <SvgIcon Icon="LucideIcon.Info"/>
                                                </span>
                                            </HxPopover>
                                        </label>
                                        <div class="input-group input-group-sm">
                                            <InputText class="form-control form-control-sm" placeholder="Schema"
                                                       @bind-Value="_table.SourceTableSchema"
                                                       style="max-width: 15rem;"></InputText>
                                            <div class="input-group-text">
                                                .
                                            </div>
                                            <InputText class="form-control form-control-sm" placeholder="Table/view"
                                                       @bind-Value="_table.SourceTableName"></InputText>
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-3">
                                    <div class="col">
                                        <label class="form-label">
                                            Target table
                                            &nbsp;
                                            <HxPopover Trigger="PopoverTrigger.Hover"
                                                       Content="The historized Slowly Changing Dimension table. If the table does not exists, it will be automatically created on first SCD table load. This table will capture the changes in the source data.">
                                                <span>
                                                    <SvgIcon Icon="LucideIcon.Info"/>
                                                </span>
                                            </HxPopover>
                                        </label>
                                        <div class="input-group input-group-sm">
                                            <InputText class="form-control form-control-sm" placeholder="Schema"
                                                       @bind-Value="_table.TargetTableSchema"
                                                       style="max-width: 15rem;"></InputText>
                                            <div class="input-group-text">
                                                .
                                            </div>
                                            <InputText class="form-control form-control-sm" placeholder="Table"
                                                       @bind-Value="_table.TargetTableName"></InputText>
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-3">
                                    <div class="col">
                                        <label class="form-label">
                                            Staging table
                                            &nbsp;
                                            <HxPopover Trigger="PopoverTrigger.Hover"
                                                       Content="The staging table is an intermediary table where the data from the source table/view is loaded before it is transferred to the final target table. Hash calculations happen in the staging table. The staging table is dropped and recreated on each SCD table load.">
                                                <span>
                                                    <SvgIcon Icon="LucideIcon.Info"/>
                                                </span>
                                            </HxPopover>
                                        </label>
                                        <div class="input-group input-group-sm">
                                            <InputText class="form-control form-control-sm" placeholder="Schema"
                                                       @bind-Value="_table.StagingTableSchema"
                                                       style="max-width: 15rem;"></InputText>
                                            <div class="input-group-text">
                                                .
                                            </div>
                                            <InputText class="form-control form-control-sm" placeholder="Schema"
                                                       @bind-Value="_table.StagingTableName"></InputText>
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-3">
                                    <div class="col">
                                        <div class="form-check form-check-inline">
                                            <input type="checkbox" class="form-check-input" id="full_load"
                                                   checked=@(_table.FullLoad)
                                                   @onchange="() => _table.FullLoad = !_table.FullLoad">
                                            <label class="form-check-label fw-normal" for="full_load">
                                                Full load
                                                &nbsp;
                                                <HxPopover Trigger="PopoverTrigger.Hover"
                                                           Content="By default, only new records are added and changed records are updated. Enable 'Full load' to mark records in the target table as invalid if no matching key is found in the source table/view. More advanced incremental load logic can be built using pre and post-load scripts.">
                                                    <span>
                                                        <SvgIcon Icon="LucideIcon.Info"/>
                                                    </span>
                                                </HxPopover>
                                            </label>
                                        </div>
                                        @{
                                            var connection = Connections.FirstOrDefault(c => c.ConnectionId == _table.ConnectionId);
                                        }
                                        @if (connection?.ConnectionType != SqlConnectionType.Snowflake)
                                        {
                                            // Hide index options on Snowflake since it doesn't have an effect.
                                            <div class="form-check form-check-inline">
                                                <input type="checkbox" class="form-check-input" id="apply_index_on_create"
                                                       checked=@(_table.ApplyIndexesOnCreate)
                                                       @onchange="() => _table.ApplyIndexesOnCreate = !_table.ApplyIndexesOnCreate">
                                                <label class="form-check-label fw-normal" for="apply_index_on_create">
                                                    Create index on target table
                                                    &nbsp;
                                                    <HxPopover Trigger="PopoverTrigger.Hover"
                                                               Content="NOTE: Indexes are not supported on all connections. Enable automatic indexes on the target table to speed up the load process and querying.">
                                                        <span>
                                                            <SvgIcon Icon="LucideIcon.Info"/>
                                                        </span>
                                                    </HxPopover>
                                                </label>
                                            </div>
                                        }
                                        <div class="form-check form-check-inline">
                                            <input type="checkbox" class="form-check-input" id="select_distinct"
                                                   checked=@(_table.SelectDistinct)
                                                   @onchange="() => _table.SelectDistinct = !_table.SelectDistinct">
                                            <label class="form-check-label fw-normal" for="select_distinct">
                                                Distinct select
                                                &nbsp;
                                                <HxPopover Trigger="PopoverTrigger.Hover"
                                                           Content="In case duplicate records exist in the source data, enable distinct select to potentially get rid of duplicates without creating a separate view to handle them.">
                                                        <span>
                                                            <SvgIcon Icon="LucideIcon.Info"/>
                                                        </span>
                                                </HxPopover>
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-3">
                                    <div class="col">
                                        <label class="form-label">Schema drift</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col">
                                        <div class="form-check form-check-inline">
                                            <input type="radio" class="form-check-input" id="radio_schema_drift_disabled"
                                                   checked=@(_table.SchemaDriftConfiguration is SchemaDriftDisabledConfiguration)
                                                   @onchange="() => _table.SchemaDriftConfiguration = _disabledConfiguration">
                                            <label class="form-check-label fw-normal" for="radio_schema_drift_disabled">
                                                Disabled
                                            </label>
                                        </div>
                                        <div class="form-check form-check-inline">
                                            <input type="radio" class="form-check-input" id="radio_schema_drift_enabled"
                                                   checked=@(_table.SchemaDriftConfiguration is SchemaDriftEnabledConfiguration)
                                                   @onchange="() => _table.SchemaDriftConfiguration = _enabledConfiguration">
                                            <label class="form-check-label fw-normal" for="radio_schema_drift_enabled">
                                                Enabled
                                                &nbsp;
                                                <HxPopover Trigger="PopoverTrigger.Hover"
                                                           Content="Enable schema drift to automatically handle new and removed columns.">
                                                        <span>
                                                            <SvgIcon Icon="LucideIcon.Info"/>
                                                        </span>
                                                </HxPopover>
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                @if (_table.SchemaDriftConfiguration is SchemaDriftEnabledConfiguration driftEnabled)
                                {
                                    <div class="row mt-3">
                                        <div class="col">
                                            <div class="form-check form-check-inline">
                                                <input type="checkbox" class="form-check-input" id="auto_include_new_columns"
                                                       checked=@(driftEnabled.IncludeNewColumns)
                                                       @onchange="() => driftEnabled.IncludeNewColumns = !driftEnabled.IncludeNewColumns">
                                                <label class="form-check-label fw-normal" for="auto_include_new_columns">
                                                    Auto-include new columns
                                                    &nbsp;
                                                    <HxPopover Trigger="PopoverTrigger.Hover"
                                                               Content="New columns that are not explicitly excluded will be automatically added from the source table/view into the target table as they appear.">
                                                        <span>
                                                            <SvgIcon Icon="LucideIcon.Info"/>
                                                        </span>
                                                    </HxPopover>
                                                </label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input type="checkbox" class="form-check-input" id="ignore_removed_columns"
                                                       checked=@(driftEnabled.IgnoreMissingColumns)
                                                       @onchange="() => driftEnabled.IgnoreMissingColumns = !driftEnabled.IgnoreMissingColumns">
                                                <label class="form-check-label fw-normal" for="ignore_removed_columns"> 
                                                    Silently ignore removed/missing columns
                                                    &nbsp;
                                                    <HxPopover Trigger="PopoverTrigger.Hover"
                                                               Content="NOTE: This setting should only ever be used for non-critical data. Missing columns should primarily be explicitly removed from SCD table column mappings to avoid accidental data loss.">
                                                        <span>
                                                            <SvgIcon Icon="LucideIcon.Info"/>
                                                        </span>
                                                    </HxPopover>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                }

                                <div class="row mt-3 justify-content-between">
                                    <div class="col-auto">
                                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                                  OnClick="async () => _columns = await LoadColumnsAsync()"
                                                  Spinner="_loadingColumns"
                                                  Enabled="!_loadingColumns">
                                            <SvgIcon Icon="LucideIcon.RefreshCw"/>
                                            Import columns
                                        </HxButton>
                                    </div>
                                    <div class="col-auto">
                                        @if (_columns?.Count > 0 && _prevConnectionId != _table.ConnectionId)
                                        {
                                            // Show alert to advise user to reimport columns after connection change.
                                            <HxAlert Color="ThemeColor.Warning" CssClass="mb-0 small py-1 d-flex align-items-center">
                                                <SvgIcon Icon="LucideIcon.CircleAlert" />
                                                &nbsp;
                                                Connection was changed –&nbsp;
                                                <span class="alert-link cursor-pointer text-decoration-underline"
                                                      @onclick="async () => _columns = await LoadColumnsAsync()">
                                                    reimport columns
                                                </span> 
                                            </HxAlert>
                                        }
                                    </div>
                                </div>
                                
                                @if (_columns is not null)
                                {
                                    var orphanedNaturalKeyColumns = _table.NaturalKeyColumns
                                        .Where(c1 => _columns.All(c2 => c1 != c2.ColumnName));
                                    if (orphanedNaturalKeyColumns.Any())
                                    {
                                        <div class="row mt-3">
                                            <div class="col">
                                                <table class="table table-sm small">
                                                    <thead>
                                                        <tr>
                                                            <th>
                                                                Orphaned natural key columns
                                                                &nbsp;
                                                                <HxPopover Trigger="PopoverTrigger.Hover" Content="Orphaned natural key columns will cause an error during execution. Clear the orphaned columns or make sure they exist in the source table/view and reimport columns.">
                                                                    <span class="text-danger">
                                                                        <SvgIcon Icon="LucideIcon.CircleAlert"/>
                                                                    </span>
                                                                </HxPopover>
                                                            </th>
                                                            <th>
                                                                <span class="cursor-pointer bold text-decoration-underline"
                                                                      @onclick="() => _table.NaturalKeyColumns.RemoveAll(c1 => _columns.All(c2 => c1 != c2.ColumnName))">
                                                                    Clear all
                                                                </span>
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var col in orphanedNaturalKeyColumns)
                                                        {
                                                            <tr>
                                                                <td>@col</td>
                                                                <td>
                                                                    <span class="cursor-pointer bold text-decoration-underline"
                                                                          @onclick="() => _table.NaturalKeyColumns.Remove(col)">
                                                                    Clear
                                                                </span>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    }

                                    @switch (_table.SchemaDriftConfiguration)
                                    {
                                        case SchemaDriftDisabledConfiguration disabled:
                                            var orphanedIncludedColumns = disabled.IncludedColumns
                                                .Where(c1 => _columns.All(c2 => c1 != c2.ColumnName));
                                            if (orphanedIncludedColumns.Any())
                                            {
                                                <div class="row mt-3">
                                                    <div class="col">
                                                        <table class="table table-sm small">
                                                            <thead>
                                                                <tr>
                                                                    <th>
                                                                        Orphaned included columns
                                                                        &nbsp;
                                                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Orphaned included columns will cause an error during execution. Clear the orphaned columns or make sure they exist in the source table/view and reimport columns.">
                                                                            <span class="text-danger">
                                                                                <SvgIcon Icon="LucideIcon.CircleAlert"/>
                                                                            </span>
                                                                        </HxPopover>
                                                                    </th>
                                                                    <th>
                                                                        <span class="cursor-pointer bold text-decoration-underline"
                                                                              @onclick="() => _disabledConfiguration.IncludedColumns.RemoveAll(c1 => _columns.All(c2 => c1 != c2.ColumnName))">
                                                                            Clear all
                                                                        </span>
                                                                    </th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @foreach (var col in orphanedIncludedColumns)
                                                                {
                                                                    <tr>
                                                                        <td>@col</td>
                                                                        <td>
                                                                            <span class="cursor-pointer bold text-decoration-underline"
                                                                                  @onclick="() => _disabledConfiguration.IncludedColumns.Remove(col)">
                                                                            Clear
                                                                        </span>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            }
                                            break;
                                        case SchemaDriftEnabledConfiguration enabled:
                                            var orphanedExcludedColumns = enabled.ExcludedColumns
                                                .Where(c1 => _columns.All(c2 => c1 != c2.ColumnName));
                                            if (orphanedExcludedColumns.Any())
                                            {
                                                <div class="row mt-3">
                                                    <div class="col">
                                                        <table class="table table-sm small">
                                                            <thead>
                                                                <tr>
                                                                    <th>
                                                                        Orphaned excluded columns
                                                                        &nbsp;
                                                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Orphaned excluded columns will have no effect during execution.">
                                                                            <SvgIcon Icon="LucideIcon.Info"/>
                                                                        </HxPopover>
                                                                    </th>
                                                                    <th>
                                                                        <span class="cursor-pointer bold text-decoration-underline"
                                                                              @onclick="() => _enabledConfiguration.ExcludedColumns.RemoveAll(c1 => _columns.All(c2 => c1 != c2.ColumnName))">
                                                                            Clear all
                                                                        </span>
                                                                    </th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @foreach (var col in orphanedExcludedColumns)
                                                                {
                                                                    <tr>
                                                                        <td>@col</td>
                                                                        <td>
                                                                            <span class="cursor-pointer bold text-decoration-underline"
                                                                                  @onclick="() => _enabledConfiguration.ExcludedColumns.Remove(col)">
                                                                                Clear
                                                                            </span>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            }
                                            break;
                                    }
                                }

                                <div class="row mt-3">
                                    <div class="col">
                                        <table class="table table-sm table-hover small">
                                            <thead>
                                            <tr>
                                                <th>
                                                    Column
                                                    &nbsp;
                                                    <HxPopover Trigger="PopoverTrigger.Hover"
                                                               Content="Column mapping between the source and target is done based on matching column names. If some column names need to be different between the source and target, use a view as the source and define the target table column names in the view definition.">
                                                        <span>
                                                            <SvgIcon Icon="LucideIcon.Info"/>
                                                        </span>
                                                    </HxPopover>
                                                </th>
                                                <th>Datatype</th>
                                                <th>Natural key</th>
                                                @switch (_table.SchemaDriftConfiguration)
                                                {
                                                    case SchemaDriftDisabledConfiguration disabled:
                                                        <th>
                                                            <div class="col d-flex align-items-center">
                                                                <TriStateCheckbox Checked="@(_columns?.Count > 0 && disabled.IncludedColumns.Count > 0)"
                                                                                  Indeterminate="@(disabled.IncludedColumns.Count > 0 && disabled.IncludedColumns.Count + _table.NaturalKeyColumns.Count < _columns?.Count)"
                                                                                  CheckedChanged="ToggleAllIncluded" />
                                                                Included
                                                            </div>
                                                        </th>
                                                        break;
                                                    case SchemaDriftEnabledConfiguration enabled:
                                                        <th>
                                                            <div class="col d-flex align-items-center">
                                                                <TriStateCheckbox Checked="@(_columns?.Count > 0 && enabled.ExcludedColumns.Count > 0)"
                                                                                  Indeterminate="@(enabled.ExcludedColumns.Count > 0 && enabled.ExcludedColumns.Count + _table.NaturalKeyColumns.Count < _columns?.Count)"
                                                                                  CheckedChanged="ToggleAllExcluded" />
                                                                Excluded
                                                            </div>
                                                        </th>
                                                        break;
                                                }
                                            </tr>
                                            </thead>
                                            <tbody>
                                            @{
                                                var columns = _columns
                                                    ?.OrderBy(c => !_table.NaturalKeyColumns.Contains(c.ColumnName))
                                                    .ThenBy(c => c.ColumnName)
                                                    .AsEnumerable() ?? [];
                                            }
                                            @if (_columns is null)
                                            {
                                                <tr>
                                                    <td colspan="4" class="text-center">
                                                        <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                                                    </td>
                                                </tr>
                                            }
                                            @foreach (var column in columns)
                                            {
                                                <tr>
                                                    <td>
                                                        @column.ColumnName
                                                    </td>
                                                    <td>
                                                        @column.DataType @(column.IsNullable ? "null" : "not null")
                                                    </td>
                                                    <td>
                                                        <div @key="@column.ColumnName" class="form-check form-check-inline">
                                                            <input type="checkbox" class="form-check-input"
                                                                   id="natural_key_@(column.ColumnName)"
                                                                   checked=@_table.NaturalKeyColumns.Contains(column.ColumnName)
                                                                   @onchange="_ => _table.ToggleNaturalKeyColumn(column.ColumnName)">
                                                            <label class="form-check-label"
                                                                   for="natural_key_@(column.ColumnName)"></label>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        @switch (_table.SchemaDriftConfiguration)
                                                        {
                                                            case SchemaDriftDisabledConfiguration disabled:
                                                                <div @key="@column.ColumnName"
                                                                     class="form-check form-check-inline">
                                                                    <input type="checkbox" class="form-check-input"
                                                                           id="included_@(column.ColumnName)"
                                                                           checked=@(disabled.IncludedColumns.Contains(column.ColumnName) || _table.NaturalKeyColumns.Contains(column.ColumnName))
                                                                           disabled=@_table.NaturalKeyColumns.Contains(column.ColumnName)
                                                                           @onchange="_ => disabled.ToggleIncludedColumn(column.ColumnName)">
                                                                    <label class="form-check-label"
                                                                           for="included_@(column.ColumnName)"></label>
                                                                </div>
                                                                break;
                                                            case SchemaDriftEnabledConfiguration enabled:
                                                                <div @key="@column.ColumnName"
                                                                     class="form-check form-check-inline">
                                                                    <input type="checkbox" class="form-check-input"
                                                                           id="excluded_@(column.ColumnName)"
                                                                           checked=@(enabled.ExcludedColumns.Contains(column.ColumnName) && !_table.NaturalKeyColumns.Contains(column.ColumnName))
                                                                           disabled=@_table.NaturalKeyColumns.Contains(column.ColumnName)
                                                                           @onchange="_ => enabled.ToggleExcludedColumn(column.ColumnName)">
                                                                    <label class="form-check-label"
                                                                           for="excluded_@(column.ColumnName)"></label>
                                                                </div>
                                                                break;
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            }
                                break;
                            case View.PreLoadScript:
                            {
                                <div class="row mt-1">
                                    <div class="col">
                                        <label class="form-label">
                                            Pre-load script
                                        </label>
                                        <CodeEditor @ref="_preLoadScriptEditor"
                                                    Language="sql"
                                                    MinimapEnabled="false"
                                                    InitialValueExpression="() => _table.PreLoadScript"
                                                    OnValueChanged="value => _table.PreLoadScript = value ?? string.Empty"
                                                    Resize="CodeEditor.CodeEditorResize.Both"/>
                                        <div class="form-text">
                                            <p>Blank = no pre-load script</p>
                                            <p>
                                                Define a SQL script to be included as the first step of the target table data load process.
                                                The script will be executed in the same transaction as the rest of the target data load.
                                                Errors running the pre-load script will roll back the entire target table data load transaction.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                                break;
                            case View.PostLoadScript:
                            {
                                <div class="row mt-1">
                                    <div class="col">
                                        <label class="form-label">
                                            Post-load script
                                        </label>
                                        <CodeEditor @ref="_postLoadScriptEditor"
                                                    Language="sql"
                                                    MinimapEnabled="false"
                                                    InitialValueExpression="() => _table.PostLoadScript"
                                                    OnValueChanged="value => _table.PostLoadScript = value ?? string.Empty"
                                                    Resize="CodeEditor.CodeEditorResize.Both"/>
                                        <div class="form-text">
                                            <p>
                                                Blank = no post-load script
                                            </p>
                                            <p>
                                                Define a SQL script to be included as the last step of the data load process.
                                                The script will be executed in the same transaction as the rest of the target table data load.
                                                Errors running the post-load script will roll back the entire target table data load transaction.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }

                        
                    </div>
                </div>
            </EditForm>

            <TableSelectOffcanvas @ref="_offcanvas" OnTableSelected="OnTableSelected"/>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="scd_table_edit_form" Color="ThemeColor.Success">@(_table?.ScdTableId == Guid.Empty ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>