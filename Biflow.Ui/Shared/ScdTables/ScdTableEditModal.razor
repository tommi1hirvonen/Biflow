@using Biflow.Core.Entities.Scd
@using Biflow.Ui.Core.Validation

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ScdTableValidator ScdTableValidator
@inject ToasterService Toaster

<HxModal @ref="_modal" Size="ModalSize.Large" Title="@(_table?.ScdTableId == Guid.Empty ? "New SCD table" : "Edit " + _table?.ScdTableName)" Scrollable="true">
    <BodyTemplate>
        @if (_table is null || Connections is null)
        {
            <div class="row my-4">
                <div class="col text-center">
                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Regular" />
                </div>
            </div>
        }
        else
        {
            <EditForm id="scd_table_edit_form" Model="_table" OnValidSubmit="SubmitAsync">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        <FluentValidationValidator Validator="ScdTableValidator"/>

                        <div class="row">
                            <div class="col">
                                <label class="form-label">SCD table name</label>
                                <div class="input-group">
                                    <InputText class="form-control form-control-sm" @bind-Value="_table.ScdTableName"></InputText>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Connection</label>
                                <div class="input-group input-group-sm">
                                    <InputSelect class="form-select form-select-sm" @bind-Value="_table.ConnectionId">
                                        @foreach (var connection in Connections ?? [])
                                        {
                                            <option value="@connection.ConnectionId">
                                                @connection.ConnectionName
                                            </option>
                                        }
                                    </InputSelect>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                              OnClick="ShowTablesOffcanvasAsync">
                                        <SvgIcon Icon="LucideIcon.Ellipsis"/>
                                        Select source table
                                    </HxButton>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Source table/view</label>
                                <div class="input-group input-group-sm">
                                    <InputText class="form-control form-control-sm" placeholder="Schema"
                                               @bind-Value="_table.SourceTableSchema"
                                               style="max-width: 15rem;"></InputText>
                                    <div class="input-group-text">
                                        .
                                    </div>
                                    <InputText class="form-control form-control-sm" placeholder="Table/view"
                                               @bind-Value="_table.SourceTableName"></InputText>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Target table</label>
                                <div class="input-group input-group-sm">
                                    <InputText class="form-control form-control-sm" placeholder="Schema"
                                               @bind-Value="_table.TargetTableSchema"
                                               style="max-width: 15rem;"></InputText>
                                    <div class="input-group-text">
                                        .
                                    </div>
                                    <InputText class="form-control form-control-sm" placeholder="Table"
                                               @bind-Value="_table.TargetTableName"></InputText>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Staging table</label>
                                <div class="input-group input-group-sm">
                                    <InputText class="form-control form-control-sm" placeholder="Schema"
                                               @bind-Value="_table.StagingTableSchema"
                                               style="max-width: 15rem;"></InputText>
                                    <div class="input-group-text">
                                        .
                                    </div>
                                    <InputText class="form-control form-control-sm" placeholder="Schema"
                                               @bind-Value="_table.StagingTableName"></InputText>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="full_load"
                                           checked=@(_table.FullLoad)
                                           @onchange="() => _table.FullLoad = !_table.FullLoad">
                                    <label class="form-check-label fw-normal" for="full_load">
                                        Full load
                                    </label>
                                </div>
                                @{
                                    var connection = Connections.FirstOrDefault(c => c.ConnectionId == _table.ConnectionId);
                                }
                                @if (connection?.ConnectionType != ConnectionType.Snowflake)
                                {
                                    // Hide index options on Snowflake since it doesn't have an effect.
                                    <div class="form-check form-check-inline">
                                        <input type="checkbox" class="form-check-input" id="apply_index_on_create"
                                               checked=@(_table.ApplyIndexesOnCreate)
                                               @onchange="() => _table.ApplyIndexesOnCreate = !_table.ApplyIndexesOnCreate">
                                        <label class="form-check-label fw-normal" for="apply_index_on_create">
                                            Create index on target table
                                        </label>
                                    </div>
                                }
                                <div class="form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="select_distinct"
                                           checked=@(_table.SelectDistinct)
                                           @onchange="() => _table.SelectDistinct = !_table.SelectDistinct">
                                    <label class="form-check-label fw-normal" for="select_distinct">
                                        Distinct select
                                    </label>
                                </div>
                            </div>
                        </div>

                        @* TODO: Pre-load script input *@
                        @* TODO: Post-load script input *@

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Schema drift</label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form-check form-check-inline">
                                    <input type="radio" class="form-check-input" id="radio_schema_drift_disabled"
                                           checked=@(_table.SchemaDriftConfiguration is SchemaDriftDisabledConfiguration)
                                           @onchange="() => _table.SchemaDriftConfiguration = _disabledConfiguration">
                                    <label class="form-check-label fw-normal" for="radio_schema_drift_disabled">
                                        Disabled
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input type="radio" class="form-check-input" id="radio_schema_drift_enabled"
                                           checked=@(_table.SchemaDriftConfiguration is SchemaDriftEnabledConfiguration)
                                           @onchange="() => _table.SchemaDriftConfiguration = _enabledConfiguration">
                                    <label class="form-check-label fw-normal" for="radio_schema_drift_enabled">
                                        Enabled
                                    </label>
                                </div>
                            </div>
                        </div>

                        @if (_table.SchemaDriftConfiguration is SchemaDriftEnabledConfiguration driftEnabled)
                        {
                            <div class="row mt-3">
                                <div class="col">
                                    <div class="form-check form-check-inline">
                                        <input type="checkbox" class="form-check-input" id="auto_include_new_columns"
                                               checked=@(driftEnabled.IncludeNewColumns)
                                               @onchange="() => driftEnabled.IncludeNewColumns = !driftEnabled.IncludeNewColumns">
                                        <label class="form-check-label fw-normal" for="auto_include_new_columns">
                                            Auto-include new columns
                                        </label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input type="checkbox" class="form-check-input" id="ignore_removed_columns"
                                               checked=@(driftEnabled.IgnoreMissingColumns)
                                               @onchange="() => driftEnabled.IgnoreMissingColumns = !driftEnabled.IgnoreMissingColumns">
                                        <label class="form-check-label fw-normal" for="ignore_removed_columns">
                                            Silently ignore removed/missing columns
                                        </label>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="row mt-3 justify-content-between">
                            <div class="col-auto">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                                          OnClick="async () => _columns = await LoadColumnsAsync()"
                                          Spinner="_loadingColumns"
                                          Enabled="!_loadingColumns">
                                    <SvgIcon Icon="LucideIcon.RefreshCw"/>
                                    Import columns
                                </HxButton>
                            </div>
                            <div class="col-auto">
                                @if (_columns is not null && _prevConnectionId != _table.ConnectionId)
                                {
                                    // Show alert to advise user to reimport columns after connection change.
                                    <HxAlert Color="ThemeColor.Warning" CssClass="mb-0 small py-1 d-flex align-items-center">
                                        <SvgIcon Icon="LucideIcon.CircleAlert" />
                                        &nbsp;
                                        Connection was changed –&nbsp;
                                        <span class="alert-link pointer text-decoration-underline"
                                              @onclick="async () => _columns = await LoadColumnsAsync()">
                                            reimport columns
                                        </span> 
                                    </HxAlert>
                                }
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <table class="table table-sm table-hover small">
                                    <thead>
                                    <tr>
                                        <th>Column</th>
                                        <th>Datatype</th>
                                        <th>Natural key</th>
                                        @switch (_table.SchemaDriftConfiguration)
                                        {
                                            case SchemaDriftDisabledConfiguration:
                                                <th>Included</th>
                                                break;
                                            case SchemaDriftEnabledConfiguration:
                                                <th>Excluded</th>
                                                break;
                                        }
                                    </tr>
                                    </thead>
                                    <tbody>
                                    @{
                                        var columns = _columns
                                            ?.OrderBy(c => !_table.NaturalKeyColumns.Contains(c.ColumnName))
                                            .ThenBy(c => c.ColumnName)
                                            .AsEnumerable() ?? [];
                                    }
                                    @* TODO: Show orphaned columns (exists in SCD table config but not in DB *@
                                    @if (_columns is null)
                                    {
                                        <tr>
                                            <td colspan="4" class="text-center">
                                                <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                                            </td>
                                        </tr>
                                    }
                                    @foreach (var column in columns)
                                    {
                                        <tr>
                                            <td>
                                                @column.ColumnName
                                            </td>
                                            <td>
                                                @column.DataType @(column.IsNullable ? "null" : "not null")
                                            </td>
                                            <td>
                                                <div @key="@column.ColumnName" class="form-check form-check-inline">
                                                    <input type="checkbox" class="form-check-input"
                                                           id="natural_key_@(column.ColumnName)"
                                                           checked=@_table.NaturalKeyColumns.Contains(column.ColumnName)
                                                           @onchange="_ => _table.ToggleNaturalKeyColumn(column.ColumnName)">
                                                    <label class="form-check-label"
                                                           for="natural_key_@(column.ColumnName)"></label>
                                                </div>
                                            </td>
                                            <td>
                                                @switch (_table.SchemaDriftConfiguration)
                                                {
                                                    case SchemaDriftDisabledConfiguration disabled:
                                                        <div @key="@column.ColumnName"
                                                             class="form-check form-check-inline">
                                                            <input type="checkbox" class="form-check-input"
                                                                   id="included_@(column.ColumnName)"
                                                                   checked=@(disabled.IncludedColumns.Contains(column.ColumnName) || _table.NaturalKeyColumns.Contains(column.ColumnName))
                                                                   disabled=@_table.NaturalKeyColumns.Contains(column.ColumnName)
                                                                   @onchange="_ => disabled.ToggleIncludedColumn(column.ColumnName)">
                                                            <label class="form-check-label"
                                                                   for="included_@(column.ColumnName)"></label>
                                                        </div>
                                                        break;
                                                    case SchemaDriftEnabledConfiguration enabled:
                                                        <div @key="@column.ColumnName"
                                                             class="form-check form-check-inline">
                                                            <input type="checkbox" class="form-check-input"
                                                                   id="excluded_@(column.ColumnName)"
                                                                   checked=@(enabled.ExcludedColumns.Contains(column.ColumnName) && !_table.NaturalKeyColumns.Contains(column.ColumnName))
                                                                   disabled=@_table.NaturalKeyColumns.Contains(column.ColumnName)
                                                                   @onchange="_ => enabled.ToggleExcludedColumn(column.ColumnName)">
                                                            <label class="form-check-label"
                                                                   for="excluded_@(column.ColumnName)"></label>
                                                        </div>
                                                        break;
                                                }
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>

            <TableSelectOffcanvas @ref="_offcanvas" OnTableSelected="OnTableSelected"/>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="scd_table_edit_form" Color="ThemeColor.Success">@(_table?.ScdTableId == Guid.Empty ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<ScdTable> OnTableSubmit { get; set; }
    
    [Parameter]
    public IEnumerable<ConnectionBase>? Connections { get; set; }
    
    private HxModal? _modal;
    private TableSelectOffcanvas? _offcanvas;
    private IEnumerable<FullColumnMetadata>? _columns;
    private bool _firstColumnImport = true;
    private bool _loadingColumns = false;
    private ScdTable? _table;
    private Guid _prevConnectionId;
    // Cache the configurations to fields.
    // This way settings aren't lost if the user changes the table's configuration.
    private SchemaDriftDisabledConfiguration _disabledConfiguration = new();
    private SchemaDriftEnabledConfiguration _enabledConfiguration = new();
    
    public async Task ShowAsync(Guid? scdTableId)
    {
        _table = null;
        _columns = null;
        _prevConnectionId = Guid.Empty;
        _firstColumnImport = true;
        _disabledConfiguration = new();
        _enabledConfiguration = new();
        await _modal.LetAsync(x => x.ShowAsync());
        if (scdTableId is { } id)
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            _table = await context.ScdTables
                .AsNoTrackingWithIdentityResolution()
                .Include(t => t.Connection)
                .FirstAsync(t => t.ScdTableId == id);
            _prevConnectionId = _table.ConnectionId;
            StateHasChanged();
            switch (_table.SchemaDriftConfiguration)
            {
                case SchemaDriftDisabledConfiguration disabled:
                    _disabledConfiguration = disabled;
                    _columns = await LoadColumnsAsync();
                    var excludedColumns = _columns
                        .Select(c => c.ColumnName)
                        .Where(c1 => disabled.IncludedColumns.Concat(_table.NaturalKeyColumns).All(c2 => c1 != c2))
                        .Order();
                    _enabledConfiguration.ExcludedColumns.AddRange(excludedColumns);
                    break;
                case SchemaDriftEnabledConfiguration enabled:
                    _enabledConfiguration = enabled;
                    _columns = await LoadColumnsAsync();
                    var includedColumns = _columns
                        .Select(c => c.ColumnName)
                        .Where(c1 => enabled.ExcludedColumns.All(c2 => c1 != c2))
                        .Order(); 
                    _disabledConfiguration.IncludedColumns.AddRange(includedColumns);
                    break;
            }
        }
        else
        {
            _columns = [];
            ArgumentNullException.ThrowIfNull(Connections);
            var connection = Connections.FirstOrDefault();
            ArgumentNullException.ThrowIfNull(connection);
            _prevConnectionId = connection.ConnectionId;
            _table = new()
            {
                ConnectionId = connection.ConnectionId,
                SchemaDriftConfiguration = _disabledConfiguration
            };
        }
    }

    private async Task ShowTablesOffcanvasAsync()
    {
        ArgumentNullException.ThrowIfNull(_table);
        ArgumentNullException.ThrowIfNull(Connections);
        var connection = Connections.FirstOrDefault(c => c.ConnectionId == _table.ConnectionId);
        ArgumentNullException.ThrowIfNull(connection);
        await _offcanvas.LetAsync(x => x.ShowAsync(connection));
    }
    
    private async Task OnTableSelected(DbObject table)
    {
        ArgumentNullException.ThrowIfNull(_table);
        if (_table.SourceTableSchema != table.Schema || _table.SourceTableName != table.Object)
        {
            // Table was changed. Reset _firstColumnImport.
            _firstColumnImport = true;
        }
        (_table.SourceTableSchema, _table.SourceTableName) = (table.Schema, table.Object);
        if (string.IsNullOrEmpty(_table.TargetTableSchema) && string.IsNullOrEmpty(_table.TargetTableName))
        {
            // TODO: Handle target table name conventions dynamically based on preferences set on the connection.
            _table.TargetTableSchema = _table.SourceTableSchema;
            _table.TargetTableName = $"{_table.SourceTableName}_SCD";
        }
        if (string.IsNullOrEmpty(_table.StagingTableSchema) && string.IsNullOrEmpty(_table.StagingTableName))
        {
            // TODO: Handle staging table name conventions dynamically based on preferences set on the connection.
            _table.StagingTableSchema = _table.SourceTableSchema;
            _table.StagingTableName = $"{_table.SourceTableName}_SCD_DELTA";
        }
        _columns = await LoadColumnsAsync();
    }

    private async Task<IEnumerable<FullColumnMetadata>> LoadColumnsAsync()
    {
        try
        {
            _loadingColumns = true;
            ArgumentNullException.ThrowIfNull(_table);
            ArgumentNullException.ThrowIfNull(Connections);
            var connection = Connections.FirstOrDefault(c => c.ConnectionId == _table.ConnectionId);
            ArgumentNullException.ThrowIfNull(connection);
            var columnProvider = connection.CreateColumnMetadataProvider();
            var columns = await columnProvider.GetColumnsAsync(
                _table.SourceTableSchema,
                _table.SourceTableName);
            _table.NaturalKeyColumns.RemoveAll(c1 => columns.All(c2 => c1 != c2.ColumnName));
            if (_table.ScdTableId == Guid.Empty && _firstColumnImport)
            {
                // New table and columns are being imported for the first time.
                _disabledConfiguration.IncludedColumns.Clear();
                _disabledConfiguration.IncludedColumns.AddRange(columns.Select(c => c.ColumnName).Order());
            }
            else
            {
                // Use may have made changes.
                // Do not clear included columns but instead remove any unmatched columns.
                _disabledConfiguration.IncludedColumns.RemoveAll(c1 => columns.All(c2 => c1 != c2.ColumnName));
            }

            _enabledConfiguration.ExcludedColumns.RemoveAll(c1 => columns.All(c2 => c1 != c2.ColumnName));
            _firstColumnImport = false;
            _prevConnectionId = connection.ConnectionId;
            return columns;
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error importing columns", ex.Message);
            return [];
        }
        finally
        {
            _loadingColumns = false;
        }
    }
    
    private async Task SubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(_table);
        _table.NaturalKeyColumns.Sort();
        _disabledConfiguration.IncludedColumns.RemoveAll(c => _table.NaturalKeyColumns.Contains(c));
        _disabledConfiguration.IncludedColumns.Sort();
        _enabledConfiguration.ExcludedColumns.RemoveAll(c => _table.NaturalKeyColumns.Contains(c));
        _enabledConfiguration.ExcludedColumns.Sort();
        await OnTableSubmit.InvokeAsync(_table);
        await _modal.LetAsync(x => x.HideAsync());
    }
}