$primary: #6a71de;
$success: #0cb081;
$danger: #e85875;
$warning: #dfa100;

$btn-padding-y: .3rem;
$btn-border-radius: .5rem;
$btn-border-radius-sm: .4rem;
$btn-font-weight: 500;

@import "../lib/bootstrap/scss/bootstrap";

$body-bg-dark-custom: shade-color($dark, 15%);

$highlight-bg-dark: #574203;
$highlight-text-dark: #dee2e6;

$navbar-gradient: #8F75DA;

// Custom fonts
@import "custom-fonts.scss";

// Utilities
.pointer {
    cursor: pointer;
}

// Device size aware borders
@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        .border#{$infix}-top {
            border-top: $border-width solid $border-color !important;
        }

        .border#{$infix}-end {
            border-right: $border-width solid $border-color !important;
        }

        .border#{$infix}-bottom {
            border-bottom: $border-width solid $border-color !important;
        }

        .border#{$infix}-start {
            border-left: $border-width solid $border-color !important;
        }

        .border#{$infix}-top-0 {
            border-top: 0 !important;
        }

        .border#{$infix}-end-0 {
            border-right: 0 !important;
        }

        .border#{$infix}-bottom-0 {
            border-bottom: 0 !important;
        }

        .border#{$infix}-start-0 {
            border-left: 0 !important;
        }

        .border#{$infix}-x {
            border-left: $border-width solid $border-color !important;
            border-right: $border-width solid $border-color !important;
        }

        .border#{$infix}-y {
            border-top: $border-width solid $border-color !important;
            border-bottom: $border-width solid $border-color !important;
        }
    }
}

.hover-underline:hover {
    text-decoration: underline;
}

// Change the light theme body background to be slightly darker than the default.
[data-bs-theme="light"], [data-bs-theme="auto"] {
    .bg-body {
        background-color: $light !important;
    }
}

// Change the dark theme body background to be slightly darker than the default
[data-bs-theme="dark"] {
    .bg-body {
        background-color: $body-bg-dark-custom !important;
    }
}

// Sticky top element in StepsComponent.
[data-bs-theme="light"], [data-bs-theme="auto"] {
    --sticky-top-bg: #{rgba($light, $alpha: 0.9)};
}

[data-bs-theme="dark"] {
    --sticky-top-bg: #{rgba($body-bg-dark-custom, $alpha: 0.9)};
}

// Sticky top element inside a modal.
[data-bs-theme="light"], [data-bs-theme="auto"] {
    --sticky-top-modal-bg: #{rgba($white, $alpha: 0.9)};
}

[data-bs-theme="dark"] {
    --sticky-top-modal-bg: #{rgba($body-bg-dark, $alpha: 0.9)};
}

// Generate button, which automatically switches between light and dark depending on current theme.
[data-bs-theme="dark"] {
    .btn-auto {
        @include button-variant(
            rgba(0, 0, 0, 0),
            tint-color($dark, 25%),
            $hover-background: shade-color($dark, 35%),
            $active-background: shade-color($dark, 40%)
        );
    }

    .btn-step {
        @include button-variant(
            rgba(0, 0, 0, 0),
            tint-color($dark, 25%),
            $hover-background: shade-color($dark, 35%),
            $active-background: $primary,
            $active-color: $white
        );
    }
}

[data-bs-theme="light"], [data-bs-theme="auto"] {
    .btn-auto {
        @include button-variant(
            rgba(255, 255, 255, 0),
            shade-color($light, 25%),
            $hover-background: shade-color($light, $btn-hover-bg-shade-amount),
            $active-background: shade-color($light, $btn-active-bg-shade-amount)
        );
    }

    .btn-step {
        @include button-variant(
            rgba(255, 255, 255, 0),
            shade-color($light, 25%),
            $hover-background: shade-color($light, $btn-hover-bg-shade-amount),
            $active-background: $primary,
            $active-color: $white
        );
    }
}

// Offcanvas customizations. Increase width from the default.
.offcanvas {
    width: 600px !important;
}

.offcanvas.hx-offcanvas-sm {
    width: 450px !important;
}

.offcanvas.hx-offcanvas-lg {
    width: 800px !important;
}

.offcanvas-backdrop {
    z-index: 1050;
}

// In front of the navbar
.offcanvas {
    z-index: 1060;
}

// Dropdowns

.dropdown-menu {
    box-shadow: $box-shadow-sm;
}

// Alert
[data-bs-theme="light"], [data-bs-theme="auto"] {
    .alert-secondary {
        background-color: $gray-200;
        border-color: $gray-500;
        color: $gray-700;
    }
}

// Highlighted text
[data-bs-theme="dark"] {
    mark {
        color: $highlight-text-dark;
        background-color: $highlight-bg-dark;
    }
}

// Buttons
.btn-primary, .btn-success, .btn-danger {
    --bs-btn-color: var(--bs-white);
    --bs-btn-hover-color: var(--bs-white);
    --bs-btn-active-color: var(--bs-btn-hover-color);
    --bs-btn-disabled-color: var(--bs-white);
}

tr .btn-auto, .list-group-item .btn-auto {
    border-width: 0;
}

// Nav links
.nav.nav-tabs .nav-item .nav-link {
    border-radius: 0;
    border: none;
}

.nav.nav-tabs .nav-item .nav-link.active {
    font-weight: 500;
    background-color: transparent;
    border-bottom: 4px solid $primary;
}

// Table
.table th {
    border-top: none;
}

tr.context-menu-toggle.open {
    background-color: $table-hover-bg;
}

// No-wrap buttons of btn-group in a table
.table .btn-group {
    white-space: nowrap;
}

.table .btn-group .btn {
    display: inline-block;
    float: none;
}

.table-hover > tbody > tr.no-hover:hover {
    --bs-table-hover-bg: none;
}

.table tr.table-row-highlight {
    background-color: var(--bs-highlight-bg);
}

@include color-mode(dark) {
    .table tr.table-row-highlight {
        background-color: $highlight-bg-dark;
    }
}

// Custom list group header class with a slightly darker background.
[data-bs-theme="dark"] {
    .list-group-header {
        background-color: tint-color($body-color, 4%);
    }
}

[data-bs-theme="light"], [data-bs-theme="auto"] {
    .list-group-header {
        background-color: tint-color($body-color, 95%);
    }
}

.list-group-item.context-menu-toggle.open {
    background-color: $list-group-hover-bg;
}


// Forms and inputs

form {
    gap: 1rem;
}

.validation-message {
    color: $danger;
}

.invalid {
    outline: 1px solid $danger;
}

.form-switch input,
.form-switch label {
    cursor: pointer;
}

.form-switch input:disabled,
.form-switch input:disabled + label {
    cursor: default;
}

.form-label, .form-check-label {
    font-weight: 500;
}

// Execution Gantt graph

$statuses: (
    "running": $primary,
    "succeeded": $success,
    "failed": $danger,
    "skipped": $secondary,
    "duplicate": $warning,
    "stopped": $warning,
    "retry": $warning,
    "dependenciesfailed": $warning,
    "warning": $warning,
    "suspended": $danger
);

@each $status, $color in $statuses {
    .progress.#{$status} .progress-bar {
        background-color: $color;
    }

    .progress.#{$status}.hover:hover .progress-bar {
        background-color: tint-color($color, 20%);
    }

    .progress.#{$status}.active {
        box-shadow: tint-color($color, 20%) 0px 0px 5px 1px;

        .progress-bar {
            background-color: tint-color($color, 20%);
        }
    }
}

[data-bs-theme="dark"] {
    .gantt-row:hover {
        background-color: rgba(0, 0, 0, 0.2);
    }
}

[data-bs-theme="light"], [data-bs-theme="auto"] {
    .gantt-row:hover {
        background-color: rgba(0, 0, 0, 0.075);
    }
}


// Dependency graph
.dependency-graph {
    width: 100%;
    height: 100%;
}

.dependency-graph svg {
    width: 100%;
    height: 100%;
    cursor: move;
}

.dependency-graph .node.internal {
    cursor: pointer;
}

.dependency-graph .node.external {
    cursor: pointer;
}

.dependency-graph .node rect {
    stroke-width: 2px;
    stroke: var(--bs-body-color);
    fill: var(--bs-body-bg);
}

.dependency-graph .node > g.label {
    fill: var(--bs-body-color);
}

.dependency-graph .node.disabled rect {
    fill: var(--bs-tertiary-bg);
    stroke: var(--bs-secondary);
}

.dependency-graph .node.external rect {
    stroke-dasharray: 5;
}

.dependency-graph .node.disabled > g.label {
    fill: var(--bs-secondary);
}

$map-secondary: (
    stroke: $secondary-border-subtle,
    stroke-dark: $secondary-border-subtle-dark,
    background: $secondary-bg-subtle,
    background-dark: $secondary-bg-subtle-dark,    
    text: $secondary-text-emphasis,
    text-dark: $secondary-text-emphasis-dark
);
$map-primary: (
    stroke: $primary-border-subtle,
    stroke-dark: $primary-border-subtle-dark,
    background: $primary-bg-subtle,
    background-dark: $primary-bg-subtle-dark,    
    text: $primary-text-emphasis,
    text-dark: $primary-text-emphasis-dark
);
$map-success: (
    stroke: $success-border-subtle,
    stroke-dark: $success-border-subtle-dark,
    background: $success-bg-subtle,
    background-dark: $success-bg-subtle-dark,
    text: $success-text-emphasis,
    text-dark: $success-text-emphasis-dark
);
$map-warning: (
    stroke: $warning-border-subtle,
    stroke-dark: $warning-border-subtle-dark,
    background: $warning-bg-subtle,
    background-dark: $warning-bg-subtle-dark,    
    text: $warning-text-emphasis,
    text-dark: $warning-text-emphasis-dark
);
$map-danger: (
    stroke: $danger-border-subtle,
    stroke-dark: $danger-border-subtle-dark,
    background: $danger-bg-subtle,
    background-dark: $danger-bg-subtle-dark,    
    text: $danger-text-emphasis,
    text-dark: $danger-text-emphasis-dark
);

$dep-statuses: (
    "notstarted": $map-secondary,
    "queued": $map-secondary,
    "running": $map-primary,
    "succeeded": $map-success,
    "warning": $map-warning,
    "failed": $map-danger,
    "retry": $map-warning,
    "stopped": $map-warning,
    "skipped": $map-secondary,
    "dependenciesfailed": $map-warning,
    "awaitingretry": $map-secondary,
    "duplicate": $map-warning,
    "selected": $map-primary // also add artificial status for selected item (used in job details lineage view)
);

@each $status, $map in $dep-statuses {
    $stroke: map-get($map, stroke);
    $stroke-dark: map-get($map, stroke-dark);
    $background: map-get($map, background);
    $background-dark: map-get($map, background-dark);
    $text: map-get($map, text);
    $text-dark: map-get($map, text-dark);

    .dependency-graph .node.#{$status} rect {
        stroke: $stroke;
        fill: $background;
        stroke-width: 3px;
    }
    .dependency-graph .node.#{$status} > g.label {
        fill: $text;
    }

    @include color-mode(dark) {
        .dependency-graph .node.#{$status} rect {
            stroke: $stroke-dark;
            fill: $background-dark;
        }
        .dependency-graph .node.#{$status} > g.label {
            fill: $text-dark;
        }
    }
}


.dependency-graph .name {
    margin-top: 4px;
}

.dependency-graph .edgePath path {
    stroke: #888;
    stroke-width: 2px;
    fill: #888;
}

.dependency-graph .edgePath.onsucceeded path {
    stroke: $success;
    fill: $success;
}

.dependency-graph .edgePath.oncompleted path {
    stroke: $primary;
    fill: $primary;
}

.dependency-graph .edgePath.onfailed path {
    stroke: $danger;
    fill: $danger;
}


// Feather icons
.feather {
    width: 16px;
    height: 16px;
}

.feather-sm .feather {
    width: 14px;
    height: 14px;
}

.tag-remove .feather {
    width: 14px;
    height: 14px;
}

.tag-remove:hover {
    cursor: pointer;
}

// Lucide icons
.lucide {
    width: 16px;
    height: 16px;
}

.btn {
    .feather, .lucide {
        margin-top: 2.5px;
        margin-bottom: 1.75px;
        margin-left: 1px;
        margin-right: 1px;
        vertical-align: text-bottom;
    }
}

$sidebar-width: 200;
$sidebar-width-px: $sidebar-width * 1px;
$main-padding: 15;
$main-padding-px: $main-padding * 1px;
$main-padding-left-px: ($sidebar-width + $main-padding) * 1px;

// Sidebar
.sidebar {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    width: $sidebar-width-px;
    z-index: 100; /* Behind the navbar */
    padding: 55px 0 0; /* Height of navbar */
    background-color: var(--bs-body-bg);
    box-shadow: 0 .5rem 1rem rgba(0,0,0,.15);
}

// Empty space between top bar and navigation menu with smaller screens (in case there are buttons on the top bar)
@media (max-width: 992px) {
    .sidebar {
        padding: 135px 0 0;
    }
}

@media (min-width: 992px) {
    .main {
        padding-right: $main-padding-px !important;
        padding-left: $main-padding-left-px !important; // (sidebar width) + (padding right)
    }
}


.sidebar-sticky {
    position: relative;
    top: 0;
    height: calc(100vh - 48px);
    /*padding-top: .5rem;*/
    overflow-x: hidden;
    overflow-y: auto; // Scrollable contents if viewport is shorter than content.
}

@supports ((position: -webkit-sticky) or (position: sticky)) {
    .sidebar-sticky {
        position: -webkit-sticky;
        position: sticky;
    }
}

.sidebar .nav-link {
    font-size: 15px;
    color: var(--bs-body-color);
    padding-left: 15px;
    padding-right: 10px;
    padding-top: 8px;
    padding-bottom: 8px;
}

.sidebar .nav-link svg {
    margin-right: 5px;
    color: var(--bs-secondary-color);
}

.sidebar .nav-link.active {
    font-weight: 500;
}

.sidebar .nav-link.active svg,
.sidebar .nav-link:hover svg {
    color: var(--bs-emphasis-color);
}

.sidebar .nav-link.active, .sidebar .nav-link:hover {
    background-color: var(--bs-secondary-bg);
    color: var(--bs-emphasis-color);
}

.sidebar .nav-link.active {
    border-left: 5px solid $primary;
    padding-left: 10px;
}

.sidebar-heading {
    font-size: .75rem;
    text-transform: uppercase;
}


// Navbar

.bg-gradient-primary {
    background-image: linear-gradient(90deg, $primary 0%, $navbar-gradient 100%);
}

.navbar-custom {
    /*background-color: #313A46;*/
    z-index: 1050;
}

// Change the brand and text color
.navbar-custom .navbar-brand,
.navbar-custom .navbar-nav {
    color: #fff;
}

.navbar-custom .navbar-text {
    color: #eee;
}

.navbar-brand {
    font-family: Poppins;
    width: 100%;
}

@media (min-width: 992px) {
    .navbar-brand {
        width: $sidebar-width-px;
    }

    // Never collapse the sidebar for wide screens
    .sidebar.collapse {
        display: block;
    }
}

.navbar-brand-bg {
    background-color: rgba(0, 0, 0, .2);
    box-shadow: inset -1px 0 0 rgba(0, 0, 0, .2);
}

.navbar .navbar-toggler {
    top: .25rem;
    right: 1rem;
}

// Blazor error component
#blazor-error-ui {
    bottom: 0;
    display: none;
    left: 0;
    position: fixed;
    width: 96vw;
    z-index: 1050;
    margin-bottom: 2rem;
    margin-left: 2vw;
    margin-right: 2vw;
}