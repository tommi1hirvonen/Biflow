@page "/datatables/{Page?}/{TableId:guid?}"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Data tables | Biflow</PageTitle>

@switch (Page)
{
    case null:
        <DataTablesList Tables="_tables" Categories="_categories" ConnectionsExist="_connectionsExist" />
        break;
    case "edit":
        <DataTableEditor TableId="TableId" />
        break;
    case "import":
        <DataTableImport TableId="TableId" />
        break;
    default:
        <p>Sorry, nothing at this address.</p>
        break;
}

@code {
    [Parameter] public string? Page { get; set; }

    [Parameter] public Guid TableId { get; set; }

    private List<MasterDataTable>? _tables;
    private List<MasterDataTableCategory>? _categories;
    private bool _connectionsExist;

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _tables = await context.MasterDataTables
            .AsNoTrackingWithIdentityResolution()
            .Include(t => t.Category)
            .Include(t => t.Lookups)
            .OrderBy(t => t.DataTableName)
            .ToListAsync();

        // For admins and editors, show all available table categories.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.IsInRole(Roles.Admin) || authState.User.IsInRole(Roles.Editor))
        {
            _categories = await context.MasterDataTableCategories
                .AsNoTrackingWithIdentityResolution()
                .OrderBy(c => c.CategoryName)
                .ToListAsync();
        }
        // For other users, only show categories for jobs they are authorized to see.
        else
        {
            _categories = _tables
                .Select(j => j.Category)
                .Where(c => c is not null)
                .Cast<MasterDataTableCategory>()
                .DistinctBy(c => c.CategoryId)
                .ToList();
        }
        
        _connectionsExist = await context.MsSqlConnections.AnyAsync();
    }
}
