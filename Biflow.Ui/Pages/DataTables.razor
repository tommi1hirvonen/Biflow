@page "/datatables/{Page?}/{TableId:guid?}"

@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Data Tables | Biflow</PageTitle>



@if (Page is null)
{
    <DataTablesListComponent Tables="Tables" Categories="Categories" Connections="Connections" />
}
else if (Page == "edit")
{
    <DataTableEditorComponent Table="Table" />
}
else if (Page == "import")
{
    <DataTableImportComponent TableId="TableId" />
}
else
{
    <p>Sorry, nothing at this address.</p>
}

@code {
    [Parameter] public string? Page { get; set; }

    [Parameter] public Guid? TableId { get; set; }

    private MasterDataTable? Table { get; set; }

    private List<MasterDataTable>? Tables { get; set; }

    private List<SqlConnectionInfo>? Connections { get; set; }

    private List<MasterDataTableCategory>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run(DbContextFactory.CreateDbContext);
        Tables = await context.MasterDataTables
            .AsNoTrackingWithIdentityResolution()
            .Include(t => t.Category)
            .Include(t => t.Connection)
            .Include(t => t.Lookups)
            .OrderBy(t => t.DataTableName)
            .ToListAsync();

        var lookupTableIds = Tables
            .SelectMany(t => t.Lookups)
            .Select(l => l.LookupTableId)
            .Distinct()
            .ToList();

        // Instead of including lookup tables in the main query, fetch them here with IgnoreQueryFilters().
        // This way we can ensure that all lookups are included even if the user has no authorization on all data tables.
        var lookupTables = await context.MasterDataTables
            .AsNoTrackingWithIdentityResolution()
            .IgnoreQueryFilters()
            .Include(t => t.Connection)
            .Where(t => lookupTableIds.Contains(t.DataTableId))
            .ToListAsync();

        // Map lookup tables to the main tables list.
        foreach (var table in Tables)
        {
            foreach (var lookup in table.Lookups)
            {
                var lt = lookupTables.FirstOrDefault(t => t.DataTableId == lookup.LookupTableId);
                if (lt is not null)
                {
                    lookup.LookupTable = lt;
                }
            }
        }

        // For admins and editors, show all available table categories.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.IsInRole("Admin") || authState.User.IsInRole("Editor"))
        {
            Categories = await context.MasterDataTableCategories
                .AsNoTrackingWithIdentityResolution()
                .OrderBy(c => c.CategoryName)
                .ToListAsync();
        }
        // For other users, only show categories for jobs they are authorized to see.
        else
        {
            Categories = Tables
                .Select(j => j.Category)
                .Where(c => c is not null)
                .Cast<MasterDataTableCategory>()
                .DistinctBy(c => c.CategoryId)
                .ToList();
        }
        Connections = await context.SqlConnections
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(c => c.ConnectionName)
            .ToListAsync();
    }

    protected override void OnParametersSet()
    {
        Table = Tables?.FirstOrDefault(t => t.DataTableId == TableId);
    }
}
