@page "/datatables/{Page?}"

@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject MarkupHelperService MarkupHelper

<PageTitle>Data Tables | Biflow</PageTitle>

<h4>Data Tables</h4>

<AuthorizeView Roles="Admin, Editor">
    <ul class="nav nav-pills mt-3 mb-4" role="tablist">
        <li class="nav-item" role="presentation">
            <NavLink class="nav-link" href="datatables" Match="NavLinkMatch.All">
                @MarkupHelper.FromFile("icons/feather/table.svg")
                Edit data
            </NavLink>
        </li>
        <li class="nav-item" role="presentation">
            <NavLink class="nav-link" href="datatables/manage">
                @MarkupHelper.FromFile("icons/feather/settings.svg")
                Manage tables
            </NavLink>
        </li>
    </ul>
</AuthorizeView>

@if (Page is null)
{
    <DataTableEditComponent Tables="Tables" />
}
else if (Page == "manage")
{
    <AuthorizeView Roles="Admin, Editor">
        <DataTablesManageComponent Tables="Tables" Connections="Connections" />
    </AuthorizeView>
}
else
{
    <p>Sorry, nothing at this address.</p>
}

@code {
    [Parameter] public string? Page { get; set; }

    private List<DataTable>? Tables { get; set; }

    private List<SqlConnectionInfo>? Connections { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<BiflowContext>(DbContextFactory.CreateDbContext);
        Tables = await context.DataTables
            .Include(t => t.Connection)
            .OrderBy(t => t.DataTableName)
            .ToListAsync();
        Connections = await context.SqlConnections
            .OrderBy(c => c.ConnectionName)
            .ToListAsync();
    }
}
