@page "/datatables/{Page?}/{TableId:guid?}"

@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject MarkupHelperService MarkupHelper

<PageTitle>Data Tables | Biflow</PageTitle>



@if (Page is null)
{
    <DataTablesListComponent Tables="Tables" Categories="Categories" Connections="Connections" />
}
else if (Page == "edit")
{
    <DataTableEditorComponent Table="Table" />
}
else if (Page == "import")
{
    <DataTableImportComponent TableId="TableId" />
}
else
{
    <p>Sorry, nothing at this address.</p>
}

@code {
    [Parameter] public string? Page { get; set; }

    [Parameter] public Guid? TableId { get; set; }

    private MasterDataTable? Table { get; set; }

    private List<MasterDataTable>? Tables { get; set; }

    private List<SqlConnectionInfo>? Connections { get; set; }

    private List<MasterDataTableCategory>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<BiflowContext>(DbContextFactory.CreateDbContext);
        Tables = await context.MasterDataTables
            .AsNoTrackingWithIdentityResolution()
            .Include(t => t.Category)
            .Include(t => t.Connection)
            .Include(t => t.Lookups)
            .ThenInclude(t => t.LookupTable)
            .OrderBy(t => t.DataTableName)
            .ToListAsync();
        Categories = await context.MasterDataTableCategories
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(c => c.CategoryName)
            .ToListAsync();
        Connections = await context.SqlConnections
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(c => c.ConnectionName)
            .ToListAsync();
    }

    protected override void OnParametersSet()
    {
        Table = Tables?.FirstOrDefault(t => t.DataTableId == TableId);
    }
}
