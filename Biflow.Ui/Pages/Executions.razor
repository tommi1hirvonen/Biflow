@page "/executions"

@implements IAsyncDisposable

@inject IDbContextFactory<BiflowContext> DbContextFactory
@inject MarkupHelperService MarkupHelper
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS
@inject IHxMessengerService Messenger

<PageTitle>Executions | Biflow</PageTitle>

<h4>Executions</h4>

@if (!SessionStorageRetrieved) return;

<div class="row mt-3">
    <div class="col">
        <HxButtonToolbar>
            <HxButtonGroup Size="ButtonGroupSize.Small">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => ShowSteps = false"
                CssClass="@(!ShowSteps ? "active" : null)">
                    @MarkupHelper.FromFile("icons/feather/loader.svg")
                    Jobs
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => ShowSteps = true"
                CssClass="@(ShowSteps ? "active" : null)">
                    @MarkupHelper.FromFile("icons/feather/list.svg")
                    Steps
                </HxButton>
            </HxButtonGroup>
            <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="ms-3">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => ShowGraph = false"
                CssClass="@(!ShowGraph ? "active" : null)">
                    @MarkupHelper.FromFile("icons/feather/table.svg")
                    Table
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => ShowGraph = true"
                CssClass="@(ShowGraph ? "active" : null)">
                    @MarkupHelper.FromFile("icons/feather/gantt.svg")
                    Graph
                </HxButton>
            </HxButtonGroup>
            <HxDropdownButtonGroup CssClass="ms-3">
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Secondary">
                    @MarkupHelper.FromFile("icons/feather/bookmark.svg")
                    Presets
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    <HxDropdownHeader>Last</HxDropdownHeader>
                    <HxDropdownItem @onclick="() => SelectPresetLast(1)">1 h</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(3)">3 h</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(12)">12 h</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(24)">24 h</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(72)">3 d</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(168)">7 d</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(336)">14 d</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(720)">30 d</HxDropdownItem>
                    <HxDropdownDivider></HxDropdownDivider>
                    @{
                        var today = DateTime.Now.Date;
                        var endToday = today.AddDays(1).AddTicks(-1);
                        var startThisWeek = today.StartOfWeek(DayOfWeek.Monday);
                        var endThisWeek = startThisWeek.AddDays(7).AddTicks(-1);
                        var startThisMonth = new DateTime(today.Year, today.Month, 1);
                        var endThisMonth = startThisMonth.AddMonths(1).AddTicks(-1);
                        var yesterday = today.AddDays(-1);
                        var endYesterday = today.AddTicks(-1);
                        var startPrevWeek = today.AddDays(-7).StartOfWeek(DayOfWeek.Monday);
                        var endPrevWeek = startPrevWeek.AddDays(7).AddTicks(-1);
                        var prevMonth = today.AddMonths(-1);
                        var startPrevMonth = new DateTime(prevMonth.Year, prevMonth.Month, 1);
                        var endPrevMonth = startPrevMonth.AddMonths(1).AddTicks(-1);
                    }
                    <HxDropdownHeader>This</HxDropdownHeader>
                    <HxDropdownItem @onclick="() => SelectPreset(today, endToday)">Day</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPreset(startThisWeek, endThisWeek)">Week</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPreset(startThisMonth, endThisMonth)">Month</HxDropdownItem>
                    <HxDropdownDivider></HxDropdownDivider>
                    <HxDropdownHeader>Previous</HxDropdownHeader>
                    <HxDropdownItem @onclick="() => SelectPreset(yesterday, endYesterday)">Day</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPreset(startPrevWeek, endPrevWeek)">Week</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPreset(startPrevMonth, endPrevMonth)">Month</HxDropdownItem>
                </HxDropdownMenu>
            </HxDropdownButtonGroup>

            <HxSubmit FormId="executions_form" Size="ButtonSize.Small" Color="ThemeColor.Primary" Spinner="Loading" Enabled="!Loading" CssClass="ms-3">
                @MarkupHelper.FromFile("icons/feather/refresh-cw.svg")
                Refresh
            </HxSubmit>
        </HxButtonToolbar>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <form class="d-inline-flex align-items-center" id="executions_form" @onsubmit="LoadData">
            <label class="me-3">From</label>
            <div class="input-group">
                <div class="input-group-text">
                    @MarkupHelper.FromFile("icons/feather/calendar.svg")
                </div>
                <input @bind="FromDateTime" @bind:format="yyyy-MM-ddTHH:mm:ss" class="form-control form-control-sm" type="datetime-local">
            </div>
            <label class="mx-3">To</label>
            <div class="input-group">
                <div class="input-group-text">
                    @MarkupHelper.FromFile("icons/feather/calendar.svg")
                </div>
                <input @bind="ToDateTime" @bind:format="yyyy-MM-ddTHH:mm:ss" class="form-control form-control-sm" type="datetime-local">
            </div>
        </form>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_all"
                    checked=@(StartTypeFilter == StartType.All)
                    @onchange="() => StartTypeFilter = StartType.All">
            <label class="form-check-label" for="radio_all">All</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_scheduled"
                    checked=@(StartTypeFilter == StartType.Scheduled)
                    @onchange="() => StartTypeFilter = StartType.Scheduled">
            <label class="form-check-label" for="radio_scheduled">Scheduled</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_manual"
                    checked=@(StartTypeFilter == StartType.Manual)
                    @onchange="() => StartTypeFilter = StartType.Manual">
            <label class="form-check-label" for="radio_manual">Manual</label>
        </div>
    </div>
</div>

<div class="row mt-3">
    <div class="col d-inline">
        @MarkupHelper.FromFile("icons/feather/filter.svg")
        <span class="me-3">Filters</span>

        <HxButtonGroup Size="ButtonGroupSize.Small">

            <FilterDropdown TItem="string"
                            FilterSet="JobFilter"
                            Items="Executions_?
                               .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible jobs based on start type filter
                               .Where(e => !StepFilter.Any() || e.StepExecutions.Any(s => StepFilter.Contains(s.StepName))) // Limit visible jobs based on step filter
                               .Where(e => !StepTypeFilter.Any() || e.StepExecutions.Any(s => StepTypeFilter.Contains(s.StepType))) // Limit visible jobs based on step type filter
                               .Where(e => !TagFilter.Any() || e.StepExecutions.Any(s => s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true)) // Limit visible jobs based on tag filter
                               .Where(e => !JobStatusFilter.Any() || JobStatusFilter.Contains(e.ExecutionStatus)) // Limit visible jobs based on job status filter
                               .Select(e => e.JobName)
                               .Distinct()
                               .OrderBy(j => j) ?? Enumerable.Empty<string>()"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    @MarkupHelper.FromFile("icons/feather/loader.svg")
                    Job
                </TitleTemplate>
            </FilterDropdown>

            @if (ShowSteps)
            {
                <FilterDropdown TItem="string"
                                FilterSet="StepFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible steps based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible steps based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible steps based on tag filter
                                   .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                        StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible steps based on step status filter
                                   .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible steps based on step type filter
                                   .Select(s => s.StepName)
                                   .Distinct()
                                   .OrderBy(j => j) ?? Enumerable.Empty<string>()"
                                OnChange="StateHasChanged"
                                IsSearchable="true">
                    <TitleTemplate>
                        @MarkupHelper.FromFile("icons/feather/list.svg")
                        Step
                    </TitleTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="StepType"
                                FilterSet="StepTypeFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible step types based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible step types based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step types based on tag filter
                                   .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                        StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible step types based on step status filter
                                   .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step types based on step filter
                                   .Select(s => s.StepType)
                                   .Distinct()
                                   .OrderBy(j => j) ?? Enumerable.Empty<StepType>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        @MarkupHelper.FromFile("icons/feather/tool.svg")
                        Step type
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIconComponent StepType_="item" />
                        @item.ToString()
                    </ItemTemplate>
                </FilterDropdown>
            }

            @if (!ShowSteps)
            {
                <FilterDropdown TItem="ExecutionStatus"
                                FilterSet="JobStatusFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible job statuses based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible job statuses based on job filter
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<ExecutionStatus>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        @MarkupHelper.FromFile("icons/feather/alert-circle.svg")
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <JobExecutionStatusBadgeComponent ExecutionStatus_="item" />
                    </ItemTemplate>
                </FilterDropdown>
            }
            else
            {
                <FilterDropdown TItem="StepExecutionStatus"
                                FilterSet="StepStatusFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible step statuses based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible step statuses based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step statuses based on tag filter
                                   .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step statuses based on step filter
                                   .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible step statuses based on step type filter
                                   .SelectMany(s => s.StepExecutionAttempts)
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<StepExecutionStatus>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        @MarkupHelper.FromFile("icons/feather/alert-circle.svg")
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepExecutionStatusBadgeComponent ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="string"
                                FilterSet="TagFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible tags based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible tags based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible tags based on step filter
                                   .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible tags based on step type filter
                                   .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                                StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible tags based on step status filter
                                   .SelectMany(e => e.Step?.Tags.Select(t => t.TagName) ?? Enumerable.Empty<string>())
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<string>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        @MarkupHelper.FromFile("icons/feather/tag.svg")
                        Tag
                    </TitleTemplate>
                </FilterDropdown>
            }

            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                      @onclick="() => { JobStatusFilter.Clear(); StepStatusFilter.Clear(); JobFilter.Clear(); StepFilter.Clear(); StepTypeFilter.Clear(); TagFilter.Clear(); }">
                @MarkupHelper.FromFile("icons/feather/x.svg")
                Reset
            </HxButton>
        </HxButtonGroup>
    </div>
</div>

<div class="card shadow-sm pt-2 mt-3 my-3">
    @if (!ShowSteps && !ShowGraph)
    {
        <JobExecutionsTableComponent Executions="FilteredExecutions" />
    }
    else if (!ShowSteps)
    {
        <JobExecutionsGraphComponent Executions="FilteredExecutions" />
    }
    else if (!ShowGraph)
    {
        <StepExecutionsTableComponent Executions="FilteredStepExecutions" />
    }
    else
    {
        <StepExecutionsGraphComponent Executions="FilteredStepExecutions" />
    }
</div>

@code {
    private bool SessionStorageRetrieved { get; set; } = false;

    private bool ShowSteps { get; set; } = false;
    private bool ShowGraph { get; set; } = false;
    private bool Loading { get; set; } = false;

    private DateTime FromDateTime
    {
        get => _fromDateTime;
        set => _fromDateTime = value > ToDateTime ? ToDateTime : value;
    }
    private DateTime _fromDateTime = DateTime.Now.Trim(TimeSpan.TicksPerMinute).AddHours(-1);

    private DateTime ToDateTime
    {
        get => _toDateTime;
        set => _toDateTime = value < FromDateTime ? FromDateTime : value;
    }
    private DateTime _toDateTime = DateTime.Now.Trim(TimeSpan.TicksPerMinute).AddMinutes(1);

    private List<Execution>? Executions_ { get; set; }

    private HashSet<ExecutionStatus> JobStatusFilter { get; set; } = new();
    private HashSet<StepExecutionStatus> StepStatusFilter { get; set; } = new();
    private HashSet<string> JobFilter { get; set; } = new();
    private HashSet<string> StepFilter { get; set; } = new();
    private HashSet<StepType> StepTypeFilter { get; set; } = new();
    private HashSet<string> TagFilter { get; set; } = new();
    private StartType StartTypeFilter { get; set; } = StartType.All;

    private IEnumerable<Execution>? FilteredExecutions => Executions_?
                        .Where(e => !JobStatusFilter.Any() || JobStatusFilter.Contains(e.ExecutionStatus))
                        .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName))
                        .Where(e => StartTypeFilter == StartType.All ||
                        StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                        StartTypeFilter == StartType.Manual && e.ScheduleId is null);

    private IEnumerable<StepExecutionAttempt>? FilteredStepExecutions => Executions_?
                        .Where(e => StartTypeFilter == StartType.All ||
                        StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                        StartTypeFilter == StartType.Manual && e.ScheduleId is null)
                        .SelectMany(e => e.StepExecutions)
                        .Where(e => !TagFilter.Any() || e.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true)
                        .SelectMany(s => s.StepExecutionAttempts)
                        .Where(e => !StepStatusFilter.Any() || StepStatusFilter.Contains(e.ExecutionStatus))
                        .Where(e => !JobFilter.Any() || JobFilter.Contains(e.StepExecution.Execution.JobName))
                        .Where(e => !StepFilter.Any() || StepFilter.Contains(e.StepExecution.StepName))
                        .Where(e => !StepTypeFilter.Any() || StepTypeFilter.Contains(e.StepExecution.StepType))
                        .OrderByDescending(e => e.StepExecution.Execution.CreatedDateTime)
                        .ThenByDescending(e => e.StartDateTime)
                        .ThenByDescending(e => e.StepExecution.ExecutionPhase);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await GetSessionStorageValues();
            }
            catch (Exception ex)
            {
                Messenger.AddWarning("Error getting session storage values", ex.Message);
            }

            SessionStorageRetrieved = true;
            StateHasChanged();
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        Loading = true;
        using var context = await Task.Run<BiflowContext>(DbContextFactory.CreateDbContext);

        var query = context.Executions
            // Index optimized way of querying executions without having to scan the entire table.
            .Where(e => e.CreatedDateTime <= ToDateTime && e.EndDateTime >= FromDateTime)
            .Union(context.Executions
                // Adds executions that were not started.
                .Where(e => e.CreatedDateTime >= FromDateTime && e.CreatedDateTime <= ToDateTime && e.EndDateTime == null))
            .Union(context.Executions
                // Adds currently running executions if current time fits in the time window.
                .Where(e => DateTime.Now >= FromDateTime && DateTime.Now <= ToDateTime && e.ExecutionStatus == ExecutionStatus.Running));

        Executions_ = await query
            .AsNoTrackingWithIdentityResolution()
            .Include(e => e.ExecutionParameters)
            .Include(e => e.StepExecutions)
            .ThenInclude(exec => exec.StepExecutionAttempts)
            .Include(e => e.StepExecutions)
            .ThenInclude(e => (e as ParameterizedStepExecution)!.StepExecutionParameters)
            .ThenInclude(p => p.ExecutionParameter)
            .Include(e => e.StepExecutions)
            .ThenInclude(e => e.ExecutionConditionParameters)
            .ThenInclude(p => p.ExecutionParameter)
            .Include(execution => execution.StepExecutions)
            .ThenInclude(exec => exec.Step)
            .ThenInclude(s => s!.Tags)
            .OrderByDescending(execution => execution.CreatedDateTime)
            .ThenByDescending(execution => execution.StartDateTime)
            .ToListAsync();
        Loading = false;
        StateHasChanged();
    }

    private async Task SelectPresetLast(int hours)
    {
        ToDateTime = DateTime.Now.Trim(TimeSpan.TicksPerMinute).AddMinutes(1);
        FromDateTime = DateTime.Now.Trim(TimeSpan.TicksPerMinute).AddHours(-hours);
        await LoadData();
    }

    private async Task SelectPreset(DateTime from, DateTime to)
    {
        FromDateTime = from.Trim(TimeSpan.TicksPerMinute);
        ToDateTime = to.Trim(TimeSpan.TicksPerMinute);
        await LoadData();
    }

    private record SessionStorage(
        DateTime FromDateTime,
        DateTime ToDateTime,
        bool ShowSteps,
        bool ShowGraph,
        StartType StartType,
        HashSet<ExecutionStatus> JobStatuses,
        HashSet<StepExecutionStatus> StepStatuses,
        HashSet<string> JobNames,
        HashSet<string> StepNames,
        HashSet<StepType> StepTypes,
        HashSet<string> Tags
    );

    private async Task SetSessionStorageValues()
    {
        var sessionStorage = new SessionStorage(
            FromDateTime,
            ToDateTime,
            ShowSteps,
            ShowGraph,
            StartTypeFilter,
            JobStatusFilter,
            StepStatusFilter,
            JobFilter,
            StepFilter,
            StepTypeFilter,
            TagFilter
        );
        var text = JsonSerializer.Serialize(sessionStorage);
        await JS.InvokeVoidAsync("sessionStorage.setItem", "ExecutionsSessionStorage", text);
    }

    private async Task GetSessionStorageValues()
    {
        var text = await JS.InvokeAsync<string>("sessionStorage.getItem", "ExecutionsSessionStorage");
        if (text is null) return;
        var sessionStorage = JsonSerializer.Deserialize<SessionStorage>(text);
        FromDateTime = sessionStorage?.FromDateTime ?? FromDateTime;
        ToDateTime = sessionStorage?.ToDateTime ?? ToDateTime;
        ShowSteps = sessionStorage?.ShowSteps ?? ShowSteps;
        ShowGraph = sessionStorage?.ShowGraph ?? ShowGraph;
        StartTypeFilter = sessionStorage?.StartType ?? StartTypeFilter;
        JobStatusFilter = sessionStorage?.JobStatuses ?? JobStatusFilter;
        StepStatusFilter = sessionStorage?.StepStatuses ?? StepStatusFilter;
        JobFilter = sessionStorage?.JobNames ?? JobFilter;
        StepFilter = sessionStorage?.StepNames ?? StepFilter;
        StepTypeFilter = sessionStorage?.StepTypes ?? StepTypeFilter;
        TagFilter = sessionStorage?.Tags ?? TagFilter;
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await SetSessionStorageValues();
        }
        catch (Exception ex)
        {
            Messenger.AddWarning("Error saving session storage values", ex.Message);
        }
    }

}