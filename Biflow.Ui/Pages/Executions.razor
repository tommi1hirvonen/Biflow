
<PageTitle>Executions | Biflow</PageTitle>

<h4>Executions</h4>

<div class="row mt-3">
    <div class="col">
        <HxButtonToolbar>
            <HxButtonGroup Size="ButtonGroupSize.Small">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="ShowExecutionsAsync"
                Spinner="false"
                CssClass="@(!UserState.Executions.ShowSteps ? "active" : null)">
                    <CxIcon Icon="LucideIcon.ClipboardList" />
                    Jobs
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="ShowStepExecutionsAsync"
                Spinner="false"
                CssClass="@(UserState.Executions.ShowSteps ? "active" : null)">
                    <CxIcon Icon="LucideIcon.ListChecks" />
                    Steps
                </HxButton>
            </HxButtonGroup>
            <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="ms-3">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => UserState.Executions.ShowGraph = false"
                Spinner="false"
                CssClass="@(!UserState.Executions.ShowGraph ? "active" : null)">
                    <CxIcon Icon="FeatherIcon.List" />
                    List
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => UserState.Executions.ShowGraph = true"
                Spinner="false"
                CssClass="@(UserState.Executions.ShowGraph ? "active" : null)">
                    <CxIcon Icon="LucideIcon.BarChartHorizontal" />
                    Gantt
                </HxButton>
            </HxButtonGroup>
            <HxDropdownButtonGroup CssClass="ms-3">
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" Enabled="!loading">
                    <CxIcon Icon="FeatherIcon.Bookmark" />
                    Presets
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    <HxDropdownHeader>Last</HxDropdownHeader>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.OneHour ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.OneHour)">1 h</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.ThreeHours ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThreeHours)">3 h</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.TwelveHours ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.TwelveHours)">12 h</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.TwentyFourHours ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.TwentyFourHours)">24 h</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.ThreeDays ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThreeDays)">3 d</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.SevenDays ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.SevenDays)">7 d</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.FourteenDays ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.FourteenDays)">14 d</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.ThirtyDays ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThirtyDays)">30 d</HxDropdownItem>
                    <HxDropdownDivider></HxDropdownDivider>
                    <HxDropdownHeader>This</HxDropdownHeader>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.ThisDay ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThisDay)">Day</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.ThisWeek ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThisWeek)">Week</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.ThisMonth ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThisMonth)">Month</HxDropdownItem>
                    <HxDropdownDivider></HxDropdownDivider>
                    <HxDropdownHeader>Previous</HxDropdownHeader>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.PreviousDay ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.PreviousDay)">Day</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.PreviousWeek ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.PreviousWeek)">Week</HxDropdownItem>
                    <HxDropdownItem CssClass="@(UserState.Executions.Preset == Preset.PreviousMonth ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.PreviousMonth)">Month</HxDropdownItem>
                </HxDropdownMenu>
            </HxDropdownButtonGroup>

            <HxSubmit FormId="executions_form" Size="ButtonSize.Small" Color="ThemeColor.Primary" Spinner="loading" Enabled="!loading" CssClass="ms-3">
                <CxIcon Icon="FeatherIcon.RefreshCw" />
                Refresh
            </HxSubmit>
        </HxButtonToolbar>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <form class="d-inline-flex align-items-center" id="executions_form" @onsubmit="LoadDataAsync" style="flex-direction: unset !important;">
            <label class="me-3">From</label>
            <div class="input-group">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.Calendar" />
                </div>
                <input @bind="UserState.Executions.FromDateTime"
                       @bind:format="yyyy-MM-ddTHH:mm:ss"
                       @bind:after="() => UserState.Executions.Preset = null"
                       class="form-control form-control-sm"
                       type="datetime-local">
            </div>
            <label class="mx-3">To</label>
            <div class="input-group">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.Calendar" />
                </div>
                <input @bind="UserState.Executions.ToDateTime"
                       @bind:format="yyyy-MM-ddTHH:mm:ss"
                       @bind:after="() => UserState.Executions.Preset = null"
                       class="form-control form-control-sm"
                       type="datetime-local">
            </div>
        </form>
    </div>
</div>

<div class="row mt-3">
    <div class="col-auto d-inline">
        <CxIcon Icon="FeatherIcon.Filter" />
        <span class="me-3">Filters</span>

        <HxButtonGroup Size="ButtonGroupSize.Small">
            @{
                IEnumerable<string>? jobNames = UserState.Executions.ShowSteps switch
                {
                    true => stepExecutions?
                        .Where(e => UserState.Executions.StartTypeFilter == StartType.All ||
                        UserState.Executions.StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                        UserState.Executions.StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible jobs based on start type filter
                        .Where(e => !UserState.Executions.StepFilter.Any() || UserState.Executions.StepFilter.Contains((e.StepName, e.StepType))) // Limit visible jobs based on step filter
                        .Where(e => !UserState.Executions.StepTypeFilter.Any() || UserState.Executions.StepTypeFilter.Contains(e.StepType)) // Limit visible jobs based on step type filter
                        .Where(e => !UserState.Executions.JobTagFilter.Any() || e.JobTags.Any(t => UserState.Executions.JobTagFilter.Contains(t))) // Limit visible jobs based on tag filter
                        .Where(e => !UserState.Executions.StepTagFilter.Any() || e.StepTags.Any(t => UserState.Executions.StepTagFilter.Contains(t)))
                        .Where(e => !UserState.Executions.StepStatusFilter.Any() || UserState.Executions.StepStatusFilter.Contains(e.ExecutionStatus)) // Limit visible jobs based on step status filter
                        .Select(e => e.JobName),
                    false => executions?
                        .Where(e => UserState.Executions.StartTypeFilter == StartType.All ||
                        UserState.Executions.StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                        UserState.Executions.StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible jobs based on start type filter
                        .Where(e => !UserState.Executions.JobStatusFilter.Any() || UserState.Executions.JobStatusFilter.Contains(e.ExecutionStatus)) // Limit visible jobs based on job status filter
                        .Where(e => !UserState.Executions.JobTagFilter.Any() || e.Tags.Any(t => UserState.Executions.JobTagFilter.Contains(t))) // Limit visible jobs based on tag filter
                        .Select(e => e.JobName)
                };
                jobNames = jobNames?.Distinct().OrderBy(j => j) ?? Enumerable.Empty<string>();
            }
            <FilterDropdown TItem="string"
                            FilterSet="UserState.Executions.JobFilter"
                            Items="jobNames"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <CxIcon Icon="LucideIcon.ClipboardList" />
                    Job
                </TitleTemplate>
            </FilterDropdown>
            @{
                IEnumerable<TagProjection>? jobTags = UserState.Executions.ShowSteps switch
                {
                    true => stepExecutions?
                        .Where(e => UserState.Executions.StartTypeFilter == StartType.All ||
                        UserState.Executions.StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                        UserState.Executions.StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible tags based on start type filter
                        .Where(e => !UserState.Executions.JobFilter.Any() || UserState.Executions.JobFilter.Contains(e.JobName)) // Limit visible tags based on job filter
                        .Where(e => !UserState.Executions.StepFilter.Any() || UserState.Executions.StepFilter.Contains((e.StepName, e.StepType))) // Limit visible tags based on step filter
                        .Where(e => !UserState.Executions.StepTypeFilter.Any() || UserState.Executions.StepTypeFilter.Contains(e.StepType)) // Limit visible tags based on step type filter
                        .Where(e => !UserState.Executions.StepTagFilter.Any() || e.StepTags.Any(t => UserState.Executions.StepTagFilter.Contains(t))) // Limit visible jobs based on tag filter
                        .Where(e => !UserState.Executions.StepStatusFilter.Any() || UserState.Executions.StepStatusFilter.Contains(e.ExecutionStatus)) // Limit visible tags based on step status filter
                        .SelectMany(e => e.JobTags),
                    false => executions?
                        .Where(e => UserState.Executions.StartTypeFilter == StartType.All ||
                        UserState.Executions.StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                        UserState.Executions.StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible jobs based on start type filter
                        .Where(e => !UserState.Executions.JobFilter.Any() || UserState.Executions.JobFilter.Contains(e.JobName)) // Limit visible tags based on job filter
                        .Where(e => !UserState.Executions.JobStatusFilter.Any() || UserState.Executions.JobStatusFilter.Contains(e.ExecutionStatus)) // Limit visible jobs based on job status filter
                        .SelectMany(e => e.Tags)
                };
                jobTags = jobTags?.Distinct().OrderBy(t => t.TagName) ?? Enumerable.Empty<TagProjection>();
            }
            <FilterDropdown TItem="TagProjection"
                            FilterSet="UserState.Executions.JobTagFilter"
                            Items="jobTags"
                            IdSelector="t => t.TagId.ToString()"
                            TextSelector="t => t.TagName"
                            OnChange="StateHasChanged">
                <ItemTemplate Context="item">
                    <TagBadge Tag="item" />
                </ItemTemplate>
                <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tag" />
                        Job tag
                    </TitleTemplate>
            </FilterDropdown>

            @if (UserState.Executions.ShowSteps)
            {
                <FilterDropdown TItem="(string StepName, StepType StepType)"
                                FilterSet="UserState.Executions.StepFilter"
                                Items="stepExecutions?
                                   .Where(e => UserState.Executions.StartTypeFilter == StartType.All ||
                                    UserState.Executions.StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    UserState.Executions.StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible steps based on start type filter
                                   .Where(e => !UserState.Executions.JobFilter.Any() || UserState.Executions.JobFilter.Contains(e.JobName)) // Limit visible steps based on job filter
                                   .Where(e => !UserState.Executions.JobTagFilter.Any() || e.JobTags.Any(t => UserState.Executions.JobTagFilter.Contains(t))) // Limit visible jobs based on tag filter
                                   .Where(e => !UserState.Executions.StepTagFilter.Any() || e.StepTags.Any(t => UserState.Executions.StepTagFilter.Contains(t)))
                                   .Where(s => !UserState.Executions.StepStatusFilter.Any() || UserState.Executions.StepStatusFilter.Contains(s.ExecutionStatus)) // Limit visible steps based on step status filter
                                   .Where(s => !UserState.Executions.StepTypeFilter.Any() || UserState.Executions.StepTypeFilter.Contains(s.StepType)) // Limit visible steps based on step type filter
                                   .Select(s => (s.StepName, s.StepType))
                                   .Distinct()
                                   .OrderBy(j => j) ?? Enumerable.Empty<(string, StepType)>()"
                                OnChange="StateHasChanged"
                                IsSearchable="true">
                    <TitleTemplate>
                        <CxIcon Icon="LucideIcon.ListChecks" />
                        Step
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIcon StepType="item.StepType" />
                        @item.StepName
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="StepType"
                                FilterSet="UserState.Executions.StepTypeFilter"
                                Items="stepExecutions?
                                   .Where(e => UserState.Executions.StartTypeFilter == StartType.All ||
                                    UserState.Executions.StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    UserState.Executions.StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible step types based on start type filter
                                   .Where(e => !UserState.Executions.JobFilter.Any() || UserState.Executions.JobFilter.Contains(e.JobName)) // Limit visible step types based on job filter
                                   .Where(e => !UserState.Executions.JobTagFilter.Any() || e.JobTags.Any(t => UserState.Executions.JobTagFilter.Contains(t))) // Limit visible jobs based on tag filter
                                   .Where(e => !UserState.Executions.StepTagFilter.Any() || e.StepTags.Any(t => UserState.Executions.StepTagFilter.Contains(t)))
                                   .Where(s => !UserState.Executions.StepStatusFilter.Any() || UserState.Executions.StepStatusFilter.Contains(s.ExecutionStatus)) // Limit visible step types based on step status filter
                                   .Where(s => !UserState.Executions.StepFilter.Any() || UserState.Executions.StepFilter.Contains((s.StepName, s.StepType))) // Limit visible step types based on step filter
                                   .Select(s => s.StepType)
                                   .Distinct()
                                   .OrderBy(j => j) ?? Enumerable.Empty<StepType>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tool" />
                        Step type
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIcon StepType="item" />
                        @item.ToString()
                    </ItemTemplate>
                </FilterDropdown>
            }

            @if (!UserState.Executions.ShowSteps)
            {
                <FilterDropdown TItem="ExecutionStatus"
                                FilterSet="UserState.Executions.JobStatusFilter"
                                Items="executions?
                                   .Where(e => UserState.Executions.StartTypeFilter == StartType.All ||
                                    UserState.Executions.StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    UserState.Executions.StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible job statuses based on start type filter
                                   .Where(e => !UserState.Executions.JobFilter.Any() || UserState.Executions.JobFilter.Contains(e.JobName)) // Limit visible job statuses based on job filter
                                   .Where(e => !UserState.Executions.JobTagFilter.Any() || e.Tags.Any(t => UserState.Executions.JobTagFilter.Contains(t))) // Limit visible jobs based on tag filter
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<ExecutionStatus>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.AlertCircle" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <JobExecutionStatusBadge ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
            }
            else
            {
                <FilterDropdown TItem="StepExecutionStatus"
                                FilterSet="UserState.Executions.StepStatusFilter"
                                Items="stepExecutions?
                                   .Where(e => UserState.Executions.StartTypeFilter == StartType.All ||
                                    UserState.Executions.StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    UserState.Executions.StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible step statuses based on start type filter
                                   .Where(e => !UserState.Executions.JobFilter.Any() || UserState.Executions.JobFilter.Contains(e.JobName)) // Limit visible step statuses based on job filter
                                   .Where(e => !UserState.Executions.JobTagFilter.Any() || e.JobTags.Any(t => UserState.Executions.JobTagFilter.Contains(t))) // Limit visible jobs based on tag filter
                                   .Where(e => !UserState.Executions.StepTagFilter.Any() || e.StepTags.Any(t => UserState.Executions.StepTagFilter.Contains(t)))
                                   .Where(s => !UserState.Executions.StepFilter.Any() || UserState.Executions.StepFilter.Contains((s.StepName, s.StepType))) // Limit visible step statuses based on step filter
                                   .Where(s => !UserState.Executions.StepTypeFilter.Any() || UserState.Executions.StepTypeFilter.Contains(s.StepType)) // Limit visible step statuses based on step type filter
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<StepExecutionStatus>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.AlertCircle" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepExecutionStatusBadge ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="TagProjection"
                                FilterSet="UserState.Executions.StepTagFilter"
                                Items="stepExecutions?
                                   .Where(e => UserState.Executions.StartTypeFilter == StartType.All ||
                                    UserState.Executions.StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    UserState.Executions.StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible tags based on start type filter
                                   .Where(e => !UserState.Executions.JobFilter.Any() || UserState.Executions.JobFilter.Contains(e.JobName)) // Limit visible tags based on job filter
                                   .Where(e => !UserState.Executions.JobTagFilter.Any() || e.JobTags.Any(t => UserState.Executions.JobTagFilter.Contains(t))) // Limit visible jobs based on tag filter
                                   .Where(s => !UserState.Executions.StepFilter.Any() || UserState.Executions.StepFilter.Contains((s.StepName, s.StepType))) // Limit visible tags based on step filter
                                   .Where(s => !UserState.Executions.StepTypeFilter.Any() || UserState.Executions.StepTypeFilter.Contains(s.StepType)) // Limit visible tags based on step type filter
                                   .Where(s => !UserState.Executions.StepStatusFilter.Any() || UserState.Executions.StepStatusFilter.Contains(s.ExecutionStatus)) // Limit visible tags based on step status filter
                                   .SelectMany(e => e.StepTags)
                                   .Distinct()
                                   .OrderBy(t => t.TagName) ?? Enumerable.Empty<TagProjection>()"
                                IdSelector="t => t.TagId.ToString()"
                                TextSelector="t => t.TagName"
                                OnChange="StateHasChanged">
                    <ItemTemplate Context="item">
                        <TagBadge Tag="item" />
                    </ItemTemplate>
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tag" />
                        Step tag
                    </TitleTemplate>
                </FilterDropdown>

            }

            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                @onclick="ClearFilters">
                <CxIcon Icon="FeatherIcon.X" />
                Reset
            </HxButton>
        </HxButtonGroup>
    </div>
    <div class="col-xl-auto mt-3 mt-xl-0 d-flex align-items-center">
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_all"
                   checked=@(UserState.Executions.StartTypeFilter == StartType.All)
                   @onchange="() => UserState.Executions.StartTypeFilter = StartType.All">
            <label class="form-check-label" for="radio_all">All</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_scheduled"
                   checked=@(UserState.Executions.StartTypeFilter == StartType.Scheduled)
                   @onchange="() => UserState.Executions.StartTypeFilter = StartType.Scheduled">
            <label class="form-check-label" for="radio_scheduled">Scheduled</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_manual"
                   checked=@(UserState.Executions.StartTypeFilter == StartType.Manual)
                   @onchange="() => UserState.Executions.StartTypeFilter = StartType.Manual">
            <label class="form-check-label" for="radio_manual">Manual</label>
        </div>
    </div>
</div>

<div class="card shadow-sm pt-2 mt-3 my-3 table-responsive">
    @if (!UserState.Executions.ShowSteps && !UserState.Executions.ShowGraph)
    {
        <JobExecutionsTable Executions="FilteredExecutions" />
    }
    else if (!UserState.Executions.ShowSteps)
    {
        <JobExecutionsGraph Executions="FilteredExecutions" />
    }
    else if (!UserState.Executions.ShowGraph)
    {
        <StepExecutionsTable Executions="FilteredStepExecutions" />
    }
    else
    {
        <StepExecutionsGraph Executions="FilteredStepExecutions" />
    }
</div>
