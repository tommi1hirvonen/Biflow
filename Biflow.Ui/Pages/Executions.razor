
<PageTitle>Executions | Biflow</PageTitle>

<h4>Executions</h4>

@if (!SessionStorageRetrieved) return;

<div class="row mt-3">
    <div class="col">
        <HxButtonToolbar>
            <HxButtonGroup Size="ButtonGroupSize.Small">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => ShowSteps = false"
                CssClass="@(!ShowSteps ? "active" : null)">
                    <CxIcon Icon="FeatherIcon.Loader" />
                    Jobs
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => ShowSteps = true"
                CssClass="@(ShowSteps ? "active" : null)">
                    <CxIcon Icon="FeatherIcon.List" />
                    Steps
                </HxButton>
            </HxButtonGroup>
            <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="ms-3">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => ShowGraph = false"
                CssClass="@(!ShowGraph ? "active" : null)">
                    <CxIcon Icon="FeatherIcon.Table" />
                    Table
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => ShowGraph = true"
                CssClass="@(ShowGraph ? "active" : null)">
                    <CxIcon Icon="FeatherIcon.Gantt" />
                    Graph
                </HxButton>
            </HxButtonGroup>
            <HxDropdownButtonGroup CssClass="ms-3">
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" Enabled="!Loading">
                    <CxIcon Icon="FeatherIcon.Bookmark" />
                    Presets
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    <HxDropdownHeader>Last</HxDropdownHeader>
                    <HxDropdownItem @onclick="() => SelectPresetLast(1)">1 h</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(3)">3 h</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(12)">12 h</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(24)">24 h</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(72)">3 d</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(168)">7 d</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(336)">14 d</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPresetLast(720)">30 d</HxDropdownItem>
                    <HxDropdownDivider></HxDropdownDivider>
                    @{
                        var today = DateTime.Now.Date;
                        var endToday = today.AddDays(1).AddTicks(-1);
                        var startThisWeek = today.StartOfWeek(DayOfWeek.Monday);
                        var endThisWeek = startThisWeek.AddDays(7).AddTicks(-1);
                        var startThisMonth = new DateTime(today.Year, today.Month, 1);
                        var endThisMonth = startThisMonth.AddMonths(1).AddTicks(-1);
                        var yesterday = today.AddDays(-1);
                        var endYesterday = today.AddTicks(-1);
                        var startPrevWeek = today.AddDays(-7).StartOfWeek(DayOfWeek.Monday);
                        var endPrevWeek = startPrevWeek.AddDays(7).AddTicks(-1);
                        var prevMonth = today.AddMonths(-1);
                        var startPrevMonth = new DateTime(prevMonth.Year, prevMonth.Month, 1);
                        var endPrevMonth = startPrevMonth.AddMonths(1).AddTicks(-1);
                    }
                    <HxDropdownHeader>This</HxDropdownHeader>
                    <HxDropdownItem @onclick="() => SelectPreset(today, endToday)">Day</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPreset(startThisWeek, endThisWeek)">Week</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPreset(startThisMonth, endThisMonth)">Month</HxDropdownItem>
                    <HxDropdownDivider></HxDropdownDivider>
                    <HxDropdownHeader>Previous</HxDropdownHeader>
                    <HxDropdownItem @onclick="() => SelectPreset(yesterday, endYesterday)">Day</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPreset(startPrevWeek, endPrevWeek)">Week</HxDropdownItem>
                    <HxDropdownItem @onclick="() => SelectPreset(startPrevMonth, endPrevMonth)">Month</HxDropdownItem>
                </HxDropdownMenu>
            </HxDropdownButtonGroup>

            <HxSubmit FormId="executions_form" Size="ButtonSize.Small" Color="ThemeColor.Primary" Spinner="Loading" Enabled="!Loading" CssClass="ms-3">
                <CxIcon Icon="FeatherIcon.RefreshCw" />
                Refresh
            </HxSubmit>
        </HxButtonToolbar>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <form class="d-inline-flex align-items-center" id="executions_form" @onsubmit="LoadData" style="flex-direction: unset !important;">
            <label class="me-3">From</label>
            <div class="input-group">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.Calendar" />
                </div>
                <input @bind="FromDateTime" @bind:format="yyyy-MM-ddTHH:mm:ss" class="form-control form-control-sm" type="datetime-local">
            </div>
            <label class="mx-3">To</label>
            <div class="input-group">
                <div class="input-group-text">
                    <CxIcon Icon="FeatherIcon.Calendar" />
                </div>
                <input @bind="ToDateTime" @bind:format="yyyy-MM-ddTHH:mm:ss" class="form-control form-control-sm" type="datetime-local">
            </div>
        </form>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_all"
                    checked=@(StartTypeFilter == StartType.All)
                    @onchange="() => StartTypeFilter = StartType.All">
            <label class="form-check-label" for="radio_all">All</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_scheduled"
                    checked=@(StartTypeFilter == StartType.Scheduled)
                    @onchange="() => StartTypeFilter = StartType.Scheduled">
            <label class="form-check-label" for="radio_scheduled">Scheduled</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_manual"
                    checked=@(StartTypeFilter == StartType.Manual)
                    @onchange="() => StartTypeFilter = StartType.Manual">
            <label class="form-check-label" for="radio_manual">Manual</label>
        </div>
    </div>
</div>

<div class="row mt-3">
    <div class="col d-inline">
        <CxIcon Icon="FeatherIcon.Filter" />
        <span class="me-3">Filters</span>

        <HxButtonGroup Size="ButtonGroupSize.Small">

            <FilterDropdown TItem="string"
                            FilterSet="JobFilter"
                            Items="Executions_?
                               .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible jobs based on start type filter
                               .Where(e => !StepFilter.Any() || e.StepExecutions.Any(s => StepFilter.Contains(s.StepName))) // Limit visible jobs based on step filter
                               .Where(e => !StepTypeFilter.Any() || e.StepExecutions.Any(s => StepTypeFilter.Contains(s.StepType))) // Limit visible jobs based on step type filter
                               .Where(e => !TagFilter.Any() || e.StepExecutions.Any(s => s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true)) // Limit visible jobs based on tag filter
                               .Where(e => !JobStatusFilter.Any() || JobStatusFilter.Contains(e.ExecutionStatus)) // Limit visible jobs based on job status filter
                               .Select(e => e.JobName)
                               .Distinct()
                               .OrderBy(j => j) ?? Enumerable.Empty<string>()"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <CxIcon Icon="FeatherIcon.Loader" />
                    Job
                </TitleTemplate>
            </FilterDropdown>

            @if (ShowSteps)
            {
                <FilterDropdown TItem="string"
                                FilterSet="StepFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible steps based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible steps based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible steps based on tag filter
                                   .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                        StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible steps based on step status filter
                                   .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible steps based on step type filter
                                   .Select(s => s.StepName)
                                   .Distinct()
                                   .OrderBy(j => j) ?? Enumerable.Empty<string>()"
                                OnChange="StateHasChanged"
                                IsSearchable="true">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.List" />
                        Step
                    </TitleTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="StepType"
                                FilterSet="StepTypeFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible step types based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible step types based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step types based on tag filter
                                   .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                        StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible step types based on step status filter
                                   .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step types based on step filter
                                   .Select(s => s.StepType)
                                   .Distinct()
                                   .OrderBy(j => j) ?? Enumerable.Empty<StepType>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tool" />
                        Step type
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIconComponent StepType_="item" />
                        @item.ToString()
                    </ItemTemplate>
                </FilterDropdown>
            }

            @if (!ShowSteps)
            {
                <FilterDropdown TItem="ExecutionStatus"
                                FilterSet="JobStatusFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible job statuses based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible job statuses based on job filter
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<ExecutionStatus>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.AlertCircle" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <JobExecutionStatusBadgeComponent ExecutionStatus_="item" />
                    </ItemTemplate>
                </FilterDropdown>
            }
            else
            {
                <FilterDropdown TItem="StepExecutionStatus"
                                FilterSet="StepStatusFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible step statuses based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible step statuses based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step statuses based on tag filter
                                   .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step statuses based on step filter
                                   .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible step statuses based on step type filter
                                   .SelectMany(s => s.StepExecutionAttempts)
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<StepExecutionStatus>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.AlertCircle" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepExecutionStatusBadgeComponent ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="string"
                                FilterSet="TagFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible tags based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible tags based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible tags based on step filter
                                   .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible tags based on step type filter
                                   .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                                StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible tags based on step status filter
                                   .SelectMany(e => e.Step?.Tags.Select(t => t.TagName) ?? Enumerable.Empty<string>())
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<string>()"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tag" />
                        Tag
                    </TitleTemplate>
                </FilterDropdown>
            }

            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                      @onclick="() => { JobStatusFilter.Clear(); StepStatusFilter.Clear(); JobFilter.Clear(); StepFilter.Clear(); StepTypeFilter.Clear(); TagFilter.Clear(); }">
                <CxIcon Icon="FeatherIcon.X" />
                Reset
            </HxButton>
        </HxButtonGroup>
    </div>
</div>

<div class="card shadow-sm pt-2 mt-3 my-3">
    @if (!ShowSteps && !ShowGraph)
    {
        <JobExecutionsTableComponent Executions="FilteredExecutions" />
    }
    else if (!ShowSteps)
    {
        <JobExecutionsGraphComponent Executions="FilteredExecutions" />
    }
    else if (!ShowGraph)
    {
        <StepExecutionsTableComponent Executions="FilteredStepExecutions" />
    }
    else
    {
        <StepExecutionsGraphComponent Executions="FilteredStepExecutions" />
    }
</div>
