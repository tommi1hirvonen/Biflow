
<PageTitle>Executions | Biflow</PageTitle>

<h4>Executions</h4>

<div class="row mt-3">
    <div class="col">
        <HxButtonToolbar>
            <HxButtonGroup Size="ButtonGroupSize.Small">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="ShowExecutionsAsync"
                Spinner="false"
                CssClass="@(!State.ShowSteps ? "active" : null)">
                    <SvgIcon Icon="LucideIcon.ClipboardList" />
                    Jobs
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="ShowStepExecutionsAsync"
                Spinner="false"
                CssClass="@(State.ShowSteps ? "active" : null)">
                    <SvgIcon Icon="LucideIcon.ListChecks" />
                    Steps
                </HxButton>
            </HxButtonGroup>
            <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="ms-3">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => State.ShowGraph = false"
                Spinner="false"
                CssClass="@(!State.ShowGraph ? "active" : null)">
                    <SvgIcon Icon="FeatherIcon.List" />
                    List
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                @onclick="() => State.ShowGraph = true"
                Spinner="false"
                CssClass="@(State.ShowGraph ? "active" : null)">
                    <SvgIcon Icon="LucideIcon.BarChartHorizontal" />
                    Gantt
                </HxButton>
            </HxButtonGroup>
            <HxDropdownButtonGroup CssClass="ms-3">
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" Enabled="!loading">
                    <SvgIcon Icon="FeatherIcon.Bookmark" />
                    @if (!string.IsNullOrEmpty(State.PresetText))
                    {
                        <span class="ms-1">Presets:</span>
                        <span class="fw-normal">@State.PresetText</span>
                    }
                    else
                    {
                        <span class="ms-1">Presets</span>
                    }
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    <HxDropdownHeader>Last</HxDropdownHeader>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.OneHour ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.OneHour)">1 h</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.ThreeHours ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThreeHours)">3 h</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.TwelveHours ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.TwelveHours)">12 h</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.TwentyFourHours ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.TwentyFourHours)">24 h</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.ThreeDays ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThreeDays)">3 d</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.SevenDays ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.SevenDays)">7 d</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.FourteenDays ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.FourteenDays)">14 d</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.ThirtyDays ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThirtyDays)">30 d</HxDropdownItem>
                    <HxDropdownDivider></HxDropdownDivider>
                    <HxDropdownHeader>This</HxDropdownHeader>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.ThisDay ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThisDay)">Day</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.ThisWeek ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThisWeek)">Week</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.ThisMonth ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.ThisMonth)">Month</HxDropdownItem>
                    <HxDropdownDivider></HxDropdownDivider>
                    <HxDropdownHeader>Previous</HxDropdownHeader>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.PreviousDay ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.PreviousDay)">Day</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.PreviousWeek ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.PreviousWeek)">Week</HxDropdownItem>
                    <HxDropdownItem CssClass="@(State.Preset == Preset.PreviousMonth ? "active" : null)" @onclick="() => ApplyPresetAsync(Preset.PreviousMonth)">Month</HxDropdownItem>
                </HxDropdownMenu>
            </HxDropdownButtonGroup>

            <HxSubmit FormId="executions_form" Size="ButtonSize.Small" Color="ThemeColor.Primary" Spinner="loading" Enabled="!loading" CssClass="ms-3">
                <SvgIcon Icon="FeatherIcon.RefreshCw" />
                Refresh
            </HxSubmit>

            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto ms-auto" OnClick="() => deleteOffcanvas.LetAsync(x => x.ShowAsync())">
                    <SvgIcon Icon="FeatherIcon.Trash2" />
                    Delete...
                </HxButton>
            </AuthorizeView>
        </HxButtonToolbar>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <form class="d-inline-flex align-items-center" id="executions_form" @onsubmit="LoadDataAsync" style="flex-direction: unset !important;">
            <label class="me-3">From</label>
            <div class="input-group">
                <div class="input-group-text">
                    <SvgIcon Icon="FeatherIcon.Calendar" />
                </div>
                <input @bind="State.FromDateTime"
                       @bind:format="yyyy-MM-ddTHH:mm:ss"
                       @bind:after="() => State.Preset = null"
                       class="form-control form-control-sm"
                       type="datetime-local">
            </div>
            <label class="mx-3">To</label>
            <div class="input-group">
                <div class="input-group-text">
                    <SvgIcon Icon="FeatherIcon.Calendar" />
                </div>
                <input @bind="State.ToDateTime"
                       @bind:format="yyyy-MM-ddTHH:mm:ss"
                       @bind:after="() => State.Preset = null"
                       class="form-control form-control-sm"
                       type="datetime-local">
            </div>
        </form>
    </div>
</div>

<div class="row mt-3">
    <div class="col-auto d-inline">
        <SvgIcon Icon="FeatherIcon.Filter" />
        <span class="me-3">Filters</span>

        <HxButtonGroup Size="ButtonGroupSize.Small">
            @{
                IEnumerable<string>? jobNames = State.ShowSteps switch
                {
                    true => stepExecutions?
                        .Where(e => State.StepExecutionPredicates.Where(p => p != State.JobPredicate).All(p => p(e)))
                        .Select(e => e.JobName),
                    false => executions?
                        .Where(e => State.ExecutionPredicates.Where(p => p != State.JobPredicate).All(p => p(e)))
                        .Select(e => e.JobName)
                };
                jobNames = jobNames?.Distinct().OrderBy(j => j).AsEnumerable() ?? [];
            }
            <FilterDropdown TItem="string"
                            FilterSet="State.JobFilter"
                            Items="jobNames"
                            IsSearchable
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <SvgIcon Icon="LucideIcon.ClipboardList" />
                    Job
                </TitleTemplate>
            </FilterDropdown>
            @{
                IEnumerable<TagProjection>? jobTags = State.ShowSteps switch
                {
                    true => stepExecutions?
                        .Where(e => State.StepExecutionPredicates.Where(p => p != State.JobTagPredicate).All(p => p(e)))
                        .SelectMany(e => e.JobTags),
                    false => executions?
                        .Where(e => State.ExecutionPredicates.Where(p => p != State.JobTagPredicate).All(p => p(e)))
                        .SelectMany(e => e.JobTags)
                };
                jobTags = jobTags?.Distinct().Order().AsEnumerable() ?? [];
            }
            <FilterDropdown TItem="TagProjection"
                            FilterSet="State.JobTagFilter"
                            Items="jobTags"
                            IdSelector="t => t.TagId.ToString()"
                            TextSelector="t => t.TagName"
                            IsSearchable
                            @bind-Mode="State.JobTagFilterMode"
                            OnChange="StateHasChanged">
                <ItemTemplate Context="item">
                    <TagBadge Tag="item" />
                </ItemTemplate>
                <TitleTemplate>
                        <SvgIcon Icon="FeatherIcon.Tag" />
                        Job tag
                    </TitleTemplate>
            </FilterDropdown>
            @{
                IEnumerable<ScheduleProjection>? schedules = State.ShowSteps switch
                {
                    true => stepExecutions?
                        .Where(e => State.StepExecutionPredicates.Where(p => p != State.SchedulePredicate).All(p => p(e)))
                        .Where(e => e.ScheduleId is not null)
                        .Select(e => new ScheduleProjection((Guid)e.ScheduleId!, e.ScheduleName)),
                    false => executions?
                        .Where(e => State.ExecutionPredicates.Where(p => p != State.SchedulePredicate).All(p => p(e)))
                        .Where(e => e.ScheduleId is not null)
                        .Select(e => new ScheduleProjection((Guid)e.ScheduleId!, e.ScheduleName))
                };
                schedules = schedules?.Distinct().OrderBy(s => s.ScheduleName).AsEnumerable() ?? [];
            }
            <FilterDropdown TItem="ScheduleProjection"
                            FilterSet="State.ScheduleFilter"
                            Items="schedules"
                            IsSearchable
                            IdSelector="s => s.ScheduleId.ToString()"
                            TextSelector="s => s.ScheduleName ?? string.Empty"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <SvgIcon Icon="FeatherIcon.Calendar" />
                    Schedule
                </TitleTemplate>
            </FilterDropdown>

            @if (State.ShowSteps)
            {
                <FilterDropdown TItem="(string StepName, StepType StepType)"
                                FilterSet="State.StepFilter"
                                Items="stepExecutions?
                                   .Where(e => State.StepExecutionPredicates.Where(p => p != State.StepPredicate).All(p => p(e)))
                                   .Select(s => (s.StepName, s.StepType))
                                   .Distinct()
                                   .OrderBy(j => j)
                                   .AsEnumerable() ?? []"
                                OnChange="StateHasChanged"
                                IsSearchable>
                    <TitleTemplate>
                        <SvgIcon Icon="LucideIcon.ListChecks" />
                        Step
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIcon StepType="item.StepType" />
                        @item.StepName
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="StepType"
                                FilterSet="State.StepTypeFilter"
                                Items="stepExecutions?
                                   .Where(e => State.StepExecutionPredicates.Where(p => p != State.StepTypePredicate).All(p => p(e)))
                                   .Select(s => s.StepType)
                                   .Distinct()
                                   .OrderBy(j => j)
                                   .AsEnumerable() ?? []"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <SvgIcon Icon="FeatherIcon.Tool" />
                        Step type
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIcon StepType="item" />
                        @item.ToString()
                    </ItemTemplate>
                </FilterDropdown>
            }

            @if (!State.ShowSteps)
            {
                <FilterDropdown TItem="ExecutionStatus"
                                FilterSet="State.JobStatusFilter"
                                Items="executions?
                                   .Where(e => State.ExecutionPredicates.Where(p => p != State.JobStatusPredicate).All(p => p(e)))
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s)
                                   .AsEnumerable() ?? []"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <SvgIcon Icon="FeatherIcon.AlertCircle" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <JobExecutionStatusBadge ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
            }
            else
            {
                <FilterDropdown TItem="StepExecutionStatus"
                                FilterSet="State.StepStatusFilter"
                                Items="stepExecutions?
                                   .Where(e => State.StepExecutionPredicates.Where(p => p != State.StepStatusPredicate).All(p => p(e)))
                                   .Select(e => e.StepExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s)
                                   .AsEnumerable() ?? []"
                                OnChange="StateHasChanged">
                    <TitleTemplate>
                        <SvgIcon Icon="FeatherIcon.AlertCircle" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepExecutionStatusBadge ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="TagProjection"
                                FilterSet="State.StepTagFilter"
                                Items="stepExecutions?
                                   .Where(e => State.StepExecutionPredicates.Where(p => p != State.StepTagPredicate).All(p => p(e)))
                                   .SelectMany(e => e.StepTags)
                                   .Distinct()
                                   .Order()
                                   .AsEnumerable() ?? []"
                                IdSelector="t => t.TagId.ToString()"
                                TextSelector="t => t.TagName"
                                IsSearchable
                                @bind-Mode="State.StepTagFilterMode"
                                OnChange="StateHasChanged">
                    <ItemTemplate Context="item">
                        <TagBadge Tag="item" />
                    </ItemTemplate>
                    <TitleTemplate>
                        <SvgIcon Icon="FeatherIcon.Tag" />
                        Step tag
                    </TitleTemplate>
                </FilterDropdown>

            }

            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                @onclick="State.Clear">
                <SvgIcon Icon="FeatherIcon.X" />
                Reset
            </HxButton>
        </HxButtonGroup>
    </div>
    <div class="col-xl-auto mt-3 mt-xl-0 d-flex align-items-center">
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_all"
                   checked=@(State.StartTypeFilter == StartType.All)
                   @onchange="() => State.StartTypeFilter = StartType.All">
            <label class="form-check-label" for="radio_all">All</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_scheduled"
                   checked=@(State.StartTypeFilter == StartType.Scheduled)
                   @onchange="() => State.StartTypeFilter = StartType.Scheduled">
            <label class="form-check-label" for="radio_scheduled">Scheduled</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_manual"
                   checked=@(State.StartTypeFilter == StartType.Manual)
                   @onchange="() => State.StartTypeFilter = StartType.Manual">
            <label class="form-check-label" for="radio_manual">Manual</label>
        </div>
    </div>
</div>

@if (!State.ShowGraph)
{
    if (!State.ShowSteps)
    {
        <Paginator @ref="executionPaginator"
                   TItem="ExecutionProjection"
                   Items="GetOrderedExecutions()"
                   Context="pagedExecutions"
                   InitialPageSize="State.PageSize"
                   InitialPage="State.ExecutionsCurrentPage"
                   OnPageChanged="page => State.ExecutionsCurrentPage = page"
                   OnPageSizeChanged="size => State.PageSize = size">

            <div class="row sticky-top mt-1 py-2 bg-body" style="z-index: 999;">
                <div class="col d-flex justify-content-end">
                    <PaginationControls Paginator="executionPaginator" />
                </div>
            </div>

            <div class="card shadow-sm pt-2 mt-1 my-3 table-responsive">
                <JobExecutionsTable Executions="pagedExecutions"
                                    OnExecutionsUpdated="LoadDataAsync"
                                    OnSortingChanged="StateHasChanged" />
            </div>

        </Paginator>
    }
    else
    {
        <Paginator @ref="stepExecutionPaginator"
                   TItem="StepExecutionProjection"
                   Items="GetOrderedStepExecutions()"
                   Context="stepExecutions"
                   InitialPageSize="State.PageSize"
                   InitialPage="State.StepExecutionsCurrentPage"
                   OnPageChanged="page => State.StepExecutionsCurrentPage = page"
                   OnPageSizeChanged="size => State.PageSize = size">

            <div class="row sticky-top mt-1 py-2 bg-body" style="z-index: 999;">
                <div class="col d-flex justify-content-end">
                    <PaginationControls Paginator="stepExecutionPaginator" />
                </div>
            </div>

            <div class="card shadow-sm pt-2 mt-1 my-3 table-responsive">
                <StepExecutionsTable Executions="stepExecutions"
                                     OnStepsUpdated="LoadDataAsync"
                                     SortMode="UserState.Executions.StepExecutionSortMode"
                                     OnSortingChanged="sortMode => { UserState.Executions.StepExecutionSortMode = sortMode; StateHasChanged(); }" />
            </div>

        </Paginator>
    }
}
else
{
    <div class="card shadow-sm pt-2 mt-3 my-3">
        @if (!State.ShowSteps)
        {
            <JobExecutionsGraph Executions="GetOrderedExecutions()"
                                SortMode="UserState.Executions.ExecutionSortMode"
                                OnSortingChanged="sortMode => { UserState.Executions.ExecutionSortMode = sortMode; StateHasChanged(); }" />
        }
        else
        {
            <StepExecutionsGraph Executions="GetOrderedStepExecutions()"
                                 SortMode="UserState.Executions.StepExecutionSortMode"
                                 OnSortingChanged="sortMode => { UserState.Executions.StepExecutionSortMode = sortMode; StateHasChanged(); }" />
        }
    </div>
}

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
    <HxOffcanvas @ref="deleteOffcanvas" Size="OffcanvasSize.Small" Title="Delete executions" Backdrop="OffcanvasBackdrop.False">
        <BodyTemplate>
            <div class="row">
                <div class="col-3 d-flex justify-content-end">
                    <label class="form-label">From</label>
                </div>
                <div class="col-9">
                    <div class="input-group">
                        <div class="input-group-text">
                            <SvgIcon Icon="FeatherIcon.Calendar" />
                        </div>
                        <input @bind="deleteFrom"
                               @bind:format="yyyy-MM-ddTHH:mm:ss"
                               class="form-control form-control-sm"
                               type="datetime-local">
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-3 d-flex justify-content-end">
                    <label class="form-label">To</label>
                </div>
                <div class="col-9">
                    <div class="input-group">
                        <div class="input-group-text">
                            <SvgIcon Icon="FeatherIcon.Calendar" />
                        </div>
                        <input @bind="deleteTo"
                               @bind:format="yyyy-MM-ddTHH:mm:ss"
                               class="form-control form-control-sm"
                               type="datetime-local">
                    </div>
                </div>
            </div>
            <div class="row mt-4">
                <div class="col d-flex justify-content-end">
                    <HxButton Color="ThemeColor.Danger" OnClick="DeleteExecutionsAsync">
                        <SvgIcon Icon="FeatherIcon.Trash2" />
                        Delete
                    </HxButton>
                </div>
            </div>
        </BodyTemplate>
        <FooterTemplate>
            <HxButton Color="ThemeColor.Secondary" OnClick="() => deleteOffcanvas.LetAsync(x => x.HideAsync())">
                Close
            </HxButton>
        </FooterTemplate>
    </HxOffcanvas>
</AuthorizeView>