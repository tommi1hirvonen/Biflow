@page "/account"

@using System.Globalization

@inject IDbContextFactory<AppDbContext> DbFactory
@inject IMediator Mediator
@inject ToasterService Toaster
@inject AuthenticationMethodResolver AuthenticationResolver
@inject NavigationManager NavigationManager

<PageTitle>Account | Biflow</PageTitle>

<h4>Account</h4>

<div class="row mt-4">
    <div class="col-auto">
        <h5>Username:</h5>
    </div>
    <div class="col-auto">
        <h5>@username</h5>
    </div>
</div>
<div class="row mt-2">
    <div class="col-auto">
        <h6>Roles:</h6>
    </div>
    <div class="col-auto">
        <h6>@string.Join(", ", user?.Roles ?? [])</h6>
    </div>
</div>
<div class="row mt-2 align-items-center">
    <div class="col-auto">
        <label class="form-label mb-0">Locale:</label>
    </div>
    <div class="col-auto">
        <select class="form-select form-select-sm" @bind="selectedCulture" @bind:after="ApplySelectedCulture">
            @foreach (var culture in SupportedCultures)
            {
                <option value="@culture">@culture.DisplayName</option>
            }
        </select>
    </div>
</div>


<div class="row mt-3">
    <div class="col-lg-6">
        <div class="card shadow-sm">
            <h6 class="card-header">
                <SvgIcon Icon="FeatherIcon.AtSign" />
                Email
            </h6>
            <div class="card-body">
                @if (user is null)
                {
                    <div class="row">
                        <div class="col text-center">
                            <HxSpinner Color="ThemeColor.Secondary" />
                        </div>
                    </div>
                }
                else
                {
                    <EditForm class="mt-3" Model="user" OnValidSubmit="SubmitEmail">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <SvgIcon Icon="FeatherIcon.AtSign" />
                                </div>
                                <InputText class="form-control" type="email" @bind-Value="user.Email" placeholder="Email"></InputText>
                            </div>
                        </div>
                        <div>
                            <HxSubmit Color="ThemeColor.Success">
                                <SvgIcon Icon="FeatherIcon.Save" />
                                Save
                            </HxSubmit>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
    @if (AuthenticationResolver.AuthenticationMethod == AuthenticationMethod.BuiltIn)
    {
        <div class="col-lg-6 mt-4 mt-lg-0">
            <div class="card shadow-sm">
                <h6 class="card-header">
                    <SvgIcon Icon="FeatherIcon.Key" />
                    Password
                </h6>
                <div class="card-body">
                    @if (user is null)
                    {
                        <div class="row">
                            <div class="col text-center">
                                <HxSpinner Color="ThemeColor.Secondary" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="passwordModel" OnValidSubmit="UpdatePassword">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div>
                                <label class="form-label">Old password</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="FeatherIcon.Unlock" />
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="passwordModel.OldPassword"></InputText>
                                </div>
                            </div>
                            <div>
                                <label class="form-label">New password</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="FeatherIcon.Lock" />
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="passwordModel.Password"></InputText>
                                </div>
                            </div>
                            <div>
                                <label class="form-label">Confirm new password</label>
                                <div class="input-group">
                                    <div class="input-group-text rounded-left">
                                        <SvgIcon Icon="FeatherIcon.Key" />
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="passwordModel.ConfirmPassword"></InputText>
                                </div>
                            </div>
                            <div>
                                <HxSubmit Color="ThemeColor.Success">
                                    <SvgIcon Icon="FeatherIcon.Save" />
                                    Save
                                </HxSubmit>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    }
</div>


@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    private static readonly CultureInfo[] SupportedCultures = CultureInfo.GetCultures(CultureTypes.AllCultures);
    
    private string? username;
    private User? user;
    private PasswordModel passwordModel = new();
    private CultureInfo? selectedCulture;

    protected override async Task OnInitializedAsync()
    {
        selectedCulture = CultureInfo.CurrentCulture;

        ArgumentNullException.ThrowIfNull(AuthenticationState);
        var state = await AuthenticationState;
        username = state.User.Identity?.Name;
        await using var context = await DbFactory.CreateDbContextAsync();
        user = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(u => u.Subscriptions)
            .FirstAsync(u => u.Username == username);
    }

    private async Task SubmitEmail()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(user);
            await Mediator.SendAsync(new UpdateUserEmailCommand(user.UserId, user.Email));
            Toaster.AddSuccess("Email updated successfully");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error saving email", ex.Message);
        }
    }

    private async Task UpdatePassword()
    {
        if (username is null)
        {
            Toaster.AddError("Error", "Error getting username from authentication state");
            return;
        }

        if (!passwordModel.Password.Equals(passwordModel.ConfirmPassword))
        {
            Toaster.AddWarning("Warning", "The two passwords do not match");
            return;
        }

        try
        {
            await Mediator.SendAsync(new UpdateUserPasswordCommand(username, passwordModel.OldPassword, passwordModel.Password));
            Toaster.AddSuccess("Success", "Password updated successfully");
            passwordModel = new();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error updating password", ex.Message);
        }
    }

    private void ApplySelectedCulture()
    {
        if (selectedCulture is null || Equals(CultureInfo.CurrentCulture, selectedCulture))
        {
            return;
        }
        
        var uri = new Uri(NavigationManager.Uri)
            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var cultureEscaped = Uri.EscapeDataString(selectedCulture.Name);
        var uriEscaped = Uri.EscapeDataString(uri);

        // Navigate to the culture controller set endpoint which sets the culture cookie.
        NavigationManager.NavigateTo(
            $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
            forceLoad: true);
    }

    private class PasswordModel
    {
        [Required]
        public string OldPassword { get; set; } = "";

        [Required, ComplexPassword]
        public string Password { get; set; } = "";

        [Required]
        public string ConfirmPassword { get; set; } = "";
    }
}
