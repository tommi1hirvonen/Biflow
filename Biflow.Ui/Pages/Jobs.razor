
<PageTitle>Jobs | Biflow</PageTitle>

<h4>Jobs</h4>

<div class="row justify-content-between">
    <div class="col">
        <div class="btn-toolbar">
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                    <HxButton Color="ThemeColor.Success"
                              CssClass="me-3 mt-3"
                              OnClick="() => jobEditModal.LetAsync(x => x.ShowAsync())"
                              Spinner="false"
                              Enabled="jobs is not null">
                        Add job
                    </HxButton>
                </AuthorizeView>
                <HxButton Color="ThemeColor.Primary" @onclick="LoadLastExecutionsAsync" Enabled="!isLoading" Spinner="isLoading" CssClass="mt-3">
                    <CxIcon Icon="FeatherIcon.RefreshCw" />
                    Refresh
                </HxButton>
            </div>
    </div>
    <div class="col-auto text-end">
        <HxPopover Placement="PopoverPlacement.Left" Trigger="PopoverTrigger.Focus"
                   Content="@("<p>Jobs are collections of steps that can be orchestrated to run in a specific order.</p><p>Jobs can have multiple schedules that trigger the job and its steps to be executed. Authorized users can edit these schedules or execute jobs manually.</p>")"
                   Html>
            <HxButton Color="ThemeColor.None" CssClass="btn-auto mt-3">
                <CxIcon Icon="FeatherIcon.HelpCircle" />
            </HxButton>
        </HxPopover>
    </div>
</div>

<div class="row mt-3">
    <div class="col-xxl-5 col-xl-6 col-md-7 col-sm-8">
        <div class="input-group input-group-sm me-3">
            <div class="input-group-text">
                <CxIcon Icon="FeatherIcon.Filter" />
            </div>
            <DebounceTextInput type="search" class="form-control" @bind-Value="UserState.Jobs.JobNameFilter" placeholder="Filter by job name" />
            <DebounceTextInput type="search" class="form-control" @bind-Value="UserState.Jobs.StepNameFilter" placeholder="Filter by step name" />
        </div>
    </div>
        
    <div class="col-xl-auto col-sm-4 mt-3 mt-sm-0">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            <FilterDropdown TItem="ExecutionStatus"
                            FilterSet="UserState.Jobs.StatusFilter"
                            Items="lastExecutions?.Values.Select(e => e.ExecutionStatus).Concat(UserState.Jobs.StatusFilter).Distinct().OrderBy(s => s).AsEnumerable() ?? []"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <CxIcon Icon="FeatherIcon.Info" />
                    Status
                </TitleTemplate>
                <ItemTemplate Context="item">
                    <JobExecutionStatusBadge ExecutionStatus="item" />
                </ItemTemplate>
            </FilterDropdown>
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="() =>
                {
                    UserState.Jobs.StatusFilter.Clear();
                    UserState.Jobs.JobNameFilter = string.Empty;
                    UserState.Jobs.StepNameFilter = string.Empty;
                    UserState.Jobs.StateFilter = StateFilter.All;
                }">
                <CxIcon Icon="FeatherIcon.X" />
                Clear
            </HxButton>
        </HxButtonGroup>
    </div>

    <div class="col-xl-auto mt-xl-0 mt-3 d-flex align-items-center">
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_all"
                   checked=@(UserState.Jobs.StateFilter == StateFilter.All)
                   @onchange="() => UserState.Jobs.StateFilter = StateFilter.All">
            <label class="form-check-label" for="radio_all">All</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_enabled"
                   checked=@(UserState.Jobs.StateFilter == StateFilter.Enabled)
                   @onchange="() => UserState.Jobs.StateFilter = StateFilter.Enabled">
            <label class="form-check-label" for="radio_enabled">Enabled</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_disabled"
                   checked=@(UserState.Jobs.StateFilter == StateFilter.Disabled)
                   @onchange="() => UserState.Jobs.StateFilter = StateFilter.Disabled">
            <label class="form-check-label" for="radio_disabled">Disabled</label>
        </div>
    </div>
</div>

<Paginator @ref="paginator"
           Items="GetListItems()"
           Context="pageItems"
           InitialPageSize="UserState.Jobs.PageSize"
           InitialPage="UserState.Jobs.CurrentPage"
           OnPageChanged="page => UserState.Jobs.CurrentPage = page"
           OnPageSizeChanged="size => UserState.Jobs.PageSize = size">

    <div class="row sticky-top mt-1 py-2 bg-body" style="z-index: 999;">
        <div class="col d-flex justify-content-end">
            <PaginationControls Paginator="paginator" />
        </div>
    </div>

    <div class="card shadow-sm mb-4 table-responsive">
        <table class="table mb-0">
            <thead>
                <tr>
                    <th class="align-middle">
                        <span class="sortable" @onclick="() => UserState.Jobs.SortMode = UserState.Jobs.SortMode == JobSortMode.NameAsc ? JobSortMode.NameDesc : JobSortMode.NameAsc">
                            Job
                        </span>
                        <span class="ms-2">
                            @if (UserState.Jobs.SortMode == JobSortMode.NameAsc)
                            {
                                <CxIcon Icon="FeatherIcon.ArrowUp" />
                            }
                            else if (UserState.Jobs.SortMode == JobSortMode.NameDesc)
                            {
                                <CxIcon Icon="FeatherIcon.ArrowDown" />
                            }
                        </span>
                    </th>
                    <th>
                        <span class="sortable" @onclick="() => UserState.Jobs.SortMode = UserState.Jobs.SortMode == JobSortMode.LastExecAsc ? JobSortMode.LastExecDesc : JobSortMode.LastExecAsc">
                            Last execution
                        </span>
                        <span class="ms-2">
                            @if (UserState.Jobs.SortMode == JobSortMode.LastExecAsc)
                            {
                                <CxIcon Icon="FeatherIcon.ArrowUp" />
                            }
                            else if (UserState.Jobs.SortMode == JobSortMode.LastExecDesc)
                            {
                                <CxIcon Icon="FeatherIcon.ArrowDown" />
                            }
                        </span>
                    </th>
                    <th>
                        Status
                    </th>
                    <th>
                        <span class="sortable" @onclick="() => UserState.Jobs.SortMode = UserState.Jobs.SortMode == JobSortMode.NextExecAsc ? JobSortMode.NextExecDesc : JobSortMode.NextExecAsc">
                            Next execution
                        </span>
                        <span class="ms-2">
                            @if (UserState.Jobs.SortMode == JobSortMode.NextExecAsc)
                            {
                                <CxIcon Icon="FeatherIcon.ArrowUp" />
                            }
                            else if (UserState.Jobs.SortMode == JobSortMode.NextExecDesc)
                            {
                                <CxIcon Icon="FeatherIcon.ArrowDown" />
                            }
                        </span>
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (jobs is null)
                {
                    <tr>
                        <td colspan="5" class="text-center">
                            <HxSpinner Color="ThemeColor.Secondary" />
                        </td>
                    </tr>
                }
                else if (!jobs.Any())
                {
                    <tr>
                        <td colspan="5">
                            No jobs
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var listItem in pageItems)
                    {
                        var (item, lastExecution, nextStartTime) = listItem;
                        <ContextMenuToggle ContainerHtmlTag="tr" CssClass="@($"job-row {(item.IsEnabled ? null : "disabled")}")">
                            <ChildContent Context="menu">
                                <td class="align-middle">
                                    <a class="text-body" href="@($"jobs/{item.JobId}/steps")">
                                        <HighlightableText PartToHighlight="@UserState.Jobs.JobNameFilter" Text="@item.JobName" />
                                    </a>
                                </td>
                                <td class="align-middle">
                                    @if (lastExecution is not null)
                                    {
                                        <a class="text-body" href="javascript:void(0)" @onclick="() => GoToExecutionDetails(lastExecution.ExecutionId)">
                                            @lastExecution.StartedOn?.LocalDateTime
                                        </a>
                                    }
                                </td>
                                <td class="align-middle">
                                    @if (lastExecution is not null)
                                    {
                                        <JobExecutionStatusBadge ExecutionStatus="lastExecution.ExecutionStatus" />
                                    }
                                </td>
                                <td class="align-middle @(!item.IsEnabled ? "text-body-tertiary" : null)">
                                    @if (nextStartTime is not null)
                                    {
                                        @nextStartTime
                                        @(!item.IsEnabled ? " (job disabled)" : null)
                                    }
                                </td>
                                <td>
                                    <div class="d-inline-flex align-items-center">
                                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="enabled_@item.JobId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                                <label class="form-check-label" for="enabled_@item.JobId"></label>
                                            </div>
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" Spinner="false" CssClass="btn-auto" @onclick="e => menu.ShowContextMenuAsync(e)">
                                                <CxIcon Icon="FeatherIcon.MoreHorizontal" />
                                            </HxButton>
                                        </AuthorizeView>
                                        <AuthorizeView Roles="@($"{Roles.Operator}, {Roles.Viewer}")">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="enabled_@item.JobId" disabled checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                                <label class="form-check-label" for="enabled_@item.JobId"></label>
                                            </div>
                                        </AuthorizeView>
                                    </div>
                                </td>
                            </ChildContent>
                            <MenuContent>
                                <DropdownMenuHeader>
                                    @item.JobName
                                </DropdownMenuHeader>
                                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                    <DropdownMenuItem @onclick="() => jobEditModal.LetAsync(x => x.ShowAsync(item))">
                                        <CxIcon Icon="FeatherIcon.Edit2" />
                                        Edit
                                    </DropdownMenuItem>
                                    <DropdownMenuItem @onclick="() => DeleteJob(item)">
                                        <CxIcon Icon="FeatherIcon.Trash2" />
                                        Delete
                                    </DropdownMenuItem>
                                    <DropdownMenuItem @onclick="() => CopyJob(item)">
                                        <CxIcon Icon="FeatherIcon.Copy" />
                                        Copy
                                    </DropdownMenuItem>
                                </AuthorizeView>
                                <DropdownMenuItem @onclick="@(() => NavigationManager.NavigateTo($"jobs/{item.JobId}/history"))">
                                    <CxIcon Icon="LucideIcon.History" />
                                    History
                                </DropdownMenuItem>
                                <DropdownMenuItem @onclick="@(() => NavigationManager.NavigateTo($"jobs/{item.JobId}/schedules"))">
                                    <CxIcon Icon="FeatherIcon.Calendar" />
                                    Schedules
                                </DropdownMenuItem>
                                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                    <DropdownMenuItem @onclick="() => executeModal.LetAsync(x => x.ShowAsync(item.JobId))">
                                        <CxIcon Icon="FeatherIcon.Play" />
                                        Execute
                                    </DropdownMenuItem>
                                </AuthorizeView>
                            </MenuContent>
                        </ContextMenuToggle>
                    }
                }
            </tbody>
        </table>
    </div>
</Paginator>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
    <JobEditModal @ref="jobEditModal" OnJobSubmitted="OnJobSubmitted" />
</AuthorizeView>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
    <ExecuteModal @ref="executeModal" />
</AuthorizeView>