@page "/jobs"

@inject MarkupHelperService MarkupHelper
@inject IDbContextFactory<BiflowContext> DbFactory
@inject ISchedulerService SchedulerService
@inject DbHelperService DbHelperService
@inject IHttpContextAccessor HttpContextAccessor
@inject IHxMessengerService Messenger

<style>
    tr a {
        text-decoration: none;
    }

        tr:hover a {
            text-decoration: underline;
        }
</style>

<PageTitle>Jobs | Biflow</PageTitle>

<h4>Jobs</h4>

<div class="btn-toolbar mt-3">
    <AuthorizeView Roles="Admin, Editor">
        @*Dropdown to create new jobs*@
        <HxDropdown CssClass="me-3">
            <HxDropdownToggleButton Color="ThemeColor.Success">Add job</HxDropdownToggleButton>
            <HxDropdownContent CssClass="p-4">
                <EditForm Model="NewJob" OnValidSubmit="AddJob" Context="_context" style="min-width: 25rem;">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label class="form-label">Job name</label>
                        <div class="input-group input-group-sm">
                            <span class="input-group-text">
                                @MarkupHelper.FromFile("icons/feather/edit-3.svg")
                            </span>
                            <InputText class="form-control" @bind-Value="NewJob.JobName" autocomplete="off"></InputText>
                        </div>
                    </div>
                    <HxSubmit Size="ButtonSize.Small" Color="ThemeColor.Success" Enabled="jobs is not null" CssClass="mt-3">Add</HxSubmit>
                </EditForm>
            </HxDropdownContent>
        </HxDropdown>
    </AuthorizeView>
    <HxButton Color="ThemeColor.Primary" @onclick="LoadData" Enabled="!IsLoading" Spinner="IsLoading">
        @MarkupHelper.FromFile("icons/feather/refresh-cw.svg")
        Refresh
    </HxButton>
</div>


<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Job name
                </th>
                <th></th>
                <th>
                    Last execution
                </th>
                <th>
                    Status
                </th>
                <th>
                    Next execution
                </th>
            </tr>
        </thead>
        <tbody>
            @if (jobs is null)
            {
                <tr><td colspan="7" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (jobs.Count == 0)
            {
                <tr><td colspan="7">No jobs</td></tr>
            }
            else
            {
                @foreach (var item in jobs)
                {
                    var lastExecution = GetLastExecution(item);
                    <tr class="@(item.IsEnabled ? null : "disabled")">
                        <td class="align-middle">
                            <a class="text-dark" href="@("jobs/steps/" + item.JobId.ToString())">@item.JobName</a>
                        </td>
                        <td>
                            <div class="d-inline-flex align-items-center">
                                <AuthorizeView Roles="Admin, Editor">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="enabled_@item.JobId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                        <label class="form-check-label" for="enabled_@item.JobId"></label>
                                    </div>
                                </AuthorizeView>
                                <AuthorizeView Roles="Operator, Viewer">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="enabled_@item.JobId" disabled checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                        <label class="form-check-label" for="enabled_@item.JobId"></label>
                                    </div>
                                </AuthorizeView>

                                <AuthorizeView Roles="Admin, Editor">
                                    <HxButtonGroup CssClass="ms-2 btn-row" Size="ButtonGroupSize.Small">

                                        @*Dropdown to edit the job's name*@
                                        <HxDropdown>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() => EditJob.JobName = item.JobName">
                                                @MarkupHelper.FromFile("icons/feather/edit-2.svg")
                                            </HxDropdownToggleButton>
                                            <HxDropdownContent CssClass="p-4">
                                                <EditForm Model="EditJob" OnValidSubmit="() => UpdateJobName(item)" Context="_context" style="min-width: 25rem;">
                                                    <DataAnnotationsValidator />
                                                    <ValidationSummary />
                                                    <div>
                                                        <label class="form-label">New name</label>
                                                        <InputText class="form-control form-control-sm" @bind-Value="EditJob.JobName" autocomplete="off"></InputText>
                                                    </div>
                                                    <HxSubmit Size="ButtonSize.Small" Color="ThemeColor.Success" CssClass="mt-3">Save</HxSubmit>
                                                </EditForm>
                                            </HxDropdownContent>
                                        </HxDropdown>

                                        <HxDropdown>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                @MarkupHelper.FromFile("icons/feather/copy.svg")
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu>
                                                <HxDropdownItem @onclick="() => CopyJob(item)">Copy</HxDropdownItem>
                                            </HxDropdownMenu>
                                        </HxDropdown>

                                        <HxDropdown>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu>
                                                <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                <HxDropdownItem @onclick="() => DeleteJob(item)">Confirm</HxDropdownItem>
                                            </HxDropdownMenu>
                                        </HxDropdown>

                                    </HxButtonGroup>
                                </AuthorizeView>
                            </div>
                        </td>
                        <td class="align-middle">
                            @if (lastExecution is not null)
                            {
                                <a class="text-dark" href="javascript:void(0)" @onclick="() => OpenJobExecutionModal(lastExecution.ExecutionId)">@lastExecution.StartDateTime?.LocalDateTime</a>
                            }
                        </td>
                        <td class="align-middle">
                            @if (lastExecution is not null)
                            {
                                <JobExecutionStatusBadgeComponent ExecutionStatus_="lastExecution.ExecutionStatus" />
                            }
                        </td>
                        @{ var nextStartTime = GetNextStartTime(item); }
                        <td style="@(!item.IsEnabled ? "color: #ccc;" : null)">
                            @nextStartTime
                            @(!item.IsEnabled && nextStartTime is not null ? "(Job disabled)" : null) 
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


<JobExecutionDetailsModal @ref="JobExecutionModal" ExecutionId_="@SelectedJobExecutionId.ToString()" />


@code {
    private List<Job> jobs { get; set; } = null!;
    private Dictionary<Guid, Execution> LastExecutions { get; set; } = null!;
    private Job NewJob { get; set; } = new() { IsEnabled = true };
    private Job EditJob { get; set; } = new();

    private bool IsLoading { get; set; } = false;

    private JobExecutionDetailsModal JobExecutionModal { get; set; } = null!;
    private Guid SelectedJobExecutionId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        IsLoading = true;
        using var context = await Task.Run<BiflowContext>(DbFactory.CreateDbContext);
        jobs = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .Include(job => job.Schedules)
            .OrderBy(job => job.JobName)
            .ToListAsync();
        StateHasChanged(); // Render/publish results so far (jobs),
        await LoadLastExecutions(context); // Load last execution status for jobs (possibly heavy operation).
        IsLoading = false;
    }

    private async Task LoadLastExecutions(BiflowContext context)
    {
        // Get each job's last execution.
        var lastExecutions = await context.Executions
            .AsNoTrackingWithIdentityResolution()
            .Where(execution => jobs.Select(job => job.JobId).Contains(execution.JobId ?? Guid.Empty) && execution.StartDateTime != null)
            .Select(execution => execution.JobId)
            .Distinct()
            .Select(key => new
            {
                Key = key,
                Execution = context.Executions.Where(execution => execution.JobId == key).OrderByDescending(e => e.CreatedDateTime).First()
            })
            .ToListAsync();

        LastExecutions = lastExecutions.ToDictionary(e => e.Key ?? Guid.Empty, e => e.Execution);
        StateHasChanged();
    }

    // Helper method for Dictionary TryGet access
    private Execution? GetLastExecution(Job job)
    {
        Execution? execution = null;
        LastExecutions?.TryGetValue(job.JobId, out execution);
        return execution;
    }

    private DateTime? GetNextStartTime(Job job)
    {
        var dateTimes = job.Schedules.Where(s => s.IsEnabled).Select(s => s.GetNextFireTime());
        return dateTimes.Any() ? dateTimes.Min() : null as DateTime?;
    }

    private async Task ToggleEnabled(ChangeEventArgs args, Job job)
    {
        bool value = (bool)args.Value!;
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Attach(job);
            job.IsEnabled = !job.IsEnabled;
            await context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling job", ex.Message);
        }
    }

    private async Task UpdateJobName(Job job)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            job.JobName = EditJob.JobName;
            context.Attach(job).State = EntityState.Modified;
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            Messenger.AddError("Concurrency error", "The job was modified outside of this session. Reload the page to view the most recent values.");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error updating job", ex.Message);
        }
    }

    private async Task AddJob()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Jobs.Add(NewJob);
            await context.SaveChangesAsync();
            NewJob.Steps = new List<Step>();
            NewJob.Schedules = new List<Schedule>();
            jobs.Add(NewJob);
            jobs.Sort((job1, job2) => job1.JobName?.CompareTo(job2.JobName) ?? 0);
            NewJob = new() { IsEnabled = true };
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error adding job", ex.Message);
        }
    }

    private async Task CopyJob(Job job)
    {
        try
        {
            string user = HttpContextAccessor.HttpContext?.User?.Identity?.Name
                ?? throw new ArgumentNullException(nameof(user), "Error getting username from HttpContext");
            using var context = DbFactory.CreateDbContext();
            Guid createdJobId = await DbHelperService.JobCopyAsync(job.JobId, user);
            var createdJob = await context.Jobs
            .Include(job_ => job_.Steps)
            .Include(job_ => job_.Schedules)
            .FirstAsync(job_ => job_.JobId == createdJobId);
            jobs.Add(createdJob);
            jobs = jobs.OrderBy(job_ => job_.JobName).ToList();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error copying job", ex.Message);
        }

    }

    private async Task DeleteJob(Job job)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Jobs.Remove(job);
            await context.SaveChangesAsync();
            await SchedulerService.DeleteJobAsync(job);
            jobs.Remove(job);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting job", ex.Message);
        }
    }

    private async Task OpenJobExecutionModal(Guid executionId)
    {
        SelectedJobExecutionId = executionId;
        await JobExecutionModal.ShowAsync();
    }
}
