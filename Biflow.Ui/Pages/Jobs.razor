@page "/jobs"

@inject MarkupHelperService MarkupHelper
@inject IDbContextFactory<BiflowContext> DbFactory
@inject ISchedulerService SchedulerService
@inject DbHelperService DbHelperService
@inject IHttpContextAccessor HttpContextAccessor
@inject IHxMessengerService Messenger
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Jobs | Biflow</PageTitle>

<h4>Jobs</h4>

<div class="row justify-content-between mt-3">
    <div class="col">
        <div class="btn-toolbar">
            <AuthorizeView Roles="Admin, Editor">
                <HxButton Color="ThemeColor.Success" CssClass="me-3" OnClick="() => JobEditModal.LetAsync(x => x.ShowAsync())" Spinner="false">
                    Add job
                </HxButton>

                <HxButton Color="ThemeColor.Secondary"
                          CssClass="me-3"
                          Enabled="Categories is not null"
                          OnClick="() => CategoryEditModal.LetAsync(x => x.ShowAsync())"
                          Spinner="false">
                    Add category
                </HxButton>
            </AuthorizeView>
            <HxButton Color="ThemeColor.Primary" @onclick="LoadData" Enabled="!IsLoading" Spinner="IsLoading">
                @MarkupHelper.FromFile("icons/feather/refresh-cw.svg")
                Refresh
            </HxButton>
        </div>
    </div>
    <div class="col-auto text-end">
        <HxPopover Placement="PopoverPlacement.Left" Trigger="PopoverTrigger.Focus"
                   Content="@("<p>Jobs are collections of steps that can be orchestrated to run in a specific order.</p><p>Jobs can have multiple schedules that trigger the job and its steps to be executed. Authorized users can edit these schedules or execute jobs manually.</p>")"
                   Html>
            <HxButton Color="ThemeColor.Light">
                @MarkupHelper.FromFile("icons/feather/help-circle.svg")
            </HxButton>
        </HxPopover>
    </div>
</div>

<div class="row mt-3">
    <div class="col-xxl-4 col-xl-5 col-md-6 col-sm-7">
        <div class="input-group input-group-sm me-3">
            <div class="input-group-text">
                @MarkupHelper.FromFile("icons/feather/filter.svg")
            </div>
            <input type="search" class="form-control" @bind-value="JobNameFilter" @bind-value:event="oninput" placeholder="Filter by name" />
        </div>
    </div>
        
    <div class="col-sm-5 mt-3 mt-sm-0">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            <FilterDropdown TItem="ExecutionStatus"
                            FilterSet="StatusFilter"
                            Items="LastExecutions?.Values.Select(e => e.ExecutionStatus).Distinct().OrderBy(s => s) ?? Enumerable.Empty<ExecutionStatus>()"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    @MarkupHelper.FromFile("icons/feather/info.svg")
                    Status
                </TitleTemplate>
                <ItemTemplate Context="item">
                    <JobExecutionStatusBadgeComponent ExecutionStatus_="item" />
                </ItemTemplate>
            </FilterDropdown>
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() =>
                {
                    StatusFilter.Clear();
                    JobNameFilter = string.Empty;
                }">
                @MarkupHelper.FromFile("icons/feather/x.svg")
                Clear
            </HxButton>
        </HxButtonGroup>
    </div>  
</div>

<div class="card shadow-sm mt-4">
    <table class="table mb-0">
        <thead>
            <tr>
                <th></th>
                <th>Last execution</th>
                <th>Status</th>
                <th>Next execution</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Jobs_ is null || Categories is null)
            {
                <tr>
                    <td colspan="5" class="text-center">
                        <HxSpinner Color="ThemeColor.Secondary" />
                    </td>
                </tr>
            }
            else if (!Jobs_.Any() && !Categories.Any())
            {
                <tr>
                    <td colspan="5">
                        No jobs
                    </td>
                </tr>
            }
            else
            {
                foreach (var category in Categories.Append(null))
                {
                    var jobs = Jobs_
                        .Where(j => j.CategoryId == category?.CategoryId)
                        .Where(j => j.JobName.ContainsIgnoreCase(JobNameFilter));
                    
                    var filtersApplied = JobNameFilter.Any() || StatusFilter.Any();
                    /* Show all categories even if they do not have jobs in them. Show "No category" only if it has jobs */
                    if ((category is null || filtersApplied) && !jobs.Any())
                    {
                        continue;
                    }
                    <tr style="background-color: #f7f7f7">
                        <td colspan="4" class="align-middle fw-bold">
                            @(category?.CategoryName ?? "No category")
                        </td>
                        <td colspan="1" class="text-end">
                            <AuthorizeView Roles="Admin, Editor">
                                @if (category is not null)
                                {
                                    <div class="col-auto btn-row">
                                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" Spinner="false"
                                            OnClick="() => CategoryEditModal.LetAsync(x => x.ShowAsync(category))">
                                            @MarkupHelper.FromFile("icons/feather/edit-2.svg")
                                        </HxButton>
                                        <HxDropdownButtonGroup>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu>
                                                <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                <HxDropdownItem @onclick="() => DeleteCategoryAsync(category)">Confirm</HxDropdownItem>
                                            </HxDropdownMenu>
                                        </HxDropdownButtonGroup>
                                    </div>
                                }
                            </AuthorizeView>
                        </td>
                    </tr>
                    @foreach (var item in jobs)
                    {
                        var lastExecution = GetLastExecution(item);
                        if (StatusFilter.Any() && (lastExecution is null || !StatusFilter.Contains(lastExecution.ExecutionStatus)))
                        {
                            continue;
                        }
                        var nextStartTime = GetNextStartTime(item);
                        <tr class="job-row @(item.IsEnabled ? null : "disabled")">
                            <td class="align-middle">
                                <a class="text-dark" href="@($"jobs/{item.JobId}/steps")">
                                    <HighlightableText PartToHighlight="@JobNameFilter" Text="@item.JobName" />
                                </a>
                            </td>
                            <td class="align-middle">
                                @if (lastExecution is not null)
                                {
                                    <a class="text-dark" href="javascript:void(0)" @onclick="() => OpenJobExecutionModal(lastExecution.ExecutionId)">@lastExecution.StartDateTime?.LocalDateTime</a>
                                }
                            </td>
                            <td class="align-middle">
                                @if (lastExecution is not null)
                                {
                                    <JobExecutionStatusBadgeComponent ExecutionStatus_="lastExecution.ExecutionStatus" />
                                }
                            </td>
                            <td class="align-middle" style="@(!item.IsEnabled ? "color: #ccc;" : null)">
                                @if (nextStartTime is not null)
                                {
                                    @nextStartTime
                                    @(!item.IsEnabled ? "(Job disabled)" : null)
                                }
                            </td>
                            <td class="text-end">
                                <div class="d-inline-flex align-items-center">
                                    <AuthorizeView Roles="Admin, Editor">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="enabled_@item.JobId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                            <label class="form-check-label" for="enabled_@item.JobId"></label>
                                        </div>
                                    </AuthorizeView>
                                    <AuthorizeView Roles="Operator, Viewer">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="enabled_@item.JobId" disabled checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                            <label class="form-check-label" for="enabled_@item.JobId"></label>
                                        </div>
                                    </AuthorizeView>

                                    <AuthorizeView Roles="Admin, Editor">
                                        <HxButtonGroup CssClass="ms-2 btn-row" Size="ButtonGroupSize.Small">

                                            <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" OnClick="() => JobEditModal.LetAsync(x => x.ShowAsync(item))" Spinner="false">
                                                @MarkupHelper.FromFile("icons/feather/edit-2.svg")
                                            </HxButton>

                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                    @MarkupHelper.FromFile("icons/feather/copy.svg")
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownItem @onclick="() => CopyJob(item)">Copy</HxDropdownItem>
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>

                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                    @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                    <HxDropdownItem @onclick="() => DeleteJob(item)">Confirm</HxDropdownItem>
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>

                                        </HxButtonGroup>
                                    </AuthorizeView>
                                </div>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>

<AuthorizeView Roles="Admin, Editor">
    <JobEditModal @ref="JobEditModal" OnJobSubmitted="OnJobSubmitted" />

    <JobCategoryEditModal @ref="CategoryEditModal" OnCategorySubmitted="OnCategorySubmitted" />
</AuthorizeView>

<JobExecutionDetailsModal @ref="JobExecutionModal" ExecutionId_="@SelectedJobExecutionId.ToString()" />

@code {
    private List<Job>? Jobs_ { get; set; }
    private List<JobCategory>? Categories { get; set; }
    private Dictionary<Guid, Execution>? LastExecutions { get; set; }

    private bool IsLoading { get; set; } = false;

    private JobExecutionDetailsModal? JobExecutionModal { get; set; }
    private Guid SelectedJobExecutionId { get; set; }

    private JobCategoryEditModal? CategoryEditModal { get; set; }
    private JobEditModal? JobEditModal { get; set; }

    private string JobNameFilter { get; set; } = "";
    private HashSet<ExecutionStatus> StatusFilter { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        IsLoading = true;
        using var context = await Task.Run<BiflowContext>(DbFactory.CreateDbContext);
        Jobs_ = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .Include(job => job.Schedules)
            .Include(job => job.Category)
            .OrderBy(job => job.JobName)
            .ToListAsync();

        // For admins and editors, show all available job categories.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.IsInRole("Admin") || authState.User.IsInRole("Editor"))
        {
            Categories = await context.JobCategories
                .AsNoTrackingWithIdentityResolution()
                .OrderBy(c => c.CategoryName)
                .ToListAsync();
        }
        // For other users, only show categories for jobs they are authorized to see.
        else
        {
            Categories = Jobs_
                .Select(j => j.Category)
                .Where(c => c is not null)
                .Cast<JobCategory>()
                .DistinctBy(c => c.CategoryId)
                .ToList();
        }

        StateHasChanged(); // Render/publish results so far (jobs),
        await LoadLastExecutions(context); // Load last execution status for jobs (possibly heavy operation).
        IsLoading = false;
    }

    private async Task LoadLastExecutions(BiflowContext context)
    {
        ArgumentNullException.ThrowIfNull(Jobs_);
        // Get each job's last execution.
        var lastExecutions = await context.Executions
            .AsNoTrackingWithIdentityResolution()
            .Where(execution => Jobs_.Select(job => job.JobId).Contains(execution.JobId ?? Guid.Empty) && execution.StartDateTime != null)
            .Select(execution => execution.JobId)
            .Distinct()
            .Select(key => new
            {
                Key = key,
                Execution = context.Executions.Where(execution => execution.JobId == key).OrderByDescending(e => e.CreatedDateTime).First()
            })
            .ToListAsync();

        LastExecutions = lastExecutions.ToDictionary(e => e.Key ?? Guid.Empty, e => e.Execution);
        StateHasChanged();
    }

    // Helper method for Dictionary TryGet access
    private Execution? GetLastExecution(Job job)
    {
        Execution? execution = null;
        LastExecutions?.TryGetValue(job.JobId, out execution);
        return execution;
    }

    private DateTime? GetNextStartTime(Job job)
    {
        var dateTimes = job.Schedules.Where(s => s.IsEnabled).Select(s => s.GetNextFireTime());
        return dateTimes.Any() ? dateTimes.Min() : null as DateTime?;
    }

    private async Task ToggleEnabled(ChangeEventArgs args, Job job)
    {
        bool value = (bool)args.Value!;
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Attach(job);
            job.IsEnabled = !job.IsEnabled;
            await context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling job", ex.Message);
        }
    }

    private async Task CopyJob(Job job)
    {
        try
        {
            string user = HttpContextAccessor.HttpContext?.User?.Identity?.Name
                ?? throw new ArgumentNullException(nameof(user), "Error getting username from HttpContext");
            using var context = DbFactory.CreateDbContext();
            Guid createdJobId = await DbHelperService.JobCopyAsync(job.JobId, user);
            var createdJob = await context.Jobs
            .Include(j => j.Schedules)
            .Include(j => j.Category)
            .FirstAsync(j => j.JobId == createdJobId);
            Jobs_?.Add(createdJob);
            Jobs_ = Jobs_?.OrderBy(job_ => job_.JobName).ToList();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error copying job", ex.Message);
        }
    }

    private async Task DeleteJob(Job job)
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();
            await context.Jobs
                .Where(j => j.JobId == job.JobId)
                .ExecuteDeleteAsync();
            await SchedulerService.DeleteJobAsync(job);
            Jobs_?.Remove(job);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting job", ex.Message);
        }
    }

    private async Task OpenJobExecutionModal(Guid executionId)
    {
        SelectedJobExecutionId = executionId;
        await JobExecutionModal.LetAsync(x => x.ShowAsync());
    }

    private void OnJobSubmitted(Job job)
    {
        var remove = Jobs_?.FirstOrDefault(j => j.JobId == job.JobId);
        if (remove is not null)
        {
            job.Schedules = remove.Schedules;
            Jobs_?.Remove(remove);
        }
        else
        {
            job.Schedules = new List<Schedule>();
        }
        Jobs_?.Add(job);
        Jobs_?.Sort((j1, j2) => j1.JobName.CompareTo(j2.JobName));
    }

    private void OnCategorySubmitted(JobCategory category)
    {
        var remove = Categories?.FirstOrDefault(c => c.CategoryId == category.CategoryId);
        if (remove is not null)
        {
            Categories?.Remove(remove);
        }
        Categories?.Add(category);
        Categories?.Sort((c1, c2) => c1.CategoryName.CompareTo(c2.CategoryName));
    }

    private async Task DeleteCategoryAsync(JobCategory category)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.JobCategories.Remove(category);
            await context.SaveChangesAsync();
            Categories?.Remove(category);
            foreach (var job in Jobs_?.Where(t => t.CategoryId == category.CategoryId) ?? Enumerable.Empty<Job>())
            {
                job.CategoryId = null;
                job.Category = null;
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting category", ex.Message);
        }
    }
}
