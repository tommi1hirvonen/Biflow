
<PageTitle>Jobs | Biflow</PageTitle>

<h4>Jobs</h4>

<div class="row justify-content-between mt-3">
    <div class="col">
        <div class="btn-toolbar">
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                <HxButton Color="ThemeColor.Success"
                          CssClass="me-3"
                          OnClick="() => JobEditModal.LetAsync(x => x.ShowAsync())"
                          Spinner="false"
                          Enabled="Jobs_ is not null">
                    Add job
                </HxButton>

                <HxButton Color="ThemeColor.Secondary"
                          CssClass="me-3"
                          Enabled="Categories is not null"
                          OnClick="() => CategoryEditModal.LetAsync(x => x.ShowAsync())"
                          Spinner="false">
                    Add category
                </HxButton>
            </AuthorizeView>
            <HxButton Color="ThemeColor.Primary" @onclick="LoadData" Enabled="!IsLoading" Spinner="IsLoading">
                <CxIcon Icon="FeatherIcon.RefreshCw" />
                Refresh
            </HxButton>
        </div>
    </div>
    <div class="col-auto text-end">
        <HxPopover Placement="PopoverPlacement.Left" Trigger="PopoverTrigger.Focus"
                   Content="@("<p>Jobs are collections of steps that can be orchestrated to run in a specific order.</p><p>Jobs can have multiple schedules that trigger the job and its steps to be executed. Authorized users can edit these schedules or execute jobs manually.</p>")"
                   Html>
            <HxButton Color="ThemeColor.None" CssClass="btn-auto">
                <CxIcon Icon="FeatherIcon.HelpCircle" />
            </HxButton>
        </HxPopover>
    </div>
</div>

<div class="row mt-3">
    <div class="col-xxl-4 col-xl-5 col-md-6 col-sm-7">
        <div class="input-group input-group-sm me-3">
            <div class="input-group-text">
                <CxIcon Icon="FeatherIcon.Filter" />
            </div>
            <input type="search" class="form-control" @bind-value="JobNameFilter" @bind-value:event="oninput" placeholder="Filter by name" />
        </div>
    </div>
        
    <div class="col-sm-5 mt-3 mt-sm-0">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            <FilterDropdown TItem="ExecutionStatus"
                            FilterSet="StatusFilter"
                            Items="LastExecutions?.Values.Select(e => e.ExecutionStatus).Distinct().OrderBy(s => s) ?? Enumerable.Empty<ExecutionStatus>()"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <CxIcon Icon="FeatherIcon.Info" />
                    Status
                </TitleTemplate>
                <ItemTemplate Context="item">
                    <JobExecutionStatusBadgeComponent ExecutionStatus_="item" />
                </ItemTemplate>
            </FilterDropdown>
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="() =>
                {
                    StatusFilter.Clear();
                    JobNameFilter = string.Empty;
                }">
                <CxIcon Icon="FeatherIcon.X" />
                Clear
            </HxButton>
        </HxButtonGroup>
    </div>  
</div>

<div class="card shadow-sm mt-4 mb-4">
    <table class="table mb-0">
        <thead>
            <tr>
                <th>
                    <span title="Collapse all" @onclick="CollapseAll" style="cursor: pointer;">
                        <CxIcon Icon="FeatherIcon.ChevronsUp" />
                    </span>
                    <span class="ms-1" title="Expand all" @onclick="ExpandAll" style="cursor: pointer;">
                        <CxIcon Icon="FeatherIcon.ChevronsDown" />
                    </span>
                </th>
                <th>Last execution</th>
                <th>Status</th>
                <th>Next execution</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Jobs_ is null || Categories is null)
            {
                <tr>
                    <td colspan="5" class="text-center">
                        <HxSpinner Color="ThemeColor.Secondary" />
                    </td>
                </tr>
            }
            else if (!Jobs_.Any() && !Categories.Any())
            {
                <tr>
                    <td colspan="5">
                        No jobs
                    </td>
                </tr>
            }
            else
            {
                foreach (var category in Categories.Append(null))
                {
                    var state = category is not null
                        ? UserState.JobCategoryExpandStatuses.GetOrCreate(category.CategoryId)
                        : UserState.JobCategoryExpandStatuses.GetOrCreate(Guid.Empty);
                    var jobs = Jobs_
                        .Where(j => j.CategoryId == category?.CategoryId)
                        .Where(j => j.JobName.ContainsIgnoreCase(JobNameFilter));
                    
                    var filtersApplied = JobNameFilter.Any() || StatusFilter.Any();
                    /* Show all categories even if they do not have jobs in them. Show "No category" only if it has jobs */
                    if ((category is null || filtersApplied) && !jobs.Any())
                    {
                        continue;
                    }
                    <tr class="list-group-header">
                        <td colspan="4" class="align-middle fw-bold">
                            @if (state.IsExpanded)
                            {
                                <span title="Collapse" @onclick="() => state.IsExpanded = false" style="cursor: pointer;">
                                    <CxIcon Icon="FeatherIcon.ChevronDown" />
                                    @(category?.CategoryName ?? "No category")
                                </span>
                            }
                            else
                            {
                                <span title="Expand" @onclick="() => state.IsExpanded = true" style="cursor: pointer;">
                                    <CxIcon Icon="FeatherIcon.ChevronRight" />
                                    @(category?.CategoryName ?? "No category")
                                </span>
                            }
                        </td>
                        <td colspan="1" class="text-end">
                            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                @if (category is not null)
                                {
                                    <div class="col-auto">
                                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" Spinner="false" title="Edit"
                                            OnClick="() => CategoryEditModal.LetAsync(x => x.ShowAsync(category))">
                                            <CxIcon Icon="FeatherIcon.Edit2" />
                                        </HxButton>
                                        <HxDropdownButtonGroup>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" title="Delete">
                                                <CxIcon Icon="FeatherIcon.Trash2" />
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu>
                                                <HxDropdownHeader>Delete category?</HxDropdownHeader>
                                                <HxDropdownItem @onclick="() => DeleteCategoryAsync(category)">Confirm</HxDropdownItem>
                                            </HxDropdownMenu>
                                        </HxDropdownButtonGroup>
                                    </div>
                                }
                            </AuthorizeView>
                        </td>
                    </tr>
                    @if (!state.IsExpanded && !filtersApplied)
                    {
                        continue;
                    }
                    foreach (var item in jobs)
                    {
                        var lastExecution = GetLastExecution(item);
                        if (StatusFilter.Any() && (lastExecution is null || !StatusFilter.Contains(lastExecution.ExecutionStatus)))
                        {
                            continue;
                        }
                        var nextStartTime = GetNextStartTime(item);
                        <tr class="job-row @(item.IsEnabled ? null : "disabled")">
                            <td class="align-middle">
                                <a class="text-body" href="@($"jobs/{item.JobId}/steps")">
                                    <HighlightableText PartToHighlight="@JobNameFilter" Text="@item.JobName" />
                                </a>
                            </td>
                            <td class="align-middle">
                                @if (lastExecution is not null)
                                {
                                    <a class="text-body" href="javascript:void(0)" @onclick="() => GoToExecutionDetails(lastExecution.ExecutionId)">
                                        @lastExecution.StartDateTime?.LocalDateTime
                                    </a>
                                }
                            </td>
                            <td class="align-middle">
                                @if (lastExecution is not null)
                                {
                                    <JobExecutionStatusBadgeComponent ExecutionStatus_="lastExecution.ExecutionStatus" />
                                }
                            </td>
                            <td class="align-middle @(!item.IsEnabled ? "text-body-tertiary" : null)">
                                @if (nextStartTime is not null)
                                {
                                    @nextStartTime
                                    @(!item.IsEnabled ? "(Job disabled)" : null)
                                }
                            </td>
                            <td class="text-end">
                                <div class="d-inline-flex align-items-center">
                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="enabled_@item.JobId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                            <label class="form-check-label" for="enabled_@item.JobId"></label>
                                        </div>
                                    </AuthorizeView>
                                    <AuthorizeView Roles="@($"{Roles.Operator}, {Roles.Viewer}")">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="enabled_@item.JobId" disabled checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                            <label class="form-check-label" for="enabled_@item.JobId"></label>
                                        </div>
                                    </AuthorizeView>

                                    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                        <HxButtonGroup CssClass="ms-2" Size="ButtonGroupSize.Small">

                                            <HxButton Color="ThemeColor.None" CssClass="btn-auto" Size="ButtonSize.Small"
                                                      OnClick="() => JobEditModal.LetAsync(x => x.ShowAsync(item))" Spinner="false" title="Edit">
                                                <CxIcon Icon="FeatherIcon.Edit2" />
                                            </HxButton>

                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" title="Copy">
                                                    <CxIcon Icon="FeatherIcon.Copy" />
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownItem @onclick="() => CopyJob(item)">Copy</HxDropdownItem>
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>

                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" title="Delete">
                                                    <CxIcon Icon="FeatherIcon.Trash2" />
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownHeader>Delete job?</HxDropdownHeader>
                                                    <HxDropdownItem @onclick="() => DeleteJob(item)">Confirm</HxDropdownItem>
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>

                                        </HxButtonGroup>
                                    </AuthorizeView>
                                </div>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
    <JobEditModal @ref="JobEditModal" OnJobSubmitted="OnJobSubmitted" />

    <JobCategoryEditModal @ref="CategoryEditModal" OnCategorySubmitted="OnCategorySubmitted" />
</AuthorizeView>
