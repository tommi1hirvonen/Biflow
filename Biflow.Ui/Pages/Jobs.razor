<style>
    .job-execution-status .lucide {
        width: 18px;
        height: 18px;
    }
</style>

<PageTitle>Jobs | Biflow</PageTitle>

<h4>Jobs</h4>

<div class="row justify-content-between">
    <div class="col">
        <div class="btn-toolbar">
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                    <HxButton Color="ThemeColor.Success"
                              CssClass="me-3 mt-3"
                              OnClick="() => _jobEditModal.LetAsync(x => x.ShowAsync())"
                              Spinner="false"
                              Enabled="_jobs is not null">
                        Add job
                    </HxButton>
                </AuthorizeView>
                <HxButton Color="ThemeColor.Primary" @onclick="LoadLastExecutionsAsync" Enabled="!_isLoading" Spinner="_isLoading" CssClass="mt-3">
                    <SvgIcon Icon="LucideIcon.RefreshCw" />
                    Refresh
                </HxButton>
            </div>
    </div>
    <div class="col-auto text-end d-flex align-items-end">
        <HxPopover Placement="PopoverPlacement.Left" Trigger="PopoverTrigger.Hover" Content="Validate all steps for potential cyclic dependencies, also accounting for cross-job dependencies between steps.">
            <HxButton Color="ThemeColor.None" CssClass="btn-auto me-3" Size="ButtonSize.Small" OnClick="ValidateAllStepDependenciesAsync">
                <SvgIcon Icon="LucideIcon.Check" />
                Validate dependencies
            </HxButton>
        </HxPopover>
        
        <HxPopover Placement="PopoverPlacement.Left" Trigger="PopoverTrigger.Focus"
                   Content="@("<p>Jobs are collections of steps that can be orchestrated to run in a specific order.</p><p>Jobs can have multiple schedules that trigger the job and its steps to be executed. Authorized users can edit these schedules or execute jobs manually.</p>")"
                   Html>
            <HxButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto mt-3">
                <SvgIcon Icon="LucideIcon.CircleHelp" />
            </HxButton>
        </HxPopover>
    </div>
</div>

<div class="row mt-3">
    <div class="col-xxl-5 col-xl-6 col-md-7 col-sm-8">
        <div class="input-group input-group-sm me-3">
            <div class="input-group-text">
                <SvgIcon Icon="LucideIcon.Filter" />
            </div>
            <DebounceTextInput type="search" class="form-control" @bind-Value="UserState.Jobs.JobNameFilter" placeholder="Filter by job name" />
            <DebounceTextInput type="search" class="form-control" @bind-Value="UserState.Jobs.StepNameFilter" placeholder="Filter by step name" />
        </div>
    </div>
        
    <div class="col-xl-auto col-sm-4 mt-3 mt-sm-0">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            @{
                var statusFilterItems = _lastExecutions?.Values
                    .Select(x => x.MaxBy(e => e.CreatedOn)?.ExecutionStatus)
                    .Append(_runningJobIds.Length > 0 ? ExecutionStatus.Running : null)
                    .OfType<ExecutionStatus>()
                    .Concat(UserState.Jobs.StatusFilter)
                    .Distinct()
                    .OrderBy(s => s)
                    .AsEnumerable() ?? [];
            }
            <FilterDropdown TItem="ExecutionStatus"
                            FilterSet="UserState.Jobs.StatusFilter"
                            Items="statusFilterItems"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <SvgIcon Icon="LucideIcon.Info"/>
                    Status
                </TitleTemplate>
                <ItemTemplate Context="item">
                    <JobExecutionStatusBadge ExecutionStatus="item"/>
                </ItemTemplate>
            </FilterDropdown>
            @{
                var tags = _jobs?
                    .SelectMany(j => j.Tags)
                    .Select(t => new TagProjection(t.TagId, t.TagName, t.Color, t.SortOrder))
                    .Concat(UserState.Jobs.TagFilter)
                    .Distinct()
                    .Order()
                    .AsEnumerable() ?? [];
            }
            <FilterDropdown TItem="TagProjection"
                            FilterSet="UserState.Jobs.TagFilter"
                            Items="tags"
                            IdSelector="t => t.TagId.ToString()"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <SvgIcon Icon="LucideIcon.Tag"/>
                    Tag
                </TitleTemplate>
                <ItemTemplate Context="item">
                    <TagBadge Tag="item"/>
                </ItemTemplate>
            </FilterDropdown>
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="() => { UserState.Jobs.StatusFilter.Clear(); UserState.Jobs.TagFilter.Clear(); UserState.Jobs.JobNameFilter = string.Empty; UserState.Jobs.StepNameFilter = string.Empty; UserState.Jobs.StateFilter = StateFilter.All; }">
                <SvgIcon Icon="LucideIcon.X"/>
                Clear
            </HxButton>
        </HxButtonGroup>
    </div>

    <div class="col-xl-auto mt-xl-0 mt-3 d-flex align-items-center">
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_all"
                   checked=@(UserState.Jobs.StateFilter == StateFilter.All)
                   @onchange="() => UserState.Jobs.StateFilter = StateFilter.All">
            <label class="form-check-label" for="radio_all">All</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_enabled"
                   checked=@(UserState.Jobs.StateFilter == StateFilter.Enabled)
                   @onchange="() => UserState.Jobs.StateFilter = StateFilter.Enabled">
            <label class="form-check-label" for="radio_enabled">Enabled</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" class="form-check-input" id="radio_disabled"
                   checked=@(UserState.Jobs.StateFilter == StateFilter.Disabled)
                   @onchange="() => UserState.Jobs.StateFilter = StateFilter.Disabled">
            <label class="form-check-label" for="radio_disabled">Disabled</label>
        </div>
    </div>
</div>

@{
    var listItems = GetListItems().ToArray();
    var count = listItems.Count();
    var selectedText = _selectedJobs.Count switch
    {
        1 => $"{_selectedJobs.Count} selected job",
        > 1 => $"{_selectedJobs.Count} selected jobs",
        _ => ""
    };
}

<Paginator @ref="_paginator"
           Items="listItems"
           Context="pageItems"
           InitialPageSize="UserState.Jobs.PageSize"
           InitialPage="UserState.Jobs.CurrentPage"
           OnPageChanged="page => UserState.Jobs.CurrentPage = page"
           OnPageSizeChanged="size => UserState.Jobs.PageSize = size">

    <div class="row justify-content-xl-between sticky-top mt-1 py-2 bg-body" style="z-index: 999;">
         <div class="col">
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")" Context="auth1">
                @if (_selectedJobs.Count > 0)
                {
                    <HxButtonGroup Size="ButtonGroupSize.Small">
                        <HxButton Size="ButtonSize.Small"
                                  Color="ThemeColor.None"
                                  CssClass="btn-auto"
                                  OnClick="() => ExecuteMultipleModal.LetAsync(x => x.ShowAsync(_selectedJobs))">
                            <SvgIcon Icon="LucideIcon.Play" />
                            Execute...
                        </HxButton>
                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")" Context="auth2">
                            <HxDropdownButtonGroup>
                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                    <SvgIcon Icon="LucideIcon.ToggleRight" />
                                    Enable
                                </HxDropdownToggleButton>
                                <HxDropdownMenu>
                                    <HxDropdownItem @onclick="() => ToggleSelectedEnabled(true)">
                                        Confirm
                                    </HxDropdownItem>
                                </HxDropdownMenu>
                            </HxDropdownButtonGroup>
                            <HxDropdownButtonGroup>
                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                    <SvgIcon Icon="LucideIcon.ToggleLeft" />
                                    Disable
                                </HxDropdownToggleButton>
                                <HxDropdownMenu>
                                    <HxDropdownItem @onclick="() => ToggleSelectedEnabled(false)">
                                        Confirm
                                    </HxDropdownItem>
                                </HxDropdownMenu>
                            </HxDropdownButtonGroup>
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" Spinner="false" @onclick="() => _jobsBatchEditTagsModal.LetAsync(x => x.ShowAsync())">
                                <SvgIcon Icon="LucideIcon.Tag" />
                                Edit tags
                            </HxButton>
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="DeleteSelectedJobsAsync">
                                <SvgIcon Icon="LucideIcon.Trash2" />
                                Delete...
                            </HxButton>
                        </AuthorizeView>
                    </HxButtonGroup>
                }
            </AuthorizeView>
        </div>
        <div class="col-xl-auto mt-xl-0 mt-3 d-flex justify-content-end">
            <PaginationControls Paginator="_paginator" />
        </div>
    </div>

    <div class="card mb-4 table-responsive">
        <table class="table mb-0">
            <thead>
                <tr>
                    <th class="align-middle d-flex align-items-center">
                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                            <TriStateCheckbox CssClass="me-0"
                                              Checked="@(_selectedJobs.Count > 0 && listItems.Any() && count > 0)"
                                              Indeterminate="@(_selectedJobs.Any() && _selectedJobs.Count != count)"
                                              CheckedChanged="value => ToggleJobsSelected(listItems.Select(i => i.Job), value)" />
                        </AuthorizeView>
                        @if (!string.IsNullOrEmpty(selectedText))
                        {
                            <div class="text-muted small fw-normal me-3">@selectedText</div>
                        }
                        <span class="sortable" @onclick="UserState.Jobs.ToggleSortName">
                            Job
                        </span>
                        <span class="ms-2">
                            @switch (UserState.Jobs.SortMode)
                            {
                                case JobSortMode.NameAsc:
                                    <SvgIcon Icon="LucideIcon.MoveUp" />
                                    break;
                                case JobSortMode.NameDesc:
                                    <SvgIcon Icon="LucideIcon.MoveDown" />
                                    break;
                            }
                        </span>
                    </th>
                    <th>
                        <span class="sortable" @onclick="UserState.Jobs.ToggleSortLastExec">
                            Last execution
                        </span>
                        <span class="ms-2">
                            @switch (UserState.Jobs.SortMode)
                            {
                                case JobSortMode.LastExecAsc:
                                    <SvgIcon Icon="LucideIcon.MoveUp" />
                                    break;
                                case JobSortMode.LastExecDesc:
                                    <SvgIcon Icon="LucideIcon.MoveDown" />
                                    break;
                            }
                        </span>
                    </th>
                    <th>
                        Status
                    </th>
                    <th>
                        <span class="sortable" @onclick="UserState.Jobs.ToggleSortNextExec">
                            Next execution
                        </span>
                        <span class="ms-2">
                            @switch (UserState.Jobs.SortMode)
                            {
                                case JobSortMode.NextExecAsc:
                                    <SvgIcon Icon="LucideIcon.MoveUp" />
                                    break;
                                case JobSortMode.NextExecDesc:
                                    <SvgIcon Icon="LucideIcon.MoveDown" />
                                    break;
                            }
                        </span>
                    </th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (_jobs is null)
                {
                    <tr>
                        <td colspan="6" class="text-center">
                            <HxSpinner Color="ThemeColor.Secondary" />
                        </td>
                    </tr>
                }
                else if (!_jobs.Any())
                {
                    <tr>
                        <td colspan="6">
                            No jobs
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var listItem in pageItems ?? [])
                    {
                        var (item, lastExecutions, schedule, nextStartTime) = listItem;
                        var lastExecution = lastExecutions.MaxBy(e => e.CreatedOn);
                        <ContextMenuToggle ContainerHtmlTag="tr" CssClass="@($"job-row {(item.IsEnabled ? null : "disabled")}")">
                            <ChildContent Context="menu">
                                <td class="align-middle">
                                    <div class="row">
                                        <div class="col">
                                            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                                <div class="form-check form-check-inline me-0">
                                                    <input type="checkbox" class="form-check-input" id="select_job_@item.JobId"
                                                           checked=@_selectedJobs.Contains(item)
                                                           @onchange="_ => { if (!_selectedJobs.Add(item)) _selectedJobs.Remove(item); }">
                                                    <label class="form-check-label" for="select_job_@item.JobId"></label>
                                                </div>
                                            </AuthorizeView>
                                            <a class="text-body" href="@($"jobs/{item.JobId}/steps")">
                                                <HighlightableText PartToHighlight="@UserState.Jobs.JobNameFilter" Text="@item.JobName" />
                                            </a>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            @foreach (var tag in item.Tags.Order())
                                            {
                                                <TagBadge Tag="tag" CssClass="m-1" />
                                            }
                                        </div>
                                        
                                    </div>
                                </td>
                                <td class="align-middle">
                                    @if (lastExecution is not null)
                                    {
                                        var title = lastExecution switch
                                        {
                                            { ScheduleName.Length: > 0 } => $"Scheduled by: {lastExecution.ScheduleName}",
                                            { CreatedBy.Length: > 0 } => $"Created by: {lastExecution.CreatedBy}",
                                            _ => null
                                        };
                                        <a class="text-body" href="@($"executions/{lastExecution.ExecutionId}/list")" title="@title">
                                            @lastExecution.StartedOn?.LocalDateTime
                                        </a>
                                    }
                                </td>
                                <td class="align-middle">
                                    @foreach (var execution in lastExecutions)
                                    {
                                        var content = GetStatusPopoverHtml(execution);
                                        <HxPopover Trigger="PopoverTrigger.Focus"
                                                   Placement="PopoverPlacement.Top"
                                                   WrapperCssClass="pointer job-execution-status"
                                                   Html
                                                   Content="@content">
                                            <a tabindex="0" title="@execution.ExecutionStatus">
                                                <JobExecutionStatusIcon ExecutionStatus="execution.ExecutionStatus"/>
                                            </a>
                                        </HxPopover>
                                    }
                                </td>
                                <td class="align-middle @(!item.IsEnabled ? "text-body-tertiary" : null)">
                                    @if (nextStartTime is not null)
                                    {
                                        <span title="Schedule: @schedule?.ScheduleName">
                                            @nextStartTime
                                            @(!item.IsEnabled ? " (job disabled)" : null)
                                        </span>
                                    }
                                </td>
                                <td class="align-middle">
                                    <div class="d-inline-flex align-items-center">
                                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="enabled_@item.JobId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                                <label class="form-check-label" for="enabled_@item.JobId"></label>
                                            </div>
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" Spinner="false" CssClass="btn-auto" @onclick="e => menu.ShowContextMenuAsync(e)">
                                                <SvgIcon Icon="LucideIcon.Ellipsis" />
                                            </HxButton>
                                        </AuthorizeView>
                                        <AuthorizeView Roles="@($"{Roles.Operator}, {Roles.Viewer}")">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" id="enabled_@item.JobId" disabled checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                                <label class="form-check-label" for="enabled_@item.JobId"></label>
                                            </div>
                                        </AuthorizeView>
                                    </div>
                                </td>
                                <td class="align-middle">
                                    <div class="d-inline-flex align-items-center" title="Pinned job">
                                        @if (item.IsPinned)
                                        {
                                            <SvgIcon Icon="LucideIcon.Pin" />
                                        }
                                    </div>
                                </td>
                            </ChildContent>
                            <MenuContent>
                                <DropdownMenuHeader>
                                    @item.JobName
                                </DropdownMenuHeader>
                                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                    <DropdownMenuItem @onclick="() => TogglePinned(item)">
                                        @if (item.IsPinned)
                                        {
                                            <SvgIcon Icon="LucideIcon.PinOff"/>
                                            <span>Unpin</span>
                                        }
                                        else
                                        {
                                            <SvgIcon Icon="LucideIcon.Pin"/>
                                            <span>Pin</span>
                                        }
                                    </DropdownMenuItem>
                                    <DropdownMenuItem @onclick="() => _jobEditModal.LetAsync(x => x.ShowAsync(item))">
                                        <SvgIcon Icon="LucideIcon.Pen" />
                                        Edit
                                    </DropdownMenuItem>
                                    <DropdownMenuItem @onclick="() => CopyJob(item)">
                                        <SvgIcon Icon="LucideIcon.Copy" />
                                        Copy
                                    </DropdownMenuItem>
                                </AuthorizeView>
                                <DropdownMenuItem @onclick="@(() => _jobHistoryOffcanvas.LetAsync(x => x.ShowAsync(item.JobId)))">
                                    <SvgIcon Icon="LucideIcon.Activity" />
                                    History
                                </DropdownMenuItem>
                                <DropdownMenuLink href="@($"jobs/{item.JobId}/schedules")">
                                    <SvgIcon Icon="LucideIcon.Calendar" />
                                    Schedules
                                </DropdownMenuLink>
                                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                                    <DropdownMenuItem @onclick="() => _executeModal.LetAsync(x => x.ShowAsync(item.JobId))">
                                        <SvgIcon Icon="LucideIcon.Play" />
                                        Execute...
                                    </DropdownMenuItem>
                                </AuthorizeView>
                                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                                    <DropdownMenuItem @onclick="() => DeleteJob(item)">
                                        <SvgIcon Icon="LucideIcon.Trash2" />
                                        Delete...
                                    </DropdownMenuItem>
                                </AuthorizeView>
                            </MenuContent>
                        </ContextMenuToggle>
                    }
                }
            </tbody>
        </table>
    </div>
</Paginator>

<JobHistoryOffcanvas @ref="_jobHistoryOffcanvas" />

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
    <JobEditModal @ref="_jobEditModal" OnJobSubmitted="OnJobSubmitted" />
</AuthorizeView>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
    <ExecuteModal @ref="_executeModal" />
</AuthorizeView>

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
    <JobsBatchEditTagsModal @ref="_jobsBatchEditTagsModal"
                            OnJobsSubmit="OnJobsSubmit"
                            SelectedJobs="_selectedJobs" />
</AuthorizeView>