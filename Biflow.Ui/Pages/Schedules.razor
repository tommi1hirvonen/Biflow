@page "/schedules/{Component?}"

@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbFactory

<style>
    tr a {
        text-decoration: none;
    }

        tr a:hover {
            text-decoration: underline;
        }

    .white-space-pre {
        white-space: pre;
    }
</style>

<PageTitle>Schedules | Biflow</PageTitle>

<h4>Schedules</h4>

<div class="row mt-3 mb-4">
    <div class="col">
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" Match="NavLinkMatch.All" href="@($"schedules")">
                    <SvgIcon Icon="FeatherIcon.List" />
                    List
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" Match="NavLinkMatch.All" href="@($"schedules/graph")">
                    <SvgIcon Icon="LucideIcon.BarChartHorizontal" />
                    Graph
                </NavLink>
            </li>
        </ul>
    </div>
</div>

@{
    var filterJobs = _schedules?
        .Where(s => State.Predicates.Where(p => p != State.JobPredicate).All(p => p(s)))
        .Select(s => (s.Job.JobId, s.Job.JobName))
        .Concat(State.JobFilter)
        .Distinct()
        .Order()
        .AsEnumerable()
        ?? [];
    var filterJobTags = _schedules?
        .Where(s => State.Predicates.Where(p => p != State.JobTagPredicate).All(p => p(s)))
        .SelectMany(s => s.Job.Tags)
        .Select(t => new TagProjection(t.TagId, t.TagName, t.Color, t.SortOrder))
        .Concat(UserState.Jobs.TagFilter)
        .Distinct()
        .Order()
        .AsEnumerable() ?? [];
    var filterScheduleTags = _schedules?
        .Where(s => State.Predicates.Where(p => p != State.ScheduleTagPredicate).All(p => p(s)))
        .SelectMany(s => s.Tags)
        .Select(t => new TagProjection(t.TagId, t.TagName, t.Color, t.SortOrder))
        .Distinct()
        .Order()
        .AsEnumerable() ?? [];
}

<div class="row">
    <div class="col-auto d-flex align-items-center">
        <SvgIcon Icon="FeatherIcon.Filter" />
        &nbsp;
        Filters
    </div>
    <div class="col-auto">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            <FilterDropdown TItem="(Guid JobId, string JobName)"
                            FilterSet="State.JobFilter"
                            Items="filterJobs"
                            IdSelector="j => j.JobId.ToString()"
                            TextSelector="j => j.JobName"
                            IsSearchable
                            DelayItemsRender
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <SvgIcon Icon="LucideIcon.ClipboardList" />
                    Job
                </TitleTemplate>
            </FilterDropdown>
            <FilterDropdown TItem="TagProjection"
                            FilterSet="State.JobTagFilter"
                            Items="filterJobTags"
                            IdSelector="t => t.TagId.ToString()"
                            TextSelector="t => t.TagName"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <SvgIcon Icon="FeatherIcon.Tag" />
                    Job tag
                </TitleTemplate>
                <ItemTemplate Context="item">
                    <TagBadge Tag="item" />
                </ItemTemplate>
            </FilterDropdown>
            <FilterDropdown TItem="TagProjection"
                            FilterSet="State.ScheduleTagFilter"
                            Items="filterScheduleTags"
                            IdSelector="t => t.TagId.ToString()"
                            TextSelector="t => t.TagName"
                            OnChange="StateHasChanged">
                <TitleTemplate>
                    <SvgIcon Icon="FeatherIcon.Tag" />
                    Schedule tag
                </TitleTemplate>
                <ItemTemplate Context="item">
                    <TagBadge Tag="item" />
                </ItemTemplate>
            </FilterDropdown>
            <HxButton Size="ButtonSize.Small"
                      Color="ThemeColor.None" 
                      CssClass="btn-auto" 
                      OnClick="State.Clear">
                <SvgIcon Icon="FeatherIcon.X" />
                Clear
            </HxButton>
        </HxButtonGroup>
    </div>
    <div class="col">
        <div class="input-group input-group-sm">
            <div class="input-group-text">
                <SvgIcon Icon="FeatherIcon.Search" />
            </div>
            <input type="search"
                   class="form-control form-control-sm"
                   placeholder="Search schedules"
                   style="max-width: 20rem;"
                   @bind-value="State.ScheduleFilter"
                   @bind-value:event="oninput" />
        </div>
    </div>
</div>

@switch (Component)
{
    case null:
        <SchedulesList Schedules="_schedules" Jobs="_jobs" FilteredSchedules="FilteredSchedules" OnSchedulesChanged="StateHasChanged" />
        break;
    case "graph":
        <SchedulesGraph Schedules="_schedules" FilteredSchedules="FilteredSchedules" OnSchedulesChanged="StateHasChanged" />
        break;
    default:
        <p>No component to display with component parameter @Component</p>
        break;
}

@code {
    [CascadingParameter] public UserState UserState { get; set; } = null!;

    [Parameter] public string? Component { get; set; }

    private SchedulesPageState State => UserState.Schedules;

    private readonly CancellationTokenSource _cts = new();

    private List<Job>? _jobs;
    private List<Schedule>? _schedules;

    private IEnumerable<Schedule>? FilteredSchedules => _schedules?.Where(s => State.Predicates.All(p => p(s)));

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _jobs = await context.Jobs
            .Include(j => j.Tags)
            .OrderBy(job => job.JobName)
            .ToListAsync(_cts.Token);
        _schedules = await context.Schedules
            .Include(schedule => schedule.Job)
            .ThenInclude(j => j.Tags)
            .Include(schedule => schedule.Tags)
            .Include(schedule => schedule.TagFilter)
            .OrderBy(schedule => schedule.Job.JobName)
            .ThenBy(schedule => schedule.ScheduleName)
            .ToListAsync(_cts.Token);
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
}
