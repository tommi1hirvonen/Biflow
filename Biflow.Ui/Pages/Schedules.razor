@page "/schedules"

@inject IDbContextFactory<BiflowContext> DbFactory
@inject IHxMessengerService Messenger
@inject ISchedulerService SchedulerService
@inject MarkupHelperService MarkupHelper

<style>
    tr a {
        text-decoration: none;
    }

        tr a:hover {
            text-decoration: underline;
        }

    .white-space-pre {
        white-space: pre;
    }
</style>

<PageTitle>Schedules | Biflow</PageTitle>

<h4>Schedules</h4>

<AuthorizeView Roles="Admin, Editor, Operator">
    <div class="mt-3">
        <HxButton Color="ThemeColor.Success" @onclick="async () => await EditModal.ShowAsync(Guid.Empty)" Enabled="Jobs is not null && Jobs?.Any() == true">
            Add schedule
        </HxButton>
        <HxButton CssClass="ms-3" Color="ThemeColor.Primary" @onclick="SynchronizeSchedulerService">
            @MarkupHelper.FromFile("icons/feather/refresh-cw.svg")
            Synchronize
        </HxButton>
    </div>
</AuthorizeView>


<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Job
                </th>
                <th>
                    Schedule name
                </th>
                <th>
                    Enabled
                </th>
                <th>
                    Cron expression
                </th>
                <th>
                    Next execution
                </th>
                <th>
                    Tag filters
                </th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Schedules_ is null)
            {
                <tr><td colspan="6">Loading...</td></tr>
            }
            else if (Schedules_.Count == 0)
            {
                <tr><td colspan="6">No schedules</td></tr>
            }
            else
            {
                @foreach (var item in Schedules_)
                {
                    <tr class="@(item.IsEnabled ? null : "disabled")">
                        <td class="align-middle">
                            <a class="text-dark" href="@("jobs/schedules/" + item.JobId)">
                                @item.Job.JobName
                            </a>
                        </td>
                        <td class="align-middle">
                            @item.ScheduleName
                        </td>
                        <td class="align-middle">
                            <div class="form-check form-switch">
                                <AuthorizeView Roles="Admin, Editor, Operator">
                                    <input type="checkbox" class="form-check-input" id="@item.ScheduleId" checked=@item.IsEnabled @onchange="args => ToggleEnabled(args, item)">
                                    <label class="form-check-label" for="@item.ScheduleId"></label>
                                </AuthorizeView>
                                <AuthorizeView Roles="Viewer">
                                    <input type="checkbox" class="form-check-input" disabled checked=@item.IsEnabled>
                                    <label class="form-check-label" for="@item.ScheduleId"></label>
                                </AuthorizeView>
                            </div>
                        </td>
                        <td>
                            <div class="d-inline-flex">
                                @item.CronExpression
                                &nbsp;&nbsp;
                                <HxTooltip Placement="TooltipPlacement.Auto"
                                           Text="@item.GetScheduleDescription()">
                                    @MarkupHelper.FromFile("icons/feather/info.svg")
                                </HxTooltip>
                            </div>
                        </td>
                        <td>
                            <div class="d-inline-flex" style="@(!item.IsEnabled || !item.Job.IsEnabled ? "color: #ccc;" : null)">
                                @item.GetNextFireTime()
                                @(!item.IsEnabled ? "(Schedule disabled)" : null)
                                @(!item.Job.IsEnabled ? "(Job disabled)" : null)
                                &nbsp;&nbsp;
                                <HxTooltip Placement="TooltipPlacement.Auto"
                                           Text="@("Next execution(s) (first 10):\n" + string.Join("\n", item.GetNextFireTimes(15)))"
                                           CssClass="white-space-pre">
                                    @MarkupHelper.FromFile("icons/feather/info.svg")
                                </HxTooltip>
                            </div>
                        </td>
                        <td>
                            <AuthorizeView Roles="Admin, Editor, Operator">
                                <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                    <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" CssClass="btn-row"
                                              @onclick="async () => await EditModal.ShowAsync(item.ScheduleId)">
                                        @MarkupHelper.FromFile("icons/feather/edit-2.svg")
                                    </HxButton>
                                </HxButtonGroup>
                            </AuthorizeView>
                            @if (!item.Tags.Any())
                            {
                                <span class="text-secondary ms-2">No tag filters</span>
                            }
                            @foreach (var tag in item.Tags.OrderBy(t => t.TagName))
                            {
                                <TagComponent Tag="tag" CssClass="m-1" />
                            }
                        </td>
                        <td align="center">
                            <AuthorizeView Roles="Admin, Editor, Operator">
                                <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                    <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" CssClass="btn-row" @onclick="() => DeleteSchedule(item)">
                                        @MarkupHelper.FromFile("icons/feather/delete.svg")
                                    </HxButton>
                                </HxButtonGroup>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<AuthorizeView Roles="Admin, Editor, Operator">
    <ScheduleEditModal @ref="EditModal" Jobs="Jobs" OnSubmit="OnScheduleSubmit" />
</AuthorizeView>


@code {
    private List<Job>? Jobs { get; set; }

    private List<Schedule>? Schedules_ { get; set; }

    private ScheduleEditModal EditModal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<BiflowContext>(DbFactory.CreateDbContext);
        Jobs = await context.Jobs.OrderBy(job => job.JobName).ToListAsync();
        Schedules_ = await context.Schedules
            .AsNoTrackingWithIdentityResolution()
            .Include(schedule => schedule.Job)
            .Include(schedule => schedule.Tags)
            .OrderBy(schedule => schedule.Job.JobName)
            .ThenBy(schedule => schedule.ScheduleName)
            .ToListAsync();
    }

    private async Task ToggleEnabled(ChangeEventArgs args, Schedule schedule)
    {
        bool value = (bool)args.Value!;
        try
        {
            using var context = DbFactory.CreateDbContext();
            using var transaction = context.Database.BeginTransaction();
            context.Attach(schedule);
            schedule.IsEnabled = !schedule.IsEnabled;
            await context.SaveChangesAsync();
            try
            {
                await SchedulerService.ToggleScheduleEnabledAsync(schedule, value);
                await transaction.CommitAsync();
            }
            catch (Exception)
            {
                await transaction.RollbackAsync();
                schedule.IsEnabled = !schedule.IsEnabled;
                throw;
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling schedule", ex.Message);
        }
    }

    private void OnScheduleSubmit(Schedule schedule)
    {
        Schedules_?.RemoveAll(s => s.ScheduleId == schedule.ScheduleId);
        Schedules_?.Add(schedule);
    }

    private async Task DeleteSchedule(Schedule schedule)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            using var transaction = context.Database.BeginTransaction();
            context.Schedules.Remove(schedule);
            await context.SaveChangesAsync();
            try
            {
                await SchedulerService.RemoveScheduleAsync(schedule);
                transaction.Commit();
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }

            Schedules_?.Remove(schedule);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting schedule", ex.Message);
        }
    }

    private async Task SynchronizeSchedulerService()
    {
        try
        {
            await SchedulerService.SynchronizeAsync();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error synchronizing", ex.Message);
        }
    }

}
