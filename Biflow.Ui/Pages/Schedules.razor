@page "/schedules/{Component?}"

@inject IDbContextFactory<AppDbContext> DbFactory
@inject IHxMessengerService Messenger
@inject ISchedulerService SchedulerService

<style>
    tr a {
        text-decoration: none;
    }

        tr a:hover {
            text-decoration: underline;
        }

    .white-space-pre {
        white-space: pre;
    }
</style>

<PageTitle>Schedules | Biflow</PageTitle>

<h4>Schedules</h4>

<div class="row mt-3 mb-4">
    <div class="col">
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" Match="NavLinkMatch.All" href="@($"schedules")">
                    <CxIcon Icon="FeatherIcon.List" />
                    List
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" Match="NavLinkMatch.All" href="@($"schedules/graph")">
                    <CxIcon Icon="LucideIcon.BarChartHorizontal" />
                    Graph
                </NavLink>
            </li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col">
        <FilterDropdown TItem="Job"
                        FilterSet="JobFilter"
                        Items="Jobs?.Where(j => Schedules_?.Any(s => s.JobId == j.JobId) ?? false) ?? Enumerable.Empty<Job>()"
                        IdSelector="j => j.JobId.ToString()"
                        TextSelector="j => j.JobName"
                        IsSearchable
                        OnChange="StateHasChanged">
            <TitleTemplate>
                <CxIcon Icon="FeatherIcon.Filter" />
                Job
            </TitleTemplate>
        </FilterDropdown>
    </div>
</div>

@if (Component is null)
{
    <SchedulesListComponent Schedules="Schedules_" Jobs="Jobs" FilteredSchedules="FilteredSchedules" OnSchedulesChanged="StateHasChanged" />
}
else if (Component == "graph")
{
    <SchedulesGraphComponent Schedules="Schedules_" FilteredSchedules="FilteredSchedules" OnSchedulesChanged="StateHasChanged" />
}
else
{
    <p>No component to display with component parameter @Component</p>
}

@code {
    [Parameter] public string? Component { get; set; }

    private List<Job>? Jobs { get; set; }

    private List<Schedule>? Schedules_ { get; set; }

    private HashSet<Job> JobFilter { get; set; } = new();

    private IEnumerable<Schedule> FilteredSchedules =>
        Schedules_
        ?.Where(s => !JobFilter.Any() || JobFilter.Any(f => f.JobId == s.JobId))
        ?? Enumerable.Empty<Schedule>();

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run(DbFactory.CreateDbContext);
        Jobs = await context.Jobs
            .Include(j => j.Category)
            .OrderBy(job => job.JobName)
            .ToListAsync();
        Schedules_ = await context.Schedules
            .AsNoTrackingWithIdentityResolution()
            .Include(schedule => schedule.Job)
            .Include(schedule => schedule.Tags)
            .OrderBy(schedule => schedule.Job.JobName)
            .ThenBy(schedule => schedule.ScheduleName)
            .ToListAsync();
    }

}
