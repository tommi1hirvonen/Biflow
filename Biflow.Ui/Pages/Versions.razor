@page "/versions"

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject EnvironmentSnapshotBuilder SnapshotBuilder
@inject IHttpContextAccessor HttpContext

<PageTitle>Versions | Biflow</PageTitle>

<h4>Versions</h4>

<div class="row mt-3">
    <div class="col">
        <HxButton Color="ThemeColor.Success" OnClick="CreateVersionAsync">
            Create version
        </HxButton>
    </div>
</div>

<div class="row my-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Version id</th>
                            <th>Description</th>
                            <th>Created on</th>
                            <th>Created by</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (versions is null)
                        {
                            <tr>
                                <td colspan="4" class="text-center">
                                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                                </td>
                            </tr>
                        }
                        else if (versions.Count == 0)
                        {
                            <tr>
                                <td colspan="4">
                                    No versions
                                </td>
                            </tr>
                        }
                        else
                        {
                            foreach (var version in versions)
                            {
                                <tr>
                                    <td>
                                        <span class="link-primary text-decoration-underline pointer" @onclick="() => OpenDetailsAsync(version.VersionId)">
                                            @version.VersionId
                                        </span>
                                    </td>
                                    <td>
                                        @version.Description
                                    </td>
                                    <td>
                                        @version.CreatedDateTime
                                    </td>
                                    <td>
                                        @version.CreatedBy
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<HxOffcanvas @ref="detailsOffcanvas" Size="OffcanvasSize.Large" Title="@($"Version {detailsVersion?.VersionId}")">
    <BodyTemplate>
        <div>
            <CodeEditor @ref="detailsEditor"
                        Language="json"
                        ReadOnly
                        InitialHeight="calc(100vh - 120px)"
                        InitialValueExpression="() => detailsVersion?.Snapshot"/>
        </div>
    </BodyTemplate>
</HxOffcanvas>

@code {
    private IList<VersionProjection>? versions;
    private HxOffcanvas? detailsOffcanvas;
    private EnvironmentVersion? detailsVersion;
    private CodeEditor? detailsEditor;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        versions = await context.EnvironmentVersions
            .OrderByDescending(v => v.VersionId)
            .Select(v => new VersionProjection(v.VersionId, v.Description, v.CreatedDateTime, v.CreatedBy))
            .ToListAsync();
    }

    private async Task CreateVersionAsync()
    {
        var snapshot = await SnapshotBuilder.CreateAsync();
        var version = new EnvironmentVersion
        {
            Snapshot = snapshot,
            Description = "Test description",
            CreatedDateTime = DateTimeOffset.Now,
            CreatedBy = HttpContext.HttpContext?.User.Identity?.Name
        };
        using var context = await DbContextFactory.CreateDbContextAsync();
        context.EnvironmentVersions.Add(version);
        await context.SaveChangesAsync();
        versions?.Insert(0, new(version.VersionId, version.Description, version.CreatedDateTime, version.CreatedBy));
    }

    private async Task OpenDetailsAsync(int versionId)
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        detailsVersion = await context.EnvironmentVersions.FirstOrDefaultAsync(v => v.VersionId == versionId);
        await detailsOffcanvas.LetAsync(x => x.ShowAsync());
    }

    private record VersionProjection(int VersionId, string? Description, DateTimeOffset CreatedDateTime, string? CreatedBy);
}
