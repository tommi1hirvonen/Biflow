@page "/versions/{Page?}/{VersionId:int?}"

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.VersionManager}, {Roles.Editor}")]

@inject NavigationManager NavigationManager
@inject IDbContextFactory<AppDbContext> DbContextFactory

<PageTitle>Versions | Biflow</PageTitle>

@if (Page is null or "compare" or "help")
{
    <h4>Versions</h4>

    <div class="row mt-3 mb-4">
        <div class="col">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="versions" Match="NavLinkMatch.All">
                        <SvgIcon Icon="FeatherIcon.List" />
                        List
                    </NavLink>
                </li>
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="versions/compare">
                        <SvgIcon Icon="LucideIcon.GitCompareArrows" />
                        Compare
                    </NavLink>
                </li>
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="versions/help">
                        <SvgIcon Icon="FeatherIcon.HelpCircle" />
                        Help
                    </NavLink>
                </li>
            </ul>
        </div>
    </div>
}

@if (Page is null)
{
    <VersionsList Versions="versions" />   
}
else if (Page == "compare")
{
    <VersionsCompare Versions="versions" InitialSourceVersionId="VersionId" />
}
else if (Page == "help")
{
    <VersionsHelp />
}
else if (Page == "revert")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.VersionManager}")">
        <VersionRevert VersionId="VersionId" />
    </AuthorizeView>
}
else if (Page == "revertjson")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.VersionManager}")">
        <VersionRevertJson />
    </AuthorizeView>
}

@code {
    [Parameter] public string? Page { get; set; }

    [Parameter] public int? VersionId { get; set; }

    private IList<VersionProjection>? versions;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbContextFactory.CreateDbContextAsync();
        versions = await context.EnvironmentVersions
            .OrderByDescending(v => v.VersionId)
            .Select(v => new VersionProjection(v.VersionId, v.Description, v.CreatedOn, v.CreatedBy))
            .ToListAsync();
    }
}