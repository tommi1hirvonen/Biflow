@page "/subscriptions"

@inject IDbContextFactory<AppDbContext> DbFactory

<PageTitle>Subscriptions | Biflow</PageTitle>

<h4>Subscriptions</h4>

<UserSubscriptions User="user" Jobs="jobs" Steps="steps" Tags="tags" />

@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter] public string? Page { get; set; }

    private User? user;
    private List<JobProjection>? jobs;
    private List<StepTag>? tags;
    private List<StepProjection>? steps;

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(AuthenticationState);
        var authState = await AuthenticationState;
        var username = authState.User.Identity?.Name;

        using var context = await Task.Run(DbFactory.CreateDbContext);
        user = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(user => user.Subscriptions)
            .FirstAsync(user => user.Username == username);
        jobs = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(job => job.JobName)
            .Select(j => new JobProjection(j.JobId, j.JobName, j.ExecutionMode))
            .ToListAsync();
        steps = await context.Steps
            .AsNoTrackingWithIdentityResolution()
            .Select(s => new StepProjection(
                s.StepId,
                s.JobId,
                s.Job.JobName,
                s.StepName,
                s.StepType,
                s.ExecutionPhase,
                s.IsEnabled,
                s.Tags.ToArray(),
                s.Dependencies.Select(d => new DependencyProjection(d.StepId, d.DependantOnStepId, d.DependencyType)).ToArray()))
            .ToListAsync();
        tags = await context.StepTags
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
        tags.Sort();
    }
}