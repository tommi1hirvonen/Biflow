@page "/subscriptions/{Page?}"

@inject IHttpContextAccessor HttpContextAccessor
@inject IDbContextFactory<BiflowContext> DbFactory

<PageTitle>Subscriptions | Biflow</PageTitle>

<h4>Subscriptions</h4>

<AuthorizeView Roles="@(Roles.Admin)">
    <ul class="nav nav-tabs mt-3 mb-4" role="tablist">
        <li class="nav-item" role="presentation">
            <NavLink class="nav-link" href="subscriptions" Match="NavLinkMatch.All">
                My subscriptions
            </NavLink>
        </li>
        <li class="nav-item" role="presentation">
            <NavLink class="nav-link" href="subscriptions/all">
                All subscriptions
            </NavLink>
        </li>
    </ul>
</AuthorizeView>

@if (Page is null)
{
    <UserSubscriptions User="User" Jobs="Jobs" Steps="Steps" Tags="Tags" />
}
else if (Page == "all")
{
    <AuthorizeView Roles="@(Roles.Admin)">
        <Authorized>
            <AllSubscriptions Jobs="Jobs" Steps="Steps" Tags="Tags" />
        </Authorized>
        <NotAuthorized>
            <p class="mt-4">Not authorized</p>
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <p>Sorry, nothing at this address.</p>
}

@code {
    [Parameter] public string? Page { get; set; }

    private string? Username => HttpContextAccessor.HttpContext?.User?.Identity?.Name;

    private User? User { get; set; }

    private IEnumerable<JobProjection>? Jobs { get; set; }

    private IEnumerable<Tag>? Tags { get; set; }

    private IEnumerable<StepProjection>? Steps { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run(DbFactory.CreateDbContext);
        User = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(user => user.Subscriptions)
            .FirstAsync(user => user.Username == Username);
        Jobs = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(job => job.JobName)
            .Select(j => new JobProjection(j.JobId, j.JobName, j.UseDependencyMode, j.CategoryId, j.Category))
            .ToArrayAsync();
        Steps = await context.Steps
            .AsNoTrackingWithIdentityResolution()
            .Select(s => new StepProjection(s.StepId, s.JobId, s.StepName, s.StepType, s.ExecutionPhase, s.IsEnabled, s.Tags.ToArray(), s.Dependencies.Select(d => d.DependantOnStepId).ToArray()))
            .ToArrayAsync();
        Tags = await context.Tags
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(t => t.TagName)
            .ToArrayAsync();
    }
}
