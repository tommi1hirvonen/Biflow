
<PageTitle>Executions | Biflow</PageTitle>

<div class="row">
    <div class="col">
        <div>
            <a href="executions">
                All executions
            </a>
            <span>&nbsp;/&nbsp;</span>
            @if (Execution?.Job is not null)
            {
                <strong>
                    <a href="@($"jobs/{Execution.Job.JobId}/steps")">
                        @Execution.Job.JobName
                    </a>
                </strong>   
            }
            else
            {
                <strong>@Execution?.JobName</strong>
            }
            <span>&nbsp;/&nbsp;@Execution?.ExecutionId</span>
        </div>
    </div>
</div>

<div class="row mt-2">
    <div class="col">
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item" role="presentation">
                <span class="nav-link @(ShowReport == Report.Table ? "active" : null)" @onclick="() => ShowReport = Report.Table">
                    <CxIcon Icon="FeatherIcon.Table" />
                    Table
                </span>
            </li>
            <li class="nav-item" role="presentation">
                <span class="nav-link @(ShowReport == Report.Gantt ? "active" : null)" @onclick="() => ShowReport = Report.Gantt">
                    <CxIcon Icon="LucideIcon.BarChartHorizontal" />
                    Gantt
                </span>
            </li>
            <li class="nav-item" role="presentation">
                <span class="nav-link @(ShowReport == Report.Dependencies ? "active" : null)" @onclick="() => ShowReport = Report.Dependencies">
                    <CxIcon Icon="LucideIcon.Network" />
                    Dependencies
                </span>
            </li>
            <li class="nav-item" role="presentation">
                <span class="nav-link @(ShowReport == Report.ExecutionDetails ? "active" : null)" @onclick="() => ShowReport = Report.ExecutionDetails">
                    <CxIcon Icon="FeatherIcon.Info" />
                    Execution details
                </span>
            </li>
            <li class="nav-item" role="presentation">
                <span class="nav-link @(ShowReport == Report.Parameters ? "active" : null)" @onclick="() => ShowReport = Report.Parameters">
                    <CxIcon Icon="FeatherIcon.AtSign" />
                    Parameters
                </span>
            </li>
            <li class="nav-item ms-auto" role="presentation">
                <span class="nav-link @(ShowReport == Report.History ? "active" : null) @(Loading ? "disabled" : null)" @onclick="() => ShowReport = Report.History">
                    <CxIcon Icon="LucideIcon.History" />
                    History
                </span>
            </li>
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                <li class="nav-item" role="presentation">
                    <span class="nav-link @(ShowReport == Report.Rerun ? "active" : null) @(Loading ? "disabled" : null)" @onclick="() => ShowReport = Report.Rerun">
                        <CxIcon Icon="FeatherIcon.Repeat" />
                        Rerun
                    </span>
                </li>
            </AuthorizeView>
        </ul>
    </div>
</div>

@if (ShowStatusBar)
{
    <div class="row mt-3 @(ShowReport == Report.Table || ShowReport == Report.Gantt ? "sticky-top bg-body" : null)">
        <div class="col-auto align-self-center">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Primary" @onclick="LoadData" Enabled="!Loading">
                <CxIcon Icon="FeatherIcon.RefreshCw" />
                Refresh
            </HxButton>
        </div>
        <div class="col-auto align-self-center form-check form-check-inline ms-3">
            <input type="checkbox" class="form-check-input" id="check_auto_refresh"
                   @bind-value="AutoRefresh"
                   checked=@AutoRefresh>
            <label class="form-check-label" for="check_auto_refresh" title="Automatically refresh in 5 second intervals">
                Auto-refresh
            </label>
        </div>
        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
            @if (Execution is not null && Execution.ExecutionStatus == ExecutionStatus.Running)
            {
                <div class="col-auto align-self-center">
                    <HxDropdownButtonGroup>
                        <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None"
                                                CssClass="@(Stopping ? "btn-auto disabled text-danger" : "btn-auto text-danger")">
                            <CxIcon Icon="FeatherIcon.XOctagon" />
                            Stop
                        </HxDropdownToggleButton>
                        <HxDropdownMenu>
                            <HxDropdownItem @onclick="StopJobExecutionAsync" Enabled="!Stopping">Confirm</HxDropdownItem>
                        </HxDropdownMenu>
                    </HxDropdownButtonGroup>
                </div>
            }
        </AuthorizeView>
        <div class="col-auto">
            <dl class="mx-1">
                <dt>Started</dt>
                <dd>@Execution?.StartDateTime?.LocalDateTime</dd>
            </dl>
        </div>
        <div class="col-auto">
            <dl class="mx-1">
                <dt>Ended</dt>
                <dd>@Execution?.EndDateTime?.LocalDateTime</dd>
            </dl>
        </div>
        <div class="col-auto">
            <dl class="mx-1">
                <dt>Duration</dt>
                <dd>@Execution?.GetDurationInReadableFormat()</dd>
            </dl>
        </div>
        <div class="col-lg mb-lg-0 mb-3">
            <span class="fw-bold">Progress</span>
            <div class="progress mt-1 @Execution?.ExecutionStatus.ToString().ToLower()">
                <div class="progress-bar" style="width: @($"{Execution?.GetProgressPercent() ?? 0}%");" />
            </div>
        </div>
    </div>
}

@if (ShowReport == Report.ExecutionDetails)
{
    <div class="card shadow-sm pt-2 mb-4 mt-3">
        <table class="table table-hover">
            <tbody>
                @if (Execution is null)
                {
                    <tr>
                        <td class="text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>Execution id</td>
                        <td>@Execution.ExecutionId</td>
                    </tr>
                    <tr>
                        <td>Job id</td>
                        <td>
                            @if (Execution.Job is not null)
                            {
                                <a href="@($"jobs/{Execution.Job.JobId}/steps")">@Execution.Job.JobId</a>
                            }
                            else
                            {
                                @Execution.JobId
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>Created</td>
                        <td>@Execution.CreatedDateTime.LocalDateTime</td>
                    </tr>
                    <tr>
                        <td>Started</td>
                        <td>@Execution.StartDateTime?.LocalDateTime</td>
                    </tr>
                    <tr>
                        <td>Ended</td>
                        <td>@Execution.EndDateTime?.LocalDateTime</td>
                    </tr>
                    <tr>
                        <td>Duration</td>
                        <td>@Execution.GetDurationInReadableFormat()</td>
                    </tr>
                    <tr>
                        <td>Status</td>
                        <td><JobExecutionStatusBadgeComponent ExecutionStatus_="@Execution.ExecutionStatus" /></td>
                    </tr>
                    <tr>
                        <td>Number of steps</td>
                        <td>@Execution.StepExecutions.Count</td>
                    </tr>
                    <tr>
                        <td>Success percent</td>
                        <td>@Execution.GetSuccessPercent().FormatPercentage(0)</td>
                    </tr>
                    <tr>
                        <td>Created by</td>
                        <td>
                            @if (Execution.Schedule is not null)
                            {
                                <text>@Execution.Schedule.ScheduleName (schedule, @Execution.Schedule.GetScheduleDescription())</text>
                            }
                            else if (Execution.ScheduleName is not null)
                            {
                                <text>@Execution.ScheduleName (removed schedule, @Biflow.Ui.Core.Extensions.GetCronExpressionDescription(Execution.CronExpression))</text>
                            }
                            else if (Execution.ScheduleId is not null)
                            {
                                <text>Removed schedule (name not available)</text>
                            }
                            else if (Execution.ParentExecution is StepExecutionAttemptReference parent)
                            {
                                var json = JsonSerializer.Serialize(parent);
                                // Replace execution id in json with a link to the parent execution's details.
                                var jsonWithLink = json.Replace(parent.ExecutionId.ToString(), $"<a href=\"executions/{parent.ExecutionId}\">{parent.ExecutionId}</a>");
                                <small>
                                    @((MarkupString)jsonWithLink)
                                </small>
                            }
                            else
                            {
                                <text>@Execution.CreatedBy (user)</text>
                            }
                        </td>
                    </tr>
                    @if (Execution.Schedule is not null)
                    {
                        <tr>
                            <td>Schedule</td>
                            <td>@Execution.Schedule.ScheduleName (@Execution.Schedule.GetScheduleDescription())</td>
                        </tr>
                    }
                    else if (!string.IsNullOrEmpty(Execution.ScheduleName))
                    {
                        <tr>
                            <td>Schedule</td>
                            <td>@Execution.ScheduleName (@Biflow.Ui.Core.Extensions.GetCronExpressionDescription(Execution.CronExpression))</td>
                        </tr>
                    }
                    <tr>
                        <td>Executor PID</td>
                        <td>@Execution.ExecutorProcessId</td>
                    </tr>
                    <tr>
                        <td>Execution mode</td>
                        <td>
                            @if (Execution.DependencyMode)
                            {
                                <span>
                                    <CxIcon Icon="LucideIcon.Network" />
                                    Dependency mode
                                </span>
                            }
                            else
                            {
                                <span>
                                    <CxIcon Icon="FeatherIcon.Layers" />
                                    Execution phase
                                </span>
                            }
                        </td>
                    </tr>
                    @if (!Execution.DependencyMode)
                    {
                        <tr>
                            <td>Stop on first error</td>
                            <td>@Execution.StopOnFirstError</td>
                        </tr>
                    }
                    <tr>
                        <td>Max parallel steps</td>
                        <td>@Execution.MaxParallelSteps</td>
                    </tr>
                    <tr>
                        <td>Overtime notification limit (min)</td>
                        <td>@Execution.OvertimeNotificationLimitMinutes</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (ShowReport == Report.Parameters)
{
    <div class="card shadow-sm pt-2 mb-4 mt-3">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Value</th>
                    <th>Datatype</th>
                </tr>
            </thead>
            <tbody>
                @if (Execution is null)
                {
                    <tr>
                        <td colspan="3" class="text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </td>
                    </tr>
                }
                else if (!Execution.ExecutionParameters.Any())
                {
                    <tr>
                        <td colspan="3">No parameters</td>
                    </tr>
                }
                else
                {
                    foreach (var param in Execution.ExecutionParameters)
                    {
                        <tr>
                            <td>@param.DisplayName</td>
                            <td class="font-monospace">@param.DisplayValue</td>
                            <td>@param.DisplayValueType</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@if (ShowReport == Report.Table || ShowReport == Report.Gantt)
{
    <div class="row mt-1">
        <div class="col d-inline">
            <CxIcon Icon="FeatherIcon.Filter" />
            <span class="me-3">Filter</span>

            <HxButtonGroup Size="ButtonGroupSize.Small">
                <FilterDropdown TItem="(string StepName, StepType StepType)"
                            FilterSet="StepFilter"
                            Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible steps based on tag filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                    StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible steps based on step status filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible steps based on step type filter
                                .Select(s => (s.StepName, s.StepType))
                                .Distinct()
                                .OrderBy(j => j) ?? Enumerable.Empty<(string, StepType)>()"
                            OnChange="StateHasChanged"
                            IsSearchable="true">
                    <TitleTemplate>
                        <CxIcon Icon="LucideIcon.ListChecks" />
                        Step
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIconComponent StepType_="item.StepType" />
                        @item.StepName
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="StepType"
                            FilterSet="StepTypeFilter"
                            Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step types based on tag filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                    StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible step types based on step status filter
                                .Where(s => !StepFilter.Any() || StepFilter.Contains((s.StepName, s.StepType))) // Limit visible step types based on step filter
                                .Select(s => s.StepType)
                                .Distinct()
                                .OrderBy(j => j) ?? Enumerable.Empty<StepType>()"
                            OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tool" />
                        Step type
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIconComponent StepType_="item" />
                        @item.ToString()
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="StepExecutionStatus"
                            FilterSet="StepStatusFilter"
                            Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step statuses based on tag filter
                                .Where(s => !StepFilter.Any() || StepFilter.Contains((s.StepName, s.StepType))) // Limit visible step statuses based on step filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible step statuses based on step type filter
                                .SelectMany(s => s.StepExecutionAttempts)
                                .Select(e => e.ExecutionStatus)
                                .Distinct()
                                .OrderBy(s => s) ?? Enumerable.Empty<StepExecutionStatus>()"
                            OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.AlertCircle" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepExecutionStatusBadgeComponent ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="string"
                            FilterSet="TagFilter"
                            Items="Execution?.StepExecutions
                                .Where(s => !StepFilter.Any() || StepFilter.Contains((s.StepName, s.StepType))) // Limit visible tags based on step filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible tags based on step type filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                            StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible tags based on step status filter
                                .SelectMany(e => e.Step?.Tags.Select(t => t.TagName) ?? Enumerable.Empty<string>())
                                .Distinct()
                                .OrderBy(s => s) ?? Enumerable.Empty<string>()"
                            OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tag" />
                        Tag
                    </TitleTemplate>
                </FilterDropdown>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                      @onclick="() => { StepStatusFilter.Clear(); StepFilter.Clear(); StepTypeFilter.Clear(); TagFilter.Clear(); }">
                    <CxIcon Icon="FeatherIcon.X" />
                    Reset
                </HxButton>
            </HxButtonGroup>
        </div>
        <div class="col-xxl d-inline mt-3 mt-xxl-0">
            <CxIcon Icon="LucideIcon.SortDesc" />
            <span class="me-3">Sort</span>
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_started_asc"
                       checked=@(SortMode == SortMode.StartedAsc)
                       @onchange="() => SortMode = SortMode.StartedAsc">
                <label class="form-check-label" for="radio_started_asc">Started <sup>asc</sup></label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_started_desc"
                       checked=@(SortMode == SortMode.StartedDesc)
                       @onchange="() => SortMode = SortMode.StartedDesc">
                <label class="form-check-label" for="radio_started_desc">Started<sup>desc</sup></label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_duration_asc"
                       checked=@(SortMode == SortMode.DurationAsc)
                       @onchange="() => SortMode = SortMode.DurationAsc">
                <label class="form-check-label" for="radio_duration_asc">Duration<sup>asc</sup></label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_duration_desc"
                       checked=@(SortMode == SortMode.DurationDesc)
                       @onchange="() => SortMode = SortMode.DurationDesc">
                <label class="form-check-label" for="radio_duration_desc">Duration<sup>desc</sup></label>
            </div>
        </div>
    </div>
}

@if (ShowReport == Report.Table)
{
    <div class="card shadow-sm mt-3 pt-2">
        <StepExecutionsTableComponent
            ShowDetailed="false"
            Executions="FilteredExecutions
                        ?.OrderBy(e => SortMode switch
                        {
                            SortMode.DurationAsc => e.ExecutionInSeconds,
                            SortMode.DurationDesc => -e.ExecutionInSeconds,
                            _ => null
                        })
                        // asc => Show not started steps last. desc => Show not started steps first.
                        .ThenBy(e => SortMode == SortMode.StartedAsc ? e.StartDateTime is null : e.StartDateTime is not null)
                        .ThenBy(e => SortMode == SortMode.StartedAsc ? e.StartDateTime : null)
                        .ThenByDescending(e => SortMode == SortMode.StartedDesc ? e.StartDateTime : null)
                        .ThenBy(e => e.EndDateTime is null)
                        .ThenBy(e => e.EndDateTime)
                        .ThenBy(e => e.ExecutionPhase)
                        .ThenBy(e => e.StepName)"
            DetailStepProvider="e => Executions?.FirstOrDefault(x => x.ExecutionId == e.ExecutionId && x.StepId == e.StepId && x.RetryAttemptIndex == e.RetryAttemptIndex)" />
    </div>
    
}
else if (ShowReport == Report.Gantt)
{
    <div class="card shadow-sm mt-3 pt-3">
        <StepExecutionsGraphComponent
            Executions="FilteredExecutions"
            SortMode="SortMode"
            DetailStepProvider="e => Executions?.FirstOrDefault(x => x.ExecutionId == e.ExecutionId && x.StepId == e.StepId && x.RetryAttemptIndex == e.RetryAttemptIndex)" />
    </div>
    
}
else if (ShowReport == Report.Dependencies)
{
    if (Execution?.DependencyMode == false)
    {
        <HxAlert Color="ThemeColor.Warning" CssClass="mt-3">
            Job executed in execution phase mode. Dependencies have no effect.
        </HxAlert>
    }
    <div class="row align-items-end mb-3">
        <div class="col-xl-5 col-lg-5 col-12">
            <HxAutosuggest @bind-Value="DependencyGraphStepFilter"
                        @bind-Value:after="LoadGraph"
                        DataProvider="ProvideSuggestions"
                        TextSelector="TextSelector"
                        MinimumLength="0"
                        Delay="1"
                        InputSize="InputSize.Small"
                        Placeholder="Filter step">
                <ItemTemplate Context="item">
                    <StepTypeIconComponent StepType_="item.StepType" />
                    @item.StepName
                </ItemTemplate>
                <EmptyTemplate>
                    <span class="p-2">No matching steps</span>
                </EmptyTemplate>
            </HxAutosuggest>
        </div>
        <div class="col-lg-auto d-flex flex-row align-items-end">
            <div class="form-group">
                <label class="form-label">Depth backwards</label>
                <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@("<p>The depth of traversal backwards when drawing the dependency graph starting from the filtered step.</p><p>Available only when the graph has been filtered.</p><p>0 = no limit</p>")">
                <ChildContent>
                    <span style="cursor: pointer;">
                        <CxIcon Icon="FeatherIcon.Info" />
                    </span>
                </ChildContent>
                </HxPopover>
                <input class="form-control form-control-sm" type="number" @bind-value="FilterDepthBackwards" disabled=@(DependencyGraphStepFilter is null) style="max-width: 9rem;" />
            </div>
            <div class="form-group ms-3">
                <label class="form-label">Depth forwards</label>
                <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@("<p>The depth of traversal forwards when drawing the dependency graph starting from the filtered step.</p><p>Available only when the graph has been filtered.</p><p>0 = no limit</p>")">
                <ChildContent>
                    <span style="cursor: pointer;">
                        <CxIcon Icon="FeatherIcon.Info" />
                    </span>
                </ChildContent>
                </HxPopover>
                <input class="form-control form-control-sm" type="number" @bind-value="FilterDepthForwards" disabled=@(DependencyGraphStepFilter is null) style="max-width: 9rem;" />
            </div>
            <HxButton CssClass="ms-3" Size="ButtonSize.Small" Color="ThemeColor.Secondary" OnClick="LoadGraph">
                Apply depth filters
            </HxButton>
        </div>
    </div>
}
else if (ShowReport == Report.Rerun)
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
        <div class="mt-3">
            <RerunComponent Execution="Execution" />
        </div>
    </AuthorizeView>
}
else if (ShowReport == Report.History && Execution?.JobId is Guid jobId)
{
    <div class="mt-3">
        <JobHistoryComponent JobId="jobId" JobName="Execution.JobName" />
    </div>
}

<DependencyGraph @ref="DependencyGraph"
                 TItem="StepExecution"
                 Items="Execution?.StepExecutions ?? Enumerable.Empty<StepExecution>()"
                 KeySelector="s => s.StepId.ToString()"
                 CssClass="dependency-graph"
                 hidden=@(ShowReport != Report.Dependencies)>
    <DropdownMenuTemplate Context="step">
        <li>
            <h6 class="dropdown-header">
                <StepTypeIconComponent StepType_="step.StepType" />
                @step.StepName
            </h6>
        </li>
        <li>
            <span class="dropdown-item" role="button" @onclick="async () => { DependencyGraphStepFilter = step; await LoadGraph(); }">
                <CxIcon Icon="FeatherIcon.Filter" />
                Limit graph to this
            </span>
        </li>
        <li>
            <span class="dropdown-item" role="button" @onclick="() => ShowStepExecutionOffcanvas(step)">
                <CxIcon Icon="FeatherIcon.Info" />
                Details
            </span>
        </li>
        <li>
            <span class="dropdown-item" role="button" @onclick="() => StepHistoryOffcanvas.LetAsync(x => x.ShowAsync(step.StepId))">
                <CxIcon Icon="LucideIcon.History" />
                History
            </span>
        </li>
    </DropdownMenuTemplate>
</DependencyGraph>

<StepExecutionDetailsOffcanvas @ref="StepExecutionDetailsOffcanvas" />

<StepHistoryOffcanvas @ref="StepHistoryOffcanvas" />