
<PageTitle>Executions | Biflow</PageTitle>

<div class="row">
    <div class="col">
        <div>
            <a href="executions">
                All executions
            </a>
            <span>&nbsp;/&nbsp;</span>
            @if (Execution?.Job is not null)
            {
                <strong>
                    <a href="@($"jobs/{Execution.Job.JobId}/steps")">
                        @Execution.Job.JobName
                    </a>
                </strong>   
            }
            else
            {
                <strong>@Execution?.JobName</strong>
            }
        </div>
    </div>
</div>

<HxButtonToolbar CssClass="mt-3">

    <HxButtonGroup>
        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="() => JobExecutionDetailsOpen = !JobExecutionDetailsOpen"
                  CssClass="@(JobExecutionDetailsOpen ? "active" : null)">
            <CxIcon Icon="FeatherIcon.Info" />
            Execution details
        </HxButton>
        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="() => ParametersOpen = !ParametersOpen"
                  CssClass="@(ParametersOpen ? "active" : null)">
            <CxIcon Icon="FeatherIcon.AtSign" />
            Parameters
        </HxButton>
    </HxButtonGroup>
    

    <HxButtonGroup CssClass="ms-3">
        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(ShowReport == Report.Table ? "active" : null)"
                  @onclick="() => ShowReport = Report.Table">
            <CxIcon Icon="FeatherIcon.Table" />
            Table
        </HxButton>
        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(ShowReport == Report.Gantt ? "active" : null)"
                  @onclick="() => ShowReport = Report.Gantt">
            <CxIcon Icon="LucideIcon.BarChartHorizontal" />
            Gantt
        </HxButton>
        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(ShowReport == Report.Dependencies ? "active" : null)"
                  @onclick="() => ShowReport = Report.Dependencies">
            <CxIcon Icon="LucideIcon.Network" />
            Dependencies
        </HxButton>
    </HxButtonGroup>

    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Primary" @onclick="LoadData" Enabled="!Loading" CssClass="ms-3">
        <CxIcon Icon="FeatherIcon.RefreshCw" />
        Refresh
    </HxButton>

    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(ShowReport == Report.History ? "active ms-auto" : "ms-auto")"
            @onclick="() => ShowReport = Report.History" Enabled="!Loading">
        <CxIcon Icon="LucideIcon.History" />
        History
    </HxButton>

    <AuthorizeView Roles="Admin, Editor, Operator">
        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(ShowReport == Report.Rerun ? "active ms-3" : "ms-3")"
                  @onclick="() => ShowReport = Report.Rerun" Enabled="!Loading">
            <CxIcon Icon="FeatherIcon.Repeat" />
            Rerun
        </HxButton>
    </AuthorizeView>

</HxButtonToolbar>

<AuthorizeView Roles="Admin, Editor, Operator">
    @if (Execution is not null && Execution.ExecutionStatus == ExecutionStatus.Running)
    {
        <HxButtonToolbar CssClass="mt-3">
            <HxDropdownButtonGroup>
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None"
                                        CssClass="@(Stopping ? "btn-auto disabled text-danger" : "btn-auto text-danger")">
                    <CxIcon Icon="FeatherIcon.XOctagon" />
                    Stop
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    <HxDropdownItem @onclick="StopJobExecutionAsync" Enabled="!Stopping">Confirm</HxDropdownItem>
                </HxDropdownMenu>
            </HxDropdownButtonGroup>
        </HxButtonToolbar>
    }
</AuthorizeView>

<div class="row my-1">
    <p></p>
</div>

@if (Execution is not null && JobExecutionDetailsOpen)
{
    <dl class="row border rounded">
        <dt class="col-sm-3">
            Execution id
        </dt>
        <dd class="col-sm-9">
            @Execution.ExecutionId
        </dd>
        <dt class="col-sm-3">
            Job id
        </dt>
        <dd class="col-sm-9">
            @if (Execution.Job is not null)
            {
                <a href="@($"jobs/{Execution.Job.JobId}/steps")">@Execution.Job.JobId</a>
            }
            else
            {
                @Execution.JobId
            }
        </dd>
        <dt class="col-sm-3">
            Executor PID
        </dt>
        <dd class="col-sm-9">
            @Execution.ExecutorProcessId
        </dd>
        <dt class="col-sm-3">
            Execution mode
        </dt>
        <dd class="col-sm-9">
            @if (Execution.DependencyMode)
            {
                <span>
                    <CxIcon Icon="LucideIcon.Network" />
                    Dependency mode
                </span>
            }
            else
            {
                <span>
                    <CxIcon Icon="FeatherIcon.Layers" />
                    Execution phase
                </span>
            }
        </dd>
        @if (!Execution.DependencyMode)
        {
            <dt class="col-sm-3">
                Stop on first error
            </dt>
            <dd class="col-sm-9">
                @Execution.StopOnFirstError
            </dd>
        }
        <dt class="col-sm-3">
            Max parallel steps
        </dt>
        <dd class="col-sm-9">
            @Execution.MaxParallelSteps
        </dd>
        <dt class="col-sm-3">
            Overtime notification limit (min)
        </dt>
        <dd class="col-sm-9">
            @Execution.OvertimeNotificationLimitMinutes
        </dd>
        <dt class="col-sm-3">
            Created by
        </dt>
        <dd class="col-sm-9">
            @Execution.CreatedBy
        </dd>
        <dt class="col-sm-3">
            Created
        </dt>
        <dd class="col-sm-9">
            @Execution.CreatedDateTime.LocalDateTime
        </dd>
        <dt class="col-sm-3">
            Number of steps
        </dt>
        <dd class="col-sm-9">
            @Execution.StepExecutions.Count
        </dd>
        <dt class="col-sm-3">
            Success percent
        </dt>
        <dd class="col-sm-9">
            @Execution.GetSuccessPercent().FormatPercentage(0)
        </dd>
        <dt class="col-sm-3">
            Status
        </dt>
        <dd class="col-sm-9">
            <JobExecutionStatusBadgeComponent ExecutionStatus_="@Execution.ExecutionStatus" />
        </dd>
    </dl>
}

@if (Execution is not null && ParametersOpen)
{
    if (Execution.ExecutionParameters.Any())
    {
        <dl class="row border rounded">
            @foreach (var param in Execution.ExecutionParameters)
            {
                <dt class="col-sm-3">
                    @param.DisplayName
                </dt>
                <dd class="col-sm-9">
                    @param.DisplayValue
                </dd>
            }
        </dl>
    }
    else
    {
        <div class="row border rounded">
            <div class="col">
                No parameters
            </div>
        </div>
    }
}

@if (ShowReport != Report.Rerun && ShowReport != Report.History)
{
    <div class="row">
        <div class="col-6">
            <small>Progress:</small>
            <div class="progress @Execution?.ExecutionStatus.ToString().ToLower()">
                <div class="progress-bar" style="width: @($"{Execution?.GetProgressPercent() ?? 0}%");" />
            </div>
        </div>
        <div class="col-2">
            <dl class="mx-1">
                <dt>Started</dt>
                <dd>@Execution?.StartDateTime?.LocalDateTime</dd>
            </dl>
        </div>
        <div class="col-2">
            <dl class="mx-1">
                <dt>Ended</dt>
                <dd>@Execution?.EndDateTime?.LocalDateTime</dd>
            </dl>
        </div>
        <div class="col-2">
            <dl class="mx-1">
                <dt>Duration</dt>
                <dd>@Execution?.GetDurationInReadableFormat()</dd>
            </dl>
        </div>
    </div>
}

@if (ShowReport == Report.Table || ShowReport == Report.Gantt)
{
    <div class="row mt-1">
        <div class="col d-inline">
            <CxIcon Icon="FeatherIcon.Filter" />
            <span class="me-3">Filter</span>

            <HxButtonGroup Size="ButtonGroupSize.Small">
                <FilterDropdown TItem="(string StepName, StepType StepType)"
                            FilterSet="StepFilter"
                            Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible steps based on tag filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                    StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible steps based on step status filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible steps based on step type filter
                                .Select(s => (s.StepName, s.StepType))
                                .Distinct()
                                .OrderBy(j => j) ?? Enumerable.Empty<(string, StepType)>()"
                            OnChange="StateHasChanged"
                            IsSearchable="true">
                    <TitleTemplate>
                        <CxIcon Icon="LucideIcon.ListChecks" />
                        Step
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIconComponent StepType_="item.StepType" />
                        @item.StepName
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="StepType"
                            FilterSet="StepTypeFilter"
                            Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step types based on tag filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                    StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible step types based on step status filter
                                .Where(s => !StepFilter.Any() || StepFilter.Contains((s.StepName, s.StepType))) // Limit visible step types based on step filter
                                .Select(s => s.StepType)
                                .Distinct()
                                .OrderBy(j => j) ?? Enumerable.Empty<StepType>()"
                            OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tool" />
                        Step type
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIconComponent StepType_="item" />
                        @item.ToString()
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="StepExecutionStatus"
                            FilterSet="StepStatusFilter"
                            Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step statuses based on tag filter
                                .Where(s => !StepFilter.Any() || StepFilter.Contains((s.StepName, s.StepType))) // Limit visible step statuses based on step filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible step statuses based on step type filter
                                .SelectMany(s => s.StepExecutionAttempts)
                                .Select(e => e.ExecutionStatus)
                                .Distinct()
                                .OrderBy(s => s) ?? Enumerable.Empty<StepExecutionStatus>()"
                            OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.AlertCircle" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepExecutionStatusBadgeComponent ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="string"
                            FilterSet="TagFilter"
                            Items="Execution?.StepExecutions
                                .Where(s => !StepFilter.Any() || StepFilter.Contains((s.StepName, s.StepType))) // Limit visible tags based on step filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible tags based on step type filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                            StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible tags based on step status filter
                                .SelectMany(e => e.Step?.Tags.Select(t => t.TagName) ?? Enumerable.Empty<string>())
                                .Distinct()
                                .OrderBy(s => s) ?? Enumerable.Empty<string>()"
                            OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tag" />
                        Tag
                    </TitleTemplate>
                </FilterDropdown>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                      @onclick="() => { StepStatusFilter.Clear(); StepFilter.Clear(); StepTypeFilter.Clear(); TagFilter.Clear(); }">
                    <CxIcon Icon="FeatherIcon.X" />
                    Reset
                </HxButton>
            </HxButtonGroup>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col d-inline">
            <CxIcon Icon="LucideIcon.SortDesc" />
            <span class="me-3">Sort</span>
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_started_asc"
                   checked=@(SortMode == SortMode.StartedAsc)
                   @onchange="() => SortMode = SortMode.StartedAsc">
                <label class="form-check-label" for="radio_started_asc">Started <sup>asc</sup></label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_started_desc"
                   checked=@(SortMode == SortMode.StartedDesc)
                   @onchange="() => SortMode = SortMode.StartedDesc">
                <label class="form-check-label" for="radio_started_desc">Started<sup>desc</sup></label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_duration_asc"
                   checked=@(SortMode == SortMode.DurationAsc)
                   @onchange="() => SortMode = SortMode.DurationAsc">
                <label class="form-check-label" for="radio_duration_asc">Duration<sup>asc</sup></label>
            </div>
            <div class="form-check form-check-inline">
                <input type="radio" class="form-check-input" id="radio_duration_desc"
                   checked=@(SortMode == SortMode.DurationDesc)
                   @onchange="() => SortMode = SortMode.DurationDesc">
                <label class="form-check-label" for="radio_duration_desc">Duration<sup>desc</sup></label>
            </div>
        </div>
    </div>
}

@if (ShowReport == Report.Table)
{
    <div class="card shadow-sm mt-3 pt-2">
        <StepExecutionsTableComponent ShowDetailed="false"
                                  Executions="FilteredExecutions
                                                .OrderBy(e => SortMode switch
                                                {
                                                    SortMode.DurationAsc => e.ExecutionInSeconds,
                                                    SortMode.DurationDesc => -e.ExecutionInSeconds,
                                                    _ => null
                                                })
                                                // asc => Show not started steps last. desc => Show not started steps first.
                                                .ThenBy(e => SortMode == SortMode.StartedAsc ? e.StartDateTime is null : e.StartDateTime is not null)
                                                .ThenBy(e => SortMode == SortMode.StartedAsc ? e.StartDateTime : null)
                                                .ThenByDescending(e => SortMode == SortMode.StartedDesc ? e.StartDateTime : null)
                                                .ThenBy(e => e.EndDateTime is null)
                                                .ThenBy(e => e.EndDateTime)
                                                .ThenBy(e => e.StepExecution.ExecutionPhase)
                                                .ThenBy(e => e.StepExecution.StepName)" />
    </div>
    
}
else if (ShowReport == Report.Gantt)
{
    <div class="card shadow-sm mt-3 pt-3">
        <StepExecutionsGraphComponent Executions="FilteredExecutions" SortMode="SortMode"/>
    </div>
    
}
else if (ShowReport == Report.Dependencies)
{
    if (Execution?.DependencyMode == false)
    {
        <HxAlert Color="ThemeColor.Warning" CssClass="mt-3">
            Job executed in execution phase mode. Dependencies have no effect.
        </HxAlert>
    }
    <div class="row align-items-end mb-3">
        <div class="col-xl-5 col-lg-5 col-12">
            <HxAutosuggest @bind-Value="DependencyGraphStepFilter"
                        @bind-Value:after="LoadGraph"
                        DataProvider="ProvideSuggestions"
                        TextSelector="TextSelector"
                        MinimumLength="0"
                        Delay="1"
                        InputSize="InputSize.Small"
                        Placeholder="Filter step">
                <ItemTemplate Context="item">
                    <StepTypeIconComponent StepType_="item.StepType" />
                    @item.StepName
                </ItemTemplate>
                <EmptyTemplate>
                    <span class="p-2">No matching steps</span>
                </EmptyTemplate>
            </HxAutosuggest>
        </div>
        <div class="col-xl-2 col-lg-3 col-5">
            <div class="form-group">
                <label class="form-label">Depth backwards</label>
                <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@("<p>The depth of traversal backwards when drawing the dependency graph starting from the filtered step.</p><p>Available only when the graph has been filtered.</p><p>0 = no limit</p>")">
                <ChildContent>
                    <span style="cursor: pointer;">
                        <CxIcon Icon="FeatherIcon.Info" />
                    </span>
                </ChildContent>
                </HxPopover>
                <input class="form-control form-control-sm" type="number" @bind-value="FilterDepthBackwards" disabled=@(DependencyGraphStepFilter is null) />
            </div>
        </div>
        <div class="col-xl-2 col-lg-3 col-5">
            <div class="form-group">
                <label class="form-label">Depth forwards</label>
                <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@("<p>The depth of traversal forwards when drawing the dependency graph starting from the filtered step.</p><p>Available only when the graph has been filtered.</p><p>0 = no limit</p>")">
                <ChildContent>
                    <span style="cursor: pointer;">
                        <CxIcon Icon="FeatherIcon.Info" />
                    </span>
                </ChildContent>
                </HxPopover>
                <input class="form-control form-control-sm" type="number" @bind-value="FilterDepthForwards" disabled=@(DependencyGraphStepFilter is null) />
            </div>
        </div>
        <div class="col-2">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" OnClick="LoadGraph">
                Apply depth filters
            </HxButton>
        </div>
    </div>
}
else if (ShowReport == Report.Rerun)
{
    <AuthorizeView Roles="Admin, Editor, Operator">
        <RerunComponent Execution="Execution" />
    </AuthorizeView>
}
else if (ShowReport == Report.History && Execution?.JobId is Guid jobId)
{
    <JobHistoryComponent JobId="jobId" JobName="Execution.JobName" />
}

<div class="border mt-3" hidden=@(ShowReport != Report.Dependencies) style="resize: both; overflow: hidden;">
    <div class="p-1 dependency-graph" id="div_dependency_graph">
        <svg id="svg_dependency_graph" viewBox="0 0 2000 1000">
            <g id="g_dependency_graph" />
        </svg>
    </div>
</div>

@foreach (var step in Execution?.StepExecutions ?? Enumerable.Empty<StepExecution>())
{
    <div id="@($"{step.StepId}_dropdown")" class="dropdown position-absolute">
        <ul class="dependency-graph-dropdown-menu dropdown-menu">
            <li>
                <h6 class="dropdown-header">
                    <StepTypeIconComponent StepType_="step.StepType" />
                    @step.StepName
                </h6>
            </li>
            <li>
                <span class="dropdown-item" role="button" @onclick="async () => { DependencyGraphStepFilter = step; await LoadGraph(); }">
                    <CxIcon Icon="FeatherIcon.Filter" />
                    Limit graph to this
                </span>
            </li>
            <li>
                <span class="dropdown-item" role="button" @onclick="() => ShowStepExecutionOffcanvas(step)">
                    <CxIcon Icon="FeatherIcon.Info" />
                    Details
                </span>
            </li>
            <li>
                <span class="dropdown-item" role="button" @onclick="() => StepHistoryOffcanvas.LetAsync(x => x.ShowAsync(step.StepId))">
                    <CxIcon Icon="LucideIcon.History" />
                    History
                </span>
            </li>
        </ul>
    </div>
}

<StepExecutionDetailsOffcanvas @ref="StepExecutionDetailsOffcanvas" StepExecutionAttempt="SelectedStepExecutionAttempt" />

<StepHistoryOffcanvas @ref="StepHistoryOffcanvas" />