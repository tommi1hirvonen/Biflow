
<PageTitle>Executions | Biflow</PageTitle>

<div class="row">
    <div class="col">
        <div>
            <a href="executions">
                All executions
            </a>
            <span>&nbsp;/&nbsp;</span>
            @if (job is not null)
            {
                <strong>
                    <a href="@($"jobs/{job.JobId}/steps")">
                        @job.JobName
                    </a>
                </strong>   
            }
            else
            {
                <strong>@execution?.JobName</strong>
            }
            <span>&nbsp;/&nbsp;@execution?.ExecutionId</span>
        </div>
    </div>
</div>

<div class="row mt-2">
    <div class="col">
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item" role="presentation">
                <a class="nav-link @(execution is null ? "disabled" : null) @(ShowReport == Report.List ? "active" : null)" href="executions/@ExecutionId/list">
                    <CxIcon Icon="FeatherIcon.List" />
                    List
                </a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link @(execution is null ? "disabled" : null) @(ShowReport == Report.Gantt ? "active" : null)" href="executions/@ExecutionId/gantt">
                    <CxIcon Icon="LucideIcon.BarChartHorizontal" />
                    Gantt
                </a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link @(execution is null ? "disabled" : null) @(ShowReport == Report.Graph ? "active" : null)" href="executions/@ExecutionId/graph">
                    <CxIcon Icon="LucideIcon.Workflow" />
                    Graph
                </a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link @(execution is null ? "disabled" : null) @(ShowReport == Report.ExecutionDetails ? "active" : null)" href="executions/@ExecutionId/executiondetails">
                    <CxIcon Icon="FeatherIcon.Info" />
                    Execution details
                </a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link @(execution is null ? "disabled" : null) @(ShowReport == Report.Parameters ? "active" : null)" href="executions/@ExecutionId/parameters">
                    <CxIcon Icon="FeatherIcon.AtSign" />
                    Parameters
                </a>
            </li>
            <li class="nav-item ms-auto" role="presentation">
                <a class="nav-link @(execution is null ? "disabled" : null) @(ShowReport == Report.History ? "active" : null) @(loading ? "disabled" : null)" href="executions/@ExecutionId/history">
                    <CxIcon Icon="LucideIcon.History" />
                    History
                </a>
            </li>
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                <li class="nav-item" role="presentation">
                    <a class="nav-link @(execution is null ? "disabled" : null) @(ShowReport == Report.Rerun ? "active" : null) @(loading ? "disabled" : null)" href="executions/@ExecutionId/rerun">
                        <CxIcon Icon="FeatherIcon.Repeat" />
                        Rerun
                    </a>
                </li>
            </AuthorizeView>
        </ul>
    </div>
</div>

@if (ShowStatusBar)
{
    <div class="row mt-3 @(ShowReport == Report.List || ShowReport == Report.Gantt ? "sticky-top bg-body" : null)">
        <div class="col-auto align-self-center">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Primary" @onclick="LoadData" Enabled="!loading">
                <CxIcon Icon="FeatherIcon.RefreshCw" />
                Refresh
            </HxButton>
        </div>
        <div class="col-auto align-self-center form-check form-check-inline ms-3">
            <input type="checkbox" class="form-check-input" id="check_auto_refresh"
                   @bind-value="AutoRefresh"
                   checked=@AutoRefresh>
            <label class="form-check-label" for="check_auto_refresh" title="Automatically refresh in @TimerIntervalSeconds second intervals">
                Auto-refresh
            </label>
        </div>
        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
            @if (execution is not null && execution.ExecutionStatus == ExecutionStatus.Running)
            {
                <div class="col-auto align-self-center">
                    <HxDropdownButtonGroup>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.None"
                                  CssClass="@(Stopping ? "btn-auto disabled text-danger" : "btn-auto text-danger")"
                                  OnClick="StopJobExecutionAsync">
                            <CxIcon Icon="FeatherIcon.XOctagon" />
                            Stop all...
                        </HxButton>
                    </HxDropdownButtonGroup>
                </div>
            }
        </AuthorizeView>
        <div class="col-auto">
            <dl class="mx-1">
                <dt>Started</dt>
                <dd>@execution?.StartedOn?.LocalDateTime</dd>
            </dl>
        </div>
        <div class="col-auto">
            <dl class="mx-1">
                <dt>Ended</dt>
                <dd>@execution?.EndedOn?.LocalDateTime</dd>
            </dl>
        </div>
        <div class="col-auto">
            <dl class="mx-1">
                <dt>Duration</dt>
                <dd>@execution?.GetDurationInReadableFormat()</dd>
            </dl>
        </div>
        <div class="col-lg mb-3">
            <div class="d-flex justify-content-between">
                <span class="fw-bold">Progress</span>
                <span class="small align-self-end">@($"{execution?.GetProgressPercent() ?? 0}%")</span>
                <span><JobExecutionStatusBadge ExecutionStatus="@execution?.ExecutionStatus" /></span>
            </div>
            <div class="progress mt-1 @execution?.ExecutionStatus.ToString().ToLower()" style="height: 8px;">
                <div class="progress-bar" style="width: @($"{execution?.GetProgressPercent() ?? 0}%");" />
            </div>
        </div>
    </div>
}

@if (ShowReport == Report.ExecutionDetails)
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
        <div class="row">
            <div class="col">
                <HxButtonGroup Size="ButtonGroupSize.Small">
                    <HxDropdownButtonGroup>
                        <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                            Mark status as
                        </HxDropdownToggleButton>
                        <HxDropdownMenu>
                            @foreach (var status in Enum.GetValues<ExecutionStatus>())
                            {
                                <HxDropdownItem OnClick="() => UpdateExecutionStatusAsync(status)">
                                    <JobExecutionStatusBadge ExecutionStatus="status" />
                                </HxDropdownItem>
                            }
                        </HxDropdownMenu>
                    </HxDropdownButtonGroup>
                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto text-danger" OnClick="DeleteExecutionAsync">
                        Delete...
                    </HxButton>
                </HxButtonGroup>
            </div>
        </div>
    </AuthorizeView>
    <div class="card shadow-sm pt-2 mb-4 mt-3">
        <table class="table table-hover">
            <tbody>
                @if (execution is null)
                {
                    <tr>
                        <td class="text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td class="fw-bold w-25">Execution id</td>
                        <td>@execution.ExecutionId</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Job id</td>
                        <td>
                            @if (job is not null)
                            {
                                <a href="@($"jobs/{job.JobId}/steps")">@job.JobId</a>
                            }
                            else
                            {
                                @execution.JobId
                            }
                        </td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Created</td>
                        <td>@execution.CreatedOn.LocalDateTime</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Started</td>
                        <td>@execution.StartedOn?.LocalDateTime</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Ended</td>
                        <td>@execution.EndedOn?.LocalDateTime</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Duration</td>
                        <td>@execution.GetDurationInReadableFormat()</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Status</td>
                        <td><JobExecutionStatusBadge ExecutionStatus="@execution.ExecutionStatus" /></td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Number of steps</td>
                        <td>@execution.StepExecutions.Count</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Success percent</td>
                        <td>@execution.GetSuccessPercent().FormatPercentage(0)</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Created by</td>
                        <td>
                            @if (execution.ParentExecution is StepExecutionAttemptReference parent)
                            {
                                var json = JsonSerializer.Serialize(parent);
                                // Replace execution id in json with a link to the parent execution's details.
                                var jsonWithLink = json.Replace(parent.ExecutionId.ToString(), $"<a href=\"executions/{parent.ExecutionId}/list\">{parent.ExecutionId}</a>");
                                <small>
                                    @((MarkupString)jsonWithLink)
                                </small>
                            }
                            else if (!string.IsNullOrEmpty(execution.CreatedBy))
                            {
                                <text>@execution.CreatedBy (user)</text>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Schedule</td>
                        <td>
                            @if (schedule is not null)
                            {
                                <text>@schedule.ScheduleName (@schedule.GetScheduleDescription())</text>
                            }
                            else if (!string.IsNullOrEmpty(execution.ScheduleName))
                            {
                                <text>@execution.ScheduleName (removed schedule, @Biflow.Ui.Core.Extensions.GetCronExpressionDescription(execution.CronExpression))</text>
                            }
                            else if (execution.ScheduleId is not null)
                            {
                                <text>Removed schedule (name not available)</text>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Executor PID</td>
                        <td>@execution.ExecutorProcessId</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Execution mode</td>
                        <td>
                            @if (execution.ExecutionMode == ExecutionMode.Dependency)
                            {
                                <span>
                                    <CxIcon Icon="LucideIcon.Workflow" />
                                    Dependency mode
                                </span>
                            }
                            else if (execution.ExecutionMode == ExecutionMode.Hybrid)
                            {
                                <span>
                                    <CxIcon Icon="LucideIcon.Workflow" />
                                    Hybrid mode
                                </span>
                            }
                            else if (execution.ExecutionMode == ExecutionMode.ExecutionPhase)
                            {
                                <span>
                                    <CxIcon Icon="FeatherIcon.Layers" />
                                    Execution phase
                                </span>
                            }
                        </td>
                    </tr>
                    @if (execution.ExecutionMode is ExecutionMode.ExecutionPhase or ExecutionMode.Hybrid)
                    {
                        <tr>
                            <td class="fw-bold">Stop on first error</td>
                            <td>@execution.StopOnFirstError</td>
                        </tr>
                    }
                    <tr>
                        <td class="fw-bold">Max parallel steps</td>
                        <td>@execution.MaxParallelSteps</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Timeout (min)</td>
                        <td>@execution.TimeoutMinutes</td>
                    </tr>
                    <tr>
                        <td class="fw-bold">Overtime notification limit (min)</td>
                        <td>@execution.OvertimeNotificationLimitMinutes</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (ShowReport == Report.Parameters)
{
    <div class="card shadow-sm pt-2 mb-4 mt-3 table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Default value</th>
                    <th>Actual value</th>
                    <th>Datatype</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (execution is null)
                {
                    <tr>
                        <td colspan="5" class="text-center">
                            <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                        </td>
                    </tr>
                }
                else if (!execution.ExecutionParameters.Any())
                {
                    <tr>
                        <td colspan="5">No parameters</td>
                    </tr>
                }
                else
                {
                    foreach (var param in execution.ExecutionParameters.OrderBy(p => p.ParameterName))
                    {
                        <tr>
                            <td>@param.DisplayName</td>
                            <td class="font-monospace">@param.DefaultValue.Value</td>
                            <td class="font-monospace">@param.DisplayValue</td>
                            <td>@param.DisplayValueType</td>
                            <td class="small">
                                <a class="link-body-emphasis" style="cursor: pointer;" @onclick="() => parameterLineageOffcanvas.LetAsync(x => x.ShowAsync(param))">
                                    Show lineage
                                </a>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@if (ShowReport == Report.List || ShowReport == Report.Gantt)
{
    <div class="row mt-1">
        <div class="col d-inline">
            <CxIcon Icon="FeatherIcon.Filter" />
            <span class="me-3">Filter</span>

            <HxButtonGroup Size="ButtonGroupSize.Small">
                <FilterDropdown TItem="(string StepName, StepType StepType)"
                            FilterSet="stepFilter"
                            Items="execution?.StepExecutions
                                .Where(s => !tagFilter.Any() || s.GetStep()?.Tags.Any(t1 => tagFilter.Any(t2 => t1.TagId == t2.TagId)) == true) // Limit visible steps based on tag filter
                                .Where(s => !stepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                    stepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible steps based on step status filter
                                .Where(s => !stepTypeFilter.Any() || stepTypeFilter.Contains(s.StepType)) // Limit visible steps based on step type filter
                                .Select(s => (s.StepName, s.StepType))
                                .Distinct()
                                .OrderBy(j => j) ?? Enumerable.Empty<(string, StepType)>()"
                            OnChange="StateHasChanged"
                            IsSearchable="true">
                    <TitleTemplate>
                        <CxIcon Icon="LucideIcon.ListChecks" />
                        Step
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIcon StepType="item.StepType" />
                        @item.StepName
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="StepType"
                            FilterSet="stepTypeFilter"
                            Items="execution?.StepExecutions
                                .Where(s => !tagFilter.Any() || s.GetStep()?.Tags.Any(t1 => tagFilter.Any(t2 => t1.TagId == t2.TagId)) == true) // Limit visible step types based on tag filter
                                .Where(s => !stepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                    stepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible step types based on step status filter
                                .Where(s => !stepFilter.Any() || stepFilter.Contains((s.StepName, s.StepType))) // Limit visible step types based on step filter
                                .Select(s => s.StepType)
                                .Distinct()
                                .OrderBy(j => j) ?? Enumerable.Empty<StepType>()"
                            OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tool" />
                        Step type
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepTypeIcon StepType="item" />
                        @item.ToString()
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="StepExecutionStatus"
                            FilterSet="stepStatusFilter"
                            Items="execution?.StepExecutions
                                .Where(s => !tagFilter.Any() || s.GetStep()?.Tags.Any(t1 => tagFilter.Any(t2 => t1.TagId == t2.TagId)) == true) // Limit visible step statuses based on tag filter
                                .Where(s => !stepFilter.Any() || stepFilter.Contains((s.StepName, s.StepType))) // Limit visible step statuses based on step filter
                                .Where(s => !stepTypeFilter.Any() || stepTypeFilter.Contains(s.StepType)) // Limit visible step statuses based on step type filter
                                .SelectMany(s => s.StepExecutionAttempts)
                                .Select(e => e.ExecutionStatus)
                                .Distinct()
                                .OrderBy(s => s) ?? Enumerable.Empty<StepExecutionStatus>()"
                            OnChange="StateHasChanged">
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.AlertCircle" />
                        Status
                    </TitleTemplate>
                    <ItemTemplate Context="item">
                        <StepExecutionStatusBadge ExecutionStatus="item" />
                    </ItemTemplate>
                </FilterDropdown>
                <FilterDropdown TItem="TagProjection"
                            FilterSet="tagFilter"
                            Items="execution?.StepExecutions
                                .Where(s => !stepFilter.Any() || stepFilter.Contains((s.StepName, s.StepType))) // Limit visible tags based on step filter
                                .Where(s => !stepTypeFilter.Any() || stepTypeFilter.Contains(s.StepType)) // Limit visible tags based on step type filter
                                .Where(s => !stepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                            stepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible tags based on step status filter
                                .SelectMany(e => e.GetStep()?.Tags.Select(t => new TagProjection(t.TagId, t.TagName, t.Color)) ?? [])
                                .Distinct()
                                .OrderBy(t => t.TagName) ?? Enumerable.Empty<TagProjection>()"
                            IdSelector="t => t.TagId.ToString()"
                            TextSelector="t => t.TagName"
                            OnChange="StateHasChanged">
                    <ItemTemplate Context="item">
                        <TagBadge Tag="item" />
                    </ItemTemplate>
                    <TitleTemplate>
                        <CxIcon Icon="FeatherIcon.Tag" />
                        Tag
                    </TitleTemplate>
                </FilterDropdown>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto"
                      @onclick="() => { stepStatusFilter.Clear(); stepFilter.Clear(); stepTypeFilter.Clear(); tagFilter.Clear(); }">
                    <CxIcon Icon="FeatherIcon.X" />
                    Reset
                </HxButton>
            </HxButtonGroup>
        </div>
    </div>
}

@{
    var detailStepProvider = (StepExecutionProjection e) =>
        execution?.StepExecutions
            .SelectMany(e => e.StepExecutionAttempts)
            ?.FirstOrDefault(x => x.ExecutionId == e.ExecutionId && x.StepId == e.StepId && x.RetryAttemptIndex == e.RetryAttemptIndex);
}

@if (ShowReport == Report.List)
{
    
    <div class="card shadow-sm mt-3 pt-2 table-responsive mb-4">
        <StepExecutionsTable
            ShowDetailed="false"
            Executions="GetOrderedExecutions()"
            SortMode="sortMode"
            OnSortingChanged="sortMode => { this.sortMode = sortMode; StateHasChanged(); }"
            DetailStepProvider="detailStepProvider"
            OnStepsUpdated="LoadData" />
    </div>
}
else if (ShowReport == Report.Gantt)
{
    <div class="card shadow-sm mt-3 pt-3 mb-4">
        <StepExecutionsGraph Executions="GetOrderedExecutions()"
                             DetailStepProvider="detailStepProvider" />
    </div>
}
else if (ShowReport == Report.Graph)
{
    <ExecutionDependenciesGraph Execution="execution" InitialStepId="InitialStepId" />
}
else if (ShowReport == Report.Rerun)
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
            <RerunBuilder Execution="execution" />
    </AuthorizeView>
}
else if (ShowReport == Report.History && execution is not null)
{
    <div class="mt-3">
        <JobHistory JobId="execution.JobId" />
    </div>
}

<ExecutionParameterLineageOffcanvas @ref="parameterLineageOffcanvas" />