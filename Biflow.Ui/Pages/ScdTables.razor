@implements IDisposable

@page "/scdtables"

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Editor}")]

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject ThemeService ThemeService
@inject IMediator Mediator
@inject IHxMessageBoxService Confirmer

<PageTitle>SCD tables | Biflow</PageTitle>

<h4>SCD tables</h4>

@if (_connections is not null && !_connections.Any())
{
    <div class="row">
        <div class="col">
            <HxAlert Color="ThemeColor.Warning" CssClass="small py-2">
                No suitable SQL connections were added in settings.
                Create a <a class="alert-link" href="settings/integrations/mssql">SQL connection</a> in order to add SCD tables.
            </HxAlert>
        </div>
    </div>
}

<div class="row mt-3 flex-row-reverse justify-content-between align-items-end g-3">
    <div class="col-auto">
        <HxAlert Color="ThemeService.CurrentTheme == Theme.Light ? ThemeColor.Light : ThemeColor.Dark"
                 CssClass="small py-2 mb-0"
                 style="max-width: 55rem;">
            <div class="row g-3">
                <div class="col-auto">
                    <SvgIcon Icon="LucideIcon.Info" />
                </div>
                <div class="col">
                    Define SCD tables to automate loading of Slowly Changing Dimensions and start capturing changes to your data.
                    @if (!_infoExpanded)
                    {
                        <span class="alert-link pointer text-decoration-underline"
                              @onclick="() => _infoExpanded = true">
                            Show more
                        </span> 
                    }
                    @if (_infoExpanded)
                    {
                        <text>
                            SCD tables can be generated from all kinds of data, not just dimensions in the traditional sense (such as customers or products).
                            Any table or view with a unique key can be the source for an SCD table.
                            Type 2 historization is applied to all attribute columns.
                        </text>
                        <span class="alert-link pointer text-decoration-underline"
                              @onclick="() => _infoExpanded = false">
                            Show less
                        </span>
                    }
                </div>
            </div>
        </HxAlert>
    </div>
    <div class="col-auto">
        <HxButton Color="ThemeColor.Success"
                  OnClick="() => ShowEditModalAsync(null)"
                  Enabled="_tables is not null && _connections is not null">
            Add SCD table
        </HxButton>
    </div>
</div>

<div class="row mt-2 g-3">
    <div class="col-auto">
        <div class="input-group input-group-sm">
            <div class="input-group-text">
                <SvgIcon Icon="LucideIcon.Filter" />
                Filter
            </div>
            <input type="search" class="form-control"
                   @bind-value="_tableNameFilter"
                   @bind-value:event="oninput"
                   style="min-width: 12rem; max-width: 12rem;"
                   placeholder="Name"/>
            <input type="search" class="form-control"
                   @bind-value="_sourceTableNameFilter"
                   @bind-value:event="oninput"
                   style="min-width: 12rem; max-width: 12rem;"
                   placeholder="Source table/view"/>
            <input type="search" class="form-control"
                   @bind-value="_targetTableNameFilter"
                   @bind-value:event="oninput"
                   style="min-width: 12rem; max-width: 12rem;"
                   placeholder="Target table"/>
        </div>
    </div>

    <div class="col-auto">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            <FilterDropdown Items="_connections?.Where(c => _tables?.Any(t => t.ConnectionId == c.ConnectionId) == true) ?? []"
                            FilterSet="_connectionFilter"
                            TextSelector="c => c.ConnectionName"
                            OnChange="StateHasChanged"
                            IdSelector="c => c.ConnectionId.ToString()">
                <TitleTemplate>
                    <SvgIcon Icon="LucideIcon.Database" />
                    Connections
                </TitleTemplate>
            </FilterDropdown>
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="ClearFilters">
                <SvgIcon Icon="LucideIcon.X"/>
                Clear
            </HxButton>
        </HxButtonGroup>
    </div>
</div>

@if (_nonDistinctTargetTables.Length > 0)
{
    <HxAlert Color="ThemeColor.Warning" CssClass="mt-3 mb-0 d-inline-block small" style="padding-right: 3rem;">
        Detected multiple SCD tables having the same target table.
        <br/>
        This can cause unexpected behaviour if two differing SCD configurations are used to update the same target.
        @foreach (var target in _nonDistinctTargetTables)
        {
            <br/>
            <span>- @target</span>
        }
        <button type="button" class="btn-close" aria-label="Close" @onclick="() => _nonDistinctTargetTables = []"
                style="position: absolute;top: 0;right: 0;z-index: 2;padding: 1.25rem 1rem;"></button>
    </HxAlert>
}

<div class="card pt-2 my-4">
    <table class="table table-sm table-hover small">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th>Source table/view</th>
                <th>Target table</th>
                <th>Pre-load script</th>
                <th>Post-load script</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (_tables is null)
            {
                <tr><td colspan="8" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (_tables.Count == 0)
            {
                <tr><td colspan="8">No SCD tables</td></tr>
            }
            else
            {
                var tables = _tables
                    .Where(t => string.IsNullOrEmpty(_tableNameFilter) || t.ScdTableName.ContainsIgnoreCase(_tableNameFilter))
                    .Where(t => string.IsNullOrEmpty(_sourceTableNameFilter) || t.SourceTableSchema.ContainsIgnoreCase(_sourceTableNameFilter) || t.SourceTableName.ContainsIgnoreCase(_sourceTableNameFilter))
                    .Where(t => string.IsNullOrEmpty(_targetTableNameFilter) || t.TargetTableSchema.ContainsIgnoreCase(_targetTableNameFilter) || t.TargetTableName.ContainsIgnoreCase(_targetTableNameFilter))
                    .Where(t => _connectionFilter.Count == 0 || _connectionFilter.Any(c => c.ConnectionId == t.ConnectionId))
                    .OrderBy(t => t.ScdTableName);
                @foreach (var table in tables)
                {
                    var connection = _connections?.FirstOrDefault(c => c.ConnectionId == table.ConnectionId);
                    var jobs = table.ScdSteps.Select(s => s.Job).Distinct().Count();
                    var steps = table.ScdSteps.Count();
                    <ContextMenuToggle ContainerHtmlTag="tr">
                        <ChildContent Context="menu">
                            <td class="align-middle">
                            <span class="tr-hover-underline" @onclick="() => ShowEditModalAsync(table)">
                                <HighlightableText PartToHighlight="@_tableNameFilter" Text="@table.ScdTableName"/>
                            </span>
                            </td>
                            <td class="align-middle small">
                                <HighlightableText PartToHighlight="@_sourceTableNameFilter" Text="@($"{table.SourceTableSchema}.{table.SourceTableName}")"/>
                            </td>
                            <td class="align-middle small">
                                <HighlightableText PartToHighlight="@_targetTableNameFilter" Text="@($"{table.TargetTableSchema}.{table.TargetTableName}")"/>
                            </td>
                            <td class="align-middle">
                                @if (!string.IsNullOrWhiteSpace(table.PreLoadScript))
                                {
                                    <SvgIcon Icon="LucideIcon.Check"/>
                                }
                            </td>
                            <td class="align-middle">
                                @if (!string.IsNullOrWhiteSpace(table.PostLoadScript))
                                {
                                    <SvgIcon Icon="LucideIcon.Check"/>
                                }
                            </td>
                            <td class="align-middle">
                                @(jobs > 0 ? $"{jobs} job(s)" : null)
                            </td>
                            <td class="align-middle">
                                <span class="tr-hover-underline"
                                   @onclick="async () =>
                                    {
                                        _stepsTable = table;
                                        await _stepsModal.LetAsync(x => x.ShowAsync());
                                    }">
                                    @(steps > 0 ? $"{steps} step(s)" : null)
                                </span>
                            </td>
                            <td class="align-middle">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" Spinner="false" CssClass="btn-auto" @onclick="e => menu.ShowContextMenuAsync(e)">
                                    <SvgIcon Icon="LucideIcon.Ellipsis" />
                                </HxButton>
                            </td>
                        </ChildContent>
                        <MenuContent>
                            <DropdownMenuHeader>
                                @table.ScdTableName
                            </DropdownMenuHeader>
                            <DropdownMenuItem @onclick="() => ShowEditModalAsync(table)">
                                <SvgIcon Icon="LucideIcon.Pen" />
                                Edit
                            </DropdownMenuItem>
                            <DropdownMenuItem @onclick="() => ConfirmAndDeleteTableAsync(table)">
                                <SvgIcon Icon="LucideIcon.Trash2" />
                                Delete...
                            </DropdownMenuItem>
                            <DropdownMenuItem CssClass="small" @onclick="() => _codeOffcanvas.LetAsync(x => x.ShowStructureUpdateAsync(table, connection))">
                                Generate structure update SQL
                            </DropdownMenuItem>
                            <DropdownMenuItem CssClass="small" @onclick="() => _codeOffcanvas.LetAsync(x => x.ShowStagingLoadAsync(table, connection))">
                                Generate staging load SQL
                            </DropdownMenuItem>
                            <DropdownMenuItem CssClass="small" @onclick="() => _codeOffcanvas.LetAsync(x => x.ShowTargetLoadAsync(table, connection))">
                                Generate target load SQL
                            </DropdownMenuItem>
                        </MenuContent>
                    </ContextMenuToggle>
                }
            }
        </tbody>
    </table>
</div>

<ScdTableEditModal @ref="_editModal" OnTableSubmit="OnTableSubmitAsync" Connections="_connections" />

<ScdCodeOffcanvas @ref="_codeOffcanvas" />

<HxModal @ref="_stepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {_stepsTable?.ScdTableName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                    <tr>
                        <th>Job</th>
                        <th>Step</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var step in _stepsTable?.ScdSteps
                                  .OrderBy(s => s.Job.JobName)
                                  .ThenBy(s => s.StepName)
                                  .AsEnumerable() ?? [])
                    {
                        <tr>
                            <td>
                                @step.Job.JobName
                            </td>
                            <td>
                                <StepTypeIcon StepType="step.StepType" />
                                &nbsp;
                                @step.StepName
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await _stepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private readonly HashSet<SqlConnectionBase> _connectionFilter = [];
    
    private List<ScdTable>? _tables;
    private SqlConnectionBase[]? _connections;
    private ScdTableEditModal? _editModal;
    private ScdCodeOffcanvas? _codeOffcanvas;
    private ScdTable? _stepsTable;
    private HxModal? _stepsModal;
    private bool _infoExpanded;
    private string _tableNameFilter = "";
    private string _sourceTableNameFilter = "";
    private string _targetTableNameFilter = "";
    private string[] _nonDistinctTargetTables = [];
    
    protected override void OnInitialized() => ThemeService.OnThemeChanged += OnThemeChanged;
    
    public void Dispose() => ThemeService.OnThemeChanged -= OnThemeChanged;

    private void OnThemeChanged(Theme theme, bool isAuto) => StateHasChanged();

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _tables = await context.ScdTables
            .Include(t => t.ScdSteps).ThenInclude(s => s.Job)
            .OrderBy(t => t.ScdTableName)
            .ToListAsync();
        _connections = await context.SqlConnections
            .Where(c => c.ConnectionType == SqlConnectionType.Sql || c.ConnectionType == SqlConnectionType.Snowflake)
            .OrderBy(c => c.ConnectionName)
            .ToArrayAsync();
        UpdateNonDistinctTargetTables();
    }
    
    private void UpdateNonDistinctTargetTables() => _nonDistinctTargetTables = _tables?
        .CountBy(t => (t.TargetTableSchema, t.TargetTableName, t.ConnectionId))
        .Where(g => g.Value > 1)
        .Select(g => $"{g.Key.TargetTableSchema}.{g.Key.TargetTableName}")
        .ToArray() ?? [];

    private Task ShowEditModalAsync(ScdTable? table)
    {
        return _editModal.LetAsync(x => x.ShowAsync(table?.ScdTableId));
    }

    private async Task ConfirmAndDeleteTableAsync(ScdTable table)
    {
        if (!await Confirmer.ConfirmAsync("Delete SCD table", $"Are you sure you want to delete '{table.ScdTableName}'?"))
        {
            return;
        }
        try
        {
            await Mediator.SendAsync(new DeleteScdTableCommand(table.ScdTableId));
            _tables?.Remove(table);
            UpdateNonDistinctTargetTables();
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting SCD table", message);
        }
    }
    
    private async Task OnTableSubmitAsync(ScdTable table)
    {
        if (table.ScdTableId == Guid.Empty)
        {
            await Mediator.SendAsync(new CreateScdTableCommand(table));
        }
        else
        {
            await Mediator.SendAsync(new UpdateScdTableCommand(table));
            _tables?.RemoveAll(t => t.ScdTableId == table.ScdTableId);
        }
        _tables?.Add(table);
        UpdateNonDistinctTargetTables();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        _sourceTableNameFilter = "";
        _targetTableNameFilter = "";
        _tableNameFilter = "";
        _connectionFilter.Clear();
    }
}