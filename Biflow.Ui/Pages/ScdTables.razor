@implements IDisposable

@page "/scdtables"

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Editor}")]

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject ToasterService Toaster
@inject ThemeService ThemeService
@inject IMediator Mediator

<PageTitle>SCD tables | Biflow</PageTitle>

<h4>SCD tables</h4>

@if (_connections is not null && !_connections.Any())
{
    <div class="row">
        <div class="col">
            <HxAlert Color="ThemeColor.Warning" CssClass="small py-2">
                No suitable SQL connections were added in settings.
                Create a <a class="alert-link" href="settings/integrations/mssql">SQL connection</a> in order to add SCD tables.
            </HxAlert>
        </div>
    </div>
}

<div class="row mt-3 flex-row-reverse justify-content-between align-items-end g-3">
    <div class="col-auto">
        <HxAlert Color="ThemeService.CurrentTheme == Theme.Light ? ThemeColor.Light : ThemeColor.Dark"
                 CssClass="small py-2 mb-0"
                 style="max-width: 50rem;">
            <div class="row g-3">
                <div class="col-auto">
                    <SvgIcon Icon="LucideIcon.Info" />
                </div>
                <div class="col">
                    Define SCD tables to automate loading of Slowly Changing Dimensions and start capturing changes to your data.
                </div>
            </div>
        </HxAlert>
    </div>
    <div class="col-auto">
        <HxButton Color="ThemeColor.Success"
                  OnClick="() => ShowEditModalAsync(null)"
                  Enabled="_tables is not null && _connections is not null">
            Add SCD table
        </HxButton>
    </div>
</div>

<div class="card pt-2 my-4">
    <table class="table table-hover">
        <thead>
        <tr>
            <th>
                Name
            </th>
            <th></th>
            <th>Source table</th>
            <th>Target table</th>
        </tr>
        </thead>
        <tbody>
        @if (_tables is null)
        {
            <tr><td colspan="4" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
        }
        else if (_tables.Count == 0)
        {
            <tr><td colspan="4">No SCD tables</td></tr>
        }
        else
        {
            @foreach (var table in _tables.OrderBy(t => t.ScdTableName))
            {
                <tr>
                    <td class="align-middle">
                        @table.ScdTableName
                    </td>
                    <td class="align-middle">
                        <HxButtonGroup Size="ButtonGroupSize.Small">
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="() => ShowEditModalAsync(table)">
                                <SvgIcon Icon="LucideIcon.Pen" />
                            </HxButton>
                            <HxDropdownButtonGroup>
                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                    <SvgIcon Icon="LucideIcon.Trash2" />
                                </HxDropdownToggleButton>
                                <HxDropdownMenu>
                                    <HxDropdownHeader>Delete?</HxDropdownHeader>
                                    <HxDropdownItem @onclick="() => DeleteTableAsync(table)">Confirm</HxDropdownItem>
                                </HxDropdownMenu>
                            </HxDropdownButtonGroup>
                        </HxButtonGroup>
                    </td>
                    <td class="align-middle">
                        @table.SourceTableSchema.@table.SourceTableName
                    </td>
                    <td class="align-middle">
                        @table.TargetTableSchema.@table.TargetTableName
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

<ScdTableEditModal @ref="_editModal" OnTableSubmit="OnTableSubmitAsync" Connections="_connections" />

@code {
    private List<ScdTable>? _tables;
    private MsSqlConnection[]? _connections;
    private ScdTableEditModal? _editModal;
    
    protected override void OnInitialized() => ThemeService.OnThemeChanged += OnThemeChanged;
    
    public void Dispose() => ThemeService.OnThemeChanged -= OnThemeChanged;

    private void OnThemeChanged(Theme theme, bool isAuto) => StateHasChanged();

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _tables = await context.ScdTables
            .OrderBy(t => t.ScdTableName)
            .ToListAsync();
        _connections = await context.MsSqlConnections
            .OrderBy(c => c.ConnectionName)
            .ToArrayAsync();
    }

    private Task ShowEditModalAsync(ScdTable? table)
    {
        return _editModal.LetAsync(x => x.ShowAsync(table?.ScdTableId));
    }

    private async Task DeleteTableAsync(ScdTable table)
    {
        try
        {
            await Mediator.SendAsync(new DeleteScdTableCommand(table.ScdTableId));
            _tables?.Remove(table);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting SCD table", message);
        }
    }
    
    private async Task OnTableSubmitAsync(ScdTable table)
    {
        if (table.ScdTableId == Guid.Empty)
        {
            await Mediator.SendAsync(new CreateScdTableCommand(table));
        }
        else
        {
            await Mediator.SendAsync(new UpdateScdTableCommand(table));
            _tables?.RemoveAll(t => t.ScdTableId == table.ScdTableId);
        }
        _tables?.Add(table);
        StateHasChanged();
    }
}