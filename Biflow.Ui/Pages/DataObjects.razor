@page "/dataobjects"

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Editor}")]

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IHxMessengerService Messenger

<PageTitle>Data Objects | Biflow</PageTitle>

<h4>Data Objects</h4>

<div class="row mt-3">
    <div class="col">
        <button class="btn btn-secondary" @onclick="OpenConfirmDeleteModalAsync">
            <CxIcon Icon="FeatherIcon.Trash2" />
            Delete unused
        </button>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <div class="input-group input-group-sm">
            <div class="input-group-text">
                <CxIcon Icon="FeatherIcon.Search" />
            </div>
            <input type="search" class="form-control" @bind-value="searchTerm" @bind-value:event="oninput" placeholder="Search" style="max-width: 30rem;" />
        </div>
    </div>
</div>

<div class="row my-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                <table class="table table-sm table-hover small">
                    <thead>
                        <tr>
                            <th>Uri</th>
                            <th>Max conc. writes</th>
                            <th></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (objects is null)
                        {
                            <tr>
                                <td colspan="8" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td>
                            </tr>
                        }
                        else if (!objects.Any())
                        {
                            <tr>
                                <td colspan="8" class="px-3">No data objects</td>
                            </tr>
                        }
                        else
                        {
                            <Virtualize TItem="DataObject" Context="obj" SpacerElement="tr" Items="FilteredObjects.ToList()">
                                @{
                                    var readers = obj.Readers.Count;
                                    var writers = obj.Writers.Count;
                                }
                                <tr>
                                    
                                    <td class="align-middle font-monospace"><HighlightableText Text="@obj.ObjectUri" PartToHighlight="@searchTerm" /></td>
                                    <td class="align-middle">@obj.MaxConcurrentWrites</td>
                                    <td>
                                        <div class="btn-group">
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" OnClick="() => editOffcanvas.LetAsync(x => x.ShowAsync(obj.ObjectId))">
                                                <CxIcon Icon="FeatherIcon.Edit2" />
                                            </HxButton>
                                            <HxDropdownButtonGroup>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                                                    <CxIcon Icon="FeatherIcon.Trash2" />
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                    <HxDropdownItem @onclick="async () => await DeleteDatabaseObject(obj)">Confirm</HxDropdownItem>
                                                </HxDropdownMenu>
                                            </HxDropdownButtonGroup>
                                        </div>
                                    </td>
                                    <td class="align-middle">
                                        @{
                                            var readersTitle = $"Steps reading from '{obj.ObjectUri}'";
                                        }
                                        <a class="text-body" href="javascript:void(0)"
                                            @onclick="async () =>
                                            {
                                                stepsModalDataObject = obj;
                                                stepsModalGetSteps = o => o.Readers;
                                                stepsModalGetStepsExpression = o => o.Readers;
                                                stepsModalTitle = readersTitle;
                                                await stepsModal.LetAsync(x => x.ShowAsync());
                                            }">
                                            @(readers > 0 ? $"{readers} reader(s)" : null)
                                        </a>
                                    </td>
                                    <td class="align-middle">
                                        @{
                                            var writersTitle = $"Steps writing to '{obj.ObjectUri}'";
                                        }
                                        <a class="text-body" href="javascript:void(0)"
                                            @onclick="async () =>
                                            {
                                                stepsModalDataObject = obj;
                                                stepsModalGetSteps = o => o.Writers;
                                                stepsModalGetStepsExpression = o => o.Writers;
                                                stepsModalTitle = writersTitle;
                                                await stepsModal.LetAsync(x => x.ShowAsync());
                                            }">
                                            @(writers > 0 ? $"{writers} writer(s)" : null)
                                        </a>
                                    </td>
                                </tr>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<DataObjectEditOffcanvas @ref="editOffcanvas" OnDataObjectSubmitted="OnDataObjectSubmitted" />

<HxModal @ref="confirmDeleteModal" Size="ModalSize.ExtraLarge" Title="Delete data objects">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                Delete these unused data objects?
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Uri</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in UnusedObjects)
                        {
                            <tr>
                                <td class="font-monospace">
                                    @obj.ObjectUri
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await confirmDeleteModal.LetAsync(x => x.HideAsync())">Cancel</button>
        <button class="btn btn-danger" @onclick="DeleteUnusedDatabaseObjectsAsync">Delete</button>
    </FooterTemplate>
</HxModal>

<HxModal @ref="stepsModal" Size="ModalSize.Large" Title="@stepsModalTitle" Scrollable="true">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (stepsModalDataObject is not null)
                        {
                            @foreach (var step in stepsModalGetSteps?.Invoke(stepsModalDataObject)
                                .OrderBy(s => s.Job.JobName)
                                .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                            {
                                <tr>
                                    <td class="align-middle">
                                        @step.Job.JobName
                                    </td>
                                    <td class="align-middle">
                                        <StepTypeIconComponent StepType="step.StepType" />
                                        &nbsp;
                                        @step.StepName
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-sm btn-auto" @onclick="async () => await DeleteStepDatabaseObjectLinkAsync(step)">
                                                <CxIcon Icon="FeatherIcon.Delete" />
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await stepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private IList<DataObject>? objects;
    private DataObjectEditOffcanvas? editOffcanvas;
    private HxModal? confirmDeleteModal;
    private HxModal? stepsModal;
    private string stepsModalTitle = string.Empty;
    private DataObject? stepsModalDataObject;
    private Func<DataObject, IList<Step>>? stepsModalGetSteps;
    System.Linq.Expressions.Expression<Func<DataObject, IList<Step>>>? stepsModalGetStepsExpression;
    private string searchTerm = string.Empty;

    private IEnumerable<DataObject> FilteredObjects =>
        objects?
        .Where(o => !searchTerm.Any() || o.ObjectUri.ContainsIgnoreCase(searchTerm))
        .OrderBy(o => o.ObjectUri)
        ?? Enumerable.Empty<DataObject>();

    private IEnumerable<DataObject> UnusedObjects =>
        objects?
        .Where(t => !t.Readers.Any() && !t.Writers.Any())
        ?? Enumerable.Empty<DataObject>();

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run(DbContextFactory.CreateDbContext);
        objects = await context.DataObjects
            .Include(o => o.Readers)
            .ThenInclude(s => s.Job)
            .Include(o => o.Writers)
            .ThenInclude(s => s.Job)
            .ToListAsync();
    }

    private async Task OpenConfirmDeleteModalAsync()
    {
        if (!UnusedObjects.Any())
        {
            Messenger.AddInformation("No unused source or target objects");
            return;
        }

        await confirmDeleteModal.LetAsync(x => x.ShowAsync());
    }

    private async Task DeleteUnusedDatabaseObjectsAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        foreach (var obj in UnusedObjects.ToList())
        {
            context.DataObjects.Remove(obj);
            objects?.Remove(obj);
        }
        await context.SaveChangesAsync();
        await confirmDeleteModal.LetAsync(x => x.HideAsync());
    }

    private async Task DeleteDatabaseObject(DataObject obj)
    {
        using var context = DbContextFactory.CreateDbContext();
        context.DataObjects.Remove(obj);
        await context.SaveChangesAsync();
        objects?.Remove(obj);
    }

    private async Task DeleteStepDatabaseObjectLinkAsync(Step step)
    {
        if (stepsModalDataObject is null
            || stepsModalGetSteps is null
            || stepsModalGetStepsExpression is null) return;

        using var context = DbContextFactory.CreateDbContext();
        var obj = await context.DataObjects
            .Include(stepsModalGetStepsExpression)
            .FirstOrDefaultAsync(o => o.ObjectId == stepsModalDataObject.ObjectId);

        if (obj is null) return;

        var steps = stepsModalGetSteps(obj);
        var stepToRemove = steps.FirstOrDefault(s => s.StepId == step.StepId);
        if (stepToRemove is not null)
        {
            steps.Remove(stepToRemove);
            await context.SaveChangesAsync();
        }

        stepsModalGetSteps(stepsModalDataObject).Remove(step);
    }

    private void OnDataObjectSubmitted(DataObject dataObject)
    {
        var toRemove = objects?.First(o => o.ObjectId == dataObject.ObjectId);
        if (toRemove is not null)
        {
            objects?.Remove(toRemove);
            objects?.Add(dataObject);
        }
    }

}
