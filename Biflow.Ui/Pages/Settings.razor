@page "/settings/{Page?}"

@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.SettingsEditor}")]

@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<h4>Settings</h4>

<div class="mt-3 mb-4">
    <AuthorizeView Roles="@(Roles.Admin)">
        <ul class="nav nav-tabs border-bottom-0" role="tablist">
    
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="settings/users" Match="NavLinkMatch.All">
                        <SvgIcon Icon="FeatherIcon.Users" />
                        Users
                    </NavLink>
                </li>
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="settings/subscriptions">
                        <SvgIcon Icon="FeatherIcon.Mail" />
                        Subscriptions
                    </NavLink>
                </li>
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="settings/apikeys">
                        <SvgIcon Icon="LucideIcon.GlobeLock" />
                        API keys
                    </NavLink>
                </li>
    
        </ul>
    </AuthorizeView>
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.SettingsEditor}")">
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="settings/connections">
                    <SvgIcon Icon="FeatherIcon.Database" />
                    Connections
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="settings/credentials">
                    <SvgIcon Icon="FeatherIcon.Key" />
                    Credentials
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="settings/appregistrations">
                    <SvgIcon Icon="FeatherIcon.Globe" />
                    App registrations
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="settings/pipelineclients">
                    <SvgIcon Icon="FeatherIcon.Pipeline" />
                    Pipeline clients
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="settings/functionapps">
                    <SvgIcon Icon="FeatherIcon.Zap" />
                    Function Apps
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="settings/qlikcloudenvironments">
                    <SvgIcon Icon="LucideIcon.ScatterChart" />
                    Qlik Cloud environments
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="settings/blobclients">
                    <SvgIcon Icon="LucideIcon.Container" />
                    Blob Storage Clients
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="settings/databricksworkspaces">
                    <SvgIcon Icon="LucideIcon.Layers3" />
                    Databricks workspaces
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="settings/dbtaccounts">
                    <SvgIcon Icon="LucideIcon.Blocks" />
                    dbt accounts
                </NavLink>
            </li>
        </ul>
    </AuthorizeView>
</div>

@if (Page == "users")
{
    <AuthorizeView Roles="@(Roles.Admin)">
        <Authorized>
            <UsersList />
        </Authorized>
        <NotAuthorized>
            <Unauthorized />
        </NotAuthorized>
    </AuthorizeView>
}
else if (Page == "subscriptions")
{
    <AuthorizeView Roles="@(Roles.Admin)">
        <Authorized>
            <AllSubscriptions />
        </Authorized>
        <NotAuthorized>
            <Unauthorized />
        </NotAuthorized>
    </AuthorizeView>
}
else if (Page == "apikeys")
{
    <AuthorizeView Roles="@Roles.Admin">
        <Authorized>
            <ApiKeysList />
        </Authorized>
        <NotAuthorized>
            <Unauthorized />
        </NotAuthorized>
    </AuthorizeView>
}
else if (Page == "connections")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.SettingsEditor}")">
        <ConnectionsList />
    </AuthorizeView>
}
else if (Page == "appregistrations")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.SettingsEditor}")">
        <AppRegistrationsList />
    </AuthorizeView>
}
else if (Page == "pipelineclients")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.SettingsEditor}")">
        <PipelineClientsList />
    </AuthorizeView>
}
else if (Page == "functionapps")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.SettingsEditor}")">
        <FunctionAppsList />
    </AuthorizeView>
}
else if (Page == "qlikcloudenvironments")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.SettingsEditor}")">
        <QlikCloudEnvironmentsList />
    </AuthorizeView>
}
else if (Page == "databricksworkspaces")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.SettingsEditor}")">
        <DatabricksWorkspacesList />
    </AuthorizeView>
}
else if (Page == "dbtaccounts")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.SettingsEditor}")">
        <DbtAccountsList />
    </AuthorizeView>
}
else if (Page == "blobclients")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.SettingsEditor}")">
        <BlobClientsList />
    </AuthorizeView>
}
else if (Page == "credentials")
{
    <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.SettingsEditor}")">
        <CredentialsList />
    </AuthorizeView>
}
else
{
    <p>Sorry, nothing at this address.</p>
}

@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter] public string? Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Page is not null)
        {
            return;
        }

        ArgumentNullException.ThrowIfNull(AuthenticationState);
        var authState = await AuthenticationState;

        if (authState.User.IsInRole(Roles.Admin))
        {
            NavigationManager.NavigateTo("settings/users");
            return;
        }

        NavigationManager.NavigateTo("settings/connections");
    }
}
