
@*Increase dropdown menu z-index so that it is displayed over the sticky-top div in StepsComponent.*@
<style>
    .dropdown-menu {
        z-index: 1100;
    }
</style>

<div class="row align-items-center gap-3">
    <div class="col-auto">
        <div>
            <a href="jobs">
                All jobs
            </a>
            <span>&nbsp;/&nbsp;</span>
            <strong>@_job?.JobName</strong>
        </div>
    </div>
    @if (!string.IsNullOrWhiteSpace(_job?.JobDescription))
    {
        <div class="col-auto">
            <HxButton Color="ThemeColor.None"
                      CssClass="btn-auto"
                      Size="ButtonSize.Small"
                      @onclick="() => _descriptionOpen = !_descriptionOpen">
                <SvgIcon Icon="LucideIcon.Info" />
                &nbsp;
                @if (_descriptionOpen)
                {
                    <span>Hide description</span>
                }
                else
                {
                    <span>Show description</span>
                }
            </HxButton>
        </div>
    }

    <div class="col-xl d-flex flex-row flex-xl-row-reverse justify-content-xl-start align-items-center">
        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
            <div class="ms-0 ms-xl-4 me-4 me-xl-0">
                @*Dropdown to delete the current job*@
                <HxDropdownButtonGroup CssClass="ms-3">
                    <HxDropdownToggleButton Color="ThemeColor.None" Size="ButtonSize.Small" CssClass="btn-auto text-danger">
                        <SvgIcon Icon="LucideIcon.Trash2" />
                        Delete
                    </HxDropdownToggleButton>
                    <HxDropdownMenu CssClass="dropdown-menu-xl-right">
                        <HxDropdownHeader>Delete job?</HxDropdownHeader>
                        <HxDropdownItem @onclick="DeleteJob">Confirm</HxDropdownItem>
                    </HxDropdownMenu>
                </HxDropdownButtonGroup>
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
            <div class="form-check form-switch">
                <input type="checkbox" class="form-check-input" id="job_enabled_toggle" checked="@(_job?.IsEnabled ?? false ? "checked" : null)" @onchange="ToggleJobEnabled">
                <label class="form-check-label" for="job_enabled_toggle">Enabled</label>
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="@($"{Roles.Operator}, {Roles.Viewer}")">
            <div class="form-check form-switch">
                <input type="checkbox" class="form-check-input" disabled id="job_enabled_toggle" checked="@(_job?.IsEnabled ?? false ? "checked" : null)">
                <label class="form-check-label" for="job_enabled_toggle">Enabled</label>
            </div>
        </AuthorizeView>
    </div>
</div>

@if (_descriptionOpen && !string.IsNullOrWhiteSpace(_job?.JobDescription))
{
    <div class="row mt-3">
        <div class="col-auto border rounded" style="max-height: 110px; overflow-y: auto;">
            <small class="text-secondary" style="white-space: pre-line;">@_job?.JobDescription</small>
        </div>
    </div>
}

@if (_job is not null)
{
    <div class="row mt-3">
        @if (!_job.IsEnabled)
        {
            <div class="col-auto">
                <div class="alert alert-warning mb-0" role="alert">
                    Job is disabled — scheduled executions of this job will not be started
                </div>
            </div>
        }
    </div>
}

<div class="row mt-3 mb-4">
    <div class="col">
        <ul class="nav nav-underline" role="tablist">
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@($"jobs/{_job?.JobId}/steps")">
                    <SvgIcon Icon="LucideIcon.ListChecks" />
                    Steps
                </NavLink>
            </li>
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="@($"jobs/{_job?.JobId}/parameters")">
                        <SvgIcon Icon="LucideIcon.AtSign" />
                        Parameters
                    </NavLink>
                </li>
            </AuthorizeView>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@($"jobs/{_job?.JobId}/graph")">
                    <SvgIcon Icon="LucideIcon.Workflow" />
                    Graph
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@($"jobs/{_job?.JobId}/lineage")">
                    <SvgIcon Icon="LucideIcon.Network" />
                    Lineage
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@($"jobs/{_job?.JobId}/schedules")">
                    <SvgIcon Icon="LucideIcon.Calendar" />
                    Schedules
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@($"jobs/{_job?.JobId}/history")">
                    <SvgIcon Icon="LucideIcon.Activity" />
                    History
                </NavLink>
            </li>
            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="@($"jobs/{_job?.JobId}/settings")">
                        <SvgIcon Icon="LucideIcon.Settings2" />
                        Settings
                    </NavLink>
                </li>
            </AuthorizeView>
        </ul>
    </div>    
</div>

<CascadingValue Value="_job">
    <CascadingValue Value="_steps" IsFixed>
        <CascadingValue Value="_jobs" IsFixed>
            <CascadingValue Value="OnJobUpdated" Name="OnJobUpdated" IsFixed>
                <CascadingValue Value="SortSteps" Name="SortSteps" IsFixed>

                    @* Leave steps component rendered but only update the visibility css class. This way rendering is quicker when returning to the component. *@
                    <div class="@(DetailsPage == "steps" ? null : "d-none")">
                        <StepsList SqlConnections="_sqlConnections"
                                   MsSqlConnections="_msSqlConnections"
                                   AsConnections="_asConnections"
                                   PipelineClients="_pipelineClients"
                                   AzureCredentials="_azureCredentials"
                                   FunctionApps="_functionApps"
                                   QlikCloudClients="_qlikCloudClients"
                                   DatabricksWorkspaces="_databricksWorkspaces"
                                   DbtAccounts="_dbtAccounts"
                                   ScdTables="_scdTables"
                                   Credentials="_credentials"
                                   Proxies="_proxies"
                                   InitialStepId="@(DetailsPage == "steps" ? InitialStepId : null)" />
                    </div>

                    @if (DetailsPage == "parameters")
                    {
                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}, {Roles.Operator}")">
                            <JobParameters />
                        </AuthorizeView>
                    }
                    else if (DetailsPage == "history" && _job is not null)
                    {
                        <JobHistory JobId="_job.JobId" JobName="@_job.JobName" />
                    }
                    else if (DetailsPage == "graph")
                    {
                        <DependenciesGraph SqlConnections="_sqlConnections"
                                           MsSqlConnections="_msSqlConnections"
                                           AsConnections="_asConnections"
                                           PipelineClients="_pipelineClients"
                                           AzureCredentials="_azureCredentials"
                                           FunctionApps="_functionApps"
                                           InitialStepId="InitialStepId"
                                           QlikCloudClients="_qlikCloudClients"
                                           DatabricksWorkspaces="_databricksWorkspaces"
                                           DbtAccounts="_dbtAccounts"
                                           ScdTables="_scdTables"
                                           Credentials="_credentials"
                                           Proxies="_proxies" />
                    }
                    else if (DetailsPage == "lineage")
                    {
                        <DataLineageGraph />
                    }
                    else if (DetailsPage == "schedules")
                    {
                        <JobSchedulesList />
                    }
                    else if (DetailsPage == "settings" || SettingsPage is not null)
                    {
                        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                            <JobSettings Page="@SettingsPage" />
                        </AuthorizeView>
                    }
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>