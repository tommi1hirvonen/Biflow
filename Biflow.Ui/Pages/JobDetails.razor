@page "/jobs/{Id:guid}/{DetailsPage}"

@*Increase dropdown menu z-index so that it is displayed over the sticky-top div in StepsComponent.*@
<style>
    .dropdown-menu {
        z-index: 1100;
    }
</style>

<div class="row">
    
</div>

<div class="row align-items-center">
    <div class="col-auto">
        <div>
            <a href="jobs">
                All jobs
            </a>
            <span>&nbsp;/</span>
            <strong>@Job.JobName</strong>
        </div>
    </div>
    @if (!string.IsNullOrWhiteSpace(Job.JobDescription))
    {
        <div class="col-auto">
            <HxButton Color="ThemeColor.Light"
                      Size="ButtonSize.Small"
                      @onclick="() => DescriptionOpen = !DescriptionOpen">
                @MarkupHelper.FromFile("icons/feather/info.svg")
                &nbsp;
                @if (DescriptionOpen)
                {
                    <span>Hide description</span>
                }
                else
                {
                    <span>Show description</span>
                }
            </HxButton>
        </div>
    }

    <div class="col-xl d-flex flex-row flex-xl-row-reverse justify-content-xl-start mt-4 mt-xl-0 align-items-center">
        <AuthorizeView Roles="Admin, Editor">
            <div class="ms-0 ms-xl-4 me-4 me-xl-0">
                @*Dropdown to change the current job's name*@
                <HxDropdownButtonGroup>
                    <HxDropdownToggleButton Color="ThemeColor.Secondary">
                        @MarkupHelper.FromFile("icons/feather/edit-2.svg")
                        Edit
                    </HxDropdownToggleButton>
                    <HxDropdownContent CssClass="dropdown-menu-xl-right p-4">
                        <EditForm Model="EditJob" OnValidSubmit="UpdateJob" Context="_context" style="min-width: 25rem;">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div>
                                <label class="form-label">Name</label>
                                <InputText class="form-control" @bind-Value="EditJob.JobName" autocomplete="off"></InputText>
                            </div>
                            <div>
                                <label class="form-label">Description</label>
                                <InputTextArea class="form-control form-control-sm" @bind-Value="EditJob.JobDescription" rows="5"></InputTextArea>
                            </div>
                            <div>
                                <label class="form-label">Overtime notification limit (min, 0 = indefinite)</label>
                                <InputNumber class="form-control form-control-sm" style="max-width: 10rem;" @bind-Value="EditJob.OvertimeNotificationLimitMinutes"></InputNumber>
                                <div class="form-text">If the job's execution exceeds the overtime limit, an email is automatically sent to users who have subscribed to this job's overtime notifications.</div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <HxSubmit Size="ButtonSize.Small" Color="ThemeColor.Success">Save</HxSubmit>
                                </div>
                            </div>
                        </EditForm>
                    </HxDropdownContent>
                </HxDropdownButtonGroup>

                @*Dropdown to delete the current job*@
                <HxDropdownButtonGroup CssClass="ms-3">
                    <HxDropdownToggleButton Color="ThemeColor.Secondary">
                        @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                        Delete
                    </HxDropdownToggleButton>
                    <HxDropdownMenu CssClass="dropdown-menu-xl-right">
                        <HxDropdownHeader>Delete job?</HxDropdownHeader>
                        <HxDropdownItem @onclick="DeleteJob">Confirm</HxDropdownItem>
                    </HxDropdownMenu>
                </HxDropdownButtonGroup>
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="Admin, Editor">
            <div class="form-check form-switch">
                <input type="checkbox" class="form-check-input" id="job_enabled_toggle" checked="@(Job?.IsEnabled ?? false ? "checked" : null)" @onchange="ToggleJobEnabled">
                <label class="form-check-label" for="job_enabled_toggle">Enabled</label>
            </div>
        </AuthorizeView>

        <AuthorizeView Roles="Operator, Viewer">
            <div class="form-check form-switch">
                <input type="checkbox" class="form-check-input" disabled id="job_enabled_toggle" checked="@(Job?.IsEnabled ?? false ? "checked" : null)">
                <label class="form-check-label" for="job_enabled_toggle">Enabled</label>
            </div>
        </AuthorizeView>
    </div>
</div>

@if (DescriptionOpen && !string.IsNullOrWhiteSpace(Job?.JobDescription))
{
    <div class="row mt-3">
        <div class="col-auto border rounded" style="max-height: 110px; overflow-y: auto;">
            <small class="text-secondary" style="white-space: pre-line;">@Job?.JobDescription</small>
        </div>
    </div>
}


<div class="row flex-column-reverse flex-xxl-row align-items-center">
    <div class="col-xxl">
        <ul class="nav nav-pills mt-4 mb-4" role="tablist">
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@($"jobs/{Job?.JobId}/steps")">
                    @MarkupHelper.FromFile("icons/feather/list.svg")
                    Steps
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@($"jobs/{Job?.JobId}/dependencies")">
                    @MarkupHelper.FromFile("icons/feather/dependency.svg")
                    Dependencies
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@($"jobs/{Job?.JobId}/schedules")">
                    @MarkupHelper.FromFile("icons/feather/calendar.svg")
                    Schedules
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@($"jobs/{Job?.JobId}/history")">
                    @MarkupHelper.FromFile("icons/feather/activity.svg")
                    History
                </NavLink>
            </li>
        </ul>
    </div>
    <div class="col-xxl d-flex flex-xxl-row-reverse mt-4 mt-xxl-0">
        @*Show switches to display whether the jos is enabled or disabled and whether the job uses dependency mode or not.*@
        <AuthorizeView Roles="Admin, Editor">
            <div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_execution_phase_mode"
                           checked="@(!Job?.UseDependencyMode ?? false ? "checked" : null)"
                           @onchange="() => ToggleDependencyMode(false)">
                    <label class="form-check-label" for="radio_execution_phase_mode">Execution phase mode</label>
                </div>
                <HxPopover Placement="PopoverPlacement.Bottom" Trigger="PopoverTrigger.Hover" WrapperCssClass="me-3" Title="Execution phase mode"
                           Content="Steps are executed in order based on their execution phase. Steps in the same execution phase can be started at the same time. Execution phases are started from the lowest value up.">
                    <ChildContent>
                        <span style="cursor: pointer;">
                            @MarkupHelper.FromFile("icons/feather/info.svg")
                        </span>
                    </ChildContent>
                </HxPopover>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" id="radio_dependency_mode"
                           checked="@(Job?.UseDependencyMode ?? false ? "checked" : null)"
                           @onchange="() => ToggleDependencyMode(true)">
                    <label class="form-check-label" for="radio_dependency_mode">Dependency mode</label>
                </div>
                <HxPopover Placement="PopoverPlacement.Left" Trigger="PopoverTrigger.Hover" Title="Dependency mode"
                           Content="Steps are executed in order based on their dependencies. Steps that have no dependencies are started first. Steps that have no dependencies between them can be executed at the same time. Steps that have dependencies are executed when preceding steps have been completed and the dependency type criteria is met.">
                    <ChildContent>
                        <span style="cursor: pointer;">
                            @MarkupHelper.FromFile("icons/feather/info.svg")
                        </span>
                    </ChildContent>
                </HxPopover>
            </div>
            @*Only show StopOnFirstError setting if job uses execution phase mode.*@
            @if (Job?.UseDependencyMode == false)
            {
                <div class="form-check ms-4 ms-xxl-0 me-xxl-4">
                    <input type="checkbox" class="form-check-input" id="stop_on_first_error_toggle"
                           checked="@(Job?.StopOnFirstError ?? false ? "checked" : null)"
                           @onchange="ToggleStopOnFirstError">
                    <label class="form-check-label" for="stop_on_first_error_toggle">Stop on first error</label>
                </div>
                <HxPopover Placement="PopoverPlacement.Bottom" Trigger="PopoverTrigger.Hover" WrapperCssClass="me-3" Title="Stop on first error"
                           Content="Stop the entire execution if a step fails. The steps that have been started will run to completion. Available only in execution phase mode.">
                    <ChildContent>
                        <span style="cursor: pointer;">
                            @MarkupHelper.FromFile("icons/feather/info.svg")
                        </span>
                    </ChildContent>
                </HxPopover>
            }
        </AuthorizeView>
        <AuthorizeView Roles="Operator, Viewer">
            <div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" disabled id="radio_execution_phase_mode"
                           checked="@(!Job?.UseDependencyMode ?? false ? "checked" : null)" />
                    <label class="form-check-label" for="radio_execution_phase_mode">Execution phase mode</label>
                </div>
                <div class="form-check form-check-inline">
                    <input type="radio" class="form-check-input" disabled id="radio_dependency_mode"
                           checked="@(Job?.UseDependencyMode ?? false ? "checked" : null)" />
                    <label class="form-check-label" for="radio_dependency_mode">Dependency mode</label>
                </div>
            </div>
            @if (Job?.UseDependencyMode == false)
            {
                <div class="form-check ms-4 ms-xxl-0 me-xxl-4">
                    <input type="checkbox" class="form-check-input" disabled id="stop_on_first_error_toggle" checked="@(Job?.StopOnFirstError ?? false ? "checked" : null)">
                    <label class="form-check-label" for="stop_on_first_error_toggle">Stop on first error</label>
                </div>
            }
        </AuthorizeView>
    </div>
</div>


@if (DetailsPage == "steps")
{
    <StepsComponent Job="Job"
                    Jobs="Jobs"
                    Steps="Steps"
                    SqlConnections="SqlConnections"
                    AsConnections="AsConnections"
                    PipelineClients="PipelineClients"
                    AppRegistrations="AppRegistrations"
                    FunctionApps="FunctionApps" />
}
else if (DetailsPage == "history")
{
    <JobHistoryComponent Id="Id" Job="Job" />
}
else if (DetailsPage == "dependencies")
{
    <DependenciesComponent Jobs="Jobs"
                           Job="Job"
                           Steps="Steps"
                           SqlConnections="SqlConnections"
                           AsConnections="AsConnections"
                           PipelineClients="PipelineClients"
                           AppRegistrations="AppRegistrations"
                           FunctionApps="FunctionApps" />
}
else if (DetailsPage == "schedules")
{
    <SchedulesComponent Job="Job" />
}
else
{
    <p>No component to show.</p>
}