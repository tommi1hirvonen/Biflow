@page "/tags"

@inject IDbContextFactory<EtlManagerContext> DbContextFactory
@inject MarkupHelperService MarkupHelper
@inject IHxMessengerService Messenger

<style>
    tr a {
        text-decoration: none;
    }
        
        tr:hover a {
            text-decoration: underline;
        }
</style>

<PageTitle>Tags | ETL Manager</PageTitle>

<h4>Tags</h4>

<div class="row mt-3">
    <div class="col">
        <button class="btn btn-secondary" @onclick="OpenConfirmDeleteModalAsync">
            @MarkupHelper.FromFile("icons/feather/trash-2.svg")
            Delete unused
        </button>
    </div>
</div>

<div class="row my-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Tag</th>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Tags_ is null)
                        {
                            <tr>
                                <td colspan="5" class="px-3">Loading...</td>
                            </tr>
                        }
                        else if (!Tags_.Any())
                        {
                            <tr>
                                <td colspan="5" class="px-3">No tags</td>
                            </tr>
                        }
                        else
                        {
                            foreach (var tag in Tags_)
                            {
                                var jobs = tag.Steps.Select(s => s.Job).Distinct().Count();
                                var steps = tag.Steps.Count();
                                var schedules = tag.Schedules.Count;
                                <tr>
                                    <td class="align-middle">
                                        <TagComponent Tag="tag" />
                                    </td>
                                    <td>
                                        <div class="btn-group btn-row">
                                            @*Dropdown to edit the tag's name*@
                                            <HxDropdown>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() => TemplateTag.TagName = tag.TagName">
                                                    @MarkupHelper.FromFile("icons/feather/edit-3.svg")
                                                </HxDropdownToggleButton>
                                                <HxDropdownContent CssClass="p-4">
                                                    <EditForm Model="TemplateTag" OnValidSubmit="async () => await UpdateTagNameAsync(tag)" Context="_context" style="min-width: 20rem;">
                                                        <DataAnnotationsValidator />
                                                        <ValidationSummary />
                                                        <div>
                                                            <label class="form-label">New name</label>
                                                            <InputText class="form-control form-control-sm" @bind-Value="TemplateTag.TagName" autocomplete="off"></InputText>
                                                        </div>
                                                        <HxSubmit Size="ButtonSize.Small" Color="ThemeColor.Success" CssClass="mt-3">Save</HxSubmit>
                                                    </EditForm>
                                                </HxDropdownContent>
                                            </HxDropdown>
                                            <HxDropdown>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                    @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                    <HxDropdownItem @onclick="async () => await DeleteTag(tag)">Confirm</HxDropdownItem>
                                                </HxDropdownMenu>
                                            </HxDropdown>
                                            <HxDropdown>
                                                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                    @tag.Color
                                                </HxDropdownToggleButton>
                                                <HxDropdownMenu>
                                                    <HxDropdownHeader>Tag color</HxDropdownHeader>
                                                    @foreach (var color in Enum.GetValues<TagColor>())
                                                    {
                                                        <HxDropdownItem OnClick="async () => await SetTagColorAsync(tag, color)">@color</HxDropdownItem>
                                                    }
                                                </HxDropdownMenu>
                                            </HxDropdown>
                                        </div>
                                    </td>
                                    <td class="align-middle">
                                        @(jobs > 0 ? $"{jobs} job(s)" : null)
                                    </td>
                                    
                                    <td class="align-middle">
                                        <a class="text-dark" href="javascript:void(0)" @onclick="async () => await ShowEditModalAsync(tag)">
                                            @(steps > 0 ? $"{steps} step(s)" : null)
                                        </a>
                                    </td>

                                    <td class="align-middle">
                                        <a class="text-dark" href="javascript:void(0)" @onclick="async () => await ShowSchedulesModalAsync(tag)">
                                            @(schedules > 0 ? $"{schedules} schedule(s)" : null)
                                        </a>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<HxModal @ref="ConfirmDeleteModal" Size="ModalSize.Regular" Title="Delete tags">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                Delete these unused tags?
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                @foreach (var tag in UnusedTags)
                {
                    <TagComponent Tag="tag" CssClass="m-1" />
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="ConfirmDeleteModal.HideAsync">Cancel</button>
        <button class="btn btn-danger" @onclick="DeleteUnusedTagsAsync">Delete</button>
    </FooterTemplate>
</HxModal>

<HxModal @ref="EditModal" Size="ModalSize.Large" Title="@($"Edit tag {EditTag?.TagName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in EditTag?.Steps
                            .OrderBy(s => s.Job.JobName)
                            .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIconComponent StepType_="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                                <td>
                                    <div class="btn-group btn-row">
                                        <button class="btn btn-sm btn-light" @onclick="async () => await DeleteStepTag(step)">
                                            @MarkupHelper.FromFile("icons/feather/delete.svg")
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="EditModal.HideAsync">Close</button>
    </FooterTemplate>
</HxModal>

<HxModal @ref="SchedulesModal" Size="ModalSize.Large" Title="@($"Schedules using {SchedulesModalTag?.TagName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Cron expression</th>
                            <th>Next execution</th>
                            <th>Enabled</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var schedule in SchedulesModalTag?.Schedules
                           .OrderBy(s => s.Job.JobName) ?? Enumerable.Empty<Schedule>())
                        {
                            <tr>
                                <td>
                                    @schedule.Job.JobName
                                </td>
                                <td>
                                    @schedule.CronExpression
                                </td>
                                <td>
                                    @schedule.GetNextFireTime()
                                </td>
                                <td>
                                    <div class="form-check form-switch">
                                        <input type="checkbox" class="form-check-input" disabled checked=@schedule.IsEnabled>
                                        <label class="form-check-label" for="@schedule.ScheduleId"></label>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="SchedulesModal.HideAsync">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private IList<Tag>? Tags_ { get; set; }

    private IEnumerable<Tag> UnusedTags => Tags_?.Where(t => !t.Steps.Any()) ?? Enumerable.Empty<Tag>();

    private bool? ConfirmResult { get; set; }

    private HxModal ConfirmDeleteModal { get; set; } = null!;

    private HxModal EditModal { get; set; } = null!;

    private HxModal SchedulesModal { get; set; } = null!;

    private Tag? EditTag { get; set; }

    private Tag? SchedulesModalTag { get; set; }

    private Tag TemplateTag { get; set; } = new(string.Empty);

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        Tags_ = await context.Tags
            .AsNoTrackingWithIdentityResolution()
            .Include(t => t.Steps)
            .ThenInclude(t => t.Job)
            .Include(t => t.Schedules)
            .ThenInclude(s => s.Job)
            .OrderBy(t => t.TagName)
            .ToListAsync();
    }

    private async Task OpenConfirmDeleteModalAsync()
    {
        if (!UnusedTags.Any())
        {
            Messenger.AddInformation("No unused tags");
            return;
        }

        await ConfirmDeleteModal.ShowAsync();
    }

    private async Task DeleteUnusedTagsAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        foreach (var tag in UnusedTags.ToList())
        {
            context.Tags.Remove(tag);
            Tags_?.Remove(tag);
        }
        await context.SaveChangesAsync();
        await ConfirmDeleteModal.HideAsync();
    }

    private async Task UpdateTagNameAsync(Tag tag)
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            tag.TagName = TemplateTag.TagName;
            context.Attach(tag).State = EntityState.Modified;
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            Messenger.AddError("Concurrency error", "The tag was modified outside of this session. Reload the page to view the most recent values.");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error updating tag", ex.Message);
        }
    }

    private async Task DeleteTag(Tag tag)
    {
        using var context = DbContextFactory.CreateDbContext();
        context.Tags.Remove(tag);
        await context.SaveChangesAsync();
        Tags_?.Remove(tag);
    }

    private async Task DeleteStepTag(Step step)
    {
        if (EditTag is null) return;

        using var context = DbContextFactory.CreateDbContext();
        var tag = await context.Tags
            .Include(t => t.Steps)
            .FirstOrDefaultAsync(t => t.TagId == EditTag.TagId);

        if (tag is null) return;

        var stepToRemove = tag.Steps.FirstOrDefault(s => s.StepId == step.StepId);
        if (stepToRemove is not null)
        {
            tag.Steps.Remove(stepToRemove);
            await context.SaveChangesAsync();
        }

        EditTag.Steps.Remove(step);
    }

    private async Task SetTagColorAsync(Tag tag, TagColor color)
    {
        tag.Color = color;
        using var context = DbContextFactory.CreateDbContext();
        var tag_ = await context.Tags.FirstOrDefaultAsync(t => t.TagId == tag.TagId);
        if (tag_ is not null)
        {
            tag_.Color = color;
            await context.SaveChangesAsync();
        }
    }

    private async Task ShowEditModalAsync(Tag tag)
    {
        EditTag = tag;
        await EditModal.ShowAsync();
    }

    private async Task ShowSchedulesModalAsync(Tag tag)
    {
        SchedulesModalTag = tag;
        await SchedulesModal.ShowAsync();
    }
}
