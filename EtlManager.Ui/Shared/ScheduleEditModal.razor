@using Quartz

@inject IHxMessengerService Messenger
@inject IDbContextFactory<EtlManagerContext> DbContextFactory
@inject ISchedulerService SchedulerService
@inject MarkupHelperService MarkupHelper

<HxModal @ref="Modal" Size="ModalSize.Regular" Title="@(ScheduleId == Guid.Empty ? "New schedule" : "Edit schedule")">
    <BodyTemplate>
        <EditForm id="schedule_form" Model="Schedule" OnValidSubmit="SubmitSchedule" Context="_context">
            <div class="row">
                <div class="col">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label class="form-label">Job</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                @MarkupHelper.FromFile("icons/feather/loader.svg")
                            </div>
                            <InputSelect class="form-select" @bind-Value="Schedule.JobId" disabled=@(Schedule.ScheduleId != Guid.Empty || Job is not null)>
                                @if (Job is not null)
                                {
                                    <option value="@Job.JobId">@Job.JobName</option>
                                }
                                else
                                {
                                    foreach (var job in Jobs)
                                    {
                                        <option value="@job.JobId">@job.JobName</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="mt-3">
                        <label class="form-label">Cron expression</label>
                        <div class="input-group">
                            <div class="input-group-text">
                                @MarkupHelper.FromFile("icons/feather/calendar.svg")
                            </div>
                            <input class="form-control" type="text" @bind:event="oninput" @bind="Schedule.CronExpression" disabled=@(Schedule.ScheduleId != Guid.Empty)></input>
                        </div>
                    </div>
                    <div class="row mt-3">
                        @if (CronExpression.IsValidExpression(Schedule.CronExpression ?? string.Empty))
                        {
                            var nextFireTimes = Schedule.GetNextFireTimes(10).ToList();

                            <small class="text-secondary">Description:</small>
                            <small class="text-secondary ms-3">@Schedule.GetScheduleDescription()</small>
                            <small class="text-secondary mt-2">Next execution(s) (showing first 10):</small>
                            <div class="col">
                                @foreach (var fireTime in nextFireTimes.Take(5))
                                {
                                    <small class="row text-secondary ms-3">@fireTime</small>
                                }
                            </div>
                            <div class="col">
                                @foreach (var fireTime in nextFireTimes.Skip(5).Take(5))
                                {
                                    <small class="row text-secondary ms-3">@fireTime</small>
                                }
                            </div>
                        }
                        else
                        {
                            <small class="text-secondary">Not a valid cron expression</small>
                        }
                    </div>
                    <div class="row mt-3">
                        <label class="form-label">Tag filters</label>
                        <HxInputTags @bind-Value="Tags" DataProvider="GetTagSuggestions" AllowCustomTags="false" SuggestMinimumLength="0" SuggestDelay="0" />
                        <div class="form-text">Use tag filters to only include steps with specific tags in scheduled executions.</div>
                    </div>
                    
                </div>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit FormId="schedule_form" Color="ThemeColor.Success">Save</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Modal.HideAsync()">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {

    [Parameter] public Guid ScheduleId { get; set; } // empty guid => new schedule
    private Guid PrevScheduleId { get; set; }

    // Optional - new schedules will be locked to this job if provided
    [Parameter] public Job? Job { get; set; }

    [Parameter] public IEnumerable<Job> Jobs { get; set; } = Enumerable.Empty<Job>();

    [Parameter] public EventCallback<Schedule> OnSubmit { get; set; }

    private Schedule Schedule { get; set; } = new();

    private HxModal Modal { get; set; } = null!;

    private List<string> Tags { get; set; } = new();
    public IEnumerable<Tag> AllTags { get; set; } = Enumerable.Empty<Tag>();

    private async Task<InputTagsDataProviderResult> GetTagSuggestions(InputTagsDataProviderRequest request) =>
         await Task.FromResult<InputTagsDataProviderResult>(new InputTagsDataProviderResult
         {
             Data = AllTags
             .Select(t => t.TagName)
             .Where(t => t.ContainsIgnoreCase(request.UserInput))
             .Where(t => !Tags.Any(tag => t == tag))
             .OrderBy(t => t)
         });

    protected override async Task OnInitializedAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        AllTags = await context.Tags.ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ScheduleId != Guid.Empty && ScheduleId != PrevScheduleId)
        {
            using var context = DbContextFactory.CreateDbContext();
            Schedule = await context.Schedules
                .AsNoTracking()
                .Include(s => s.Tags)
                .Include(s => s.Job)
                .FirstAsync(s => s.ScheduleId == ScheduleId);
            PrevScheduleId = ScheduleId;
        }
        else if (ScheduleId == Guid.Empty)
        {
            Schedule = new()
            {
                JobId = Job is not null ? Job.JobId : Jobs?.Select(job => job.JobId).FirstOrDefault() ?? Guid.Empty,
                IsEnabled = true,
                Tags = new List<Tag>()
            };
        }
        Tags = Schedule.Tags
                .Select(t => t.TagName)
                .OrderBy(t => t)
                .ToList();
    }

    private async Task SubmitSchedule()
    {
        // New schedule
        if (Schedule.ScheduleId == Guid.Empty)
        {
            try
            {
                using var context = DbContextFactory.CreateDbContext();

                var tags = await context.Tags.ToListAsync();
                foreach (var tagName in Tags)
                {
                    var tag = tags.FirstOrDefault(t => t.TagName == tagName);
                    if (tag is not null) Schedule.Tags.Add(tag);
                }

                using var transaction = context.Database.BeginTransaction();
                context.Schedules.Add(Schedule);
                await context.SaveChangesAsync();
                try
                {
                    await SchedulerService.AddScheduleAsync(Schedule);
                    transaction.Commit();
                }
                catch (Exception)
                {
                    transaction.Rollback();
                    throw;
                }

                Schedule.Job = Job is not null ? Job : Jobs?.FirstOrDefault(job => job.JobId == Schedule.JobId)
                    ?? throw new InvalidOperationException("Job cannot be null");

                await OnSubmit.InvokeAsync(Schedule);
                await Modal.HideAsync();
                Tags.Clear();
            }
            catch (Exception ex)
            {
                Messenger.AddError("Error adding schedule", ex.Message);
            }
        }
        // Existing schedule
        else
        {
            try
            {
                using var context = DbContextFactory.CreateDbContext();
                context.Attach(Schedule);
                var tags = await context.Tags.ToListAsync();

                // Synchronize tags
                foreach (var text in Tags.Where(str => !Schedule.Tags.Any(t => t.TagName == str)))
                {
                    // New tags
                    var tag = tags.FirstOrDefault(t => t.TagName == text) ?? new Tag(text);
                    Schedule.Tags.Add(tag);
                }
                foreach (var tag in Schedule.Tags.Where(t => !Tags.Contains(t.TagName)).ToList() ?? Enumerable.Empty<Tag>())
                {
                    Schedule.Tags.Remove(tag);
                }

                await context.SaveChangesAsync();

                await OnSubmit.InvokeAsync(Schedule);
                await Modal.HideAsync();
                Tags.Clear();
            }
            catch (Exception ex)
            {
                Messenger.AddError("Error editing schedule", ex.Message);
            }
        }
    }

    public async Task ShowAsync() => await Modal.ShowAsync();
}
