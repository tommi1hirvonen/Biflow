@implements IConnectionEditModal

@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject MarkupHelperService MarkupHelper
@inject IConfiguration configuration
@inject IHxMessengerService Messenger

<HxModal @ref="Modal" Size="ModalSize.Large" OnClosed="() => ConnectionTestSuccess = null" Title="@(ConnectionId == Guid.Empty ? "New Analysis Services connection" : "Edit " + Connection?.ConnectionName)">
    <BodyTemplate>
        @if (Connection is not null)
        {
            <EditForm Model="Connection" id="as_connection_edit_form" OnValidSubmit="SubmitConnection">
                <div class="row">
                    <div class="col-md-10 mx-auto">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <label class="form-label">Connection name</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    @MarkupHelper.FromFile("icons/feather/edit-2.svg")
                                </div>
                                <InputText class="form-control" @bind-Value="Connection.ConnectionName"></InputText>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <label class="form-label">Connection string</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    @MarkupHelper.FromFile("icons/feather/database.svg")
                                </div>
                                <InputText class="form-control" @bind-Value="Connection.ConnectionString" style="font-family:monospace;"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="TestConnection" Enabled="!TestingConnection">
                                    Test connection
                                </HxButton>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col">
                                @if (ConnectionTestSuccess == true)
                                {
                                    <span class="badge bg-success">Success</span>
                                }
                                else if (ConnectionTestSuccess == false)
                                {
                                    <span class="badge bg-danger">Failed</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="as_connection_edit_form" Color="ThemeColor.Success">@(ConnectionId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Modal.HideAsync()">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public Guid ConnectionId { get; set; } // empty Guid => new connection

    [Parameter]
    public EventCallback<ConnectionInfoBase> OnConnectionSubmit { get; set; }

    private AnalysisServicesConnectionInfo? Connection { get; set; }

    private HxModal Modal { get; set; } = null!;

    private bool? ConnectionTestSuccess { get; set; } = null;
    private bool TestingConnection { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        if (ConnectionId != Guid.Empty)
        {
            using var context = DbFactory.CreateDbContext();
            Connection = await context.AnalysisServicesConnections
                .AsNoTrackingWithIdentityResolution()
                .Include(c => c.TabularSteps)
                .ThenInclude(step => step.Job)
                .FirstAsync(c => c.ConnectionId == ConnectionId);
        }
        else
        {
            Connection = new(string.Empty, string.Empty);
        }
        ConnectionTestSuccess = null;
        TestingConnection = false;
    }

    private async Task SubmitConnection()
    {
        await OnConnectionSubmit.InvokeAsync(Connection);
        await Modal.HideAsync();
    }

    private async Task TestConnection()
    {
        ConnectionTestSuccess = null;
        TestingConnection = true;
        try
        {
            await Task.Run(() =>
            {
                using var server = new Microsoft.AnalysisServices.Tabular.Server();
                server.Connect(Connection?.ConnectionString);
            });
            ConnectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            ConnectionTestSuccess = false;
            Messenger.AddError("Connection test failed", ex.Message);
        }
        TestingConnection = false;
    }

    public async Task ShowAsync() => await Modal.ShowAsync();
}
