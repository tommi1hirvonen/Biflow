
<HxModal @ref="Modal" Fullscreen="ModalFullscreen.Always" Scrollable="true" Title="@(Execution is not null ? Execution.JobName : null)">
    <BodyTemplate>

        <HxButtonToolbar>

            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="() => JobExecutionDetailsOpen = !JobExecutionDetailsOpen">
                @MarkupHelper.FromFile("icons/feather/info.svg")
                Job details
            </HxButton>

            <HxButtonGroup CssClass="ms-3">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(ShowReport == Report.Table ? "active" : null)"
                          @onclick="() => ShowReport = Report.Table">
                    @MarkupHelper.FromFile("icons/bootstrap/table.svg")
                    Table
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(ShowReport == Report.Gantt ? "active" : null)"
                          @onclick="() => ShowReport = Report.Gantt">
                    @MarkupHelper.FromFile("icons/bootstrap/bar-chart-steps.svg")
                    Gantt
                </HxButton>
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(ShowReport == Report.Dependencies ? "active" : null)"
                          @onclick="() => { ShowReport = Report.Dependencies; }">
                    @MarkupHelper.FromFile("icons/bootstrap/diagram-3-fill.svg")
                    Dependencies
                </HxButton>
            </HxButtonGroup>

            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Primary" @onclick="LoadData" Enabled="!Loading" CssClass="ms-3">
                @MarkupHelper.FromFile("icons/feather/refresh-cw.svg")
                Refresh
            </HxButton>

        </HxButtonToolbar>

        <AuthorizeView Roles="Admin, Editor, Operator">
            @if (Execution is not null && Execution.ExecutionStatus == ExecutionStatus.Running)
            {
                <HxButtonToolbar CssClass="mt-3">
                    <HxDropdown>
                        <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Danger" CssClass="@(Stopping ? "disabled" : null)">
                            @MarkupHelper.FromFile("icons/feather/x-octagon.svg")
                            Stop
                        </HxDropdownToggleButton>
                        <HxDropdownMenu>
                            <HxDropdownItem @onclick="StopJobExecutionAsync" Enabled="!Stopping">Confirm</HxDropdownItem>
                        </HxDropdownMenu>
                    </HxDropdown>
                </HxButtonToolbar>
            }
        </AuthorizeView>

        <div class="row my-1">
            <p></p>
        </div>

        @if (Execution is not null && JobExecutionDetailsOpen)
        {
            <dl class="row">
                <dt class="col-sm-3">
                    Execution id
                </dt>
                <dd class="col-sm-9">
                    @Execution.ExecutionId
                </dd>
                <dt class="col-sm-3">
                    Dependency mode
                </dt>
                <dd class="col-sm-9">
                    @Execution.DependencyMode
                </dd>
                @if (!Execution.DependencyMode)
                {
                    <dt class="col-sm-3">
                        Stop on first error
                    </dt>
                    <dd class="col-sm-9">
                        @Execution.StopOnFirstError
                    </dd>
                }
                <dt class="col-sm-3">
                    Max parallel steps
                </dt>
                <dd class="col-sm-9">
                    @Execution.MaxParallelSteps
                </dd>
                <dt class="col-sm-3">
                    Overtime notification limit (min)
                </dt>
                <dd class="col-sm-9">
                    @Execution.OvertimeNotificationLimitMinutes
                </dd>
                <dt class="col-sm-3">
                    Created by
                </dt>
                <dd class="col-sm-9">
                    @Execution.CreatedBy
                </dd>
                <dt class="col-sm-3">
                    Created
                </dt>
                <dd class="col-sm-9">
                    @Execution.CreatedDateTime.LocalDateTime
                </dd>
                <dt class="col-sm-3">
                    Number of steps
                </dt>
                <dd class="col-sm-9">
                    @Execution.StepExecutions.Count
                </dd>
                <dt class="col-sm-3">
                    Success percent
                </dt>
                <dd class="col-sm-9">
                    @Execution.GetSuccessPercent().FormatPercentage(0)
                </dd>
                <dt class="col-sm-3">
                    Status
                </dt>
                <dd class="col-sm-9">
                    <JobExecutionStatusBadgeComponent ExecutionStatus_="@Execution.ExecutionStatus" />
                </dd>
            </dl>
        }
        <div class="row">
            <div class="col-auto">
                <dl class="mx-1">
                    <dt>Started</dt>
                    <dd>@Execution?.StartDateTime?.LocalDateTime</dd>
                </dl>
            </div>
            <div class="col-auto">
                <dl class="mx-1">
                    <dt>Ended</dt>
                    <dd>@Execution?.EndDateTime?.LocalDateTime</dd>
                </dl>
            </div>
            <div class="col-auto">
                <dl class="mx-1">
                    <dt>Duration</dt>
                    <dd>@Execution?.GetDurationInReadableFormat()</dd>
                </dl>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <small>Progress:</small>
                <div class="progress">
                    <div class="progress-bar @Execution?.ExecutionStatus.ToString().ToLower()" style="width: @($"{Execution?.GetProgressPercent() ?? 0}%");" />
                </div>
            </div>
        </div>

        @if (ShowReport == Report.Table || ShowReport == Report.Gantt)
        {
            <div class="row mt-3">
                <div class="col d-inline">
                    @MarkupHelper.FromFile("icons/feather/filter.svg")
                    <span class="me-3">Filter</span>

                    <HxButtonGroup Size="ButtonGroupSize.Small">
                        <FilterDropdown TItem="string"
                                        FilterSet="StepFilter"
                                        Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible steps based on tag filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                    StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible steps based on step status filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible steps based on step type filter
                                .Select(s => s.StepName)
                                .Distinct()
                                .OrderBy(j => j) ?? Enumerable.Empty<string>()"
                                        OnChange="StateHasChanged"
                                        IsSearchable="true">
                            <Title>
                                @MarkupHelper.FromFile("icons/feather/list.svg")
                                Step
                            </Title>
                        </FilterDropdown>
                        <FilterDropdown TItem="StepType"
                                        FilterSet="StepTypeFilter"
                                        Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step types based on tag filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                    StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible step types based on step status filter
                                .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step types based on step filter
                                .Select(s => s.StepType)
                                .Distinct()
                                .OrderBy(j => j) ?? Enumerable.Empty<StepType>()"
                                        OnChange="StateHasChanged">
                            <Title>
                                @MarkupHelper.FromFile("icons/feather/tool.svg")
                                Step type
                            </Title>
                        </FilterDropdown>
                        <FilterDropdown TItem="StepExecutionStatus"
                                        FilterSet="StepStatusFilter"
                                        Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step statuses based on tag filter
                                .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step statuses based on step filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible step statuses based on step type filter
                                .SelectMany(s => s.StepExecutionAttempts)
                                .Select(e => e.ExecutionStatus)
                                .Distinct()
                                .OrderBy(s => s) ?? Enumerable.Empty<StepExecutionStatus>()"
                                        OnChange="StateHasChanged">
                            <Title>
                                @MarkupHelper.FromFile("icons/feather/alert-circle.svg")
                                Status
                            </Title>
                        </FilterDropdown>
                        <FilterDropdown TItem="string"
                                        FilterSet="TagFilter"
                                        Items="Execution?.StepExecutions
                                .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible tags based on step filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible tags based on step type filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                            StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible tags based on step status filter
                                .SelectMany(e => e.Step?.Tags.Select(t => t.TagName) ?? Enumerable.Empty<string>())
                                .Distinct()
                                .OrderBy(s => s) ?? Enumerable.Empty<string>()"
                                        OnChange="StateHasChanged">
                            <Title>
                                @MarkupHelper.FromFile("icons/feather/tag.svg")
                                Tag
                            </Title>
                        </FilterDropdown>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                  @onclick="() => { StepStatusFilter.Clear(); StepFilter.Clear(); StepTypeFilter.Clear(); TagFilter.Clear(); }">
                            @MarkupHelper.FromFile("icons/feather/x.svg")
                            Reset
                        </HxButton>
                    </HxButtonGroup>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col d-inline">
                    @MarkupHelper.FromFile("icons/feather/list.svg")
                    <span class="me-3">Sort</span>
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" id="radio_started_asc"
                               checked=@(SortMode_ == SortMode.StartedAsc)
                               @onchange="() => SortMode_ = SortMode.StartedAsc">
                        <label class="form-check-label" for="radio_started_asc">Started <sup>asc</sup></label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" id="radio_started_desc"
                               checked=@(SortMode_ == SortMode.StartedDesc)
                               @onchange="() => SortMode_ = SortMode.StartedDesc">
                        <label class="form-check-label" for="radio_started_desc">Started<sup>desc</sup></label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" id="radio_duration_asc"
                               checked=@(SortMode_ == SortMode.DurationAsc)
                               @onchange="() => SortMode_ = SortMode.DurationAsc">
                        <label class="form-check-label" for="radio_duration_asc">Duration<sup>asc</sup></label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="radio" class="form-check-input" id="radio_duration_desc"
                               checked=@(SortMode_ == SortMode.DurationDesc)
                               @onchange="() => SortMode_ = SortMode.DurationDesc">
                        <label class="form-check-label" for="radio_duration_desc">Duration<sup>desc</sup></label>
                    </div>
                </div>
            </div>
        }

        @if (ShowReport == Report.Table)
        {
            <StepExecutionsTableComponent ShowDetailed="false"
                                          Executions="FilteredExecutions
                                                      .OrderBy(e => SortMode_ == SortMode.DurationAsc ? e.ExecutionInSeconds : null)
                                                      .OrderByDescending(e => SortMode_ == SortMode.DurationDesc ? e.ExecutionInSeconds : null)
                                                      // asc => Show not started steps last. desc => Show not started steps first.
                                                      .ThenBy(e => SortMode_ == SortMode.StartedAsc ? e.StartDateTime is null : e.StartDateTime is not null)
                                                      .ThenBy(e => SortMode_ == SortMode.StartedAsc ? e.StartDateTime : null)
                                                      .ThenByDescending(e => SortMode_ == SortMode.StartedDesc ? e.StartDateTime : null)
                                                      .ThenBy(e => e.EndDateTime is null)
                                                      .ThenBy(e => e.EndDateTime)
                                                      .ThenBy(e => e.StepExecution.ExecutionPhase)
                                                      .ThenBy(e => e.StepExecution.StepName)" />
        }
        else if (ShowReport == Report.Gantt)
        {
            <StepExecutionsGraphComponent Executions="FilteredExecutions
                                                      .Where(e => e.StartDateTime != null)
                                                      .OrderBy(e => SortMode_ == SortMode.DurationAsc ? e.ExecutionInSeconds : null)
                                                      .OrderByDescending(e => SortMode_ == SortMode.DurationDesc ? e.ExecutionInSeconds : null)
                                                      .ThenBy(e => SortMode_ == SortMode.StartedAsc ? e.StartDateTime : null)
                                                      .ThenByDescending(e => SortMode_ == SortMode.StartedDesc ? e.StartDateTime : null)
                                                      .ThenBy(e => e.StepExecution.StepName)" />
        }
        else if (ShowReport == Report.Dependencies)
        {
            if (Execution?.DependencyMode == false)
            {
                <HxAlert Color="ThemeColor.Warning" CssClass="mt-3">
                    Job executed in execution phase mode. Dependencies have no effect.
                </HxAlert>
            }
        }

        <div class="container-fluid h-100 flex-column p-0 mt-3" hidden=@(ShowReport != Report.Dependencies)>
            <div class="row flex-fill dependency-graph border" id="div_dependency_graph">
                <svg id="svg_dependency_graph" viewBox="0 0 2000 1000">
                    <g id="g_dependency_graph" />
                </svg>
            </div>
        </div>

        <StepExecutionDetailsOffcanvas @ref="StepExecutionDetailsOffcanvas" StepExecutionAttempt="SelectedStepExecutionAttempt" />

    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" @onclick="async () => await Modal.HideAsync()">Close</HxButton>
    </FooterTemplate>
</HxModal>