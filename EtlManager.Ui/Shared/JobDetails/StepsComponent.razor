@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject MarkupHelperService MarkupHelper
@inject DbHelperService DbHelperService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IHxMessengerService Messenger

<style>
    .step-row:hover,
    .step-row:focus,
    .step-row.step-row-disabled:hover,
    .step-row.step-row-disabled:focus {
        background-color: #ececec;
    }

    .step-row-disabled {
        background-color: #f3f3f3;
    }

    .step-row a {
        text-decoration: none;
    }

        .step-row:hover a {
            text-decoration: underline;
        }
</style>

@if (Job is not null)
{
    <JobParametersModal @ref="JobParametersModal"
                        Job="Job" />
}


<div class="sticky-top pt-2 pb-3" style="background-color: rgba(248, 249, 250, 0.9);">
    @*Same as bg-light but with slight transparency*@
    <div class="btn-toolbar">
        <AuthorizeView Roles="Admin, Editor">
            <HxDropdown CssClass="me-3">
                <HxDropdownToggleButton Color="ThemeColor.Success">
                    Add step
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    <HxDropdownHeader>Step type</HxDropdownHeader>
                    @foreach (var stepType in Enum.GetValues<StepType>())
                    {
                        <HxDropdownItem @onclick="() => ShowNewStepModal(stepType)"
                                        Enabled="!IsStepTypeDisabled(stepType)">
                            <StepTypeIconComponent StepType_="stepType" />
                            @stepType
                        </HxDropdownItem>
                    }
                </HxDropdownMenu>
            </HxDropdown>
        </AuthorizeView>
        <AuthorizeView Roles="Admin, Editor, Operator">
            <HxButton CssClass="me-3" Color="ThemeColor.Secondary" @onclick="async () => await (JobParametersModal?.Show() ?? Task.CompletedTask)">
                @MarkupHelper.FromFile("icons/feather/at-sign.svg")
                Parameters
            </HxButton>
            <HxButton Color="ThemeColor.Primary" @onclick="async () => await ExecuteModal.ShowAsync()">
                @MarkupHelper.FromFile("icons/feather/play.svg")
                Execute
            </HxButton>
        </AuthorizeView>
    </div>

    @if (ShowExecutionAlert)
    {
        <div class="alert alert-success mt-3 show alert-dismissible col-xl-6" role="alert">
            @MarkupHelper.FromFile("icons/feather/check-circle.svg")
            Execution started successfully – <a href="javascript:void(0)" class="alert-link" @onclick="OpenJobExecutionModal">monitor execution</a>
            <button type="button" class="btn-close" @onclick="() => ShowExecutionAlert = false"></button>
        </div>
    }

    <div class="row mt-3">
        <div class="col">
            @MarkupHelper.FromFile("icons/feather/tag.svg")
            <span class="me-3">Tags</span>
            @if (!Tags.Any())
            {
                <small class="text-secondary me-2">No tags</small>
            }
            @foreach (var tag in Tags)
            {
                <TagComponent Tag="tag"
                              Selected="TagsFilterSet.Contains(tag)"
                              CssClass="mx-1"
                              Style="cursor: pointer;"
                              OnClick="() => { if (TagsFilterSet.Contains(tag)) TagsFilterSet.Remove(tag); else TagsFilterSet.Add(tag); }" />
            }
        </div>
    </div>

    <div class="row mt-3">
        <div class="col d-inline-flex">
            
            <div class="input-group input-group-sm me-3" style="max-width: 40rem;">
                <div class="input-group-text">
                    @MarkupHelper.FromFile("icons/feather/filter.svg")
                </div>
                <input type="text" class="form-control" @bind-value="StepNameFilter" @bind-value:event="oninput" placeholder="Filter by name" />
                <input type="text" class="form-control" @bind-value="StepDescriptionFilter" @bind-value:event="oninput" placeholder="Filter by description" />
                <input type="text" class="form-control" @bind-value="SqlStatementFilter" @bind-value:event="oninput" placeholder="Filter by SQL statement" />
            </div>

            <HxButtonGroup Size="ButtonGroupSize.Small">
                <FilterDropdown TItem="StepType"
                                FilterSet="StepTypeFilter"
                                Items="Steps?.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                                OnChange="StateHasChanged">
                    <Title>
                        @MarkupHelper.FromFile("icons/feather/tool.svg")
                        Step type
                    </Title>
                </FilterDropdown>

                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() =>
                    {
                        TagsFilterSet.Clear();
                        StepTypeFilter.Clear();
                        StepNameFilter = string.Empty;
                        StepDescriptionFilter = string.Empty;
                        SqlStatementFilter = string.Empty;
                    }">
                    @MarkupHelper.FromFile("icons/feather/x.svg")
                    Clear
                </HxButton>
            </HxButtonGroup>
            
        </div>
        
    </div>
</div>

<div class="row mb-3">
    <div class="col">
        <ol class="list-group shadow-sm">
            @if (Steps is null || Jobs is null || Job is null)
            {
                <li class="list-group-item">Loading...</li>
            }
            else if (Steps.Count == 0)
            {
                <li class="list-group-item">No steps</li>
            }
            else
            {
                @foreach (var item in Steps
                 .Where(step => !StepNameFilter.Any() || (step.StepName?.ContainsIgnoreCase(StepNameFilter) ?? false))
                 .Where(step => !StepDescriptionFilter.Any() || (step.StepDescription?.ContainsIgnoreCase(StepDescriptionFilter) ?? false))
                 .Where(step => !SqlStatementFilter.Any() || step is SqlStep sql && (sql.SqlStatement?.ContainsIgnoreCase(SqlStatementFilter) ?? false))
                 .Where(step => TagsFilterSet.All(tag => step.Tags.Any(t => t.TagName == tag.TagName)))
                 .Where(step => !StepTypeFilter.Any() || StepTypeFilter.Contains(step.StepType)))
                {
                    <li class="list-group-item step-row py-2 @(item.IsEnabled ? null : "step-row-disabled")">
                        <div class="row">
                            <div class="col-xl-5 col-md-6 col-10 pl-2 d-flex align-items-center">
                                <AuthorizeView Roles="Admin, Editor">
                                    <a class="text-dark" href="javascript:void(0)" @onclick="() => ShowEditModal(item)">
                                        <StepTypeIconComponent StepType_="@item.StepType" />
                                        &nbsp;
                                        @item.StepName
                                    </a>
                                </AuthorizeView>
                                <AuthorizeView Roles="Operator, Viewer">
                                    <span>
                                        <StepTypeIconComponent StepType_="@item.StepType" />
                                        @item.StepName
                                    </span>
                                </AuthorizeView>
                            </div>
                            <div class="col-xl-1 col-2 d-inline-flex align-items-center justify-content-between">
                                @if (item is ParameterizedStep parameterizedStep && parameterizedStep.StepParameters.Any(p => p.JobParameterId is not null)
                                || item is SqlStep sql && sql.ResultCaptureJobParameterId is not null)
                                {
                                    <div title="Step uses job parameters">
                                        @MarkupHelper.FromFile("icons/feather/at-sign.svg")
                                    </div>
                                }
                                else
                                {
                                    <div></div>
                                }
                                <div class="justify-content-end" style="@(Job.UseDependencyMode ? "color: #ccc;" : null)">
                                    @item.ExecutionPhase
                                    &nbsp;
                                    @MarkupHelper.FromFile("icons/feather/layers.svg")
                                </div>
                            </div>
                            <div class="col-xl-3 col-md-4 d-inline-flex align-items-center justify-content-end">
                                <AuthorizeView Roles="Admin, Editor">
                                    <div class="form-check form-switch">
                                        <input type="checkbox" class="form-check-input" id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                        <label class="form-check-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                    </div>
                                </AuthorizeView>
                                <AuthorizeView Roles="Operator, Viewer">
                                    <div class="form-check form-switch">
                                        <input type="checkbox" class="form-check-input" disabled id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)">
                                        <label class="form-check-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                    </div>
                                </AuthorizeView>
                                <div class="btn-group btn-row ms-2">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() => ShowStepHistoryOffcanvas(item)">
                                        @MarkupHelper.FromFile("icons/feather/activity.svg")
                                    </HxButton>

                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() => ShowStepDetailsModal(item)">
                                        @MarkupHelper.FromFile("icons/feather/info.svg")
                                    </HxButton>

                                    <AuthorizeView Roles="Admin, Editor">
                                        <HxDropdown>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                @MarkupHelper.FromFile("icons/feather/copy.svg")
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu CssClass="dropdown-menu-right">
                                                <HxDropdownHeader>Copy to</HxDropdownHeader>
                                                <HxDropdownItem @onclick="() => CopyStep(item, Job)">here</HxDropdownItem>
                                                <HxDropdownDivider></HxDropdownDivider>
                                                @foreach (var job in Jobs.Where(job => job.JobId != Job.JobId))
                                                {
                                                    <HxDropdownItem @onclick="() => CopyStep(item, job)">@job.JobName</HxDropdownItem>
                                                }
                                            </HxDropdownMenu>
                                        </HxDropdown>

                                        <HxDropdown>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                @MarkupHelper.FromFile("icons/feather/trash-2.svg")
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu CssClass="dropdown-menu-right">
                                                <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                <HxDropdownItem @onclick="() => DeleteStep(item)">Confirm</HxDropdownItem>
                                            </HxDropdownMenu>
                                        </HxDropdown>
                                    </AuthorizeView>
                                </div>
                            </div>

                            <div class="col-xl-3 d-flex flex-wrap align-items-center justify-content-end">
                                @foreach (var tag in item.Tags.OrderBy(t => t.TagName))
                                {
                                    <TagComponent Tag="tag" CssClass="m-1" />
                                }
                            </div>
                        </div>
                    </li>
                }
            }
        </ol>
    </div>
</div>


<AuthorizeView Roles="Admin, Editor">
    <DatasetStepEditModal @ref="StepEditModals[StepType.Dataset]" Job="Job" Steps="Steps" AppRegistrations="AppRegistrations" StepId="EditModalStepIds[StepType.Dataset]" OnStepSubmit="OnStepSubmit" />
    <ExeStepEditModal @ref="StepEditModals[StepType.Exe]" Job="Job" Steps="Steps" StepId="EditModalStepIds[StepType.Exe]" OnStepSubmit="OnStepSubmit" />
    <JobStepEditModal @ref="StepEditModals[StepType.Job]" Job="Job" Steps="Steps" StepId="EditModalStepIds[StepType.Job]" Jobs="Jobs" OnStepSubmit="OnStepSubmit" />
    <PackageStepEditModal @ref="StepEditModals[StepType.Package]" Job="Job" Steps="Steps" Connections="SqlConnections" StepId="EditModalStepIds[StepType.Package]" OnStepSubmit="OnStepSubmit" />
    <PipelineStepEditModal @ref="StepEditModals[StepType.Pipeline]" Job="Job" Steps="Steps" DataFactories="DataFactories" StepId="EditModalStepIds[StepType.Pipeline]" OnStepSubmit="OnStepSubmit" />
    <SqlStepEditModal @ref="StepEditModals[StepType.Sql]" Job="Job" Steps="Steps" Connections="SqlConnections" StepId="EditModalStepIds[StepType.Sql]" OnStepSubmit="OnStepSubmit" />
    <FunctionStepEditModal @ref="StepEditModals[StepType.Function]" Job="Job" Steps="Steps" StepId="EditModalStepIds[StepType.Function]" FunctionApps="FunctionApps" OnStepSubmit="OnStepSubmit" />
    <AgentJobStepEditModal @ref="StepEditModals[StepType.AgentJob]" Job="Job" Steps="Steps" Connections="SqlConnections" StepId="EditModalStepIds[StepType.AgentJob]" OnStepSubmit="OnStepSubmit" />
    <TabularStepEditModal @ref="StepEditModals[StepType.Tabular]" Job="Job" Steps="Steps" Connections="AsConnections" StepId="EditModalStepIds[StepType.Tabular]" OnStepSubmit="OnStepSubmit" />
</AuthorizeView>

<StepDetailsModal @ref="StepDetailsModal" Step="DetailsModalStep" />

<StepHistoryOffcanvas @ref="StepHistoryOffcanvas" StepId_="@HistoryModalStep?.StepId.ToString()" />

<AuthorizeView Roles="Admin, Editor, Operator">
    <ExecuteModal @ref="ExecuteModal" Steps="Steps" Job="Job" OnExecutionStarted="OnExecutionStarted" />
</AuthorizeView>

<JobExecutionDetailsModal @ref="JobExecutionModal" ExecutionId_="@SelectedJobExecutionId.ToString()" />

@code {
    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public IList<Job>? Jobs { get; set; }

    [Parameter]
    public List<Step>? Steps { get; set; }

    [Parameter]
    public List<SqlConnectionInfo>? SqlConnections { get; set; }
    [Parameter]
    public List<AnalysisServicesConnectionInfo>? AsConnections { get; set; }
    [Parameter]
    public List<DataFactory>? DataFactories { get; set; }
    [Parameter]
    public List<AppRegistration>? AppRegistrations { get; set; }
    [Parameter]
    public List<FunctionApp>? FunctionApps { get; set; }

    private IEnumerable<Tag> Tags => Steps?
    .SelectMany(step => step.Tags)
    .Select(tag => tag with { Steps = null! })
    .Distinct()
    .OrderBy(t => t.TagName) ?? Enumerable.Empty<Tag>();

    private JobParametersModal JobParametersModal { get; set; } = null!;

    private Dictionary<StepType, IStepEditModal> StepEditModals = new();
    // Separate edit modal step ids so that changes to one do not trigger OnParametersSet() for all edit modal components.
    private Dictionary<StepType, Guid> EditModalStepIds { get; set; } = Enum.GetValues<StepType>().ToDictionary(key => key, _ => new Guid());

    private StepDetailsModal StepDetailsModal { get; set; } = null!;
    private Step? DetailsModalStep { get; set; }

    private StepHistoryOffcanvas StepHistoryOffcanvas { get; set; } = null!;
    private Step? HistoryModalStep { get; set; }

    private ExecuteModal ExecuteModal { get; set; } = null!;

    private bool ShowExecutionAlert { get; set; } = false;

    private string StepNameFilter { get; set; } = string.Empty;
    private string StepDescriptionFilter { get; set; } = string.Empty;
    private string SqlStatementFilter { get; set; } = string.Empty;
    private HashSet<Tag> TagsFilterSet { get; set; } = new();
    private HashSet<StepType> StepTypeFilter { get; } = new();

    private JobExecutionDetailsModal JobExecutionModal { get; set; } = null!;
    private Guid SelectedJobExecutionId { get; set; }

    private bool IsStepTypeDisabled(StepType type)
    {
        switch (type)
        {
            case StepType.Sql:
            case StepType.Package:
                return SqlConnections?.Any() == false;
            case StepType.Pipeline:
                return DataFactories?.Any() == false;
            case StepType.Function:
                return FunctionApps?.Any() == false;
            case StepType.Dataset:
                return AppRegistrations?.Any() == false;
            case StepType.Job:
                return Jobs is null || Jobs.Count == 1;
            case StepType.AgentJob:
                return SqlConnections?.Any() == false;
            case StepType.Tabular:
                return AsConnections?.Any() == false;
            default:
                return false;
        }
    }

    private async Task ShowEditModal(Step step)
    {
        EditModalStepIds[step.StepType] = step.StepId;
        await OpenStepEditModal(step.StepType);
    }

    private async Task ShowNewStepModal(StepType stepType)
    {
        EditModalStepIds[stepType] = Guid.Empty;
        await OpenStepEditModal(stepType);
    }

    private async Task OpenStepEditModal(StepType? stepType)
    {
        if (stepType is not null)
            await StepEditModals[(StepType)stepType].ShowAsync();
    }

    private async Task ToggleEnabled(ChangeEventArgs args, Step step)
    {
        bool value = (bool)args.Value!;
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Attach(step);
            step.IsEnabled = !step.IsEnabled;
            await context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling step", ex.Message);
        }
    }

    private async Task DeleteStep(Step step)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Steps.Remove(step);
            await context.SaveChangesAsync();
            Steps?.Remove(step);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting step", ex.Message);
        }
    }

    private async Task CopyStep(Step step, Job job)
    {
        try
        {
            string user = HttpContextAccessor.HttpContext?.User?.Identity?.Name ?? throw new ArgumentNullException(nameof(user), "User was null");
            Guid createdStepId = await DbHelperService.StepCopyAsync(step.StepId, job.JobId, user);
            // If the steps was copied to this job, reload steps.
            if (Job?.JobId == job.JobId)
            {
                using var context = DbFactory.CreateDbContext();
                var createdStep = await context.Steps
                    .AsNoTrackingWithIdentityResolution()
                    .Include(step => step.Dependencies)
                    .Include(step => step.Tags)
                    .Include(step => (step as ParameterizedStep)!.StepParameters)
                    .FirstAsync(step_ => step_.StepId == createdStepId);
                Steps?.Add(createdStep);
                SortSteps();
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error copying step", ex.Message);
        }
    }

    private void OnStepSubmit(Step step)
    {
        var existingStep = Steps?.FirstOrDefault(s => s.StepId == step.StepId);
        if (existingStep is not null)
        {
            Steps?.Remove(existingStep);
        }
        Steps?.Add(step);
        SortSteps();
    }

    private void SortSteps()
    {
        if (Job is null || Steps is null) return;
        try
        {
            if (Job.UseDependencyMode)
            {
                var comparer = new TopologicalStepComparer(Steps);
                Steps.Sort(comparer);
            }
            else
            {
                Steps.Sort();
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error sorting steps", ex.Message);
        }
    }

    private async Task ShowStepDetailsModal(Step step)
    {
        DetailsModalStep = step;
        await StepDetailsModal.Modal.ShowAsync();
    }

    private async Task ShowStepHistoryOffcanvas(Step step)
    {
        // Do not unnecessarily set the component parameter and start its data load.
        if (step != HistoryModalStep)
            HistoryModalStep = step;

        await StepHistoryOffcanvas.ShowAsync();
    }

    private void OnExecutionStarted(Guid executionId)
    {
        SelectedJobExecutionId = executionId;
        ShowExecutionAlert = true;
    }

    private async Task OpenJobExecutionModal() => await JobExecutionModal.ShowAsync();

}
