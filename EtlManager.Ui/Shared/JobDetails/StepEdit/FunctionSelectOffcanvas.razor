@inject IConfiguration Configuration
@inject IHxMessengerService Messenger
@inject MarkupHelperService MarkupHelper
@inject IDbContextFactory<EtlManagerContext> DbContextFactory
@inject IHttpClientFactory HttpClientFactory
@inject ITokenService TokenService

<HxOffcanvas @ref="Offcanvas" Size="OffcanvasSize.Large" OnClosed="OnClosed" Title="Select function">

    <BodyTemplate>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        @MarkupHelper.FromFile("icons/feather/filter.svg")
                    </div>
                    <input type="search" class="form-control" @bind-value="FilterText" @bind-value:event="oninput"
                           placeholder="Filter by name" autocomplete="off" />
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                Function name
                            </th>
                            <th>
                                Invoke url
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Functions is null)
                        {
                            <tr>
                                <td>Loading...</td>
                                <td></td>
                            </tr>
                        }
                        else if (Functions.Count == 0)
                        {
                            <tr>
                                <td>No functions</td>
                                <td></td>
                            </tr>
                        }
                        else
                        {
                            foreach (var function in Functions
                                .Where(function => function.FunctionName.ContainsIgnoreCase(FilterText))
                                .OrderBy(function => function.FunctionName))
                            {
                                <tr style="cursor: pointer;"
                                    @onclick="() => SelectedFunctionUrl = function.FunctionUrl"
                                    class="@(function.FunctionUrl == SelectedFunctionUrl ? "bg-light fw-bold" : null)">
                                    <td>
                                        <small>
                                            <HighlightableText Text="@function.FunctionName" PartToHighlight="@FilterText" />
                                        </small>
                                    </td>
                                    <td>
                                        <small>
                                            @function.FunctionUrl
                                        </small>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="me-3" @onclick="SelectFunctionAsync"
                  Enabled="SelectedFunctionUrl is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Offcanvas.HideAsync()">Cancel</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {

    private HxOffcanvas Offcanvas { get; set; } = null!;

    [Parameter]
    public Guid? FunctionAppId { get; set; }

    [Parameter]
    public EventCallback<string> OnFunctionSelected { get; set; }

    private List<(string FunctionName, string FunctionUrl)>? Functions { get; set; }

    private string? SelectedFunctionUrl { get; set; }

    private string FilterText { get; set; } = string.Empty;

    private async Task SelectFunctionAsync()
    {
        if (SelectedFunctionUrl is not null)
        {
            await OnFunctionSelected.InvokeAsync(SelectedFunctionUrl);
            await Offcanvas.HideAsync();
        }
    }

    private void OnClosed()
    {
        Functions = null;
        SelectedFunctionUrl = null;
        FilterText = string.Empty;
    }

    public async Task ShowAsync()
    {
        await Offcanvas.ShowAsync();
        if (FunctionAppId is null || FunctionAppId == Guid.Empty) return;
        try
        {
            Guid id = FunctionAppId ?? throw new ArgumentNullException(nameof(id), "Function App id cannot be null");
            using var context = DbContextFactory.CreateDbContext();
            var functionApp = await context.FunctionApps
                .AsNoTrackingWithIdentityResolution()
                .Include(fa => fa.AppRegistration)
                .FirstAsync(fa => fa.FunctionAppId == id);
            Functions = await functionApp.GetFunctionsAsync(HttpClientFactory.CreateClient(), TokenService);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error reading functions", ex.Message);
        }
    }

}
