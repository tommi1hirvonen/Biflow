
@inject MarkupHelperService MarkupHelper
@inject SqlServerHelperService SqlServerHelper

@if (Step.StepType == StepType.Sql)
{
    <div class="row">
        <div class="col">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link" OnClick="GetSqlSourcesAsync">
                Attempt to infer from stored procedure
            </HxButton>
            <HxPopover Trigger="PopoverTrigger.Focus" Content="Read source objects from the database based on stored procedure definition. Source mapping can be unreliable especially when temporary tables are used. Manually remove extra sources after mapping.">
                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link">@MarkupHelper.FromFile("icons/feather/info.svg")</HxButton>
            </HxPopover>
        </div>
    </div>
}
<div class="row mt-3">
    <div class="col-auto">
        <div class="form-check form-check-inline">
            <input type="checkbox" class="form-check-input" id="only_schedule"
                    @bind-value="ShowServer"
                    checked=@ShowServer>
            <label class="form-check-label" for="only_schedule">Show server name</label>
        </div>
        <div class="form-check form-check-inline ms-3">
            <input type="checkbox" class="form-check-input" id="include_deleted"
                    @bind-value="ShowDatabase"
                    checked=@ShowDatabase>
            <label class="form-check-label" for="include_deleted">Show database name</label>
        </div>
    </div>
</div>
<table class="table table-sm table-hover small">
    <thead>
        <tr>
            @if (ShowServer || NewSource is not null)
            {
                <th>Server</th>
            }
            @if (ShowDatabase || NewSource is not null)
            {
                <th>Database</th>
            }
            <th>Schema</th>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var source in Step.Sources
        .OrderBy(x => x.ServerName)
        .ThenBy(x => x.DatabaseName)
        .ThenBy(x => x.SchemaName)
        .ThenBy(x => x.ObjectName))
        {
            <tr>
                @if (ShowServer || NewSource is not null)
                {
                    <td class="align-middle">
                        @source.ServerName
                    </td>
                }
                @if (ShowDatabase || NewSource is not null)
                {
                    <td class="align-middle">
                        @source.DatabaseName
                    </td>
                }
                <td class="align-middle">
                    @source.SchemaName
                </td>
                <td class="align-middle">
                    @source.ObjectName
                </td>
                <td>
                    <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row" OnClick="() => Step.Sources.Remove(source)">
                            @MarkupHelper.FromFile("icons/feather/delete.svg")
                        </HxButton>
                    </HxButtonGroup>
                </td>
            </tr>
        }
        @if (NewSource is not null)
        {
            <tr>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="NewSource.ServerName"
                            @bind:event="oninput"
                            @onfocusin="() => SuggestType = DatabaseObjectType.Server" />
                </td>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="NewSource.DatabaseName"
                            @bind:event="oninput"
                            @onfocusin="() => SuggestType = DatabaseObjectType.Database" />
                </td>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="NewSource.SchemaName"
                            @bind:event="oninput"
                            @onfocusin="() => SuggestType = DatabaseObjectType.Schema" />
                </td>
                <td>
                    <input class="form-control form-control-sm" type="text" autocomplete="off"
                            @bind="NewSource.ObjectName"
                            @bind:event="oninput"
                            @onfocusin="() => SuggestType = DatabaseObjectType.Object" />
                </td>
                <td>
                    <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row text-success" OnClick="() => { Step.Sources.Add(NewSource); NewSource = null; }">
                            @MarkupHelper.FromFile("icons/feather/check.svg")
                        </HxButton>
                        <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row text-danger" OnClick="() => NewSource = null">
                            @MarkupHelper.FromFile("icons/feather/x.svg")
                        </HxButton>
                    </HxButtonGroup>
                </td>
            </tr>
            @if (SuggestType == DatabaseObjectType.Server)
            {
                var servers = DatabaseObjects?
                    .Select(o => o.ServerName)
                    .Distinct()
                    .OrderBy(o => o)
                    .Take(5) ?? Enumerable.Empty<string>();
                @foreach (var server in servers)
                {
                    <tr style="cursor: pointer;" @onclick="() => NewSource.ServerName = server">
                        <td colspan="5">@server</td>
                    </tr>
                }
            }
            else if (SuggestType == DatabaseObjectType.Database)
            {
                var databases = DatabaseObjects?
                    .Where(o => string.IsNullOrEmpty(NewSource.ServerName) || o.ServerName == NewSource.ServerName)
                    .Where(o => o.DatabaseName.ContainsIgnoreCase(NewSource.DatabaseName))
                    .Select(o => o.DatabaseName)
                    .Distinct()
                    .OrderBy(o => o)
                    .Take(5) ?? Enumerable.Empty<string>();
                @foreach (var database in databases)
                {
                    <tr style="cursor: pointer;" @onclick="() => NewSource.DatabaseName = database">
                        <td colspan="5">@database</td>
                    </tr>
                }
            }
            else if (SuggestType == DatabaseObjectType.Schema)
            {
                var schemas = DatabaseObjects?
                    .Where(o => string.IsNullOrEmpty(NewSource.ServerName) || o.ServerName == NewSource.ServerName)
                    .Where(o => string.IsNullOrEmpty(NewSource.DatabaseName) || o.DatabaseName == NewSource.DatabaseName)
                    .Where(o => o.SchemaName.ContainsIgnoreCase(NewSource.SchemaName))
                    .Select(o => o.SchemaName)
                    .Distinct()
                    .OrderBy(o => o)
                    .Take(5) ?? Enumerable.Empty<string>();
                @foreach (var schema in schemas)
                {
                    <tr style="cursor: pointer;" @onclick="() => NewSource.SchemaName = schema">
                        <td colspan="5">@schema</td>
                    </tr>
                }
            }
            else if (SuggestType == DatabaseObjectType.Object)
            {
                var objects = DatabaseObjects?
                    .Where(o => string.IsNullOrEmpty(NewSource.ServerName) || o.ServerName == NewSource.ServerName)
                    .Where(o => string.IsNullOrEmpty(NewSource.DatabaseName) || o.DatabaseName == NewSource.DatabaseName)
                    .Where(o => string.IsNullOrEmpty(NewSource.SchemaName) || o.SchemaName == NewSource.SchemaName)
                    .Where(o => o.ObjectName.ContainsIgnoreCase(NewSource.ObjectName))
                    .OrderBy(o => o.ServerName).ThenBy(o => o.DatabaseName).ThenBy(o => o.SchemaName).ThenBy(o => o.ObjectName)
                    .Take(5) ?? Enumerable.Empty<DatabaseObject>();
                @foreach (var dbObject in objects)
                {
                    <tr style="cursor: pointer;" @onclick="() => NewSource = dbObject">
                        <td>@dbObject.ServerName</td>
                        <td>@dbObject.DatabaseName</td>
                        <td>@dbObject.SchemaName</td>
                        <td colspan="2">@dbObject.ObjectName</td>
                    </tr>
                }
            }
        }
    </tbody>
</table>
<HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" OnClick="AddNewSource">
    @MarkupHelper.FromFile("icons/feather/plus.svg")
</HxButton>


@code {
    [Parameter] public Step Step { get; set; } = null!;

    [Parameter] public Guid? ConnectionId { get; set; }

    [Parameter] public string? SqlStatement { get; set; }

    [Parameter] public Func<Task<IEnumerable<DatabaseObject>>> LoadDatabaseObjects { get; set; } = null!;

    private IEnumerable<DatabaseObject>? DatabaseObjects { get; set; }

    private bool ShowServer { get; set; } = false;

    private bool ShowDatabase { get; set; } = false;

    private DatabaseObject? NewSource { get; set; }

    private DatabaseObjectType? SuggestType { get; set; }

    private enum DatabaseObjectType
    {
        Server, Database, Schema, Object
    }

    private async Task AddNewSource()
    {
        DatabaseObjects ??= await LoadDatabaseObjects();
        NewSource = new();
    }

    private async Task GetSqlSourcesAsync()
    {
        var proc = SqlStatement?.ParseStoredProcedureFromSqlStatement();
        var schema = proc?.Schema;
        var name = proc?.ProcedureName;
        if (name is null) return;

        DatabaseObjects ??= await LoadDatabaseObjects();

        Guid connectionId = ConnectionId ?? throw new ArgumentNullException(nameof(ConnectionId), "Connection id was null");
        var sources = await SqlServerHelper.GetSourceObjectsAsync(connectionId, schema, name);
        foreach (var source in sources)
        {
            var dbObject = DatabaseObjects?.FirstOrDefault(o => o.Equals(source)) ??
                Step.Targets.FirstOrDefault(o => o.Equals(source)) ??
                new DatabaseObject
                {
                    ServerName = source.ServerName,
                    DatabaseName = source.DatabaseName,
                    SchemaName = source.SchemaName,
                    ObjectName = source.ObjectName
                };

            if (!Step.Sources.Any(s => s.Equals(dbObject)))
            {
                Step.Sources.Add(dbObject);    
            }
        }
    }
}
