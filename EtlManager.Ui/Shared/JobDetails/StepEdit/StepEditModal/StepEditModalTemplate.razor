@typeparam TStep where TStep : Step 

@inject MarkupHelperService MarkupHelper
@inject SqlServerHelperService SqlServerHelper

@*Set pt-0 for modal body (BodyCssClass). The DependenciesEditComponent has a sticky-top element that should be placed at the top without any padding*@
<HxModal @ref="Modal.Modal"
         Size="ModalSize.Large"
         Scrollable="true"
         BodyCssClass="pt-0"
         OnClosed="Modal.OnClosed"
         Fullscreen="Fullscreen ? ModalFullscreen.Always : ModalFullscreen.LargeDown"
         Title="@(Modal.Step?.StepId == Guid.Empty ? "New step" : "Edit " + Modal.Step?.StepName)">
    <BodyTemplate>
        @if (Modal.Step is not null)
        {
            <div class="row mt-3">
                <div class="col mx-3">
                    <EditForm id="@Modal.FormId" Model="Modal.Step" OnValidSubmit="Modal.SubmitStep">

                        <div class="row">
                            <div class="col">
                                <HxButtonGroup Size="ButtonGroupSize.Small">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              CssClass="@(Modal.CurrentView == StepEditModalView.Settings ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Settings">
                                        @MarkupHelper.FromFile("icons/feather/settings.svg")
                                        Settings
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              CssClass="@(Modal.CurrentView == StepEditModalView.Sources ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Sources">
                                        @MarkupHelper.FromFile("icons/feather/share.svg")
                                        Sources
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              CssClass="@(Modal.CurrentView == StepEditModalView.Targets ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Targets">
                                        @MarkupHelper.FromFile("icons/feather/download.svg")
                                        Targets
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              CssClass="@(Modal.CurrentView == StepEditModalView.Dependencies ? "active" : null)"
                                              @onclick="() => Modal.CurrentView = StepEditModalView.Dependencies">
                                        @MarkupHelper.FromFile("icons/bootstrap/diagram-3-fill.svg")
                                        Dependencies
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              @onclick="async () => await SqlDefinitionOffcanvas.ShowAsync(ConnectionId, SqlStatement)">
                                        @MarkupHelper.FromFile("icons/feather/more-horizontal.svg")
                                        Definition explorer
                                    </HxButton>
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                              @onclick="async () => await SqlReferenceOffcanvas.ShowAsync(ConnectionId, SqlStatement)">
                                        @MarkupHelper.FromFile("icons/feather/more-horizontal.svg")
                                        Reference explorer
                                    </HxButton>
                                </HxButtonGroup>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                <ObjectGraphDataAnnotationsValidator />
                                <ValidationSummary />
                                @if (!string.IsNullOrEmpty(Modal.StepError))
                                {
                                    <p class="text-danger">@Modal.StepError</p>
                                }
                            </div>
                        </div>

                        @if (Modal.CurrentView == StepEditModalView.Dependencies)
                        {
                            @if (Modal.Steps is not null)
                            {
                                <div class="row mt-3">
                                    <div class="@(Fullscreen ? "col-xl-6" : "col")">
                                        <DependenciesEditComponent Step="Modal.Step" Steps="Modal.Steps" Job="Modal.Job" />
                                    </div>
                                </div>
                            }
                        }
                        else if (Modal.CurrentView == StepEditModalView.Settings)
                        {
                            <div class="row mt-3">
                                <div class="@(Fullscreen ? "col-xl-6" : "col-12")">
                                    <div class="row">
                                        <div class="col">
                                            <label class="form-label">Step name</label>
                                            <div class="input-group input-group-sm">
                                                <div class="input-group-text">
                                                    @MarkupHelper.FromFile("icons/feather/edit-3.svg")
                                                </div>
                                                <InputText class="form-control form-control-sm" @bind-Value="Modal.Step.StepName"></InputText>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row mt-2">
                                        <div class="col">
                                            <label class="form-label">Description</label>
                                            <div class="input-group input-group-sm">
                                                <div class="input-group-text">
                                                    @MarkupHelper.FromFile("icons/feather/book-open.svg")
                                                </div>
                                                <InputTextArea class="form-control form-control-sm" @bind-Value="Modal.Step.StepDescription" rows="3"></InputTextArea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row mt-2">
                                        <div class="col">
                                            <label class="form-label">Tags</label>
                                            <HxInputTags @bind-Value="Modal.Tags" DataProvider="Modal.GetTagSuggestions" SuggestMinimumLength="0" SuggestDelay="0" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <label class="form-label">Execution phase</label>
                                            <div class="input-group input-group-sm">
                                                <div class="input-group-text">
                                                    @MarkupHelper.FromFile("icons/feather/layers.svg")
                                                </div>
                                                <InputNumber class="form-control form-control-sm" @bind-Value="Modal.Step.ExecutionPhase"></InputNumber>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <label class="form-label">Retry attempts</label>
                                            <div class="input-group input-group-sm">
                                                <div class="input-group-text">
                                                    @MarkupHelper.FromFile("icons/feather/repeat.svg")
                                                </div>
                                                <InputNumber class="form-control form-control-sm" @bind-Value="Modal.Step.RetryAttempts"></InputNumber>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <label class="form-label">Retry interval (min)</label>
                                            <div class="input-group input-group-sm">
                                                <div class="input-group-text">
                                                    @MarkupHelper.FromFile("icons/feather/clock.svg")
                                                </div>
                                                <InputNumber class="form-control form-control-sm" @bind-Value="Modal.Step.RetryIntervalMinutes"></InputNumber>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="@(Fullscreen ? "col-xl-6 mt-2 mt-xl-0" : "col-12 mt-2")">
                                    @ChildContent
                                </div>
                            </div>
                        }
                        else if (Modal.CurrentView == StepEditModalView.Sources)
                        {
                            <div class="row mt-3">
                                <div class="col">
                                    @if (Modal.Step.StepType == StepType.Sql)
                                    {
                                        <div class="row">
                                            <div class="col">
                                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link" OnClick="GetSqlSourcesAsync">
                                                    Attempt to infer from stored procedure
                                                </HxButton>
                                                <HxPopover Trigger="PopoverTrigger.Focus" Content="Read source objects from the database based on stored procedure definition. Source mapping can be unreliable especially when temporary tables are used. Manually remove extra sources after mapping.">
                                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link">@MarkupHelper.FromFile("icons/feather/info.svg")</HxButton>
                                                </HxPopover>
                                            </div>
                                        </div>
                                    }
                                    <div class="row mt-3">
                                        <div class="col-auto">
                                            <div class="form-check form-check-inline">
                                                <input type="checkbox" class="form-check-input" id="only_schedule"
                                                       @bind-value="ShowSourceTargetServer"
                                                       checked=@ShowSourceTargetServer>
                                                <label class="form-check-label" for="only_schedule">Show server name</label>
                                            </div>
                                            <div class="form-check form-check-inline ms-3">
                                                <input type="checkbox" class="form-check-input" id="include_deleted"
                                                       @bind-value="ShowSourceTargetDatabase"
                                                       checked=@ShowSourceTargetDatabase>
                                                <label class="form-check-label" for="include_deleted">Show database name</label>
                                            </div>
                                        </div>
                                    </div>
                                    <table class="table table-sm table-hover small">
                                        <thead>
                                            <tr>
                                                @if (ShowSourceTargetServer || NewSource is not null)
                                                {
                                                    <th>Server</th>
                                                }
                                                @if (ShowSourceTargetDatabase || NewSource is not null)
                                                {
                                                    <th>Database</th>
                                                }
                                                <th>Schema</th>
                                                <th>Name</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var source in Modal.Step.Sources
                                            .OrderBy(x => x.ServerName)
                                            .ThenBy(x => x.DatabaseName)
                                            .ThenBy(x => x.SchemaName)
                                            .ThenBy(x => x.ObjectName))
                                            {
                                                <tr>
                                                    @if (ShowSourceTargetServer || NewSource is not null)
                                                    {
                                                        <td class="align-middle">
                                                            @source.ServerName
                                                        </td>
                                                    }
                                                    @if (ShowSourceTargetDatabase || NewSource is not null)
                                                    {
                                                        <td class="align-middle">
                                                            @source.DatabaseName
                                                        </td>
                                                    }
                                                    <td class="align-middle">
                                                        @source.SchemaName
                                                    </td>
                                                    <td class="align-middle">
                                                        @source.ObjectName
                                                    </td>
                                                    <td>
                                                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row" OnClick="() => Modal.Step.Sources.Remove(source)">
                                                                @MarkupHelper.FromFile("icons/feather/delete.svg")
                                                            </HxButton>
                                                        </HxButtonGroup>
                                                    </td>
                                                </tr>
                                            }
                                            @if (NewSource is not null)
                                            {
                                                <tr>
                                                    <td>
                                                        <input class="form-control form-control-sm" type="text" autocomplete="off"
                                                               @bind="NewSource.ServerName"
                                                               @bind:event="oninput"
                                                               @onfocusin="() => SourceSuggestType = DatabaseObjectType.Server" />
                                                    </td>
                                                    <td>
                                                        <input class="form-control form-control-sm" type="text" autocomplete="off"
                                                               @bind="NewSource.DatabaseName"
                                                               @bind:event="oninput"
                                                               @onfocusin="() => SourceSuggestType = DatabaseObjectType.Database" />
                                                    </td>
                                                    <td>
                                                        <input class="form-control form-control-sm" type="text" autocomplete="off"
                                                               @bind="NewSource.SchemaName"
                                                               @bind:event="oninput"
                                                               @onfocusin="() => SourceSuggestType = DatabaseObjectType.Schema" />
                                                    </td>
                                                    <td>
                                                        <input class="form-control form-control-sm" type="text" autocomplete="off"
                                                               @bind="NewSource.ObjectName"
                                                               @bind:event="oninput"
                                                               @onfocusin="() => SourceSuggestType = DatabaseObjectType.Object" />
                                                    </td>
                                                    <td>
                                                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row text-success" OnClick="() => { Modal.Step.Sources.Add(NewSource); NewSource = null; }">
                                                                @MarkupHelper.FromFile("icons/feather/check.svg")
                                                            </HxButton>
                                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row text-danger" OnClick="() => NewSource = null">
                                                                @MarkupHelper.FromFile("icons/feather/x.svg")
                                                            </HxButton>
                                                        </HxButtonGroup>
                                                    </td>
                                                </tr>
                                                @if (SourceSuggestType == DatabaseObjectType.Server)
                                                {
                                                    var servers = DatabaseObjects?
                                                        .Select(o => o.ServerName)
                                                        .Distinct()
                                                        .OrderBy(o => o)
                                                        .Take(5) ?? Enumerable.Empty<string>();
                                                    @foreach (var server in servers)
                                                    {
                                                        <tr style="cursor: pointer;" @onclick="() => NewSource.ServerName = server">
                                                            <td colspan="5">@server</td>
                                                        </tr>
                                                    }
                                                }
                                                else if (SourceSuggestType == DatabaseObjectType.Database)
                                                {
                                                    var databases = DatabaseObjects?
                                                        .Where(o => string.IsNullOrEmpty(NewSource.ServerName) || o.ServerName == NewSource.ServerName)
                                                        .Where(o => o.DatabaseName.ContainsIgnoreCase(NewSource.DatabaseName))
                                                        .Select(o => o.DatabaseName)
                                                        .Distinct()
                                                        .OrderBy(o => o)
                                                        .Take(5) ?? Enumerable.Empty<string>();
                                                    @foreach (var database in databases)
                                                    {
                                                        <tr style="cursor: pointer;" @onclick="() => NewSource.DatabaseName = database">
                                                            <td colspan="5">@database</td>
                                                        </tr>
                                                    }
                                                }
                                                else if (SourceSuggestType == DatabaseObjectType.Schema)
                                                {
                                                    var schemas = DatabaseObjects?
                                                        .Where(o => string.IsNullOrEmpty(NewSource.ServerName) || o.ServerName == NewSource.ServerName)
                                                        .Where(o => string.IsNullOrEmpty(NewSource.DatabaseName) || o.DatabaseName == NewSource.DatabaseName)
                                                        .Where(o => o.SchemaName.ContainsIgnoreCase(NewSource.SchemaName))
                                                        .Select(o => o.SchemaName)
                                                        .Distinct()
                                                        .OrderBy(o => o)
                                                        .Take(5) ?? Enumerable.Empty<string>();
                                                    @foreach (var schema in schemas)
                                                    {
                                                        <tr style="cursor: pointer;" @onclick="() => NewSource.SchemaName = schema">
                                                            <td colspan="5">@schema</td>
                                                        </tr>
                                                    }
                                                }
                                                else if (SourceSuggestType == DatabaseObjectType.Object)
                                                {
                                                    var objects = DatabaseObjects?
                                                        .Where(o => string.IsNullOrEmpty(NewSource.ServerName) || o.ServerName == NewSource.ServerName)
                                                        .Where(o => string.IsNullOrEmpty(NewSource.DatabaseName) || o.DatabaseName == NewSource.DatabaseName)
                                                        .Where(o => string.IsNullOrEmpty(NewSource.SchemaName) || o.SchemaName == NewSource.SchemaName)
                                                        .Where(o => o.ObjectName.ContainsIgnoreCase(NewSource.ObjectName))
                                                        .OrderBy(o => o.ServerName).ThenBy(o => o.DatabaseName).ThenBy(o => o.SchemaName).ThenBy(o => o.ObjectName)
                                                        .Take(5) ?? Enumerable.Empty<DatabaseObject>();
                                                    @foreach (var dbObject in objects)
                                                    {
                                                        <tr style="cursor: pointer;" @onclick="() => NewSource = dbObject">
                                                            <td>@dbObject.ServerName</td>
                                                            <td>@dbObject.DatabaseName</td>
                                                            <td>@dbObject.SchemaName</td>
                                                            <td colspan="2">@dbObject.ObjectName</td>
                                                        </tr>
                                                    }
                                                }
                                            }
                                        </tbody>
                                    </table>
                                    <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" OnClick="AddNewSourceAsync">
                                        @MarkupHelper.FromFile("icons/feather/plus.svg")
                                    </HxButton>
                                </div>
                            </div>
                            
                        }
                        else if (Modal.CurrentView == StepEditModalView.Targets)
                        {
                            <div class="row mt-3">
                                <div class="col">
                                    @if (Modal.Step.StepType == StepType.Sql)
                                    {
                                        <div class="row">
                                            <div class="col">
                                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link" OnClick="GetSqlTargetsAsync">
                                                    Attempt to infer from stored procedure
                                                </HxButton>
                                                <HxPopover Trigger="PopoverTrigger.Focus" Content="Read target objects from the database based on stored procedure definition. Target mapping can be unreliable especially when temporary tables are used. Manually remove extra targets after mapping.">
                                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Link">@MarkupHelper.FromFile("icons/feather/info.svg")</HxButton>
                                                </HxPopover>
                                            </div>
                                        </div>
                                    }
                                    <div class="row mt-3">
                                        <div class="col-auto">
                                            <div class="form-check form-check-inline">
                                                <input type="checkbox" class="form-check-input" id="only_schedule"
                                                       @bind-value="ShowSourceTargetServer"
                                                       checked=@ShowSourceTargetServer>
                                                <label class="form-check-label" for="only_schedule">Show server name</label>
                                            </div>
                                            <div class="form-check form-check-inline ms-3">
                                                <input type="checkbox" class="form-check-input" id="include_deleted"
                                                       @bind-value="ShowSourceTargetDatabase"
                                                       checked=@ShowSourceTargetDatabase>
                                                <label class="form-check-label" for="include_deleted">Show database name</label>
                                            </div>
                                        </div>
                                    </div>
                                    <table class="table table-sm table-hover small">
                                        <thead>
                                            <tr>
                                                @if (ShowSourceTargetServer || NewTarget is not null)
                                                {
                                                    <th>Server</th>
                                                }
                                                @if (ShowSourceTargetDatabase || NewTarget is not null)
                                                {
                                                    <th>Database</th>
                                                }
                                                <th>Schema</th>
                                                <th>Name</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var target in Modal.Step.Targets
                                            .OrderBy(x => x.ServerName)
                                            .ThenBy(x => x.DatabaseName)
                                            .ThenBy(x => x.SchemaName)
                                            .ThenBy(x => x.ObjectName))
                                            {
                                                <tr>
                                                    @if (ShowSourceTargetServer || NewTarget is not null)
                                                    {
                                                        <td class="align-middle">
                                                            @target.ServerName
                                                        </td>
                                                    }
                                                    @if (ShowSourceTargetDatabase || NewTarget is not null)
                                                    {
                                                        <td class="align-middle">
                                                            @target.DatabaseName
                                                        </td>
                                                    }
                                                    <td class="align-middle">
                                                        @target.SchemaName
                                                    </td>
                                                    <td class="align-middle">
                                                        @target.ObjectName
                                                    </td>
                                                    <td>
                                                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row" OnClick="() => Modal.Step.Targets.Remove(target)">
                                                                @MarkupHelper.FromFile("icons/feather/delete.svg")
                                                            </HxButton>
                                                        </HxButtonGroup>
                                                    </td>
                                                </tr>
                                            }
                                            @if (NewTarget is not null)
                                            {
                                                <tr>
                                                    <td>
                                                        <input class="form-control form-control-sm" type="text" autocomplete="off"
                                                               @bind="NewTarget.ServerName"
                                                               @bind:event="oninput"
                                                               @onfocusin="() => TargetSuggestType = DatabaseObjectType.Server" />
                                                    </td>
                                                    <td>
                                                        <input class="form-control form-control-sm" type="text" autocomplete="off"
                                                               @bind="NewTarget.DatabaseName"
                                                               @bind:event="oninput"
                                                               @onfocusin="() => TargetSuggestType = DatabaseObjectType.Database" />
                                                    </td>
                                                    <td>
                                                        <input class="form-control form-control-sm" type="text" autocomplete="off"
                                                               @bind="NewTarget.SchemaName"
                                                               @bind:event="oninput"
                                                               @onfocusin="() => TargetSuggestType = DatabaseObjectType.Schema" />
                                                    </td>
                                                    <td>
                                                        <input class="form-control form-control-sm" type="text" autocomplete="off"
                                                               @bind="NewTarget.ObjectName"
                                                               @bind:event="oninput"
                                                               @onfocusin="() => TargetSuggestType = DatabaseObjectType.Object" />
                                                    </td>
                                                    <td>
                                                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row text-success" OnClick="() => { Modal.Step.Targets.Add(NewTarget); NewTarget = null; }">
                                                                @MarkupHelper.FromFile("icons/feather/check.svg")
                                                            </HxButton>
                                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" CssClass="btn-row text-danger" OnClick="() => NewTarget = null">
                                                                @MarkupHelper.FromFile("icons/feather/x.svg")
                                                            </HxButton>
                                                        </HxButtonGroup>
                                                    </td>
                                                </tr>
                                                @if (TargetSuggestType == DatabaseObjectType.Server)
                                                {
                                                    var servers = DatabaseObjects?
                                                        .Select(o => o.ServerName)
                                                        .Distinct()
                                                        .OrderBy(o => o)
                                                        .Take(5) ?? Enumerable.Empty<string>();
                                                    @foreach (var server in servers)
                                                    {
                                                        <tr style="cursor: pointer;" @onclick="() => NewTarget.ServerName = server">
                                                            <td colspan="5">@server</td>
                                                        </tr>
                                                    }
                                                }
                                                else if (TargetSuggestType == DatabaseObjectType.Database)
                                                {
                                                    var databases = DatabaseObjects?
                                                        .Where(o => string.IsNullOrEmpty(NewTarget.ServerName) || o.ServerName == NewTarget.ServerName)
                                                        .Where(o => o.DatabaseName.ContainsIgnoreCase(NewTarget.DatabaseName))
                                                        .Select(o => o.DatabaseName)
                                                        .Distinct()
                                                        .OrderBy(o => o)
                                                        .Take(5) ?? Enumerable.Empty<string>();
                                                    @foreach (var database in databases)
                                                    {
                                                        <tr style="cursor: pointer;" @onclick="() => NewTarget.DatabaseName = database">
                                                            <td colspan="5">@database</td>
                                                        </tr>
                                                    }
                                                }
                                                else if (TargetSuggestType == DatabaseObjectType.Schema)
                                                {
                                                    var schemas = DatabaseObjects?
                                                        .Where(o => string.IsNullOrEmpty(NewTarget.ServerName) || o.ServerName == NewTarget.ServerName)
                                                        .Where(o => string.IsNullOrEmpty(NewTarget.DatabaseName) || o.DatabaseName == NewTarget.DatabaseName)
                                                        .Where(o => o.SchemaName.ContainsIgnoreCase(NewTarget.SchemaName))
                                                        .Select(o => o.SchemaName)
                                                        .Distinct()
                                                        .OrderBy(o => o)
                                                        .Take(5) ?? Enumerable.Empty<string>();
                                                    @foreach (var schema in schemas)
                                                    {
                                                        <tr style="cursor: pointer;" @onclick="() => NewTarget.SchemaName = schema">
                                                            <td colspan="5">@schema</td>
                                                        </tr>
                                                    }
                                                }
                                                else if (TargetSuggestType == DatabaseObjectType.Object)
                                                {
                                                    var objects = DatabaseObjects?
                                                        .Where(o => string.IsNullOrEmpty(NewTarget.ServerName) || o.ServerName == NewTarget.ServerName)
                                                        .Where(o => string.IsNullOrEmpty(NewTarget.DatabaseName) || o.DatabaseName == NewTarget.DatabaseName)
                                                        .Where(o => string.IsNullOrEmpty(NewTarget.SchemaName) || o.SchemaName == NewTarget.SchemaName)
                                                        .Where(o => o.ObjectName.ContainsIgnoreCase(NewTarget.ObjectName))
                                                        .OrderBy(o => o.ServerName).ThenBy(o => o.DatabaseName).ThenBy(o => o.SchemaName).ThenBy(o => o.ObjectName)
                                                        .Take(5) ?? Enumerable.Empty<DatabaseObject>();
                                                    @foreach (var dbObject in objects)
                                                    {
                                                        <tr style="cursor: pointer;" @onclick="() => NewTarget = dbObject">
                                                            <td>@dbObject.ServerName</td>
                                                            <td>@dbObject.DatabaseName</td>
                                                            <td>@dbObject.SchemaName</td>
                                                            <td colspan="2">@dbObject.ObjectName</td>
                                                        </tr>
                                                    }
                                                }
                                            }
                                        </tbody>
                                    </table>
                                    <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" OnClick="AddNewTargetAsync">
                                        @MarkupHelper.FromFile("icons/feather/plus.svg")
                                    </HxButton>
                                </div>
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
            <SqlReferenceExplorerOffcanvas @ref="SqlReferenceOffcanvas" Connections="Modal.Connections" />
            <SqlDefinitionExplorerOffcanvas @ref="SqlDefinitionOffcanvas" Connections="Modal.Connections" />
        }

    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" @onclick="ToggleFullscreen" CssClass="me-auto">
            @if (Fullscreen)
            {
                @MarkupHelper.FromFile("icons/feather/minimize-2.svg")
            }
            else
            {
                @MarkupHelper.FromFile("icons/feather/maximize-2.svg")
            }
        </HxButton>
        
        <HxSubmit FormId="@Modal.FormId" Color="ThemeColor.Success">
            @(Modal.Step?.StepId == Guid.Empty ? "Create" : "Save")
        </HxSubmit>
        
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await Modal.Modal.HideAsync()">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public StepEditModalBase<TStep> Modal { get; set; } = null!;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    private SqlReferenceExplorerOffcanvas SqlReferenceOffcanvas { get; set; } = null!;

    private SqlDefinitionExplorerOffcanvas SqlDefinitionOffcanvas { get; set; } = null!;

    private bool Fullscreen { get; set; } = false;

    private bool ShowSourceTargetServer { get; set; } = false;

    private bool ShowSourceTargetDatabase { get; set; } = false;

    private void ToggleFullscreen() => Fullscreen = !Fullscreen;

    private string? SqlStatement => Modal.Step switch
    {
        SqlStep sql => sql.SqlStatement,
        _ => null
    };

    private Guid? ConnectionId => Modal.Step switch
    {
        SqlStep sql => sql.ConnectionId,
        AgentJobStep agent => agent.ConnectionId,
        PackageStep package => package.ConnectionId,
        _ => null
    };

    private IEnumerable<DatabaseObject>? DatabaseObjects { get; set; }

    private DatabaseObject? NewSource { get; set; }

    private DatabaseObject? NewTarget { get; set; }

    private DatabaseObjectType? SourceSuggestType { get; set; }

    private DatabaseObjectType? TargetSuggestType { get; set; }

    private enum DatabaseObjectType
    {
        Server, Database, Schema, Object
    }

    private async Task AddNewSourceAsync()
    {
        DatabaseObjects ??= await Modal.GetDatabaseObjectsAsync();
        NewSource = new();
    }

    private async Task AddNewTargetAsync()
    {
        DatabaseObjects ??= await Modal.GetDatabaseObjectsAsync();
        NewTarget = new();
    }

    private async Task GetSqlSourcesAsync()
    {
        var proc = SqlStatement?.ParseStoredProcedureFromSqlStatement();
        var schema = proc?.Schema;
        var name = proc?.ProcedureName;
        if (name is null) return;

        var dbObjects = await Modal.GetDatabaseObjectsAsync();

        Guid connectionId = ConnectionId ?? throw new ArgumentNullException(nameof(ConnectionId), "Connection id was null");
        var sources = await SqlServerHelper.GetSourceObjectsAsync(connectionId, schema, name);
        foreach (var source in sources)
        {
            var dbObject = dbObjects.FirstOrDefault(o => o.Equals(source)) ??
                Modal.Step.Targets.FirstOrDefault(o => o.Equals(source)) ??
                new DatabaseObject
                {
                    ServerName = source.ServerName,
                    DatabaseName = source.DatabaseName,
                    SchemaName = source.SchemaName,
                    ObjectName = source.ObjectName
                };

            if (!Modal.Step.Sources.Any(s => s.Equals(dbObject)))
            {
                Modal.Step.Sources.Add(dbObject);    
            }
        }
    }

    private async Task GetSqlTargetsAsync()
    {
        var proc = SqlStatement?.ParseStoredProcedureFromSqlStatement();
        var schema = proc?.Schema;
        var name = proc?.ProcedureName;
        if (name is null) return;

        var dbObjects = await Modal.GetDatabaseObjectsAsync();

        Guid connectionId = ConnectionId ?? throw new ArgumentNullException(nameof(ConnectionId), "Connection id was null");
        var targets = await SqlServerHelper.GetTargetObjectsAsync(connectionId, schema, name);
        foreach (var target in targets)
        {
            var dbObject = dbObjects.FirstOrDefault(o => o.Equals(target)) ??
                Modal.Step.Sources.FirstOrDefault(o => o.Equals(target)) ??
                new DatabaseObject
                {
                    ServerName = target.ServerName,
                    DatabaseName = target.DatabaseName,
                    SchemaName = target.SchemaName,
                    ObjectName = target.ObjectName
                };

            if (!Modal.Step.Targets.Any(t => t.Equals(dbObject)))
            {
                Modal.Step.Targets.Add(dbObject);    
            }
        }
    }
}
