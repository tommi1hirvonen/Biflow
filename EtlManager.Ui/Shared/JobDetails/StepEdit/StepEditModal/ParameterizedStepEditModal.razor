@implements IStepEditModal
@inject MarkupHelperService MarkupHelper
@inject IDbContextFactory<EtlManagerContext> DbFactory

<StepEditModalBase @ref="Modal"
                   Job="Job"
                   Steps="Steps"
                   Step="Step"
                   Context="Context"
                   StepValidityCheck="StepValidityCheck"
                   ResetDeletedEntities="ResetDeletedEntities"
                   ResetAddedEntities="ResetAddedEntities"
                   OnStepSubmit="OnStepSubmit"
                   FormId="@FormId">
    @ChildContent
    <StepParameterEditComponent Step="Step" JobParameters="Job?.JobParameters" />
</StepEditModalBase>


@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public string FormId { get; set; } = string.Empty;
    [Parameter]
    public Job? Job { get; set; }
    [Parameter]
    public IList<Step>? Steps { get; set; }
    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }
    [Parameter]
    public EtlManagerContext Context { get; set; } = null!;
    [Parameter]
    public ParameterizedStep Step { get; set; } = null!;

    private StepEditModalBase Modal { get; set; } = null!;

    private void ResetDeletedEntities(EntityEntry entity)
    {
        if (entity.Entity is StepParameter param)
        {
            if (!Step.StepParameters.Contains(param))
                Step.StepParameters.Add(param);
        }
    }

    private void ResetAddedEntities(EntityEntry entity)
    {
        if (entity.Entity is StepParameter param)
        {
            if (Step.StepParameters.Contains(param))
                Step.StepParameters.Remove(param);
        }
    }

    private (bool Result, string? ErrorMessage) StepValidityCheck(Step step)
    {
        if (step is ParameterizedStep step_)
        {
            (var paramResult, var paramMessage) = ParametersCheck();
            if (!paramResult)
            {
                return (false, paramMessage);
            }
            else
            {
                foreach (var param in step_.StepParameters)
                {
                    param.SetParameterValue();
                }
                return (true, null);
            }
        }
        else
        {
            return (false, "Not ParameterizedStep");
        }
    }

    private (bool Result, string? Message) ParametersCheck()
    {
        var parameters = Step.StepParameters.OrderBy(param => param.ParameterName).ToList();
        foreach (var param in parameters)
        {
            if (string.IsNullOrEmpty(param.ParameterName))
            {
                return (false, "Parameter name cannot be empty");
            }
        }
        for (var i = 0; i < parameters.Count - 1; i++)
        {
            if (parameters[i + 1].ParameterName == parameters[i].ParameterName)
            {
                return (false, "Duplicate parameter names");
            }
        }

        return (true, null);
    }

    public void ResetStepError() => Modal.ResetStepError();

    public async Task ShowAsync(bool showDependencies) => await Modal.ShowAsync(showDependencies);

}
