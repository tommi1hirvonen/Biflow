@inject MarkupHelperService MarkupHelper

<div class="row">
    <div class="col">
        @MarkupHelper.FromFile("icons/feather/tag.svg")
        <span class="me-3">Tags</span>
        @{
            var tags = Steps?
                .SelectMany(step => step.Tags)
                .Select(tag => tag with { Steps = null! })
                .Distinct()
                .OrderBy(t => t.TagName) ?? Enumerable.Empty<Tag>();
        }
        @if (!tags.Any())
        {
            <small class="text-secondary me-2">No tags</small>
        }
        @foreach (var tag in tags)
        {
            <TagComponent Tag="tag"
                          Style="cursor: pointer;"
                          CssClass="mx-1"
                          Selected="TagFilter.Contains(tag)"
                          OnClick="() => { if (TagFilter.Contains(tag)) TagFilter.Remove(tag); else TagFilter.Add(tag); }" />
        }
    </div>
</div>

<div class="row py-3 align-items-center sticky-top" style="background-color: rgba(255, 255, 255, 0.9);">
    <div class="input-group input-group-sm col">
        <div class="input-group-text rounded-left">
            @MarkupHelper.FromFile("icons/feather/search.svg")
        </div>
        <input type="text" class="form-control" @bind-value="DependenciesFilterText" @bind-value:event="oninput" placeholder="Search" autocomplete="off" />
    </div>
    <div class="col-lg-auto mt-3 mt-lg-0">
        <FilterDropdown TItem="StepType"
                        FilterSet="StepTypeFilter"
                        Items="Steps?.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                        OnChange="StateHasChanged">
            <Title>
                @MarkupHelper.FromFile("icons/feather/tool.svg")
                Step type
            </Title>
        </FilterDropdown>
    </div>
    <div class="form-check form-check-inline col-lg-auto ms-3 mt-3 mt-lg-0 mb-0">
        <input type="checkbox" class="form-check-input" id="only_active"
               checked=@ShowOnlyActiveDependencies
               @onchange="() => ShowOnlyActiveDependencies = !ShowOnlyActiveDependencies">
        <label class="form-check-label" for="only_active">Show only active</label>
    </div>
</div>

<table class="table table-sm table-hover">
    <thead>
        <tr>
            <th>Name</th>
            <th>Dependent on</th>
            <th>Strict dependency</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var step in FilteredStepsOrdered)
        {
            <tr>
                <td class="align-middle">
                    <StepTypeIconComponent StepType_="step.StepType" />
                    <HighlightableText Text="@step.StepName" PartToHighlight="@DependenciesFilterText" />
                </td>
                <td class="align-middle">
                    <div class="form-check form-check-inline">
                        <input type="checkbox" class="form-check-input" id="dependency_@step.StepId"
                               checked=@(Step.Dependencies.Any(dep => dep.DependantOnStepId == step.StepId))
                               @onchange="eventArgs => ToggleDependency(step, eventArgs.Value!)">
                        <label class="form-check-label" for="dependency_@step.StepId"></label>
                    </div>
                </td>
                <td class="align-middle">
                    @if (Step.Dependencies.Any(dep => dep.DependantOnStepId == step.StepId))
                    {
                        <div class="form-check form-check-inline">
                            <input type="checkbox" class="form-check-input" id="strict_@step.StepId"
                                   checked=@(Step.Dependencies.Where(dep => dep.DependantOnStepId == step.StepId).Any(dep => dep.StrictDependency))
                                   @onchange="eventArgs => ToggleStrictDependency(step, eventArgs.Value!)">
                            <label class="form-check-label" for="strict_@step.StepId"></label>
                        </div>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public Step Step { get; set; } = null!;

    [Parameter]
    public IEnumerable<Step> Steps { get; set; } = Enumerable.Empty<Step>();

    private HashSet<Tag> TagFilter { get; } = new();
    private HashSet<StepType> StepTypeFilter { get; } = new();
    private string DependenciesFilterText { get; set; } = string.Empty;
    private bool ShowOnlyActiveDependencies { get; set; } = false;

    private IEnumerable<Step> FilteredSteps => Steps
            .Where(step => step.StepId != Step.StepId) // Exclude current step => step cannot depend on itself.
            .Where(step => step.StepName?.ContainsIgnoreCase(DependenciesFilterText) == true) // Filter based on search filter.
            .Where(step => !StepTypeFilter.Any() || StepTypeFilter.Contains(step.StepType)) // Filter based on step type
            .Where(step => TagFilter.All(tag => step.Tags.Any(t => t.TagName == tag.TagName))) // Filter based on tags
            .Where(step => Step.Dependencies.Any(d => d.DependantOnStepId == step.StepId) || !ShowOnlyActiveDependencies) // Only show active dependencies if checked.
            ?? Enumerable.Empty<Step>();

    private IEnumerable<Step> FilteredStepsOrdered => Job?.UseDependencyMode switch
    {
        true => FilteredSteps.OrderBy(step => step, new TopologicalStepComparer(Steps)),
        _ => FilteredSteps.OrderBy(step => step) // use default comparer
    };

    private void ToggleDependency(Step step, object checkedValue)
    {
        var dependent = (bool)checkedValue;
        var dependency = Step.Dependencies.FirstOrDefault(dep => dep.DependantOnStepId == step.StepId);
        if (!dependent && dependency is not null)
        {
            Step.Dependencies.Remove(dependency);
        }
        else if (dependent && dependency is null)
        {
            Step.Dependencies.Add(new() { StepId = Step.StepId, DependantOnStepId = step.StepId });
        }
    }

    private void ToggleStrictDependency(Step step, object checkedValue)
    {
        var strict = (bool)checkedValue;
        var dependency = Step.Dependencies.FirstOrDefault(dep => dep.DependantOnStepId == step.StepId);
        if (dependency is not null)
        {
            dependency.StrictDependency = strict;
        }
    }

}
