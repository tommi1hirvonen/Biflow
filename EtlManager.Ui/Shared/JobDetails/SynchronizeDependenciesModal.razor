@inject IDbContextFactory<EtlManagerContext> DbContextFactory
@inject MarkupHelperService MarkupHelper

<HxModal @ref="Modal" Size="ModalSize.Large" Scrollable="true" OnClosed="OnClosed" Title="Synchronize dependencies">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <small class="text-secondary">Automatically calculate modifications to dependencies based on step sources and targets.</small>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <HxButton Size="ButtonSize.Regular" Color="ThemeColor.Primary" OnClick="CalculateChangesAsync">
                    @MarkupHelper.FromFile("icons/feather/refresh-cw.svg")
                    Calculate changes
                </HxButton>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Step</th>
                            <th>Depends on</th>
                            <th>Action</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (DependenciesToAdd is null || DependenciesToRemove is null)
                        {
                            <tr class="text-secondary small">
                                <td colspan="4">Click on "Calculate changes"" to preview modifications</td>
                            </tr>
                        }
                        else if (!DependenciesToAdd.Any() && !DependenciesToRemove.Any())
                        {
                            <tr>
                                <td colspan="4">No changes detected</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var dep in DependenciesToAdd)
                            {
                                <tr class="text-primary">
                                    <td class="align-middle">
                                        <StepTypeIconComponent StepType_="dep.Step.StepType" />
                                        @dep.Step.StepName
                                    </td>
                                    <td class="align-middle">
                                        <StepTypeIconComponent StepType_="dep.DependantOnStep.StepType" />
                                        @dep.DependantOnStep.StepName
                                    </td>
                                    <td class="align-middle">
                                        Add
                                    </td>
                                    <td>
                                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                                title="Commit this modification"
                                                CssClass="btn-row text-success" OnClick="async () => await AddDependencyAsync(dep)">
                                                @MarkupHelper.FromFile("icons/feather/check.svg")
                                            </HxButton>
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                                title="Discard this modification"
                                                CssClass="btn-row text-danger" OnClick="() => DependenciesToAdd.Remove(dep)">
                                                @MarkupHelper.FromFile("icons/feather/x.svg")
                                            </HxButton>
                                        </HxButtonGroup>
                                    </td>
                                </tr>
                            }
                            @foreach (var dep in DependenciesToRemove)
                            {
                                <tr class="text-danger">
                                    <td class="align-middle">
                                        <StepTypeIconComponent StepType_="dep.Step.StepType" />
                                        @dep.Step.StepName
                                    </td>
                                    <td class="align-middle">
                                        <StepTypeIconComponent StepType_="dep.DependantOnStep.StepType" />
                                        @dep.DependantOnStep.StepName
                                    </td>
                                    <td class="align-middle">
                                        Remove
                                    </td>
                                    <td>
                                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                                title="Commit this modification"
                                                CssClass="btn-row text-success" OnClick="async () => await RemoveDependencyAsync(dep)">
                                                @MarkupHelper.FromFile("icons/feather/check.svg")
                                            </HxButton>
                                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                                title="Discard this modification"
                                                CssClass="btn-row text-danger" OnClick="() => DependenciesToRemove.Remove(dep)">
                                                @MarkupHelper.FromFile("icons/feather/x.svg")
                                            </HxButton>
                                        </HxButtonGroup>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <div class="row">
                    <div class="col">
                        @if (DependenciesToRemove?.Any() ?? false)
                        {
                            <small class="text-secondary">Dependency removal is only suggested for steps which have at least one source defined.</small>
                        }
                    </div>
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" OnClick="CommitAllAsync">
            @MarkupHelper.FromFile("icons/feather/check.svg")
            Commit all
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" OnClick="async () => await Modal.HideAsync()">
            @MarkupHelper.FromFile("icons/feather/x.svg")
            Close    
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter] public Job? Job { get; set; }

    [Parameter] public IEnumerable<Step>? Steps { get; set; }

    private HxModal Modal { get; set; } = null!;

    private List<Dependency>? DependenciesToAdd { get; set; }
    private List<Dependency>? DependenciesToRemove { get; set; }

    private async Task CalculateChangesAsync()
    {
        if (Job is null) return;
        using var context = DbContextFactory.CreateDbContext();
        var steps = await context.Steps
            .AsNoTrackingWithIdentityResolution()
            .Where(step => step.JobId == Job.JobId)
            .Include(step => step.Sources)
            .Include(step => step.Targets)
            .Include(step => step.Dependencies)
            .ToListAsync();

        DependenciesToAdd = new();
        DependenciesToRemove = new();

        foreach (var step in steps)
        {
            // Check for missing dependencies based on sources and targets.
            var dependencies = steps.Where(s => s.Targets.Any(target => step.Sources.Any(source => source.Equals(target))));
            var missingDependencies = dependencies.Where(s => !step.Dependencies.Any(d => s.StepId == d.DependantOnStepId));
            foreach (var missing in missingDependencies)
            {
                var dependency = new Dependency
                {
                    StepId = step.StepId,
                    Step = step,
                    DependantOnStepId = missing.StepId,
                    DependantOnStep = missing
                };
                DependenciesToAdd.Add(dependency);
            }

            // Check for unnecessary dependencies based on sources and targets.
            // Only do this if there are any sources listed.
            if (step.Sources.Any())
            {
                var extraDependencies = step.Dependencies.Where(d => !dependencies.Any(dep => d.DependantOnStepId == dep.StepId));
                DependenciesToRemove.AddRange(extraDependencies);
            }
        }
    }

    private async Task CommitAllAsync()
    {
        foreach (var dependency in DependenciesToAdd ?? Enumerable.Empty<Dependency>())
        {
            await AddDependencyAsync(dependency);
        }

        foreach (var dependency in DependenciesToRemove ?? Enumerable.Empty<Dependency>())
        {
            await RemoveDependencyAsync(dependency);
        }
    }

    private async Task AddDependencyAsync(Dependency dependency)
    {
        // Add dependency to database.
        using var context = DbContextFactory.CreateDbContext();
        var existing = await context.Dependencies
            .FirstOrDefaultAsync(d => d.StepId == dependency.StepId && d.DependantOnStepId == dependency.DependantOnStepId);
        if (existing is null)
        {
            dependency.Step = null!;
            dependency.DependantOnStep = null!;
            context.Dependencies.Add(dependency);
            await context.SaveChangesAsync();
        }

        // Add dependency to the step loaded into memory.
        var step = Steps?.FirstOrDefault(step => step.StepId == dependency.StepId);
        var dependant = Steps?.FirstOrDefault(step => step.StepId == dependency.DependantOnStepId);
        if (step is not null && dependant is not null)
        {
            dependency.Step = step;
            dependency.DependantOnStep = dependant;
            step.Dependencies.Add(dependency);
        }

        DependenciesToAdd?.Remove(dependency);
    }

    private async Task RemoveDependencyAsync(Dependency dependency)
    {
        // Remove dependency from the database.
        using var context = DbContextFactory.CreateDbContext();
        var existing = await context.Dependencies
            .FirstOrDefaultAsync(d => d.StepId == dependency.StepId && d.DependantOnStepId == dependency.DependantOnStepId);
        if (existing is not null)
        {
            context.Dependencies.Remove(existing);
            await context.SaveChangesAsync();
        }

        // Remove dependency from step loaded into memory.
        var step = Steps?.FirstOrDefault(step => step.StepId == dependency.StepId);
        var dep = step?.Dependencies.FirstOrDefault(d => d.DependantOnStepId == dependency.DependantOnStepId);
        if (dep is not null)
        {
            step?.Dependencies.Remove(dep);
        }

        // Dependency was handled => remove from list of modifications.
        DependenciesToRemove?.Remove(dependency);
    }

    private void OnClosed()
    {
        DependenciesToAdd = null;
        DependenciesToRemove = null;
    }

    public Task ShowAsync() => Modal.ShowAsync();
}
