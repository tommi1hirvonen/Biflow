@inject MarkupHelperService MarkupHelper
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IHxMessengerService Messenger

<div class="row mt-4">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body px-0">
                @if (Users is null)
                {
                    <p class="px-3">Loading...</p>
                }
                else
                {
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>
                                    User
                                </th>
                                <th>
                                    Job
                                </th>
                                <th>
                                    Subscription
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var sub in Users
                                .SelectMany(u => u.Subscriptions)
                                .OrderBy(s => s.Username)
                                .ThenBy(s => s.Job.JobName))
                            {
                                <tr>
                                    <td>
                                        @sub.User.Username
                                    </td>
                                    <td>
                                        @sub.Job.JobName
                                    </td>
                                    <td>
                                        <div>
                                            <div class="form-check form-check-inline">
                                                <input type="radio" class="form-check-input" id="@($"{sub.Username}{sub.JobId}failure")" disabled
                                                       checked=@(sub.SubscriptionType == SubscriptionType.OnFailure)>
                                                <label class="form-check-label" for="@($"{sub.Username}{sub.JobId}failure")">On failure</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input type="radio" class="form-check-input" id="@($"{sub.Username}{sub.JobId}success")" disabled
                                                       checked=@(sub.SubscriptionType == SubscriptionType.OnSuccess)>
                                                <label class="form-check-label" for="@($"{sub.Username}{sub.JobId}success")">On success</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input type="radio" class="form-check-input" id="@($"{sub.Username}{sub.JobId}completion")" disabled
                                                       checked=@(sub.SubscriptionType == SubscriptionType.OnCompletion)>
                                                <label class="form-check-label" for="@($"{sub.Username}{sub.JobId}completion")">On completion</label>
                                            </div>
                                            <div class="form-check form-check-inline">
                                                <input type="checkbox" class="form-check-input" id="@($"{sub.Username}{sub.JobId}overtime")" disabled
                                                       checked=@(sub.NotifyOnOvertime == true)>
                                                <label class="form-check-label" for="@($"{sub.Username}{sub.JobId}overtime")">On overtime</label>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<User>? Users { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<EtlManagerContext>(DbFactory.CreateDbContext);
        Users = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(u => u.Subscriptions)
            .ThenInclude(s => s.Job)
            .ToListAsync();
    }
}
