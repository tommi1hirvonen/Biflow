@page "/executions"

@inject IDbContextFactory<EtlManagerContext> DbContextFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject IJSRuntime JS
@inject IHttpContextAccessor HttpContextAccessor

<h4>Executions</h4>

<form @onsubmit="LoadData">
    <BSButtonGroup Size="Size.Small" IsToolbar="true" Class="mt-3">
        <BSButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" IsDisabled="Loading">
            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/refresh-cw.svg")))
            Refresh
        </BSButton>
        <BSButtonGroup Size="Size.Small" Class="ml-3">
            <BSButton Size="Size.Small" Color="Color.Secondary" @onclick="() => ShowSteps = false" Class="@(!ShowSteps ? "active" : null)">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/loader.svg")))
                Jobs
            </BSButton>
            <BSButton Size="Size.Small" Color="Color.Secondary" @onclick="() => ShowSteps = true" Class="@(ShowSteps ? "active" : null)">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/list.svg")))
                Steps
            </BSButton>
        </BSButtonGroup>
        <BSDropdown>
            <BSDropdownToggle Size="Size.Small" Color="Color.Secondary" Class="ml-3">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/bookmark.svg")))
                Presets
            </BSDropdownToggle>
            <BSDropdownMenu>
                @*List predefined hour intervals*@
                <BSDropdownItem @onclick="() => SelectPreset(1)">Last 1 h</BSDropdownItem>
                <BSDropdownItem @onclick="() => SelectPreset(3)">Last 3 h</BSDropdownItem>
                <BSDropdownItem @onclick="() => SelectPreset(12)">Last 12 h</BSDropdownItem>
                <BSDropdownItem @onclick="() => SelectPreset(24)">Last 24 h</BSDropdownItem>
                <BSDropdownItem @onclick="() => SelectPreset(72)">Last 3 d</BSDropdownItem>
                <BSDropdownItem @onclick="() => SelectPreset(168)">Last 7 d</BSDropdownItem>
                <BSDropdownItem @onclick="() => SelectPreset(336)">Last 14 d</BSDropdownItem>
            </BSDropdownMenu>
        </BSDropdown>
        @*If executions are being (re)loaded, show spinner.*@
        @if (Loading)
        {
            <div class="spinner-border text-primary align-middle ml-3" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
    </BSButtonGroup>

    <div class="form-row mt-2">
        <div class="form-group col-xl-3 col-lg-4 col-md-5 col-sm-5">
            <label>Date & time until</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/calendar.svg")))
                    </div>
                </div>
                <input @bind="DateTimeUntil" @bind:format="yyyy-MM-ddTHH:mm" class="form-control form-control-sm" type="datetime-local">
            </div>
        </div>
        <div class="form-group col-xl-2 col-lg-3 col-md-4 col-sm-4">
            <label>Interval (h)</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/clock.svg")))
                    </div>
                </div>
                <input @bind-value="IntervalHours" class="form-control form-control-sm">
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/filter.svg")))
            <span class="mr-3">Filters</span>
        </div>
    </div>
    <BSButtonGroup Size="Size.Small" Class="mt-2">

        <FilterDropdown TItem="string"
                        FilterSet="JobFilter"
                        Items="Executions_?
                               .Where(e => !StepFilter.Any() || e.StepExecutions.Any(s => StepFilter.Contains(s.StepName))) // Limit visible jobs based on step filter
                               .Where(e => !StepTypeFilter.Any() || e.StepExecutions.Any(s => StepTypeFilter.Contains(s.StepType))) // Limit visible jobs based on step type filter
                               .Where(e => !JobStatusFilter.Any() || JobStatusFilter.Contains(e.ExecutionStatus)) // Limit visible jobs based on job status filter
                               .Select(e => e.JobName)
                               .Distinct()
                               .OrderBy(j => j) ?? Enumerable.Empty<string>()"
                        OnChange="StateHasChanged">
            <Title>
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/loader.svg")))
                Job
            </Title>
        </FilterDropdown>

        @if (ShowSteps)
        {
            <FilterDropdown TItem="string"
                            FilterSet="StepFilter"
                            Items="Executions_?
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible steps based on job filter
                                   .SelectMany(e =>
                                        e.StepExecutions
                                            .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                                StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible steps based on step status filter
                                            .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible steps based on step type filter
                                        .Select(s => s.StepName))
                                   .Distinct()
                                   .OrderBy(j => j) ?? Enumerable.Empty<string>()"
                            OnChange="StateHasChanged"
                            IsSearchable="true">
                <Title>
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/list.svg")))
                    Step
                </Title>
            </FilterDropdown>
            <FilterDropdown TItem="StepType"
                            FilterSet="StepTypeFilter"
                            Items="Executions_?
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible step types based on job filter
                                   .SelectMany(e =>
                                        e.StepExecutions
                                            .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                                StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible step types based on step status filter
                                            .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step types based on step filter
                                        .Select(s => s.StepType))
                                   .Distinct()
                                   .OrderBy(j => j) ?? Enumerable.Empty<StepType>()"
                            OnChange="StateHasChanged">
                <Title>
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tool.svg")))
                    Step type
                </Title>
            </FilterDropdown>
        }

        @if (!ShowSteps)
        {
            <FilterDropdown TItem="ExecutionStatus"
                            FilterSet="JobStatusFilter"
                            Items="Executions_?
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible job statuses based on job filter
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<ExecutionStatus>()"
                            OnChange="StateHasChanged">
                <Title>
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/alert-circle.svg")))
                    Status
                </Title>
            </FilterDropdown>
        }
        else
        {
            <FilterDropdown TItem="StepExecutionStatus"
                            FilterSet="StepStatusFilter"
                            Items="Executions_?
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible step statuses based on job filter
                                   .SelectMany(e =>
                                        e.StepExecutions
                                            .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step statuses based on step filter
                                            .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible step statuses based on step type filter
                                        .SelectMany(s => s.StepExecutionAttempts))
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<StepExecutionStatus>()"
                            OnChange="StateHasChanged">
                <Title>
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/alert-circle.svg")))
                    Status
                </Title>
            </FilterDropdown>
        }

        <BSButton Size="Size.Small" Color="Color.Light"
                  @onclick="() => { JobStatusFilter.Clear(); StepStatusFilter.Clear(); JobFilter.Clear(); StepFilter.Clear(); StepTypeFilter.Clear(); }">
            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x.svg")))
            Reset
        </BSButton>
    </BSButtonGroup>
</form>

@if (!ShowSteps)
{
    <div class="card shadow-sm pt-2 mt-2 my-3">
        <table class="table table-sm table-hover">
            <thead>
                <tr>
                    <th>
                        Job
                    </th>
                    <th>
                        Created
                    </th>
                    <th>
                        Started
                    </th>
                    <th>
                        Ended
                    </th>
                    <th>
                        Duration
                    </th>
                    <th>
                        Number of steps
                    </th>
                    <th>
                        Success percent
                    </th>
                    <th>
                        Status
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (Executions_ is null)
                {
                    <tr><td colspan="8">Loading...</td></tr>
                }
                else if (Executions_.Count == 0)
                {
                    <tr><td colspan="8">No executions</td></tr>
                }
                else
                {
                    @foreach (var item in Executions_
                       .Where(e => !JobStatusFilter.Any() || JobStatusFilter.Contains(e.ExecutionStatus))
                       .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)))
                    {
                        <tr style="cursor: pointer;" @onclick="() => OpenJobExecutionModal(item.ExecutionId)">
                            <td>
                                @item.JobName
                            </td>
                            <td>
                                @item.CreatedDateTime
                            </td>
                            <td>
                                @item.StartDateTime
                            </td>
                            <td>
                                @item.EndDateTime
                            </td>
                            <td>
                                <text>@item.GetDurationInReadableFormat()</text>
                            </td>
                            <td style="text-align: right;">
                                @item.StepExecutions.Count
                            </td>
                            <td style="text-align: right;">
                                @item.GetSuccessPercent()?.FormatPercentage(2)
                            </td>
                            <td>
                                <JobExecutionStatusBadgeComponent ExecutionStatus_="@item.ExecutionStatus" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="card shadow-sm pt-2 mt-2 my-4">
        <table class="table table-sm table-hover">
            <thead>
                <tr>
                    <th>
                        Job
                    </th>
                    <th>
                        Step
                    </th>
                    <th>
                        Step type
                    </th>
                    <th>
                        Started
                    </th>
                    <th>
                        Ended
                    </th>
                    <th>
                        Duration
                    </th>
                    <th>
                        Status
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (Executions_ is null)
                {
                    <tr><td colspan="7">Loading...</td></tr>
                }
                else if (Executions_.Count == 0)
                {
                    <tr><td colspan="7">No executions</td></tr>
                }
                else
                {
                    @foreach (var item in Executions_
                       .SelectMany(e => e.StepExecutions.SelectMany(s => s.StepExecutionAttempts))
                       .Where(e => !StepStatusFilter.Any() || StepStatusFilter.Contains(e.ExecutionStatus))
                       .Where(e => !JobFilter.Any() || JobFilter.Contains(e.StepExecution.Execution.JobName))
                       .Where(e => !StepFilter.Any() || StepFilter.Contains(e.StepExecution.StepName))
                       .Where(e => !StepTypeFilter.Any() || StepTypeFilter.Contains(e.StepExecution.StepType))
                       .OrderByDescending(e => e.StepExecution.Execution.CreatedDateTime)
                       .ThenByDescending(e => e.StartDateTime))
                    {
                        <tr class="@(SelectedStepExecution == item ? "bg-light" : null)" style="cursor: pointer;" @onclick="() => ToggleSelectedStepExecution(item)">
                            <td>
                                @item.StepExecution.Execution.JobName
                            </td>
                            <td>
                                @item.StepExecution.StepName
                            </td>
                            <td>
                                <StepTypeIconComponent StepType_="@item.StepType" />
                            </td>
                            <td>
                                @item.StartDateTime
                            </td>
                            <td>
                                @item.EndDateTime
                            </td>
                            <td>
                                <text>@item.GetDurationInReadableFormat()</text>
                            </td>
                            <td>
                                <StepExecutionStatusBadgeComponent ExecutionStatus="@item.ExecutionStatus" />
                            </td>
                        </tr>
                        @if (SelectedStepExecution == item)
                        {
                            <tr class="table-borderless">
                                <td colspan="7" class="bg-light">
                                    <BSButtonGroup Size="Size.Small" IsToolbar="true" Class="mb-3 mt-1 ml-2">
                                        <BSButton Size="Size.Small" Color="Color.Light" @onclick="() => ShowStepHistoryModal(item.StepId.ToString())">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/activity.svg")))
                                            History
                                        </BSButton>
                                        <AuthorizeView Roles="Admin, Editor, Operator">
                                            @if (item.ExecutionStatus == StepExecutionStatus.Running)
                                            {
                                                <BSDropdown Class="ml-3">
                                                    <BSDropdownToggle Size="Size.Small" Color="Color.Danger">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                                                        Stop
                                                    </BSDropdownToggle>
                                                    <BSDropdownMenu>
                                                        <BSDropdownItem @onclick="() => StopStepExecutionAsync(item)">Confirm</BSDropdownItem>
                                                    </BSDropdownMenu>
                                                </BSDropdown>
                                            }
                                        </AuthorizeView>
                                    </BSButtonGroup>

                                    <StepExecutionDetailsComponent StepExecutionAttempt="item" />
                                </td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
}

<StepHistoryModal @ref="StepHistoryModal" StepId_="@HistoryModalStepId" />

<JobExecutionDetailsModal @ref="JobExecutionModal" ExecutionId_="@SelectedJobExecutionId.ToString()" />

@code {

    private bool ShowSteps { get; set; } = false;
    private bool Loading { get; set; } = false;

    private JobExecutionDetailsModal JobExecutionModal { get; set; } = null!;
    private Guid SelectedJobExecutionId { get; set; }

    private StepExecutionAttempt? SelectedStepExecution { get; set; }

    private StepHistoryModal StepHistoryModal { get; set; } = null!;
    private string? HistoryModalStepId { get; set; }

    private DateTime DateTimeUntil { get; set; } = DateTime.Now.Trim(TimeSpan.TicksPerMinute).AddMinutes(1);
    private int IntervalHours { get; set; } = 3;

    private List<Execution>? Executions_ { get; set; }

    private HashSet<ExecutionStatus> JobStatusFilter { get; } = new();
    private HashSet<StepExecutionStatus> StepStatusFilter { get; } = new();
    private HashSet<string> JobFilter { get; } = new();
    private HashSet<string> StepFilter { get; } = new();
    private HashSet<StepType> StepTypeFilter { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Loading = true;

        using var context = DbContextFactory.CreateDbContext();
        Executions_ = await context.Executions
                .Include(execution => execution.StepExecutions)
                .ThenInclude(exec => exec.StepExecutionAttempts)
                .Where(execution => execution.CreatedDateTime <= DateTimeUntil)
                .Where(execution => execution.CreatedDateTime >= DateTimeUntil.AddHours(-IntervalHours))
                .OrderByDescending(execution => execution.CreatedDateTime)
                .ThenByDescending(execution => execution.StartDateTime)
                .ToListAsync();

        Loading = false;
    }

    private async Task SelectPreset(int hours)
    {
        DateTimeUntil = DateTime.Now.Trim(TimeSpan.TicksPerMinute).AddMinutes(1);
        IntervalHours = hours;
        await LoadData();
    }

    private void OpenJobExecutionModal(Guid executionId)
    {
        SelectedJobExecutionId = executionId;
        JobExecutionModal.Show();
    }

    private void ToggleSelectedStepExecution(StepExecutionAttempt execution)
    {
        // If the selected execution is the same that was previously selected, set to null
        // => hides step execution details component.
        SelectedStepExecution = SelectedStepExecution == execution ? null : execution;
        StateHasChanged();
    }

    private void ShowStepHistoryModal(string stepId)
    {
        HistoryModalStepId = stepId;
        StepHistoryModal.Show();
    }

    private async Task StopStepExecutionAsync(StepExecutionAttempt stepExecution)
    {
        try
        {
            string username = HttpContextAccessor.HttpContext?.User?.Identity?.Name
                ?? throw new ArgumentNullException(nameof(username), "Error getting username from HttpContext");
            await Utility.StopExecutionAsync(stepExecution.ExecutionId, username, stepExecution.StepId);
        }
        catch (TimeoutException)
        {
            await JS.InvokeVoidAsync("alert", "Operation timed out. The executor process may no longer be running.");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Error stopping execution:" + ex.Message);
        }
    }

}