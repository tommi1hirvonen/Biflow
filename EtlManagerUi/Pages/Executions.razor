@page "/executions"

@inject IDbContextFactory<EtlManagerContext> DbContextFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject IJSRuntime JS
@inject IHttpContextAccessor HttpContextAccessor

<h4>Executions</h4>

<div class="row mt-3">
    <div class="col">
        <BSButtonGroup Size="Size.Small" IsToolbar="true">
            <BSButton ButtonType="ButtonType.Submit" form="executions_form" Size="Size.Small" Color="Color.Primary" IsDisabled="Loading">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/refresh-cw.svg")))
                Refresh
            </BSButton>
            <BSButtonGroup Size="Size.Small" Class="ml-3">
                <BSButton Size="Size.Small" Color="Color.Secondary" @onclick="() => ShowSteps = false" Class="@(!ShowSteps ? "active" : null)">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/loader.svg")))
                    Jobs
                </BSButton>
                <BSButton Size="Size.Small" Color="Color.Secondary" @onclick="() => ShowSteps = true" Class="@(ShowSteps ? "active" : null)">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/list.svg")))
                    Steps
                </BSButton>
            </BSButtonGroup>
            <BSButtonGroup Size="Size.Small" Class="ml-3">
                <BSButton Size="Size.Small" Color="Color.Secondary" @onclick="() => ShowGraph = false" Class="@(!ShowGraph ? "active" : null)">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/table.svg")))
                    Table
                </BSButton>
                <BSButton Size="Size.Small" Color="Color.Secondary" @onclick="() => ShowGraph = true" Class="@(ShowGraph ? "active" : null)">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/bar-chart-steps.svg")))
                    Graph
                </BSButton>
            </BSButtonGroup>
            <BSDropdown>
                <BSDropdownToggle Size="Size.Small" Color="Color.Secondary" Class="ml-3">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/bookmark.svg")))
                    Presets
                </BSDropdownToggle>
                <BSDropdownMenu>
                    <BSDropdownHeader>Last</BSDropdownHeader>
                    <BSDropdownItem @onclick="() => SelectPresetLast(1)">1 h</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPresetLast(3)">3 h</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPresetLast(12)">12 h</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPresetLast(24)">24 h</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPresetLast(72)">3 d</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPresetLast(168)">7 d</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPresetLast(336)">14 d</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPresetLast(720)">30 d</BSDropdownItem>
                    <BSDropdownItem IsDivider="true"></BSDropdownItem>
                    @{
                        var today = DateTime.Now.Date;
                        var endToday = today.AddDays(1).AddTicks(-1);
                        var startThisWeek = today.StartOfWeek(DayOfWeek.Monday);
                        var endThisWeek = startThisWeek.AddDays(7).AddTicks(-1);
                        var startThisMonth = new DateTime(today.Year, today.Month, 1);
                        var endThisMonth = startThisMonth.AddMonths(1).AddTicks(-1);
                        var yesterday = today.AddDays(-1);
                        var endYesterday = today.AddTicks(-1);
                        var startPrevWeek = today.AddDays(-7).StartOfWeek(DayOfWeek.Monday);
                        var endPrevWeek = startPrevWeek.AddDays(7).AddTicks(-1);
                        var prevMonth = today.AddMonths(-1);
                        var startPrevMonth = new DateTime(prevMonth.Year, prevMonth.Month, 1);
                        var endPrevMonth = startPrevMonth.AddMonths(1).AddTicks(-1);
                    }
                    <BSDropdownHeader>This</BSDropdownHeader>
                    <BSDropdownItem @onclick="() => SelectPreset(today, endToday)">Day</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPreset(startThisWeek, endThisWeek)">Week</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPreset(startThisMonth, endThisMonth)">Month</BSDropdownItem>
                    <BSDropdownItem IsDivider="true"></BSDropdownItem>
                    <BSDropdownHeader>Previous</BSDropdownHeader>
                    <BSDropdownItem @onclick="() => SelectPreset(yesterday, endYesterday)">Day</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPreset(startPrevWeek, endPrevWeek)">Week</BSDropdownItem>
                    <BSDropdownItem @onclick="() => SelectPreset(startPrevMonth, endPrevMonth)">Month</BSDropdownItem>
                </BSDropdownMenu>
            </BSDropdown>
            @*If executions are being (re)loaded, show spinner.*@
            @if (Loading)
            {
                <div class="spinner-border text-primary align-middle ml-3" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
        </BSButtonGroup>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <form class="form-inline" id="executions_form" @onsubmit="LoadData">
            <div class="form-group">
                <label class="mr-3">From</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/calendar.svg")))
                        </div>
                    </div>
                    <input @bind="FromDateTime" @bind:format="yyyy-MM-ddTHH:mm" class="form-control form-control-sm" type="datetime-local">
                </div>
            </div>
            <div class="form-group ml-3">
                <label class="mr-3">To</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/calendar.svg")))
                        </div>
                    </div>
                    <input @bind="ToDateTime" @bind:format="yyyy-MM-ddTHH:mm" class="form-control form-control-sm" type="datetime-local">
                </div>
            </div>

        </form>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <div class="form-group">
            <div class="custom-control custom-radio custom-control-inline">
                <input type="radio" class="custom-control-input" id="radio_all"
                       checked=@(StartTypeFilter == StartType.All)
                       @onchange="() => StartTypeFilter = StartType.All">
                <label class="custom-control-label" for="radio_all">All</label>
            </div>
            <div class="custom-control custom-radio custom-control-inline">
                <input type="radio" class="custom-control-input" id="radio_scheduled"
                       checked=@(StartTypeFilter == StartType.Scheduled)
                       @onchange="() => StartTypeFilter = StartType.Scheduled">
                <label class="custom-control-label" for="radio_scheduled">Scheduled</label>
            </div>
            <div class="custom-control custom-radio custom-control-inline">
                <input type="radio" class="custom-control-input" id="radio_manual"
                       checked=@(StartTypeFilter == StartType.Manual)
                       @onchange="() => StartTypeFilter = StartType.Manual">
                <label class="custom-control-label" for="radio_manual">Manual</label>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col d-inline">
        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/filter.svg")))
        <span class="mr-3">Filters</span>

        <BSButtonGroup Size="Size.Small">

            <FilterDropdown TItem="string"
                            FilterSet="JobFilter"
                            Items="Executions_?
                               .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible jobs based on start type filter
                               .Where(e => !StepFilter.Any() || e.StepExecutions.Any(s => StepFilter.Contains(s.StepName))) // Limit visible jobs based on step filter
                               .Where(e => !StepTypeFilter.Any() || e.StepExecutions.Any(s => StepTypeFilter.Contains(s.StepType))) // Limit visible jobs based on step type filter
                               .Where(e => !TagFilter.Any() || e.StepExecutions.Any(s => s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true)) // Limit visible jobs based on tag filter
                               .Where(e => !JobStatusFilter.Any() || JobStatusFilter.Contains(e.ExecutionStatus)) // Limit visible jobs based on job status filter
                               .Select(e => e.JobName)
                               .Distinct()
                               .OrderBy(j => j) ?? Enumerable.Empty<string>()"
                            OnChange="StateHasChanged">
                <Title>
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/loader.svg")))
                    Job
                </Title>
            </FilterDropdown>

            @if (ShowSteps)
            {
                <FilterDropdown TItem="string"
                                FilterSet="StepFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible steps based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible steps based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible steps based on tag filter
                                   .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                        StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible steps based on step status filter
                                   .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible steps based on step type filter
                                   .Select(s => s.StepName)
                                   .Distinct()
                                   .OrderBy(j => j) ?? Enumerable.Empty<string>()"
                                OnChange="StateHasChanged"
                                IsSearchable="true">
                    <Title>
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/list.svg")))
                        Step
                    </Title>
                </FilterDropdown>
                <FilterDropdown TItem="StepType"
                                FilterSet="StepTypeFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible step types based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible step types based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step types based on tag filter
                                   .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                        StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible step types based on step status filter
                                   .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step types based on step filter
                                   .Select(s => s.StepType)
                                   .Distinct()
                                   .OrderBy(j => j) ?? Enumerable.Empty<StepType>()"
                                OnChange="StateHasChanged">
                    <Title>
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tool.svg")))
                        Step type
                    </Title>
                </FilterDropdown>
            }

            @if (!ShowSteps)
            {
                <FilterDropdown TItem="ExecutionStatus"
                                FilterSet="JobStatusFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible job statuses based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible job statuses based on job filter
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<ExecutionStatus>()"
                                OnChange="StateHasChanged">
                    <Title>
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/alert-circle.svg")))
                        Status
                    </Title>
                </FilterDropdown>
            }
            else
            {
                <FilterDropdown TItem="StepExecutionStatus"
                                FilterSet="StepStatusFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible step statuses based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible step statuses based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step statuses based on tag filter
                                   .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step statuses based on step filter
                                   .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible step statuses based on step type filter
                                   .SelectMany(s => s.StepExecutionAttempts)
                                   .Select(e => e.ExecutionStatus)
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<StepExecutionStatus>()"
                                OnChange="StateHasChanged">
                    <Title>
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/alert-circle.svg")))
                        Status
                    </Title>
                </FilterDropdown>
                <FilterDropdown TItem="string"
                                FilterSet="TagFilter"
                                Items="Executions_?
                                   .Where(e => StartTypeFilter == StartType.All ||
                                    StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                                    StartTypeFilter == StartType.Manual && e.ScheduleId is null) // Limit visible tags based on start type filter
                                   .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName)) // Limit visible tags based on job filter
                                   .SelectMany(e => e.StepExecutions)
                                   .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible tags based on step filter
                                   .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible tags based on step type filter
                                   .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                                StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible tags based on step status filter
                                   .SelectMany(e => e.Step?.Tags.Select(t => t.TagName) ?? Enumerable.Empty<string>())
                                   .Distinct()
                                   .OrderBy(s => s) ?? Enumerable.Empty<string>()"
                                OnChange="StateHasChanged">
                    <Title>
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tag.svg")))
                        Tag
                    </Title>
                </FilterDropdown>
            }

            <BSButton Size="Size.Small" Color="Color.Light"
                      @onclick="() => { JobStatusFilter.Clear(); StepStatusFilter.Clear(); JobFilter.Clear(); StepFilter.Clear(); StepTypeFilter.Clear(); TagFilter.Clear(); }">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x.svg")))
                Reset
            </BSButton>
        </BSButtonGroup>
    </div>
</div>

<div class="card shadow-sm pt-2 mt-2 my-3">
    @if (!ShowSteps && !ShowGraph)
    {
        <JobExecutionsTableComponent Executions="FilteredExecutions" />
    }
    else if (!ShowSteps)
    {
        <JobExecutionsGraphComponent Executions="FilteredExecutions" />
    }
    else if (!ShowGraph)
    {
        <StepExecutionsTableComponent Executions="FilteredStepExecutions" />
    }
    else
    {
        <StepExecutionsGraphComponent Executions="FilteredStepExecutions" />
    }
</div>

@code {

    private bool ShowSteps { get; set; } = false;
    private bool ShowGraph { get; set; } = false;
    private bool Loading { get; set; } = false;

    private DateTime FromDateTime
    {
        get => _fromDateTime;
        set => _fromDateTime = value > ToDateTime ? ToDateTime : value;
    }
    private DateTime _fromDateTime = DateTime.Now.Trim(TimeSpan.TicksPerMinute).AddHours(-1);

    private DateTime ToDateTime
    {
        get => _toDateTime;
        set => _toDateTime = value < FromDateTime ? FromDateTime : value;
    }
    private DateTime _toDateTime = DateTime.Now.Trim(TimeSpan.TicksPerMinute).AddMinutes(1);

    private List<Execution>? Executions_ { get; set; }

    private HashSet<ExecutionStatus> JobStatusFilter { get; } = new();
    private HashSet<StepExecutionStatus> StepStatusFilter { get; } = new();
    private HashSet<string> JobFilter { get; } = new();
    private HashSet<string> StepFilter { get; } = new();
    private HashSet<StepType> StepTypeFilter { get; } = new();
    private HashSet<string> TagFilter { get; } = new();
    private StartType StartTypeFilter { get; set; } = StartType.All;

    private IEnumerable<Execution>? FilteredExecutions => Executions_?
                        .Where(e => !JobStatusFilter.Any() || JobStatusFilter.Contains(e.ExecutionStatus))
                        .Where(e => !JobFilter.Any() || JobFilter.Contains(e.JobName))
                        .Where(e => StartTypeFilter == StartType.All ||
                        StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                        StartTypeFilter == StartType.Manual && e.ScheduleId is null);

    private IEnumerable<StepExecutionAttempt>? FilteredStepExecutions => Executions_?
                        .Where(e => StartTypeFilter == StartType.All ||
                        StartTypeFilter == StartType.Scheduled && e.ScheduleId is not null ||
                        StartTypeFilter == StartType.Manual && e.ScheduleId is null)
                        .SelectMany(e => e.StepExecutions)
                        .Where(e => !TagFilter.Any() || e.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true)
                        .SelectMany(s => s.StepExecutionAttempts)
                        .Where(e => !StepStatusFilter.Any() || StepStatusFilter.Contains(e.ExecutionStatus))
                        .Where(e => !JobFilter.Any() || JobFilter.Contains(e.StepExecution.Execution.JobName))
                        .Where(e => !StepFilter.Any() || StepFilter.Contains(e.StepExecution.StepName))
                        .Where(e => !StepTypeFilter.Any() || StepTypeFilter.Contains(e.StepExecution.StepType))
                        .OrderByDescending(e => e.StepExecution.Execution.CreatedDateTime)
                        .ThenByDescending(e => e.StartDateTime)
                        .ThenByDescending(e => e.StepExecution.ExecutionPhase);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Loading = true;
        using var context = await Task.Run<EtlManagerContext>(DbContextFactory.CreateDbContext);
        Executions_ = await context.Executions
                .Include(execution => execution.StepExecutions)
                .ThenInclude(exec => exec.StepExecutionAttempts)
                .Include(e => e.StepExecutions)
                .ThenInclude(e => (e as ParameterizedStepExecution)!.StepExecutionParameters)
                .Include(execution => execution.StepExecutions)
                .ThenInclude(exec => exec.Step)
                .ThenInclude(s => s!.Tags)
                .Where(execution =>
                execution.CreatedDateTime >= FromDateTime && execution.CreatedDateTime <= ToDateTime ||
                execution.EndDateTime >= FromDateTime && execution.EndDateTime <= ToDateTime ||
                execution.ExecutionStatus == ExecutionStatus.Running && DateTime.Now >= FromDateTime && DateTime.Now <= ToDateTime)
                .OrderByDescending(execution => execution.CreatedDateTime)
                .ThenByDescending(execution => execution.StartDateTime)
                .ToListAsync();

        Loading = false;
    }

    private async Task SelectPresetLast(int hours)
    {
        ToDateTime = DateTime.Now.Trim(TimeSpan.TicksPerMinute).AddMinutes(1);
        FromDateTime = DateTime.Now.Trim(TimeSpan.TicksPerMinute).AddHours(-hours);
        await LoadData();
    }

    private async Task SelectPreset(DateTime from, DateTime to)
    {
        FromDateTime = from;
        ToDateTime = to;
        await LoadData();
    }

}