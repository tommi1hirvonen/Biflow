@page "/schedules"

@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS
@inject IConfiguration configuration
@inject IWebHostEnvironment WebHostEnvironment

<h4>Schedules</h4>

<AuthorizeView Roles="Admin, Editor, Operator">
    <div class="mt-3">
        <BSButton Color="Color.Success" @onclick="() => CreateModal.Show()" IsDisabled="Jobs?.Count == 0">
            Add schedule
        </BSButton>
        <BSButton Class="ml-3" Color="Color.Primary" @onclick="SynchronizeSchedulerService">
            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/refresh-cw.svg")))
            Synchronize
        </BSButton>
    </div>
</AuthorizeView>


<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Job
                </th>
                <th>
                    Enabled
                </th>
                <th>
                    Cron expression
                </th>
                <th>
                    Description
                </th>
                <th>
                    Next execution
                </th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Schedules_ is null)
            {
                <tr><td colspan="11">Loading...</td></tr>
            }
            else if (Schedules_.Count == 0)
            {
                <tr><td colspan="11">No schedules</td></tr>
            }
            else
            {
                @foreach (var item in Schedules_)
                {
                    <tr class="@(item.IsEnabled ? null : "disabled")">
                        <td class="align-middle">
                            <a class="text-dark" href="@("jobs/schedules/" + item.JobId)">
                                @item.Job.JobName
                            </a>
                        </td>
                        <td class="align-middle">
                            <div class="custom-control custom-switch">
                                <AuthorizeView Roles="Admin, Editor, Operator">
                                    <input type="checkbox" class="custom-control-input" id="@item.ScheduleId" checked=@item.IsEnabled @onchange="args => ToggleEnabled(args, item)">
                                    <label class="custom-control-label" style="cursor: pointer;" for="@item.ScheduleId"></label>
                                </AuthorizeView>
                                <AuthorizeView Roles="Viewer">
                                    <input type="checkbox" class="custom-control-input" disabled checked=@item.IsEnabled>
                                    <label class="custom-control-label" for="@item.ScheduleId"></label>
                                </AuthorizeView>
                            </div>
                        </td>
                        <td>
                            @item.CronExpression
                        </td>
                        <td>
                            <BSButton Color="Color.Light" Size="Size.Small" Class="btn-row" id="@("tooltip_" + item.ScheduleId)">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
                            </BSButton>
                            <BSTooltip Target="@("tooltip_" + item.ScheduleId)" Placement="Placement.Auto">
                                <div style="white-space: pre;">
                                    @item.GetScheduleDescription()
                                </div>
                            </BSTooltip>
                        </td>
                        <td>
                            @item.GetNextFireTime()
                        </td>
                        <td align="center">
                            <AuthorizeView Roles="Admin, Editor, Operator">
                                <BSButtonGroup Size="Size.Small" Class="btn-row">
                                    <BSButton Color="Color.Light" Size="Size.Small" aria-label="delete" Class="btn-row" @onclick="() => DeleteSchedule(item)">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/delete.svg")))
                                    </BSButton>
                                </BSButtonGroup>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


@if (NewSchedule is not null)
{
    <AuthorizeView Roles="Admin, Editor, Operator">
        <BSModal @ref="CreateModal" Size="Size.Large">
            <BSModalHeader OnClick="() => CreateModal.Hide()">New schedule</BSModalHeader>
            <BSForm Model="NewSchedule" OnValidSubmit="AddSchedule" Context="_context">
                <BSModalBody>
                    <div class="row">
                        <div class="col-md-8 mx-auto">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <BSFormGroup>
                                <BSLabel>Job</BSLabel>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/loader.svg")))
                                        </div>
                                    </div>
                                    <InputSelect class="form-control" @bind-Value="NewSchedule.JobId">
                                        @foreach (var job in Jobs)
                                            {
                                            <option value="@job.JobId">@job.JobName</option>
                                            }
                                    </InputSelect>
                                </div>
                            </BSFormGroup>
                            <BSFormGroup>
                                <BSLabel>Cron expression</BSLabel>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/calendar.svg")))
                                        </div>
                                    </div>
                                    <InputText class="form-control" @bind-Value="NewSchedule.CronExpression"></InputText>
                                </div>
                            </BSFormGroup>
                        </div>
                    </div>
                </BSModalBody>
                <BSModalFooter>
                    <BSButton ButtonType="ButtonType.Submit" Color="Color.Success">Create</BSButton>
                    <BSButton Color="Color.Secondary" @onclick="() => CreateModal.Hide()">Cancel</BSButton>
                </BSModalFooter>
            </BSForm>
        </BSModal>
    </AuthorizeView>
}


@code {

    private List<Job> Jobs { get; set; }

    private List<Schedule> Schedules_ { get; set; }

    private Schedule NewSchedule { get; set; }

    private BSModal CreateModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = DbFactory.CreateDbContext();
        Jobs = await context.Jobs.OrderBy(job => job.JobName).ToListAsync();
        Schedules_ = await context.Schedules
            .Include(schedule => schedule.Job)
            .OrderBy(schedule => schedule.Job.JobName)
            .ThenBy(schedule => schedule.CronExpression)
            .ToListAsync();

        if (Jobs?.Count == 0)
        {
            return;
        }

        NewSchedule = new()
        {
            JobId = Jobs.Select(job => job.JobId).First(),
            IsEnabled = true
        };

    }

    private async Task ToggleEnabled(ChangeEventArgs args, Schedule schedule)
    {
        bool value = (bool)args.Value;
        try
        {
            var success = await Utility.ToggleScheduleEnabledAsync(configuration, schedule, value);
            if (success)
            {
                schedule.IsEnabled = !schedule.IsEnabled;
            }
            else
            {
                throw new Exception("Error sending command to the scheduler service");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error enabling/disabling schedule\n{ex.Message}");
        }
    }

    private async Task AddSchedule()
    {
        CreateModal.Hide();
        try
        {
            // Save the new schedule to the database.
            using var context = DbFactory.CreateDbContext();
            using var transaction = context.Database.BeginTransaction();
            context.Schedules.Add(NewSchedule);
            await context.SaveChangesAsync();
            // Send the schedule to the scheduler service.
            bool success = await Utility.SchedulerServiceSendCommandAsync(SchedulerCommand.CommandType.Add, NewSchedule);
            // Commit the database transaction if the scheduler received the schedule. Otherwise rollback the transaction.
            if (success)
            {
                transaction.Commit();
            }
            else
            {
                transaction.Rollback();
                throw new Exception("Error sending the new schedule to the scheduler service");
            }

            NewSchedule.Job = Jobs.First(job => job.JobId == NewSchedule.JobId);
            Schedules_.Add(NewSchedule);
            Schedules_ = Schedules_.OrderBy(sched => sched.Job.JobName).ThenBy(sched => sched.CronExpression).ToList();

            NewSchedule = new()
            {
                JobId = Jobs.Select(job => job.JobId).First(),
                IsEnabled = true
            };
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error adding schedule\n{ex.Message}");
        }
    }

    private async Task DeleteSchedule(Schedule schedule)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            using var transaction = context.Database.BeginTransaction();
            context.Schedules.Remove(schedule);
            await context.SaveChangesAsync();
            bool success = await Utility.SchedulerServiceSendCommandAsync(SchedulerCommand.CommandType.Delete, schedule);
            if (success)
            {
                transaction.Commit();
            }
            else
            {
                transaction.Rollback();
                throw new Exception("Error removing the schedule from the scheduler service");
            }

            Schedules_.Remove(schedule);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error deleting schedule\n{ex.Message}");
        }
    }

    private async Task SynchronizeSchedulerService()
    {
        try
        {
            var result = await Utility.SchedulerServiceSynchronize();
            if (!result)
            {
                await JS.InvokeVoidAsync("alert", $"Error synchronizing");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error synchronizing\n{ex.Message}");
        }
    }

}
