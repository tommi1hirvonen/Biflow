@page "/jobs/steps/{Id:guid}"

@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject IConfiguration configuration
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

@if (Job == null || Jobs == null)
{
    <p><em>Loading jobs...</em></p>
}
else
{
    <JobDetailsComponent CurrentJob="Job" Jobs="Jobs" />
}

<AuthorizeView Roles="Admin, Editor">
    <BSButton Color="Color.Success" @onclick="() => ModalAddStep.Show()">Add step</BSButton>
</AuthorizeView>
<AuthorizeView Roles="Admin, Editor, Operator">
    <BSButton Class="ml-3" @onclick="() => ExecuteModal.Show()" IsDisabled="@ExecuteButtonDisabled">
        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/play.svg")))
        Execute
    </BSButton>
    <div id="spinner_starting" class="spinner-border text-primary align-middle ml-3" hidden=@(!ExecuteButtonDisabled) role="status">
        <span class="sr-only">Loading...</span>
    </div>
</AuthorizeView>

<BSAlert Class="mt-3" Color="@ExecuteAlertColor" IsOpen="@ExecuteAlertOpen" OnDismiss="() => ExecuteAlertOpen = false" IsDismissible="true">@ExecuteMessage</BSAlert>

@if (Steps_ == null)
{
    <p class="mt-4"><em>Loading steps...</em></p>
}
else
{
    <div class="row col-9 col-md-6 col-lg-5 mt-4 mb-4">
        <div class="input-group">
            <label class="sr-only">Search</label>
            <div class="input-group-prepend">
                <div class="input-group-text rounded-left">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
                </div>
            </div>
            <input type="text" class="form-control" @bind-value="StepsFilterText" @bind-value:event="oninput" placeholder="Search" />
        </div>
    </div>

    <div class="card shadow-sm pt-2 mt-4">
        <table id="steps_table" class="table table-sm table-hover">
            <thead>
                <tr>
                    <th>
                        Step name
                    </th>
                    <th></th>
                    <th>
                        Execution phase
                    </th>
                    <th>
                        Step type
                    </th>
                    <th>
                        Enabled
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Steps_.Where(step => step.StepName.ContainsIgnoreCase(StepsFilterText)))
                {
                    <tr>
                        <td class="align-middle">
                            <a class="text-dark" asp-page="./StepDetails/Edit" asp-route-id="@item.StepId">
                                @item.StepName
                            </a>
                        </td>
                        <td align="left">
                            <div class="btn-group btn-row">
                                @*Open corresponding modal popup to display step execution details*@
                                <BSButton Size="Size.Small" Color="Color.Light" @onclick="() => ShowStepDetailsModal(item)">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
                                </BSButton>

                                <AuthorizeView Roles="Admin, Editor">
                                    <BSDropdown IsGroup="true">
                                        <BSDropdownToggle Size="Size.Small" Color="Color.Light">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/copy.svg")))
                                        </BSDropdownToggle>
                                        <BSDropdownMenu>
                                            <BSDropdownHeader>Copy to</BSDropdownHeader>
                                            <BSDropdownItem @onclick="() => CopyStep(item, Job)">here</BSDropdownItem>
                                            <BSDropdownItem IsDivider="true"></BSDropdownItem>
                                            @foreach (var job in Jobs.Where(job => job.JobId != Job.JobId))
                                            {
                                                <BSDropdownItem @onclick="() => CopyStep(item, job)">@job.JobName</BSDropdownItem>
                                            }
                                        </BSDropdownMenu>
                                    </BSDropdown>

                                    <BSDropdown IsGroup="true">
                                        <BSDropdownToggle Size="Size.Small" Color="Color.Light">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                                        </BSDropdownToggle>
                                        <BSDropdownMenu>
                                            <BSDropdownHeader>Delete?</BSDropdownHeader>
                                            <BSDropdownItem @onclick="() => DeleteStep(item)">Confirm</BSDropdownItem>
                                        </BSDropdownMenu>
                                    </BSDropdown>
                                </AuthorizeView>
                            </div>
                        </td>
                        <td class="align-middle">
                            @item.ExecutionPhase
                        </td>
                        <td class="align-middle" title="@item.StepType" aria-label="@item.StepType">
                            <StepTypeIconComponent Step="item" />
                        </td>
                        <td class="align-middle">
                            <AuthorizeView Roles="Admin, Editor">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="() => ToggleEnabled(item)">
                                    <label class="custom-control-label" style="cursor: pointer;" for="enabled_@item.StepId" aria-label="enabled"></label>
                                </div>
                            </AuthorizeView>
                            <AuthorizeView Roles="Operator, Viewer">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" disabled id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)">
                                    <label class="custom-control-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                </div>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}

@if (NewStep != null)
{
    // New step modal
    <AuthorizeView Roles="Admin, Editor">
        <BSModal @ref="ModalAddStep" Size="Size.Large">
            <BSModalHeader OnClick="() => ModalAddStep.Hide()">New step</BSModalHeader>
            <BSForm Model="NewStep" OnValidSubmit="AddStep" Context="_context">
                <BSModalBody>
                    <div class="row">
                        <div class="col mx-3">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <BSFormGroup>
                                <BSLabel>Step name</BSLabel>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-3.svg")))
                                        </div>
                                    </div>
                                    <BSInput InputType="InputType.Text" @bind-Value="NewStep.StepName"></BSInput>
                                </div>
                            </BSFormGroup>
                            <BSFormRow>
                                <BSFormGroup Class="col">
                                    <BSLabel>Execution phase</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/layers.svg")))
                                            </div>
                                        </div>
                                        <BSInput InputType="InputType.Number" @bind-Value="NewStep.ExecutionPhase"></BSInput>
                                    </div>
                                </BSFormGroup>
                                <BSFormGroup Class="col">
                                    <BSLabel>Step type</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tool.svg")))
                                            </div>
                                        </div>
                                        <BSInput InputType="InputType.Select" @bind-Value="NewStep.StepType" @oninput="ResetNewStepError">
                                            <option>SQL</option>
                                            <option>SSIS</option>
                                            <option>PIPELINE</option>
                                            <option>JOB</option>
                                        </BSInput>
                                    </div>
                                </BSFormGroup>
                                <BSFormGroup Class="col">
                                    <BSLabel>Retry attempts</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/repeat.svg")))
                                            </div>
                                        </div>
                                        <BSInput InputType="InputType.Number" @bind-Value="NewStep.RetryAttempts"></BSInput>
                                    </div>
                                </BSFormGroup>
                                <BSFormGroup Class="col">
                                    <BSLabel>Retry interval (min)</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/clock.svg")))
                                            </div>
                                        </div>
                                        <BSInput InputType="InputType.Number" @bind-Value="NewStep.RetryIntervalMinutes"></BSInput>
                                    </div>
                                </BSFormGroup>
                            </BSFormRow>
                            @if (NewStep.StepType == "SQL" || NewStep.StepType == "SSIS")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col-lg-6">
                                        <BSLabel>Connection</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/database.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Select" @bind-Value="NewStep.ConnectionId">
                                                @foreach (var connection in Connections)
                                                        {
                                                    <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                                                        }
                                            </BSInput>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                            }
                            @if (NewStep.StepType == "SQL")
                            {
                                <BSFormGroup>
                                    <BSLabel>SQL statement</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/code.svg")))
                                            </div>
                                        </div>
                                        <BSInput InputType="InputType.TextArea" @bind-Value="NewStep.SqlStatement" style="font-family: monospace;" rows="3" @oninput="ResetNewStepError"></BSInput>
                                    </div>
                                </BSFormGroup>
                            }
                            @if (NewStep.StepType == "SSIS")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Folder name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/folder.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Text" @bind-Value="NewStep.PackageFolderName" @onchange="ResetNewStepError"></BSInput>
                                        </div>
                                    </BSFormGroup>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Project name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/briefcase.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Text" @bind-Value="NewStep.PackageProjectName" @oninput="ResetNewStepError"></BSInput>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Package name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/package.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Text" @bind-Value="NewStep.PackageName" @oninput="ResetNewStepError"></BSInput>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <div class="custom-control custom-checkbox custom-control-inline">
                                        <input type="checkbox" class="custom-control-input" id="new_step_32bit_mode" @bind-value="NewStep.ExecuteIn32BitMode">
                                        <label class="custom-control-label" for="new_step_32bit_mode">Execute in 32 bit mode</label>
                                    </div>
                                </BSFormRow>
                            }
                            @if (NewStep.StepType == "PIPELINE")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Data Factory</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/cpu.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Select" @bind-Value="NewStep.DataFactoryId">
                                                @foreach (var dataFactory in DataFactories)
                                                        {
                                                    <option value="@dataFactory.DataFactoryId">@dataFactory.DataFactoryName</option>
                                                        }
                                            </BSInput>
                                        </div>
                                    </BSFormGroup>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Pipeline name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/git-commit.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Text" @bind-Value="NewStep.PipelineName" @oninput="ResetNewStepError"></BSInput>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                            }
                            @if (NewStep.StepType == "JOB")
                            {
                                <BSFormRow>
                                    <BSFormGroup>
                                        <BSLabel>Job</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/loader.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Select" @bind-Value="NewStep.JobToExecuteId">
                                                @foreach (var job in Jobs.Where(job => job.JobId != Job.JobId))
                                                        {
                                                    <option value="@job.JobId">@job.JobName</option>
                                                        }
                                            </BSInput>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <div class="custom-control custom-checkbox custom-control-inline">
                                        <input type="checkbox" class="custom-control-input" id="new_step_job_synchronized" @bind-value="NewStep.JobExecuteSynchronized">
                                        <label class="custom-control-label" for="new_step_job_synchronized">Synchronized</label>
                                    </div>
                                </BSFormRow>
                            }
                            <p class="text-danger">@NewStepError</p>

                            @if (NewStep.StepType == "SSIS")
                            {
                                <p />
                                <h5>Parameters</h5>
                                <table id="parameters_table" class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Value</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var param in NewStepParameters)
                                        {
                                            <tr>
                                                <td>
                                                    <BSBasicInput Size="Size.Small" @bind-Value="param.ParameterName"></BSBasicInput>
                                                </td>
                                                <td>
                                                    <BSBasicInput Size="Size.Small" @bind-Value="param.ParameterValue"></BSBasicInput>
                                                </td>
                                                <td>
                                                    <BSButton Color="Color.Light" Size="Size.Small" @onclick="() => NewStepParameters.Remove(param)">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/delete.svg")))
                                                    </BSButton>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <BSButton Color="Color.Light" Size="Size.Small" @onclick="() => NewStepParameters.Add(new Parameter())">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/plus.svg")))
                                </BSButton>
                            }
                        </div>
                    </div>
                </BSModalBody>
                <BSModalFooter>
                    <BSButton ButtonType="ButtonType.Submit" Color="Color.Success">Create</BSButton>
                    <BSButton Color="Color.Secondary" @onclick="() => ModalAddStep.Hide()">Cancel</BSButton>
                </BSModalFooter>
            </BSForm>
        </BSModal>
    </AuthorizeView>
}

<StepDetailsModal @ref="StepDetailsModal" Step="ModalStep" />

@if (Steps_ != null)
{
    // Execute modal
    <AuthorizeView Roles="Admin, Editor, Operator">
        <BSModal @ref="ExecuteModal" Size="Size.Large">
            <BSModalHeader OnClick="() => ExecuteModal.Hide()">Execute steps</BSModalHeader>
            <BSModalBody>
                <div class="row">
                    <div class="input-group mx-5">
                        <label class="sr-only">Search</label>
                        <div class="input-group-prepend">
                            <div class="input-group-text rounded-left">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
                            </div>
                        </div>
                        <input type="text" class="form-control" @bind-value="ExecuteFilterText" @bind-value:event="oninput" placeholder="Search" autocomplete="off" />
                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th class="align-top">
                                    <div class="custom-control custom-control-inline custom-checkbox">
                                        <input type="checkbox" class="custom-control-input" id="execute_check_all"
                                               checked=@(Steps_.Count == StepsToExecute.Count)
                                               @onchange="eventArgs => ToggleStepsExecuteAll(eventArgs.Value)">
                                        <label class="custom-control-label" for="execute_check_all">Step name</label>
                                    </div>
                                </th>
                                <th>
                                    Execution phase
                                </th>
                                <th>
                                    Step type
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var step in Steps_.Where(step => step.StepName.ContainsIgnoreCase(ExecuteFilterText)))
                            {
                                <tr>
                                    <td>
                                        <div class="custom-control custom-control-inline custom-checkbox">
                                            <input type="checkbox" class="custom-control-input" name="execute_checkbox" id="execute_@step.StepId"
                                                   checked=@(StepsToExecute.Contains(step.StepId))
                                                   @onchange="eventArgs => ToggleStepExecute(step, eventArgs.Value)">
                                            <label class="custom-control-label" for="execute_@step.StepId">@step.StepName</label>
                                        </div>
                                    </td>
                                    <td>
                                        @step.ExecutionPhase
                                    </td>
                                    <td>
                                        <StepTypeIconComponent Step="step" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </BSModalBody>
            <BSModalFooter>
                <BSButton Color="Color.Primary" @onclick="Execute">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/play.svg")))
                    Execute
                </BSButton>
                <BSButton Color="Color.Secondary" @onclick="() => ExecuteModal.Hide()">Cancel</BSButton>
            </BSModalFooter>
        </BSModal>
    </AuthorizeView>
}


@code {

    [Parameter]
    public Guid Id { get; set; }

    private Job Job { get; set; }
    private IList<Job> Jobs { get; set; }

    private IList<Step> Steps_ { get; set; }

    private IList<Connection> Connections { get; set; }
    private IList<DataFactory> DataFactories { get; set; }

    private Step NewStep { get; set; }
    private IList<Parameter> NewStepParameters { get; set; } = new List<Parameter>();

    private BSModal ModalAddStep { get; set; }

    private string NewStepError { get; set; } = string.Empty;

    private StepDetailsModal StepDetailsModal { get; set; }
    private Step ModalStep { get; set; }

    private BSModal ExecuteModal { get; set; }
    private List<Guid> StepsToExecute { get; set; } = new();
    private bool ExecuteButtonDisabled { get; set; } = false;
    private Color ExecuteAlertColor { get; set; } = Color.Success;
    private bool ExecuteAlertOpen { get; set; } = false;
    private MarkupString ExecuteMessage { get; set; } = new MarkupString(string.Empty);

    private string StepsFilterText { get; set; } = string.Empty;
    private string ExecuteFilterText { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        Jobs = await context.Jobs.OrderBy(job => job.JobName).ToListAsync();

        DataFactories = await context.DataFactories.OrderBy(df => df.DataFactoryName).ToListAsync();
        Connections = await context.Connections.OrderBy(conn => conn.ConnectionName).ToListAsync();

        await LoadData(context);
    }

    private async Task LoadData(EtlManagerContext context)
    {
        Job = await context.Jobs
                .Include(job => job.Steps)
                .ThenInclude(step => step.DataFactory)
                .Include(job => job.Subscriptions)
                .FirstOrDefaultAsync(job => job.JobId == Id);
        Steps_ = Job.Steps.OrderBy(step => step.ExecutionPhase).ThenBy(step => step.StepName).ToList();
        InitializeNewStep();
    }

    protected override async Task OnParametersSetAsync()
    {
        // The child component can navigate between jobs.
        // If the job is changed, the Id parameter of this component will change
        // and this method will be called.
        using var context = DbFactory.CreateDbContext();
        await LoadData(context);
    }

    private async Task ToggleEnabled(Step step)
    {
        try
        {
            await Utility.ToggleStepEnabled(configuration, step);
            step.IsEnabled = !step.IsEnabled;
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error enabling/disabling step");
        }
    }

    private async Task DeleteStep(Step step)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Steps.Remove(step);
            await context.SaveChangesAsync();
            Steps_.Remove(step);
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error deleting step");
        }
    }

    private async Task CopyStep(Step step, Job job)
    {
        try
        {
            await Utility.StepCopy(configuration, step.StepId, job.JobId, "admin");
            // If the steps was copied to this job, reload steps.
            if (Job.JobId == job.JobId)
            {
                using var context = DbFactory.CreateDbContext();
                Steps_ = await context.Steps
                    .Where(step => step.JobId == Job.JobId)
                    .Include(step => step.DataFactory)
                    .OrderBy(step => step.ExecutionPhase)
                    .ThenBy(step => step.StepName)
                    .ToListAsync();
            }
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error copying step");
        }
    }

    private async Task AddStep()
    {
        NewStepError = string.Empty;

        if (NewStep.StepType == "SQL" && (string.IsNullOrEmpty(NewStep.SqlStatement) || NewStep.ConnectionId == null))
        {
            NewStepError = "SQL statement and connection cannot be empty";
            return;
        }
        else if (NewStep.StepType == "SSIS" && (string.IsNullOrEmpty(NewStep.PackageFolderName)
            || string.IsNullOrEmpty(NewStep.PackageProjectName) || string.IsNullOrEmpty(NewStep.PackageName)
            || NewStep.ConnectionId == null))
        {
            NewStepError = "Connection, folder, project and package names cannot be empty";
            return;
        }
        else if (NewStep.StepType == "PIPELINE" && (string.IsNullOrEmpty(NewStep.PipelineName) || NewStep.DataFactoryId == null))
        {
            NewStepError = "Pipeline name and Data Factory cannot be empty";
            return;
        }
        else if (NewStep.StepType == "JOB" && NewStep.JobToExecuteId == null)
        {
            NewStepError = "Job cannot be empty";
            return;
        }

        if (NewStep.StepType == "SSIS" && !ParametersCheck())
        {
            return;
        }

        try
        {
            if (NewStep.StepType == "SSIS")
            {
                NewStep.Parameters = new List<Parameter>();
                foreach (var param in NewStepParameters)
                {
                    NewStep.Parameters.Add(param);
                }
            }

            using var context = DbFactory.CreateDbContext();
            context.Steps.Add(NewStep);
            await context.SaveChangesAsync();

            Steps_.Add(NewStep);
            Steps_ = Steps_.OrderBy(step => step.ExecutionPhase).ThenBy(step => step.StepName).ToList();

            InitializeNewStep();

            ModalAddStep?.Hide();
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error adding step");
        }
    }

    private bool ParametersCheck()
    {
        var parameters = NewStepParameters.OrderBy(param => param.ParameterName).ToList();

        foreach (var param in parameters)
        {
            if (string.IsNullOrEmpty(param.ParameterName) || string.IsNullOrEmpty(param.ParameterValue))
            {
                NewStepError = "Parameter name and value cannot be empty";
                return false;
            }
        }

        for (var i = 0; i < parameters.Count - 1; i++)
        {
            if (parameters[i + 1].ParameterName == parameters[i].ParameterName)
            {
                NewStepError = "Duplicate parameter names";
                return false;
            }
        }

        return true;
    }

    private void InitializeNewStep()
    {
        NewStep = new()
        {
            JobId = Id,
            RetryAttempts = 0,
            RetryIntervalMinutes = 0,
            StepType = "SQL",
            IsEnabled = true,
            ConnectionId = Connections?.FirstOrDefault()?.ConnectionId,
            DataFactoryId = DataFactories?.FirstOrDefault()?.DataFactoryId
        };
    }

    private void ResetNewStepError()
    {
        NewStepError = string.Empty;
    }

    private void ShowStepDetailsModal(Step step)
    {
        ModalStep = step;
        StepDetailsModal.Modal.Show();
    }

    private void ToggleStepExecute(Step step, object checkedValue)
    {
        var execute = (bool)checkedValue;
        if (!execute && StepsToExecute.Contains(step.StepId))
        {
            StepsToExecute.Remove(step.StepId);
        }
        else if (execute && !StepsToExecute.Contains(step.StepId))
        {
            StepsToExecute.Add(step.StepId);
        }
    }

    private void ToggleStepsExecuteAll(object checkedValue)
    {
        var execute = (bool)checkedValue;
        StepsToExecute.Clear();
        if (execute)
        {
            foreach (var step in Steps_)
            {
                StepsToExecute.Add(step.StepId);
            }
        }
    }

    private async Task Execute()
    {
        // Filter the list based on user input (StepsFilterText).
        var stepsFiltered = Steps_.Where(step => step.StepName.ContainsIgnoreCase(ExecuteFilterText)).ToList();
        var stepsToExecuteFiltered = StepsToExecute.Where(id => stepsFiltered.Where(step => step.StepId == id).Any()).ToList();

        if (stepsToExecuteFiltered.Count == 0)
        {
            return;
        }

        ExecuteModal.Hide();

        ExecuteButtonDisabled = true;
        string user = HttpContextAccessor.HttpContext.User?.Identity?.Name;
        Guid executionId;
        try
        {
            executionId = await Utility.StartExecution(configuration, Job, user, stepsToExecuteFiltered.Select(id => id.ToString()).ToList());
            ExecuteAlertColor = Color.Success;
            ExecuteMessage = new(@"Job started successfully - <a class=""alert-link"" href=""/"">monitor execution</a>");
        }
        catch (Exception ex)
        {
            ExecuteAlertColor = Color.Danger;
            ExecuteMessage = new("Error starting execution:" + ex.Message);
        }

        StepsToExecute.Clear();
        ExecuteAlertOpen = true;
        ExecuteButtonDisabled = false;
    }

}
