@page "/jobs/{DetailsPage}/{Id:guid}"

@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject IConfiguration configuration
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor 

@if (Jobs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col">
            <BSDropdown>
                <BSDropdownToggle Color="Color.Secondary">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/loader.svg")))
                    @CurrentJob.JobName
                </BSDropdownToggle>
                <BSDropdownMenu>
                    <BSDropdownHeader>Show</BSDropdownHeader>
                    @foreach (var job in Jobs)
                    {
                        <NavLink class="btn dropdown-item" href="@("jobs/" + DetailsPage + "/" + job.JobId)">@job.JobName</NavLink>
                    }
                </BSDropdownMenu>
            </BSDropdown>
        </div>

        <div class="col-xl d-xl-flex justify-content-xl-end mt-4 mt-xl-0">
            <div class="btn-toolbar">
                <BSButton Color="Subscribed ? Color.Success : Color.Secondary" @onclick="ToggleSubscription">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/mail.svg")))
                    Subscribe
                </BSButton>

                <AuthorizeView Roles="Admin, Editor">
                    <BSDropdown Class="ml-3" DropdownDirection="DropdownDirection.Left">
                        <BSDropdownToggle Color="BlazorStrap.Color.Secondary">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-2.svg")))
                            Rename
                        </BSDropdownToggle>
                        <BSDropdownMenu Class="p-4" style="min-width: 25rem;">
                            <BSForm Model="EditJob" OnValidSubmit="UpdateJob" Context="_context">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <BSFormGroup>
                                    <BSLabel for="name">New name</BSLabel>
                                    <BSInput id="name" InputType="InputType.Text" @bind-Value="EditJob.JobName" autocomplete="off"></BSInput>
                                </BSFormGroup>
                                <BSButton Size="Size.Small" ButtonType="ButtonType.Submit" Color="Color.Success">Save</BSButton>
                            </BSForm>
                        </BSDropdownMenu>
                    </BSDropdown>

                    <BSDropdown Class="ml-3" DropdownDirection="DropdownDirection.Left">
                        <BSDropdownToggle Color="BlazorStrap.Color.Secondary">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                            Delete
                        </BSDropdownToggle>
                        <BSDropdownMenu>
                            <BSDropdownHeader>Delete job?</BSDropdownHeader>
                            <BSDropdownItem @onclick="DeleteJob">Confirm</BSDropdownItem>
                        </BSDropdownMenu>
                    </BSDropdown>
                </AuthorizeView>
            </div>
        </div>
    </div>

    <div class="row flex-column-reverse flex-xl-row align-items-center">
        <div class="col-xl-7">
            <ul class="nav nav-pills mt-4 mb-4" role="tablist">
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="@("jobs/steps/" + CurrentJob.JobId)">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/list.svg")))
                        Steps
                    </NavLink>
                </li>
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="@("jobs/dependencies/" + CurrentJob.JobId)">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/diagram-3-fill.svg")))
                        Dependencies
                    </NavLink>
                </li>
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="@("jobs/schedules/" + CurrentJob.JobId)">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/calendar.svg")))
                        Schedules
                    </NavLink>
                </li>
                <li class="nav-item" role="presentation">
                    <NavLink class="nav-link" href="@("jobs/jobhistory/" + CurrentJob.JobId)">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/activity.svg")))
                        History
                    </NavLink>
                </li>
            </ul>
        </div>
        <div class="col-xl-5 d-xl-flex justify-content-xl-end mt-4 mt-xl-0">
            <div class="btn-toolbar align-items-center">
                <AuthorizeView Roles="Admin, Editor">
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" id="job_enabled_toggle" checked="@(CurrentJob.IsEnabled ? "checked" : null)" @onchange="ToggleJobEnabled">
                        <label class="custom-control-label" style="cursor: pointer;" for="job_enabled_toggle">Enabled</label>
                    </div>
                    <div class="custom-control custom-switch ml-4">
                        <input type="checkbox" class="custom-control-input" id="dependency_mode_toggle" checked="@(CurrentJob.UseDependencyMode ? "checked" : null)" @onchange="ToggleDependencyMode">
                        <label class="custom-control-label" style="cursor: pointer;" for="dependency_mode_toggle">Dependency mode</label>
                    </div>
                </AuthorizeView>
                <AuthorizeView Roles="Operator, Viewer">
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input" disabled id="job_enabled_toggle" checked="@(CurrentJob.IsEnabled ? "checked" : null)">
                        <label class="custom-control-label" for="job_enabled_toggle">Enabled</label>
                    </div>
                    <div class="custom-control custom-switch ml-4">
                        <input type="checkbox" class="custom-control-input" disabled id="dependency_mode_toggle" checked="@(CurrentJob.UseDependencyMode ? "checked" : null)">
                        <label class="custom-control-label" for="dependency_mode_toggle">Dependency mode</label>
                    </div>
                </AuthorizeView>
            </div>
        </div>
    </div>

}

@if (DetailsPage == "steps")
{
    <StepsComponent Id="Id" />
}
else if (DetailsPage == "jobhistory")
{
    <JobHistoryComponent Id="Id" />
}
else if (DetailsPage == "dependencies")
{
    <DependenciesComponent Id="Id" />
}
else
{
    <p>No component to show.</p>
}


@code {
    [Parameter]
    public string DetailsPage { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    public Job CurrentJob { get; set; }

    public IList<Job> Jobs { get; set; }

    private Job EditJob { get; set; } = new();

    private bool Subscribed { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Jobs = await context.Jobs.OrderBy(job => job.JobName).ToListAsync();
        await LoadData(context);
    }

    protected override async Task OnParametersSetAsync()
    {
        using var context = DbFactory.CreateDbContext();
        await LoadData(context);
    }

    private async Task LoadData(EtlManagerContext context)
    {
        CurrentJob = await context.Jobs.Include(job => job.Subscriptions).FirstOrDefaultAsync(job => job.JobId == Id);
        EditJob.JobName = CurrentJob.JobName;
        var user = HttpContextAccessor.HttpContext.User?.Identity?.Name;
        if (CurrentJob.Subscriptions != null && CurrentJob.Subscriptions.Select(subscription => subscription.Username).Contains(user))
        {
            Subscribed = true;
        }
        else
        {
            Subscribed = false;
        }
    }

    private async Task UpdateJob()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            CurrentJob.JobName = EditJob.JobName;
            context.Attach(CurrentJob).State = EntityState.Modified;
            await context.SaveChangesAsync();
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error updating job");
        }
    }

    private async Task DeleteJob()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Jobs.Remove(CurrentJob);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("jobs");
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error deleting job");
        }
    }

    private async Task ToggleJobEnabled()
    {
        try
        {
            await Utility.ToggleJobEnabled(configuration, CurrentJob);
            CurrentJob.IsEnabled = !CurrentJob.IsEnabled;
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error enabling/disabling job");
        }
    }

    private async Task ToggleDependencyMode()
    {
        try
        {
            await Utility.ToggleJobDependencyMode(configuration, CurrentJob);
            CurrentJob.UseDependencyMode = !CurrentJob.UseDependencyMode;
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error toggling job dependency mode");
        }
    }

    private async Task ToggleSubscription()
    {
        var username = HttpContextAccessor.HttpContext.User?.Identity?.Name;
        using var context = DbFactory.CreateDbContext();
        var subscription = await context.Subscriptions
            .Where(subscription => subscription.JobId == CurrentJob.JobId && subscription.Username == username)
            .FirstOrDefaultAsync();
        try
        {
            if (subscription != null)
            {
                context.Subscriptions.Remove(subscription);
            }
            else
            {
                context.Subscriptions.Add(new Subscription { JobId = CurrentJob.JobId, Username = username });
            }
            await context.SaveChangesAsync();
            Subscribed = !Subscribed;
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error toggling subscription");
        }
    }

}
