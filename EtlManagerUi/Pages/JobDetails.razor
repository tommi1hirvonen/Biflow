@page "/jobs/{DetailsPage}/{Id:guid}"

@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject DbHelperService DbHelperService
@inject SchedulerService SchedulerService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IHxMessengerService Messenger

<style>
    .dropdown-menu {
        @*Increase dropdown menu z-index so that it is displayed over the sticky-top div in StepsComponent.*@
        z-index: 1100;
    }
</style>

<div class="row">
    <div class="col-auto">
        <HxButtonGroup>
            <HxDropdown>
                <HxDropdownToggle Color="ThemeColor.Secondary">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/loader.svg")))
                    @(CurrentJob?.JobName ?? "Loading...")
                </HxDropdownToggle>
                <HxDropdownMenu>
                    <HxDropdownHeader>Show</HxDropdownHeader>
                    @if (Jobs is not null)
                    {
                        @foreach (var job in Jobs)
                        {
                            <NavLink class="btn dropdown-item" href="@("jobs/" + DetailsPage + "/" + job.JobId)">@job.JobName</NavLink>
                        }
                    }
                </HxDropdownMenu>
            </HxDropdown>
            <HxButton 
                      Color="ThemeColor.Secondary"
                      @onclick="() => DescriptionOpen = !DescriptionOpen"
                    CssClass="@(string.IsNullOrWhiteSpace(CurrentJob?.JobDescription) ? "disabled" : DescriptionOpen ? "active" : null)">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
            </HxButton>
        </HxButtonGroup>

    </div>

    <div class="col-xl d-xl-flex justify-content-xl-end mt-4 mt-xl-0">
        <div class="btn-toolbar">
            <AuthorizeView Roles="Admin, Editor">
                @*Dropdown to change the current job's name*@
                <HxDropdown>
                    <HxDropdownToggle Color="ThemeColor.Secondary">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-2.svg")))
                        Edit
                    </HxDropdownToggle>
                    <HxDropdownContent CssClass="dropdown-menu-xl-right p-4">
                        <EditForm Model="EditJob" OnValidSubmit="UpdateJob" Context="_context" style="min-width: 30rem;">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div>
                                <label class="form-label">Name</label>
                                <InputText class="form-control" @bind-Value="EditJob.JobName" autocomplete="off"></InputText>
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Description</label>
                                <InputTextArea class="form-control form-control-sm" @bind-Value="EditJob.JobDescription" rows="5"></InputTextArea>
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Max parallel steps (0 = use default)</label>
                                <InputNumber class="form-control form-control-sm" @bind-Value="EditJob.MaxParallelSteps"></InputNumber>
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Overtime notification limit (min, 0 = indefinite)</label>
                                <InputNumber class="form-control form-control-sm" @bind-Value="EditJob.OvertimeNotificationLimitMinutes"></InputNumber>
                            </div>
                            <HxSubmit CssClass="mt-3" Size="ButtonSize.Small" Color="ThemeColor.Success">Save</HxSubmit>
                        </EditForm>
                    </HxDropdownContent>
                </HxDropdown>

                @*Dropdown to delete the current job*@
                <HxDropdown CssClass="ms-3">
                    <HxDropdownToggle Color="ThemeColor.Secondary">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                        Delete
                    </HxDropdownToggle>
                    <HxDropdownMenu CssClass="dropdown-menu-xl-right">
                        <HxDropdownHeader>Delete job?</HxDropdownHeader>
                        <HxDropdownItem @onclick="DeleteJob">Confirm</HxDropdownItem>
                    </HxDropdownMenu>
                </HxDropdown>
            </AuthorizeView>
        </div>
    </div>
</div>

@if (DescriptionOpen && !string.IsNullOrWhiteSpace(CurrentJob?.JobDescription))
{
    <div class="row mt-3">
        <div class="col">
            <text class="text-secondary font-italic" style="white-space: pre-line;">@CurrentJob?.JobDescription</text>
        </div>
    </div>
}


<div class="row flex-column-reverse flex-xl-row align-items-center">
    <div class="col-xl-7">
        <ul class="nav nav-pills mt-4 mb-4" role="tablist">
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@("jobs/steps/" + CurrentJob?.JobId)">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/list.svg")))
                    Steps
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@("jobs/dependencies/" + CurrentJob?.JobId)">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/diagram-3-fill.svg")))
                    Dependencies
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@("jobs/schedules/" + CurrentJob?.JobId)">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/calendar.svg")))
                    Schedules
                </NavLink>
            </li>
            <li class="nav-item" role="presentation">
                <NavLink class="nav-link" href="@("jobs/jobhistory/" + CurrentJob?.JobId)">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/activity.svg")))
                    History
                </NavLink>
            </li>
        </ul>
    </div>
    <div class="col-xl-5 d-xl-flex justify-content-xl-end mt-4 mt-xl-0">
        <div class="btn-toolbar align-items-center">
            @*Show switches to display whether the jos is enabled or disabled and whether the job uses dependency mode or not.*@
            <AuthorizeView Roles="Admin, Editor">
                <div class="form-check form-switch">
                    <input type="checkbox" class="form-check-input" id="job_enabled_toggle" checked="@(CurrentJob?.IsEnabled ?? false ? "checked" : null)" @onchange="ToggleJobEnabled">
                    <label class="form-check-label" style="cursor: pointer;" for="job_enabled_toggle">Enabled</label>
                </div>
                <div class="form-check form-switch ms-4">
                    <input type="checkbox" class="form-check-input" id="dependency_mode_toggle" checked="@(CurrentJob?.UseDependencyMode ?? false ? "checked" : null)" @onchange="ToggleDependencyMode">
                    <label class="form-check-label" style="cursor: pointer;" for="dependency_mode_toggle">Dependency mode</label>
                </div>
                @*Only show StopOnFirstError setting if job uses execution phase mode.*@
                @if (CurrentJob?.UseDependencyMode == false)
                {
                    <div class="form-check form-switch ms-4">
                        <input type="checkbox" class="form-check-input" id="stop_on_first_error_toggle" checked="@(CurrentJob?.StopOnFirstError ?? false ? "checked" : null)" @onchange="ToggleStopOnFirstError">
                        <label class="form-check-label" style="cursor: pointer;" for="stop_on_first_error_toggle">Stop on first error</label>
                    </div>
                }
            </AuthorizeView>
            <AuthorizeView Roles="Operator, Viewer">
                <div class="form-check form-switch">
                    <input type="checkbox" class="form-check-input" disabled id="job_enabled_toggle" checked="@(CurrentJob?.IsEnabled ?? false ? "checked" : null)">
                    <label class="form-check-label" for="job_enabled_toggle">Enabled</label>
                </div>
                <div class="form-check form-switch ms-4">
                    <input type="checkbox" class="form-check-input" disabled id="dependency_mode_toggle" checked="@(CurrentJob?.UseDependencyMode ?? false ? "checked" : null)">
                    <label class="form-check-label" for="dependency_mode_toggle">Dependency mode</label>
                </div>
                @if (CurrentJob?.UseDependencyMode == false)
                {
                    <div class="form-check form-switch ms-4">
                        <input type="checkbox" class="form-check-input" disabled id="stop_on_first_error_toggle" checked="@(CurrentJob?.StopOnFirstError ?? false ? "checked" : null)">
                        <label class="form-check-label" for="stop_on_first_error_toggle">Stop on first error</label>
                    </div>
                }
            </AuthorizeView>
        </div>
    </div>
</div>


@if (DetailsPage == "steps")
{
    <StepsComponent Job="CurrentJob" Jobs="Jobs" Steps="Steps" Connections="Connections" DataFactories="DataFactories" AppRegistrations="AppRegistrations" FunctionApps="FunctionApps" />
}
else if (DetailsPage == "jobhistory")
{
    <JobHistoryComponent Id="Id" />
}
else if (DetailsPage == "dependencies")
{
    <DependenciesComponent Jobs="Jobs" Job="CurrentJob" Steps="Steps" Connections="Connections" DataFactories="DataFactories" AppRegistrations="AppRegistrations" FunctionApps="FunctionApps" />
}
else if (DetailsPage == "schedules")
{
    <SchedulesComponent Id="Id" />
}
else
{
    <p>No component to show.</p>
}


@code {
    [Parameter]
    public string? DetailsPage { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    private Guid PrevId { get; set; }

    private Job CurrentJob { get; set; } = null!;

    private List<Job> Jobs { get; set; } = null!;

    private List<Step> Steps { get; set; } = null!;

    private Job EditJob { get; set; } = new();

    private List<Connection>? Connections { get; set; }
    private List<DataFactory>? DataFactories { get; set; }
    private List<AppRegistration>? AppRegistrations { get; set; }
    private List<FunctionApp>? FunctionApps { get; set; }

    private string? Username => HttpContextAccessor.HttpContext?.User?.Identity?.Name;

    private bool DescriptionOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Jobs = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .Include(job => job.Subscriptions)
            .Include(job => job.JobParameters)
            .OrderBy(job => job.JobName)
            .ToListAsync();
        Connections = await context.Connections
            .AsNoTracking()
            .OrderBy(c => c.ConnectionName)
            .ToListAsync();
        DataFactories = await context.DataFactories
            .AsNoTracking()
            .OrderBy(df => df.DataFactoryName)
            .ToListAsync();
        AppRegistrations = await context.AppRegistrations
            .AsNoTracking()
            .OrderBy(app => app.AppRegistrationName)
            .ToListAsync();
        FunctionApps = await context.FunctionApps
            .AsNoTracking()
            .OrderBy(app => app.FunctionAppName)
            .ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != PrevId)
        {
            PrevId = Id;
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        CurrentJob = Jobs.First(job => job.JobId == Id);
        EditJob.JobName = CurrentJob.JobName;
        EditJob.JobDescription = CurrentJob.JobDescription;
        EditJob.MaxParallelSteps = CurrentJob.MaxParallelSteps;
        EditJob.OvertimeNotificationLimitMinutes = CurrentJob.OvertimeNotificationLimitMinutes;

        using var context = DbFactory.CreateDbContext();
        Steps = await context.Steps
            .AsNoTrackingWithIdentityResolution()
            .Include(step => step.Dependencies)
            .Include(step => step.Tags)
            .Include(step => (step as ParameterizedStep)!.StepParameters)
            .Where(step => step.JobId == CurrentJob.JobId)
            .ToListAsync();
            SortSteps();
    }

    private void SortSteps()
    {
        try
        {
            if (CurrentJob.UseDependencyMode)
            {
                var comparer = new TopologicalStepComparer(Steps);
                Steps.Sort(comparer);
            }
            else
            {
                Steps.Sort();
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error sorting steps", ex.Message);
        }
    }

    private async Task UpdateJob()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            CurrentJob.JobName = EditJob.JobName;
            CurrentJob.JobDescription = EditJob.JobDescription;
            CurrentJob.MaxParallelSteps = EditJob.MaxParallelSteps;
            CurrentJob.OvertimeNotificationLimitMinutes = EditJob.OvertimeNotificationLimitMinutes;
            context.Attach(CurrentJob).State = EntityState.Modified;
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            Messenger.AddError("Concurrency error", "The job was modified outside of this session. Reload the page to view the most recent values.");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error updating job", ex.Message);
        }
    }

    private async Task DeleteJob()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Jobs.Remove(CurrentJob);
            await context.SaveChangesAsync();
            await SchedulerService.DeleteJobAsync(CurrentJob);
            NavigationManager.NavigateTo("jobs");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting job", ex.Message);
        }
    }

    private async Task ToggleJobEnabled(ChangeEventArgs args)
    {
        bool value = (bool)args.Value!;
        try
        {
            await DbHelperService.ToggleJobEnabledAsync(CurrentJob, value);
            CurrentJob.IsEnabled = !CurrentJob.IsEnabled;
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling job", ex.Message);
        }
    }

    private async Task ToggleDependencyMode(ChangeEventArgs args)
    {
        bool value = (bool)args.Value!;
        try
        {
            await DbHelperService.ToggleJobDependencyModeAsync(CurrentJob, value);
            CurrentJob.UseDependencyMode = !CurrentJob.UseDependencyMode;
            SortSteps();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling mode", ex.Message);
        }
    }

    private async Task ToggleStopOnFirstError(ChangeEventArgs args)
    {
        bool value = (bool)args.Value!;
        try
        {
            await DbHelperService.ToggleJobStopOnFirstErrorAsync(CurrentJob, value);
            CurrentJob.StopOnFirstError = !CurrentJob.StopOnFirstError;
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling setting", ex.Message);
        }
    }

}
