@page "/account"

@inject IWebHostEnvironment WebHostEnvironment
@inject IHttpContextAccessor HttpContextAccessor
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS
@inject IConfiguration configuration  

<h4>Account</h4>
<p></p>
<h5>@Username</h5>

@if (User is null || Jobs is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row mt-3">
        <div class="col-md col-lg-5">
            <div class="card shadow-sm pt-3 px-3">
                <h6>
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/at-sign.svg")))
                    Email
                </h6>
                <BSForm Class="mt-3" Model="User" OnValidSubmit="SubmitEmail">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <BSFormGroup>
                        <BSLabel Class="sr-only">Email</BSLabel>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text rounded-left">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/at-sign.svg")))
                                </div>
                            </div>
                            <InputText class="form-control" type="email" @bind-Value="User.Email" placeholder="Email"></InputText>
                        </div>
                    </BSFormGroup>
                    <BSFormGroup>
                        <BSButton Color="Color.Success" ButtonType="ButtonType.Submit">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/save.svg")))
                            Save
                        </BSButton>
                    </BSFormGroup>
                </BSForm>
            </div>
            <div class="card shadow-sm pt-3 px-3 mt-4">
                <h6>
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/key.svg")))
                    Password
                </h6>
                <section class="mt-3">
                    <BSForm Model="PasswordModel_" OnValidSubmit="UpdatePassword">
                        <BSFormGroup>
                            <BSLabel>New password</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text rounded-left">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/lock.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" type="password" @bind-Value="PasswordModel_.Password"></InputText>
                            </div>
                        </BSFormGroup>
                        <BSFormGroup>
                            <BSLabel>Confirm new password</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text rounded-left">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/key.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" type="password" @bind-Value="PasswordModel_.ConfirmPassword"></InputText>
                            </div>
                        </BSFormGroup>
                        <BSFormGroup>
                            <BSButton Color="Color.Success" ButtonType="ButtonType.Submit">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/save.svg")))
                                Save
                            </BSButton>
                        </BSFormGroup>
                    </BSForm>
                </section>
            </div>
        </div>
        <div class="col-md col-lg-7">
            <div class="card shadow-sm pt-3 mt-4 mt-md-0">
                <h6 class="mx-3">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/mail.svg")))
                    Subscriptions
                </h6>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>
                                Job
                            </th>
                            <th>
                                Subscribed
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var job in Jobs)
                        {
                            <tr>
                                <td>
                                    @job.JobName
                                </td>
                                <td>
                                    <div class="custom-control custom-switch">
                                        <input type="checkbox" class="custom-control-input" id="@job.JobId"
                                               checked=@User.Subscriptions.Any(sub => sub.JobId == job.JobId)
                                               @onchange="() => ToggleSubscription(job)">
                                        <label class="custom-control-label" style="cursor: pointer;" for="@job.JobId"></label>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private string Username => HttpContextAccessor.HttpContext?.User?.Identity?.Name;

    private User User { get; set; }

    private IList<Job> Jobs { get; set; }

    private PasswordModel PasswordModel_ { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var context = DbFactory.CreateDbContext();
        User = await context.Users
            .Include(user => user.Subscriptions)
            .FirstOrDefaultAsync(user => user.Username == Username);
        Jobs = await context.Jobs.OrderBy(job => job.JobName).ToListAsync();
    }

    private async Task SubmitEmail()
    {
        try
        {
            var context = DbFactory.CreateDbContext();
            context.Attach(User).State = EntityState.Modified;
            await context.SaveChangesAsync();
            await JS.InvokeVoidAsync("alert", "Email updated successfully");
        }
        catch (Exception)
        {
            await JS.InvokeVoidAsync("alert", "Error saving email");
        }
    }

    private async Task UpdatePassword()
    {
        PasswordModel_.Password = PasswordModel_.Password ?? string.Empty;
        PasswordModel_.ConfirmPassword = PasswordModel_.ConfirmPassword ?? string.Empty;

        if (PasswordModel_.Password.Length < 1 || PasswordModel_.Password.Length > 250)
        {
            await JS.InvokeVoidAsync("alert", "The password length must be between 1 and 250");
            return;
        }

        if (!PasswordModel_.Password.Equals(PasswordModel_.ConfirmPassword))
        {
            await JS.InvokeVoidAsync("alert", "The two passwords do not match");
            return;
        }

        var result = await Utility.UpdatePasswordAsync(configuration, Username, PasswordModel_.Password);
        if (result)
        {
            await JS.InvokeVoidAsync("alert", "Password updated successfully");
            PasswordModel_.Password = null;
            PasswordModel_.ConfirmPassword = null;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error updating password");
        }
    }

    private async Task ToggleSubscription(Job job)
    {
        using var context = DbFactory.CreateDbContext();
        var subscription = User.Subscriptions.FirstOrDefault(sub => sub.JobId == job.JobId);
        try
        {
            if (subscription is not null)
            {
                context.Subscriptions.Remove(subscription);
                User.Subscriptions.Remove(subscription);
            }
            else
            {
                var newSub = new Subscription { JobId = job.JobId, Username = Username };
                context.Subscriptions.Add(newSub);
                User.Subscriptions.Add(newSub);
            }
            await context.SaveChangesAsync();
        }
        catch (Exception)
        {
            await JS.InvokeVoidAsync("alert", "Error toggling subscription");
        }
    }

    private class PasswordModel
    {
        public string Password { get; set; }

        public string ConfirmPassword { get; set; }
    }
}
