@page "/account"

@inject IWebHostEnvironment WebHostEnvironment
@inject IHttpContextAccessor HttpContextAccessor
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS
@inject DbHelperService DbHelperService

<h4>Account</h4>
<p></p>
<h5>
    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/user.svg")))
    @Username
</h5>

<div class="row mt-3">
    <div class="col-md col-lg-5">
        <div class="card shadow-sm">
            <h6 class="card-header">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/at-sign.svg")))
                Email
            </h6>
            <div class="card-body">
                @if (User is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <BSForm Class="mt-3" Model="User" OnValidSubmit="SubmitEmail">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <BSFormGroup>
                            <BSLabel Class="sr-only">Email</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text rounded-left">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/at-sign.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" type="email" @bind-Value="User.Email" placeholder="Email"></InputText>
                            </div>
                        </BSFormGroup>
                        <BSFormGroup>
                            <BSButton Color="Color.Success" ButtonType="ButtonType.Submit">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/save.svg")))
                                Save
                            </BSButton>
                        </BSFormGroup>
                    </BSForm>
                }
            </div>
        </div>
        <div class="card shadow-sm mt-4">
            <h6 class="card-header">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/key.svg")))
                Password
            </h6>
            <div class="card-body">
                @if (User is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                    {
                        <BSForm Model="PasswordModel_" OnValidSubmit="UpdatePassword">
                            <BSFormGroup>
                                <BSLabel>New password</BSLabel>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text rounded-left">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/lock.svg")))
                                        </div>
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="PasswordModel_.Password"></InputText>
                                </div>
                            </BSFormGroup>
                            <BSFormGroup>
                                <BSLabel>Confirm new password</BSLabel>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text rounded-left">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/key.svg")))
                                        </div>
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="PasswordModel_.ConfirmPassword"></InputText>
                                </div>
                            </BSFormGroup>
                            <BSFormGroup>
                                <BSButton Color="Color.Success" ButtonType="ButtonType.Submit">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/save.svg")))
                                    Save
                                </BSButton>
                            </BSFormGroup>
                        </BSForm>
                    }
                </div>
            </div>
        </div>
        <div class="col-md col-lg-7">
            <div class="card shadow-smmt-4 mt-md-0">
                <h6 class="card-header">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/mail.svg")))
                    Subscriptions
                </h6>
                <div class="card-body px-0">
                    @if (User is null || Jobs is null)
                    {
                        <p class="px-3"><em>Loading...</em></p>
                    }
                    else
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>
                                        Job
                                    </th>
                                    <th>
                                        Subscription
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var job in Jobs)
                                {
                                    <tr>
                                        <td>
                                            @job.JobName
                                        </td>
                                        <td>
                                            <div class="form-group">
                                                <div class="custom-control custom-radio custom-control-inline">
                                                    <input type="radio" class="custom-control-input" id="@(job.JobId.ToString() + "_none")"
                                                           checked=@(!User.Subscriptions.Any(sub => sub.JobId == job.JobId))
                                                           @onchange="() => RemoveSubscription(job)">
                                                    <label class="custom-control-label" for="@(job.JobId.ToString() + "_none")">None</label>
                                                </div>
                                                <div class="custom-control custom-radio custom-control-inline">
                                                    <input type="radio" class="custom-control-input" id="@(job.JobId.ToString() + "_failure")"
                                                           checked=@(User.Subscriptions.FirstOrDefault(sub => sub.JobId == job.JobId)?.SubscriptionType == SubscriptionType.OnFailure)
                                                           @onchange="() => ToggleSubscription(job, SubscriptionType.OnFailure)">
                                                    <label class="custom-control-label" for="@(job.JobId.ToString() + "_failure")">On failure</label>
                                                </div>
                                                <div class="custom-control custom-radio custom-control-inline">
                                                    <input type="radio" class="custom-control-input" id="@(job.JobId.ToString() + "_success")"
                                                           checked=@(User.Subscriptions.FirstOrDefault(sub => sub.JobId == job.JobId)?.SubscriptionType == SubscriptionType.OnSuccess)
                                                           @onchange="() => ToggleSubscription(job, SubscriptionType.OnSuccess)">
                                                    <label class="custom-control-label" for="@(job.JobId.ToString() + "_success")">On success</label>
                                                </div>
                                                <div class="custom-control custom-radio custom-control-inline">
                                                    <input type="radio" class="custom-control-input" id="@(job.JobId.ToString() + "_completion")"
                                                           checked=@(User.Subscriptions.FirstOrDefault(sub => sub.JobId == job.JobId)?.SubscriptionType == SubscriptionType.OnCompletion)
                                                           @onchange="() => ToggleSubscription(job, SubscriptionType.OnCompletion)">
                                                    <label class="custom-control-label" for="@(job.JobId.ToString() + "_completion")">On completion</label>
                                                </div>
                                                <div class="custom-control custom-checkbox custom-control-inline">
                                                    <input type="checkbox" class="custom-control-input" id="@(job.JobId.ToString() + "_overtime")"
                                                           checked=@(User.Subscriptions.FirstOrDefault(sub => sub.JobId == job.JobId)?.NotifyOnOvertime == true)
                                                           @onchange="args => ToggleSubscription(job, (bool)args.Value!)">
                                                    <label class="custom-control-label" for="@(job.JobId.ToString() + "_overtime")">On overtime</label>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>


@code {
    private string? Username => HttpContextAccessor.HttpContext?.User?.Identity?.Name;

    private User User { get; set; } = null!;

    private IList<Job> Jobs { get; set; } = null!;

    private PasswordModel PasswordModel_ { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<EtlManagerContext>(DbFactory.CreateDbContext);
        User = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(user => user.Subscriptions)
            .FirstOrDefaultAsync(user => user.Username == Username);
        Jobs = await context.Jobs
            .AsNoTrackingWithIdentityResolution()
            .OrderBy(job => job.JobName)
            .ToListAsync();
    }

    private async Task SubmitEmail()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Attach(User).State = EntityState.Modified;
            await context.SaveChangesAsync();
            await JS.InvokeVoidAsync("alert", "Email updated successfully");
        }
        catch (Exception)
        {
            await JS.InvokeVoidAsync("alert", "Error saving email");
        }
    }

    private async Task UpdatePassword()
    {
        if (Username is null)
        {
            await JS.InvokeVoidAsync("alert", "Error getting username from HttpContext");
            return;
        }

        PasswordModel_.Password = PasswordModel_.Password ?? string.Empty;
        PasswordModel_.ConfirmPassword = PasswordModel_.ConfirmPassword ?? string.Empty;

        if (PasswordModel_.Password.Length < 1 || PasswordModel_.Password.Length > 250)
        {
            await JS.InvokeVoidAsync("alert", "The password length must be between 1 and 250");
            return;
        }

        if (!PasswordModel_.Password.Equals(PasswordModel_.ConfirmPassword))
        {
            await JS.InvokeVoidAsync("alert", "The two passwords do not match");
            return;
        }

        var result = await DbHelperService.UpdatePasswordAsync(Username, PasswordModel_.Password);
        if (result)
        {
            await JS.InvokeVoidAsync("alert", "Password updated successfully");
            PasswordModel_.Password = null;
            PasswordModel_.ConfirmPassword = null;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error updating password");
        }
    }

    private async Task RemoveSubscription(Job job)
    {
        var subscription = User.Subscriptions.FirstOrDefault(sub => sub.JobId == job.JobId);
        if (subscription is null)
            return;

        using var context = DbFactory.CreateDbContext();
        try
        {
            context.Subscriptions.Remove(subscription);
            User.Subscriptions.Remove(subscription);
            await context.SaveChangesAsync();
        }
        catch (Exception)
        {
            await JS.InvokeVoidAsync("alert", "Error removing subscription");
        }
    }

    private async Task ToggleSubscription(Job job, bool onOvertime)
    {
        using var context = DbFactory.CreateDbContext();
        var subscription = User.Subscriptions.FirstOrDefault(sub => sub.JobId == job.JobId);
        try
        {
            if (subscription is not null && subscription.SubscriptionType is null && !onOvertime)
            {
                context.Subscriptions.Remove(subscription);
                User.Subscriptions.Remove(subscription);
            }
            else if (subscription is not null)
            {
                subscription.NotifyOnOvertime = onOvertime;
                context.Attach(subscription).State = EntityState.Modified;
            }
            else
            {
                var newSub = new Subscription { JobId = job.JobId, Username = Username, SubscriptionType = null, NotifyOnOvertime = onOvertime };
                context.Subscriptions.Add(newSub);
                User.Subscriptions.Add(newSub);
            }
            await context.SaveChangesAsync();
        }
        catch (Exception)
        {
            await JS.InvokeVoidAsync("alert", "Error toggling subscription");
        }
    }

    private async Task ToggleSubscription(Job job, SubscriptionType subscriptionType)
    {
        using var context = DbFactory.CreateDbContext();
        var subscription = User.Subscriptions.FirstOrDefault(sub => sub.JobId == job.JobId);
        try
        {
            if (subscription is not null)
            {
                subscription.SubscriptionType = subscriptionType;
                context.Attach(subscription).State = EntityState.Modified;
            }
            else
            {
                var newSub = new Subscription { JobId = job.JobId, Username = Username, SubscriptionType = subscriptionType };
                context.Subscriptions.Add(newSub);
                User.Subscriptions.Add(newSub);
            }
            await context.SaveChangesAsync();
        }
        catch (Exception)
        {
            await JS.InvokeVoidAsync("alert", "Error toggling subscription");
        }
    }

    private class PasswordModel
    {
        public string? Password { get; set; }

        public string? ConfirmPassword { get; set; }
    }
}
