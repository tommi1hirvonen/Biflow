@page "/account"

@inject IWebHostEnvironment WebHostEnvironment
@inject IHttpContextAccessor HttpContextAccessor
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS
@inject DbHelperService DbHelperService

<h4>Account</h4>
<p></p>
<h5>
    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/user.svg")))
    @Username
</h5>

<div class="row mt-3">
    <div class="col">
        <div class="card shadow-sm">
            <h6 class="card-header">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/at-sign.svg")))
                Email
            </h6>
            <div class="card-body">
                @if (User is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <BSForm Class="mt-3" Model="User" OnValidSubmit="SubmitEmail">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <BSFormGroup>
                            <BSLabel Class="sr-only">Email</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text rounded-left">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/at-sign.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" type="email" @bind-Value="User.Email" placeholder="Email"></InputText>
                            </div>
                        </BSFormGroup>
                        <BSFormGroup>
                            <BSButton Color="Color.Success" ButtonType="ButtonType.Submit">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/save.svg")))
                                Save
                            </BSButton>
                        </BSFormGroup>
                    </BSForm>
                }
            </div>
        </div>
    </div>
    <div class="col-lg mt-4 mt-lg-0">
        <div class="card shadow-sm">
            <h6 class="card-header">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/key.svg")))
                Password
            </h6>
            <div class="card-body">
                @if (User is null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <BSForm Model="PasswordModel_" OnValidSubmit="UpdatePassword">
                        <BSFormGroup>
                            <BSLabel>New password</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text rounded-left">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/lock.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" type="password" @bind-Value="PasswordModel_.Password"></InputText>
                            </div>
                        </BSFormGroup>
                        <BSFormGroup>
                            <BSLabel>Confirm new password</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text rounded-left">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/key.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" type="password" @bind-Value="PasswordModel_.ConfirmPassword"></InputText>
                            </div>
                        </BSFormGroup>
                        <BSFormGroup>
                            <BSButton Color="Color.Success" ButtonType="ButtonType.Submit">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/save.svg")))
                                Save
                            </BSButton>
                        </BSFormGroup>
                    </BSForm>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private string? Username => HttpContextAccessor.HttpContext?.User?.Identity?.Name;

    private User User { get; set; } = null!;

    private PasswordModel PasswordModel_ { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<EtlManagerContext>(DbFactory.CreateDbContext);
        User = await context.Users
            .AsNoTrackingWithIdentityResolution()
            .Include(user => user.Subscriptions)
            .FirstOrDefaultAsync(user => user.Username == Username);
    }

    private async Task SubmitEmail()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Attach(User).State = EntityState.Modified;
            await context.SaveChangesAsync();
            await JS.InvokeVoidAsync("alert", "Email updated successfully");
        }
        catch (Exception)
        {
            await JS.InvokeVoidAsync("alert", "Error saving email");
        }
    }

    private async Task UpdatePassword()
    {
        if (Username is null)
        {
            await JS.InvokeVoidAsync("alert", "Error getting username from HttpContext");
            return;
        }

        PasswordModel_.Password = PasswordModel_.Password ?? string.Empty;
        PasswordModel_.ConfirmPassword = PasswordModel_.ConfirmPassword ?? string.Empty;

        if (PasswordModel_.Password.Length < 1 || PasswordModel_.Password.Length > 250)
        {
            await JS.InvokeVoidAsync("alert", "The password length must be between 1 and 250");
            return;
        }

        if (!PasswordModel_.Password.Equals(PasswordModel_.ConfirmPassword))
        {
            await JS.InvokeVoidAsync("alert", "The two passwords do not match");
            return;
        }

        var result = await DbHelperService.UpdatePasswordAsync(Username, PasswordModel_.Password);
        if (result)
        {
            await JS.InvokeVoidAsync("alert", "Password updated successfully");
            PasswordModel_.Password = null;
            PasswordModel_.ConfirmPassword = null;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error updating password");
        }
    }

    private class PasswordModel
    {
        public string? Password { get; set; }

        public string? ConfirmPassword { get; set; }
    }
}
