@inject IConfiguration Configuration
@inject IJSRuntime JS
@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbContextFactory

<BSModal @ref="Modal" Size="Size.Large" IsScrollable="true" IsOpenChanged="ModalOpenChanged">
    <BSModalHeader OnClick="() => Modal.Hide()">Select dataset</BSModalHeader>

    <BSModalBody>
        <div class="row">
            <div class="col form-group">
                <div class="input-group input-group-sm">
                    <label class="sr-only">Search</label>
                    <div class="input-group-prepend">
                        <div class="input-group-text rounded-left">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/filter.svg")))
                        </div>
                    </div>
                    <input type="text" class="form-control" @bind-value="FilterText" @bind-value:event="oninput"
                           placeholder="Filter by name" autocomplete="off" />
                </div>
            </div>
            <div class="col-lg form-group">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tool.svg")))
                        </div>
                    </div>
                    <select class="form-control form-control-sm" @bind="TypeFilter">
                        <option value="" selected=@(TypeFilter == "")>All</option>
                        @if (Functions is not null)
                        {
                            @foreach (var type in Functions.Select(f => f.FunctionType).Distinct().OrderBy(type => type))
                            {
                                <option value="@type"
                                        selected=@(type == TypeFilter)>
                                    @type
                                </option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                Function name
                            </th>
                            <th>
                                Type
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Functions is null)
                        {
                            <tr>
                                <td>Loading...</td>
                                <td></td>
                            </tr>
                        }
                        else if (Functions.Count == 0)
                        {
                            <tr>
                                <td>No workspaces</td>
                                <td></td>
                            </tr>
                        }
                        else
                        {
                            foreach (var function in Functions
                                .Where(function => function.FunctionName.ContainsIgnoreCase(FilterText))
                                .Where(function => string.IsNullOrEmpty(TypeFilter) || function.FunctionType == TypeFilter)
                                .OrderBy(function => function.FunctionName))
                            {
                                <tr style="cursor: pointer;"
                                    @onclick="() => SelectedFunctionUrl = function.FunctionUrl"
                                    class="@(function.FunctionUrl == SelectedFunctionUrl ? "bg-light font-weight-bold" : null)">
                                    <td>@function.FunctionName</td>
                                    <td>@function.FunctionType</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            
        </div>
    </BSModalBody>

    <BSModalFooter>
        <BSButton Color="Color.Primary" Class="ml-5" @onclick="SelectFunction"
                  IsDisabled="SelectedFunctionUrl is null">
            Select
        </BSButton>
        <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Cancel</BSButton>
    </BSModalFooter>
</BSModal>

@code {

    private BSModal Modal { get; set; } = null!;

    [Parameter]
    public Guid? FunctionAppId { get; set; }

    [Parameter]
    public EventCallback<string> OnFunctionSelected { get; set; }

    private List<(string FunctionName, string FunctionType, string FunctionUrl)>? Functions { get; set; }

    private string? SelectedFunctionUrl { get; set; }

    private string FilterText { get; set; } = string.Empty;
    private string TypeFilter { get; set; } = string.Empty;

    private async Task ModalOpenChanged(bool isOpen)
    {
        if (isOpen && FunctionAppId is not null && FunctionAppId != Guid.Empty)
        {
            try
            {
                Guid id = FunctionAppId ?? throw new ArgumentNullException(nameof(id), "Function App id cannot be null");
                var functionAppHelper = await FunctionAppHelper.GetFunctionAppHelperAsync(DbContextFactory, id);
                Functions = await functionAppHelper.GetFunctionsAsync();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error reading functions: {ex.Message}");
            }
        }
        else
        {
            Functions = null;
            SelectedFunctionUrl = null;
            FilterText = string.Empty;
        }
    }

    private void SelectFunction()
    {
        if (SelectedFunctionUrl is not null)
        {
            OnFunctionSelected.InvokeAsync(SelectedFunctionUrl);
            Modal.Hide();
        }
    }

    public void Show() => Modal.Show();
}
