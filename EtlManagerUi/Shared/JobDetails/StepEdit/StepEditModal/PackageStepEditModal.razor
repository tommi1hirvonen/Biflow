@implements IDisposable
@implements IStepEditModal
@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory

<StepEditModalBase @ref="Modal"
                   Job="Job"
                   Steps="Steps"
                   Step="Step"
                   Context="Context"
                   StepValidityCheck="StepValidityCheck"
                   ResetDeletedEntities="ResetDeletedEntities"
                   ResetAddedEntities="ResetAddedEntities"
                   OnStepSubmit="OnStepSubmit">
    <BSFormRow>
        <BSFormGroup Class="col-lg-6">
            <BSLabel>Timeout (min) (0 = indefinite)</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                    </div>
                </div>
                <InputNumber class="form-control" @bind-Value="Step.TimeoutMinutes"></InputNumber>
            </div>
        </BSFormGroup>
        <BSFormGroup Class="col-lg-6">
            <BSLabel>Connection</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/database.svg")))
                    </div>
                </div>
                <InputSelect class="form-control" @bind-Value="Step.ConnectionId">
                    @foreach (var connection in Connections ?? Enumerable.Empty<Connection>())
                    {
                        <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                    }
                </InputSelect>
            </div>
        </BSFormGroup>
    </BSFormRow>
    <BSFormRow>
        <BSFormGroup Class="col">
            <BSLabel>Folder name</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/folder.svg")))
                    </div>
                </div>
                <InputText class="form-control" @bind-Value="Step.PackageFolderName" @onchange="Modal.ResetStepError"></InputText>
            </div>
        </BSFormGroup>
        <BSFormGroup Class="col-lg">
            <BSLabel>Project name</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/briefcase.svg")))
                    </div>
                </div>
                <InputText class="form-control" @bind-Value="Step.PackageProjectName" @oninput="Modal.ResetStepError"></InputText>
            </div>
        </BSFormGroup>
    </BSFormRow>
    <BSFormRow>
        <BSFormGroup Class="col">
            <BSLabel>Package name</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/package.svg")))
                    </div>
                </div>
                <InputText class="form-control" @bind-Value="Step.PackageName" @oninput="Modal.ResetStepError"></InputText>
            </div>
        </BSFormGroup>
    </BSFormRow>
    <div class="row mb-3">
        <div class="col">
            <BSButton Size="Size.Small" Color="Color.Light" @onclick="OpenPackageSelectModal">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                Browse catalog
            </BSButton>
        </div>
    </div>
    <PackageSelectModal @ref="PackageSelectModal" ConnectionId="Step.ConnectionId" OnPackageSelected="OnPackageSelected" />
    <BSFormRow>
        <div class="col">
            <div class="custom-control custom-checkbox custom-control-inline">
                <input type="checkbox" class="custom-control-input" id="new_step_32bit_mode"
                       checked=@Step.ExecuteIn32BitMode
                       @bind-value="Step.ExecuteIn32BitMode">
                <label class="custom-control-label" for="new_step_32bit_mode">Execute in 32 bit mode</label>
            </div>
        </div>
    </BSFormRow>
    <BSFormRow Class="mt-2">
        <BSFormGroup Class="col">
            <BSLabel>Execute as login (blank = no impersonation)</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/user.svg")))
                    </div>
                </div>
                <InputText class="form-control" @bind-Value="Step.ExecuteAsLogin" @oninput="Modal.ResetStepError"></InputText>
            </div>
        </BSFormGroup>
    </BSFormRow>
    <ParameterEditComponent Step="Step" />
</StepEditModalBase>


@code {

    [Parameter]
    public Guid StepId { get; set; } // empty Guid => new step

    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public IList<Step>? Steps { get; set; }

    [Parameter]
    public IList<Connection>? Connections { get; set; }

    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }

    // Use the same context to read and write to enable change tracking for all step child properties (e.g. parameters and dependencies).
    private EtlManagerContext Context { get; set; } = null!;

    private Guid PrevStepId { get; set; }

    private PackageStep Step { get; set; } = null!;

    private StepEditModalBase Modal { get; set; } = null!;

    private PackageSelectModal PackageSelectModal { get; set; } = null!;

    protected override void OnInitialized()
    {
        Context = DbFactory.CreateDbContext();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (StepId != Guid.Empty && StepId != PrevStepId)
        {
            Step = await Context.PackageSteps
                .Include(step => step.PackageParameters)
                .Include(step => step.Tags)
                .Include(step => step.Dependencies)
                .FirstOrDefaultAsync(step => step.StepId == StepId);
            PrevStepId = StepId;
        }
        else if (StepId == Guid.Empty && Job is not null)
        {
            Step = new()
            {
                JobId = Job.JobId,
                RetryAttempts = 0,
                RetryIntervalMinutes = 0,
                StepType = StepType.Package,
                IsEnabled = true,
                ConnectionId = Connections?.FirstOrDefault()?.ConnectionId,
                PackageParameters = new List<PackageParameter>(),
                Dependencies = new List<Dependency>(),
                Tags = new List<Tag>()
            };
        }
        StateHasChanged();
    }

    private void ResetDeletedEntities(EntityEntry entity)
    {
        if (entity.Entity is PackageParameter packageParam)
        {
            if (!Step.PackageParameters.Contains(packageParam))
                Step.PackageParameters.Add(packageParam);
        }
    }

    private void ResetAddedEntities(EntityEntry entity)
    {
        if (entity.Entity is PackageParameter packageParam)
        {
            if (Step.PackageParameters.Contains(packageParam))
                Step.PackageParameters.Remove(packageParam);
        }
    }

    private (bool Result, string? ErrorMessage) StepValidityCheck(Step step)
    {
        if (step is PackageStep package)
        {
            (var paramResult, var paramMessage) = ParametersCheck();
            if (string.IsNullOrEmpty(package.PackageFolderName) || string.IsNullOrEmpty(package.PackageProjectName) || string.IsNullOrEmpty(package.PackageName)
            || package.ConnectionId is null)
            {
                return (false, "Connection, folder, project and package names cannot be empty");
            }
            else if (!paramResult)
            {
                return (false, paramMessage);
            }
            else
            {
                foreach (var param in package.PackageParameters)
                {
                    param.SetParameterValue();
                }
                return (true, null);
            }
        }
        else
        {
            return (false, "Not PackageStep");
        }
    }

    private (bool Result, string? Message) ParametersCheck()
    {
        var parameters = Step.PackageParameters.OrderBy(param => param.ParameterName).ToList();
        foreach (var param in parameters)
        {
            if (string.IsNullOrEmpty(param.ParameterName))
            {
                return (false, "Parameter name cannot be empty");
            }
        }
        for (var i = 0; i < parameters.Count - 1; i++)
        {
            if (parameters[i + 1].ParameterName == parameters[i].ParameterName
                && parameters[i + 1].ParameterLevel == parameters[i].ParameterLevel)
            {
                return (false, "Duplicate parameter names");
            }
        }

        return (true, null);
    }

    private void OpenPackageSelectModal()=> PackageSelectModal.Show();

    private void OnPackageSelected((string Folder, string Project, string Package) package)
    {
        Step.PackageFolderName = package.Folder;
        Step.PackageProjectName = package.Project;
        Step.PackageName = package.Package;
    }

    public void Show()=> Modal.Show();

    public void Dispose() => Context?.Dispose();

}
