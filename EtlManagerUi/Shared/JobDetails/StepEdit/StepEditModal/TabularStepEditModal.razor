@implements IDisposable
@implements IStepEditModal
@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory

<StepEditModalBase @ref="Modal"
                   Job="Job"
                   Steps="Steps"
                   Step="Step"
                   Context="Context"
                   OnStepSubmit="OnStepSubmit"
                   StepValidityCheck="StepValidityCheck"
                   FormId="tabular_step_edit_modal">
    <div class="row mt-3">
        <div class="col-lg-6">
            <label class="form-label">Timeout (min) (0 = indefinite)</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                </div>
                <InputNumber class="form-control" @bind-Value="Step.TimeoutMinutes"></InputNumber>
            </div>
        </div>
        <div class="col-lg-6">
            <label class="form-label">Connection</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/database.svg")))
                </div>
                <InputSelect class="form-select" @bind-Value="Step.ConnectionId">
                    @foreach (var connection in Connections ?? Enumerable.Empty<AnalysisServicesConnectionInfo>())
                    {
                        <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col">
            <label class="form-label">Model name</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/box.svg")))
                </div>
                <InputText class="form-control" @bind-Value="Step.TabularModelName" @oninput="Modal.ResetStepError" />
            </div>
            <div class="form-text">Required</div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col">
            <label class="form-label">Table name</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/columns.svg")))
                </div>
                <InputText class="form-control" @bind-Value="Step.TabularTableName" @oninput="Modal.ResetStepError" />
            </div>
            <div class="form-text">Blank if not applicable. Required if partition name is defined.</div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col">
            <label class="form-label">Partition name</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/pie-chart.svg")))
                </div>
                <InputText class="form-control" @bind-Value="Step.TabularPartitionName" @oninput="Modal.ResetStepError" />
            </div>
            <div class="form-text">Blank if not applicable</div>
        </div>
    </div>
</StepEditModalBase>

@code {

    [Parameter]
    public Guid StepId { get; set; } // empty Guid => new step

    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public IList<Step>? Steps { get; set; }

    [Parameter]
    public IList<AnalysisServicesConnectionInfo>? Connections { get; set; }

    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }

    // Use the same context to read and write to enable change tracking for all step child properties (e.g. parameters and dependencies).
    private EtlManagerContext Context { get; set; } = null!;

    private Guid PrevStepId { get; set; }

    private TabularStep Step { get; set; } = null!;

    private StepEditModalBase Modal { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task ResetContext()
    {
        if (Context is not null)
            await Context.DisposeAsync();

        Context = DbFactory.CreateDbContext();
    }

    private async Task LoadData()
    {
        if (StepId != Guid.Empty && StepId != PrevStepId)
        {
            await ResetContext();
            Step = await Context.TabularSteps
                .Include(step => step.Tags)
                .Include(step => step.Dependencies)
                .FirstOrDefaultAsync(step => step.StepId == StepId);
            PrevStepId = StepId;
        }
        else if (StepId == Guid.Empty && Job is not null)
        {
            await ResetContext();
            Step = new(string.Empty)
            {
                JobId = Job.JobId,
                RetryAttempts = 0,
                RetryIntervalMinutes = 0,
                IsEnabled = true,
                ConnectionId = Connections?.FirstOrDefault()?.ConnectionId,
                Dependencies = new List<Dependency>(),
                Tags = new List<Tag>()
            };
        }
        StateHasChanged();
    }

    private (bool Result, string? ErrorMessage) StepValidityCheck(Step step)
    {
        if (step is TabularStep tabular)
        {
            if (!string.IsNullOrEmpty(tabular.TabularPartitionName) && string.IsNullOrEmpty(tabular.TabularTableName))
            {
                return (false, "Table name is required if partition name has been defined");
            }
            else
            {
                return (true, null);
            }
        }
        else
        {
            return (false, "Not TabularStep");
        }
    }

    public async Task ShowAsync(bool showDependencies) => await Modal.ShowAsync(showDependencies);

    public void Dispose() => Context?.Dispose();

}
