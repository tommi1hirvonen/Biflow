@implements IDisposable
@implements IStepEditModal
@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory

<ParameterizedStepEditModal @ref="Modal"
                   Job="Job"
                   Steps="Steps"
                   Step="Step"
                   Context="Context"
                   OnStepSubmit="OnStepSubmit"
                   FormId="sql_step_edit_modal">
    <BSFormRow>
        <BSFormGroup Class="col-lg-6">
            <BSLabel>Timeout (min) (0 = indefinite)</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                    </div>
                </div>
                <InputNumber class="form-control" @bind-Value="Step.TimeoutMinutes"></InputNumber>
            </div>
        </BSFormGroup>
        <BSFormGroup Class="col-lg-6">
            <BSLabel>Connection</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/database.svg")))
                    </div>
                </div>
                <InputSelect class="form-control" @bind-Value="Step.ConnectionId">
                    @foreach (var connection in Connections ?? Enumerable.Empty<Connection>())
                    {
                        <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                    }
                </InputSelect>
            </div>
        </BSFormGroup>
    </BSFormRow>
    <BSFormGroup>
        <BSLabel>SQL statement</BSLabel>
        <div class="input-group">
            <div class="input-group-prepend">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/code.svg")))
                </div>
            </div>
            <InputTextArea class="form-control" @bind-Value="Step.SqlStatement" style="font-family: monospace;" rows="3" @oninput="Modal.ResetStepError"></InputTextArea>
        </div>
    </BSFormGroup>
    <div class="row mb-3">
        <div class="col">
            <BSButton Size="Size.Small" Color="Color.Light" @onclick="OpenStoredProcedureSelectModal">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                Browse stored procedures
            </BSButton>
        </div>
    </div>
    <StoredProcedureSelectModal @ref="StoredProcedureSelectModal" ConnectionId="Step.ConnectionId" OnProcedureSelected="OnStoredProcedureSelected" />
</ParameterizedStepEditModal>


@code {
    [Parameter]
    public Guid StepId { get; set; } // empty Guid => new step

    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public IList<Step>? Steps { get; set; }

    [Parameter]
    public IList<Connection>? Connections { get; set; }

    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }

    // Use the same context to read and write to enable change tracking for all step child properties (e.g. parameters and dependencies).
    private EtlManagerContext Context { get; set; } = null!;

    private Guid PrevStepId { get; set; }

    private SqlStep Step { get; set; } = null!;

    private ParameterizedStepEditModal Modal { get; set; } = null!;

    private StoredProcedureSelectModal StoredProcedureSelectModal { get; set; } = null!;

    private bool ShowDependencies { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task ResetContext()
    {
        if (Context is not null)
            await Context.DisposeAsync();

        Context = DbFactory.CreateDbContext();
    }

    private async Task LoadData()
    {
        if (StepId != Guid.Empty && StepId != PrevStepId)
        {
            await ResetContext();
            Step = await Context.SqlSteps
                .Include(step => step.StepParameters)
                .Include(step => step.Tags)
                .Include(step => step.Dependencies)
                .FirstOrDefaultAsync(step => step.StepId == StepId);
            PrevStepId = StepId;
        }
        else if (StepId == Guid.Empty && Job is not null)
        {
            await ResetContext();
            Step = new()
            {
                JobId = Job.JobId,
                RetryAttempts = 0,
                RetryIntervalMinutes = 0,
                IsEnabled = true,
                ConnectionId = Connections?.FirstOrDefault()?.ConnectionId,
                Dependencies = new List<Dependency>(),
                Tags = new List<Tag>(),
                StepParameters = new List<StepParameter>()

            };
        }
        StateHasChanged();
    }

    private void OpenStoredProcedureSelectModal() => StoredProcedureSelectModal.Show();

    private void OnStoredProcedureSelected((string Schema, string Procedure) procedure) => Step.SqlStatement = $"EXEC [{procedure.Schema}].[{procedure.Procedure}]";

    public void Show() => Modal.Show();

    public void Dispose() => Context?.Dispose();

}
