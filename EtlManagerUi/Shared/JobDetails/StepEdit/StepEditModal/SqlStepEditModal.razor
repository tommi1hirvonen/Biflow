@implements IDisposable
@implements IStepEditModal
@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS

<BSModal @ref="Modal" Size="Size.Large" IsScrollable="true" IsOpenChanged="IsModalOpenChanged">
    @if (Step is not null && Connections is not null)
    {
        <BSModalHeader OnClick="() => Modal.Hide()">@(Step.StepId == Guid.Empty ? "New step" : "Edit " + Step.StepName)</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <div class="col mx-3">
                    <BSForm id="sql_step_edit_form" Model="Step" OnValidSubmit="SubmitStep">

                        <BSButtonGroup Size="Size.Small" Class="mb-3">
                            <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(!ShowDependencies ? "active" : null)"
                                      @onclick="() => ShowDependencies = false">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/settings.svg")))
                                Settings
                            </BSButton>
                            <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(ShowDependencies ? "active" : null)"
                                      @onclick="() => ShowDependencies = true">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/diagram-3-fill.svg")))
                                Dependencies
                            </BSButton>
                        </BSButtonGroup>

                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (ShowDependencies)
                        {
                            @if (Steps is not null)
                            {
                                <DependenciesEditComponent Step="Step" Steps="Steps" />
                            }
                        }
                        else
                        {
                            <BSFormRow>
                                <BSFormGroup Class="col">
                                    <BSLabel>Step name</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-3.svg")))
                                            </div>
                                        </div>
                                        <InputText class="form-control" @bind-Value="Step.StepName"></InputText>
                                    </div>
                                </BSFormGroup>
                            </BSFormRow>
                            <BSFormGroup>
                                <BSLabel>Description</BSLabel>
                                <div class="input-group input-group-sm">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/book-open.svg")))
                                        </div>
                                    </div>
                                    <InputTextArea class="form-control" @bind-Value="Step.StepDescription" rows="2"></InputTextArea>
                                </div>
                            </BSFormGroup>
                            <BSFormRow>
                                <div class="col">
                                    <BSFormRow>
                                        <BSFormGroup Class="col">
                                            <BSLabel>Execution phase</BSLabel>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/layers.svg")))
                                                    </div>
                                                </div>
                                                <InputNumber class="form-control" @bind-Value="Step.ExecutionPhase"></InputNumber>
                                            </div>
                                        </BSFormGroup>
                                    </BSFormRow>
                                </div>
                                <div class="col-lg">
                                    <BSFormRow>
                                        <BSFormGroup Class="col">
                                            <BSLabel>Retry attempts</BSLabel>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/repeat.svg")))
                                                    </div>
                                                </div>
                                                <InputNumber class="form-control" @bind-Value="Step.RetryAttempts"></InputNumber>
                                            </div>
                                        </BSFormGroup>
                                        <BSFormGroup Class="col">
                                            <BSLabel>Retry interval (min)</BSLabel>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/clock.svg")))
                                                    </div>
                                                </div>
                                                <InputNumber class="form-control" @bind-Value="Step.RetryIntervalMinutes"></InputNumber>
                                            </div>
                                        </BSFormGroup>
                                    </BSFormRow>
                                </div>
                            </BSFormRow>
                            <BSFormRow>
                                <BSFormGroup Class="col-lg-6">
                                    <BSLabel>Timeout (min) (0 = indefinite)</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                                            </div>
                                        </div>
                                        <InputNumber class="form-control" @bind-Value="Step.TimeoutMinutes"></InputNumber>
                                    </div>
                                </BSFormGroup>
                                <BSFormGroup Class="col-lg-6">
                                    <BSLabel>Connection</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/database.svg")))
                                            </div>
                                        </div>
                                        <InputSelect class="form-control" @bind-Value="Step.ConnectionId">
                                            @foreach (var connection in Connections)
                                                    {
                                                <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                                                    }
                                        </InputSelect>
                                    </div>
                                </BSFormGroup>
                            </BSFormRow>
                            <BSFormGroup>
                                <BSLabel>SQL statement</BSLabel>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/code.svg")))
                                        </div>
                                    </div>
                                    <InputTextArea class="form-control" @bind-Value="Step.SqlStatement" style="font-family: monospace;" rows="3" @oninput="ResetStepError"></InputTextArea>
                                </div>
                            </BSFormGroup>
                            <div class="row mb-3">
                                <div class="col">
                                    <BSButton Size="Size.Small" Color="Color.Light" @onclick="OpenStoredProcedureSelectModal">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                                        Browse stored procedures
                                    </BSButton>
                                </div>
                            </div>
                            <StoredProcedureSelectModal @ref="StoredProcedureSelectModal" ConnectionId="Step.ConnectionId" OnProcedureSelected="OnStoredProcedureSelected" />
                            <p class="text-danger">@StepError</p>
                        }

                    </BSForm>
                </div>
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton ButtonType="ButtonType.Submit" form="sql_step_edit_form" Color="Color.Success">@(Step.StepId == Guid.Empty ? "Create" : "Save")</BSButton>
            <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Cancel</BSButton>
        </BSModalFooter>
    }
</BSModal>



@code {
    // Use the same context to read and write to enable change tracking for all step child properties (e.g. parameters and dependencies).
    private EtlManagerContext Context { get; set; } = null!;

    [Parameter]
    public Guid StepId { get; set; } // empty Guid => new step

    private Guid PrevStepId { get; set; }

    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public IList<Step>? Steps { get; set; }

    private SqlStep Step { get; set; } = new();

    private IList<Connection>? Connections { get; set; }

    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }

    private BSModal Modal { get; set; } = null!;

    private string StepError { get; set; } = string.Empty;

    private StoredProcedureSelectModal StoredProcedureSelectModal { get; set; } = null!;

    private bool ShowDependencies { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        Connections = await Context.Connections.AsNoTracking().ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (StepId != Guid.Empty && StepId != PrevStepId)
        {
            Step = await Context.SqlSteps
                .Include(step => step.Tags)
                .Include(step => step.Dependencies)
                .FirstOrDefaultAsync(step => step.StepId == StepId);
            PrevStepId = StepId;
        }
        else if (StepId == Guid.Empty && Job is not null)
        {
            Step = new()
            {
                JobId = Job.JobId,
                RetryAttempts = 0,
                RetryIntervalMinutes = 0,
                StepType = StepType.Sql,
                IsEnabled = true,
                ConnectionId = Connections?.FirstOrDefault()?.ConnectionId,
                Dependencies = new List<Dependency>(),
                Tags = new List<Tag>()

            };
        }
        StateHasChanged();
    }

    private void ResetStepError()
    {
        StepError = string.Empty;
    }

    private void IsModalOpenChanged(bool isOpen)
    {
        // If the modal is being simply closed, reset any changes made to entities loaded from the database.
        // If the user saves their changes, SubmitStep() is called first and changes are saved.
        if (!isOpen)
        {
            // Reset added entities.
            foreach (var entity in Context.ChangeTracker.Entries().Where(e => e.Entity is not null && e.State == EntityState.Added).ToList())
            {
                if (entity.Entity is Dependency dependency)
                {
                    if (Step.Dependencies.Contains(dependency))
                        Step.Dependencies.Remove(dependency);
                }
                entity.State = EntityState.Detached;
            }

            // Reset deleted entities.
            foreach (var entity in Context.ChangeTracker.Entries().Where(e => e.Entity is not null && e.State == EntityState.Deleted).ToList())
            {
                if (entity.Entity is Dependency dependency)
                {
                    if (!Step.Dependencies.Contains(dependency))
                        Step.Dependencies.Add(dependency);
                }
                entity.State = EntityState.Unchanged;
            }

            // Reset changed entities.
            Context.ChangeTracker
                .Entries()
                .Where(e => e.Entity is not null)
                .ToList()
                .ForEach(e => e.State = EntityState.Unchanged);
        }
    }

    private async Task SubmitStep()
    {
        StepError = string.Empty;

        // Check various requirements based on step type.
        if (string.IsNullOrEmpty(Step.SqlStatement) || Step.ConnectionId is null)
        {
            StepError = "SQL statement and connection cannot be empty";
            return;
        }

        // Save changes.
        try
        {
            // Existing step
            if (Step.StepId != Guid.Empty)
            {
                Context.Attach(Step).State = EntityState.Modified;
            }
            // New step
            else
            {
                Context.Steps.Add(Step);
            }
            await Context.SaveChangesAsync();

            await OnStepSubmit.InvokeAsync(Step);
            Modal.Hide();
        }
        catch (DbUpdateConcurrencyException)
        {
            await JS.InvokeVoidAsync("alert", "Concurrency error: the step has been modified outside of this session. Reload the page to view the most recent settings.");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error adding/editing step: {ex.Message}\n{ex.InnerException?.Message}");
        }
    }

    private void OpenStoredProcedureSelectModal() => StoredProcedureSelectModal.Show();

    private void OnStoredProcedureSelected((string Schema, string Procedure) procedure) => Step.SqlStatement = $"EXEC [{procedure.Schema}].[{procedure.Procedure}]";

    public void Show()
    {
        Modal.Show();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}
