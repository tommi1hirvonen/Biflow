@implements IDisposable
@implements IStepEditModal 
@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory

<StepEditModalBase @ref="Modal"
                   Job="Job"
                   Steps="Steps"
                   Step="Step"
                   Context="Context"
                   OnStepSubmit="OnStepSubmit"
                   FormId="dataset_step_edit_modal">
    <div class="row mt-3">
        <div class="col-lg-6">
            <label class="form-label">App registration</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/globe.svg")))
                </div>
                <InputSelect class="form-select" @bind-Value="Step.AppRegistrationId">
                    @foreach (var app in AppRegistrations ?? Enumerable.Empty<AppRegistration>())
                    {
                        <option value="@app.AppRegistrationId">@app.AppRegistrationName</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-lg">
            <label class="form-label">Group id</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/folder.svg")))
                </div>
                <InputText class="form-control" @bind-Value="Step.DatasetGroupId" @oninput="Modal.ResetStepError"></InputText>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-lg">
            <label class="form-label">Dataset id</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/file.svg")))
                </div>
                <InputText class="form-control" @bind-Value="Step.DatasetId" @oninput="Modal.ResetStepError"></InputText>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="OpenDatasetSelectModal">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                Browse datasets
            </HxButton>
        </div>
    </div>
    <DatasetSelectModal @ref="DatasetSelectModal" AppRegistrationId="Step.AppRegistrationId" OnDatasetSelected="OnDatasetSelected" />
</StepEditModalBase>


@code {
    [Parameter]
    public Guid StepId { get; set; } // empty Guid => new step

    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public IList<Step>? Steps { get; set; }

    [Parameter]
    public IList<AppRegistration>? AppRegistrations { get; set; }

    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }

    // Use the same context to read and write to enable change tracking for all step child properties (e.g. parameters and dependencies).
    private EtlManagerContext Context { get; set; } = null!;

    private Guid PrevStepId { get; set; }

    private DatasetStep Step { get; set; } = null!;

    private StepEditModalBase Modal { get; set; } = null!;

    private DatasetSelectModal DatasetSelectModal { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task ResetContext()
    {
        if (Context is not null)
            await Context.DisposeAsync();

        Context = DbFactory.CreateDbContext();
    }

    private async Task LoadData()
    {
        if (StepId != Guid.Empty && StepId != PrevStepId)
        {
            await ResetContext();
            Step = await Context.DatasetSteps
                .Include(step => step.Tags)
                .Include(step => step.Dependencies)
                .FirstOrDefaultAsync(step => step.StepId == StepId);
            PrevStepId = StepId;
        }
        else if (StepId == Guid.Empty && Job is not null)
        {
            await ResetContext();
            Step = new()
            {
                JobId = Job.JobId,
                RetryAttempts = 0,
                RetryIntervalMinutes = 0,
                IsEnabled = true,
                AppRegistrationId = AppRegistrations?.FirstOrDefault()?.AppRegistrationId,
                Dependencies = new List<Dependency>(),
                Tags = new List<Tag>()
            };
        }
        StateHasChanged();
    }

    private async Task OpenDatasetSelectModal() => await DatasetSelectModal.ShowAsync();

    private void OnDatasetSelected((string GroupId, string DatasetId) dataset)
    {
        Step.DatasetGroupId = dataset.GroupId;
        Step.DatasetId = dataset.DatasetId;
    }

    public async Task ShowAsync(bool showDependencies) => await Modal.ShowAsync(showDependencies);

    public void Dispose() => Context?.Dispose();

}
