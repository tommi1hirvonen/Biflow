@implements IDisposable
@implements IStepEditModal 
@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory

<StepEditModalBase @ref="Modal"
                   Job="Job"
                   Steps="Steps"
                   Step="Step"
                   Context="Context"
                   OnStepSubmit="OnStepSubmit"
                   FormId="dataset_step_edit_modal">
    <BSFormRow>
        <BSFormGroup Class="col-lg-6">
            <BSLabel>Power BI Service</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/bar-chart-2.svg")))
                    </div>
                </div>
                <InputSelect class="form-control" @bind-Value="Step.PowerBIServiceId">
                    @foreach (var pbi in PowerBIServices ?? Enumerable.Empty<PowerBIService>())
                    {
                        <option value="@pbi.PowerBIServiceId">@pbi.PowerBIServiceName</option>
                    }
                </InputSelect>
            </div>
        </BSFormGroup>
    </BSFormRow>
    <BSFormRow>
        <BSFormGroup Class="col-lg">
            <BSLabel>Group id</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/folder.svg")))
                    </div>
                </div>
                <InputText class="form-control" @bind-Value="Step.DatasetGroupId" @oninput="Modal.ResetStepError"></InputText>
            </div>
        </BSFormGroup>
    </BSFormRow>
    <BSFormRow>
        <BSFormGroup Class="col-lg">
            <BSLabel>Dataset id</BSLabel>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/file.svg")))
                    </div>
                </div>
                <InputText class="form-control" @bind-Value="Step.DatasetId" @oninput="Modal.ResetStepError"></InputText>
            </div>
        </BSFormGroup>
    </BSFormRow>
    <div class="row mb-3">
        <div class="col">
            <BSButton Size="Size.Small" Color="Color.Light" @onclick="OpenDatasetSelectModal">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                Browse datasets
            </BSButton>
        </div>
    </div>
    <DatasetSelectModal @ref="DatasetSelectModal" PowerBIServiceId="Step.PowerBIServiceId" OnDatasetSelected="OnDatasetSelected" />
</StepEditModalBase>


@code {
    [Parameter]
    public Guid StepId { get; set; } // empty Guid => new step

    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public IList<Step>? Steps { get; set; }

    [Parameter]
    public IList<PowerBIService>? PowerBIServices { get; set; }

    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }

    // Use the same context to read and write to enable change tracking for all step child properties (e.g. parameters and dependencies).
    private EtlManagerContext Context { get; set; } = null!;

    private Guid PrevStepId { get; set; }

    private DatasetStep Step { get; set; } = null!;

    private StepEditModalBase Modal { get; set; } = null!;

    private DatasetSelectModal DatasetSelectModal { get; set; } = null!;

    protected override void OnInitialized()
    {
        Context = DbFactory.CreateDbContext();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (StepId != Guid.Empty && StepId != PrevStepId)
        {
            Step = await Context.DatasetSteps
                .Include(step => step.Tags)
                .Include(step => step.Dependencies)
                .FirstOrDefaultAsync(step => step.StepId == StepId);
            PrevStepId = StepId;
        }
        else if (StepId == Guid.Empty && Job is not null)
        {
            Step = new()
            {
                JobId = Job.JobId,
                RetryAttempts = 0,
                RetryIntervalMinutes = 0,
                StepType = StepType.Dataset,
                IsEnabled = true,
                PowerBIServiceId = PowerBIServices?.FirstOrDefault()?.PowerBIServiceId,
                Dependencies = new List<Dependency>(),
                Tags = new List<Tag>()
            };
        }
        StateHasChanged();
    }

    private void OpenDatasetSelectModal() => DatasetSelectModal.Show();

    private void OnDatasetSelected((string GroupId, string DatasetId) dataset)
    {
        Step.DatasetGroupId = dataset.GroupId;
        Step.DatasetId = dataset.DatasetId;
    }

    public void Show() => Modal.Show();

    public void Dispose() => Context?.Dispose();
    
}
