@inject IWebHostEnvironment WebHostEnvironment

<div class="row mt-2 align-items-center">
    <div class="input-group input-group-sm col">
        <label class="sr-only">Search</label>
        <div class="input-group-prepend">
            <div class="input-group-text rounded-left">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
            </div>
        </div>
        <input type="text" class="form-control" @bind-value="DependenciesFilterText" @bind-value:event="oninput" placeholder="Search" autocomplete="off" />
    </div>
    <div class="custom-control custom-control-inline custom-checkbox col ml-3">
        <input type="checkbox" class="custom-control-input" id="only_active"
               checked=@ShowOnlyActiveDependencies
               @onchange="() => ShowOnlyActiveDependencies = !ShowOnlyActiveDependencies">
        <label class="custom-control-label" for="only_active">Show only active</label>
    </div>
</div>

<table class="table table-sm table-striped mt-3">
    <thead>
        <tr>
            <th>Step name</th>
            <th>Dependent on</th>
            <th>Strict dependency</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var step in Steps
.Where(step => step.StepId != Step.StepId) // Exclude current step => step cannot depend on itself.
.Where(step => step.StepName?.ContainsIgnoreCase(DependenciesFilterText) == true) // Filter based on search filter.
.Where(step => Step.Dependencies.Any(d => d.DependantOnStepId == step.StepId) || !ShowOnlyActiveDependencies) // Only show active dependencies if checked.
.OrderBy(step => step.StepName))
        {
            <tr>
                <td class="align-middle">@step.StepName</td>
                <td class="align-middle">
                    <div class="custom-control custom-control-inline custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="dependency_@step.StepId"
                               checked=@(Step.Dependencies.Any(dep => dep.DependantOnStepId == step.StepId))
                               @onchange="eventArgs => ToggleDependency(step, eventArgs.Value!)">
                        <label class="custom-control-label" for="dependency_@step.StepId"></label>
                    </div>
                </td>
                <td class="align-middle">
                    @if (Step.Dependencies.Any(dep => dep.DependantOnStepId == step.StepId))
                    {
                        <div class="custom-control custom-control-inline custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="strict_@step.StepId"
                                   checked=@(Step.Dependencies.Where(dep => dep.DependantOnStepId == step.StepId).Any(dep => dep.StrictDependency))
                                   @onchange="eventArgs => ToggleStrictDependency(step, eventArgs.Value!)">
                            <label class="custom-control-label" for="strict_@step.StepId"></label>
                        </div>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public Step Step { get; set; } = null!;

    [Parameter]
    public IList<Step> Steps { get; set; } = null!;

    private string DependenciesFilterText { get; set; } = string.Empty;
    private bool ShowOnlyActiveDependencies { get; set; } = false;

    private void ToggleDependency(Step step, object checkedValue)
    {
        var dependent = (bool)checkedValue;
        var dependency = Step.Dependencies.FirstOrDefault(dep => dep.DependantOnStepId == step.StepId);
        if (!dependent && dependency is not null)
        {
            Step.Dependencies.Remove(dependency);
        }
        else if (dependent && dependency is null)
        {
            Step.Dependencies.Add(new() { StepId = Step.StepId, DependantOnStepId = step.StepId });
        }
    }

    private void ToggleStrictDependency(Step step, object checkedValue)
    {
        var strict = (bool)checkedValue;
        var dependency = Step.Dependencies.FirstOrDefault(dep => dep.DependantOnStepId == step.StepId);
        if (dependency is not null)
        {
            dependency.StrictDependency = strict;
        }
    }

}
