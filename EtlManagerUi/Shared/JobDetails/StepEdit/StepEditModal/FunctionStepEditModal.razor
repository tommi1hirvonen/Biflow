@implements IDisposable
@implements IStepEditModal 
@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory

<ParameterizedStepEditModal @ref="Modal"
                            Job="Job"
                            Steps="Steps"
                            Step="Step"
                            Context="Context"
                            OnStepSubmit="OnStepSubmit"
                            FormId="function_step_edit_modal">
    <div class="row mt-3">
        <div class="col-lg">
            <label class="form-label">Timeout (min) (0 = indefinite)</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                </div>
                <InputNumber class="form-control" @bind-Value="Step.TimeoutMinutes"></InputNumber>
            </div>
        </div>
        <div class="col-lg">
            <label class="form-label">Function App</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/zap.svg")))
                </div>
                <InputSelect class="form-select" @bind-Value="Step.FunctionAppId">
                    @foreach (var app in FunctionApps ?? Enumerable.Empty<FunctionApp>())
                    {
                        <option value="@app.FunctionAppId">@app.FunctionAppName</option>
                    }
                </InputSelect>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-lg">
            <label class="form-label">Function url</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/code.svg")))
                </div>
                <InputText class="form-control" style="font-family: monospace;" @bind-Value="Step.FunctionUrl" @oninput="Modal.ResetStepError"></InputText>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="OpenFunctionSelectOffcanvas">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                Browse functions
            </HxButton>
        </div>
    </div>
    <FunctionSelectOffcanvas @ref="FunctionSelectOffcanvas" FunctionAppId="Step.FunctionAppId" OnFunctionSelected="OnFunctionSelected" />
    <div class="row mt-3">
        <div class="col">
            <div class="form-check form-check-inline">
                <input type="checkbox" class="form-check-input" id="function_is_durable"
                       checked=@Step.FunctionIsDurable
                       @bind-value="Step.FunctionIsDurable">
                <label class="form-check-label" for="function_is_durable">Is durable</label>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-lg">
            <label class="form-label">Function key</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/key.svg")))
                </div>
                <InputText class="form-control" @bind-Value="Step.FunctionKey" @oninput="Modal.ResetStepError"></InputText>
            </div>
        </div>
    </div>
    <div class="row mt-3">
        <div class="col-lg">
            <label class="form-label">Function input</label>
            <div class="input-group">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/chevron-right.svg")))
                </div>
                <InputTextArea class="form-control" @bind-Value="Step.FunctionInput" style="font-family: monospace;" rows="3" @oninput="Modal.ResetStepError"></InputTextArea>
            </div>
        </div>
    </div>
</ParameterizedStepEditModal>


@code {
    [Parameter]
    public Guid StepId { get; set; } // empty Guid => new step

    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public IList<Step>? Steps { get; set; }

    [Parameter]
    public IList<FunctionApp>? FunctionApps { get; set; }

    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }

    // Use the same context to read and write to enable change tracking for all step child properties (e.g. parameters and dependencies).
    private EtlManagerContext Context { get; set; } = null!;

    private Guid PrevStepId { get; set; }

    private FunctionStep Step { get; set; } = null!;

    private ParameterizedStepEditModal Modal { get; set; } = null!;

    private FunctionSelectOffcanvas FunctionSelectOffcanvas { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task ResetContext()
    {
        if (Context is not null)
            await Context.DisposeAsync();

        Context = DbFactory.CreateDbContext();
    }

    private async Task LoadData()
    {
        if (StepId != Guid.Empty && StepId != PrevStepId)
        {
            await ResetContext();
            Step = await Context.FunctionSteps
                .Include(step => step.StepParameters)
                .ThenInclude(p => p.JobParameter)
                .Include(step => step.Tags)
                .Include(step => step.Dependencies)
                .FirstOrDefaultAsync(step => step.StepId == StepId);
            PrevStepId = StepId;
        }
        else if (StepId == Guid.Empty && Job is not null)
        {
            await ResetContext();
            Step = new()
            {
                JobId = Job.JobId,
                RetryAttempts = 0,
                RetryIntervalMinutes = 0,
                IsEnabled = true,
                FunctionAppId = FunctionApps?.FirstOrDefault()?.FunctionAppId,
                Dependencies = new List<Dependency>(),
                Tags = new List<Tag>(),
                StepParameters = new List<StepParameterBase>()
            };
        }
        StateHasChanged();
    }

    private async Task OpenFunctionSelectOffcanvas() => await FunctionSelectOffcanvas.ShowAsync();

    private void OnFunctionSelected(string functionUrl)
    {
        Step.FunctionUrl = functionUrl;
    }

    public async Task ShowAsync(bool showDependencies) => await Modal.ShowAsync(showDependencies);

    public void Dispose() => Context?.Dispose();

}
