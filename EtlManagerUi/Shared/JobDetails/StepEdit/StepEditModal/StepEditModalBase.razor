@inject IWebHostEnvironment WebHostEnvironment
@inject IHxMessengerService Messenger

<HxModal @ref="Modal" Size="ModalSize.Large" Scrollable="true" OnClosed="OnClosed" Title="@(Step?.StepId == Guid.Empty ? "New step" : "Edit " + Step?.StepName)">
    <BodyTemplate>
        @if (Step is not null)
        {
            <div class="row">
                <div class="col mx-3">
                    <EditForm id="@FormId" Model="Step" OnValidSubmit="SubmitStep">

                        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="mb-3">
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(!ShowDependencies ? "active" : null)"
                                      @onclick="() => ShowDependencies = false">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/settings.svg")))
                                Settings
                            </HxButton>
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(ShowDependencies ? "active" : null)"
                                      @onclick="() => ShowDependencies = true">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/diagram-3-fill.svg")))
                                Dependencies
                            </HxButton>
                        </HxButtonGroup>

                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (ShowDependencies)
                        {
                            @if (Steps is not null)
                            {
                                <DependenciesEditComponent Step="Step" Steps="Steps" />
                            }
                        }
                        else
                        {
                            <div class="row">
                                <div class="col">
                                    <label class="form-label">Step name</label>
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-3.svg")))
                                        </div>
                                        <InputText class="form-control" @bind-Value="Step.StepName"></InputText>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <label class="form-label">Description</label>
                                <div class="input-group input-group-sm">
                                    <div class="input-group-text">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/book-open.svg")))
                                    </div>
                                    <InputTextArea class="form-control" @bind-Value="Step.StepDescription" rows="2"></InputTextArea>
                                </div>
                            </div>
                            <div class="row mt-3">
                                <label class="form-label">Tags</label>
                                <HxInputTags @bind-Value="Tags" DataProvider="GetTagSuggestions" SuggestMinimumLength="0" SuggestDelay="0" />
                            </div>
                            <div class="row">
                                <div class="col">
                                    <label class="form-label">Execution phase</label>
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/layers.svg")))
                                        </div>
                                        <InputNumber class="form-control" @bind-Value="Step.ExecutionPhase"></InputNumber>
                                    </div>
                                </div>
                                <div class="col">
                                    <label class="form-label">Retry attempts</label>
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/repeat.svg")))
                                        </div>
                                        <InputNumber class="form-control" @bind-Value="Step.RetryAttempts"></InputNumber>
                                    </div>
                                </div>
                                <div class="col">
                                    <label class="form-label">Retry interval (min)</label>
                                    <div class="input-group">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/clock.svg")))
                                        </div>
                                        <InputNumber class="form-control" @bind-Value="Step.RetryIntervalMinutes"></InputNumber>
                                    </div>
                                </div>
                            </div>
                            @ChildContent
                            <p class="text-danger">@StepError</p>
                        }

                    </EditForm>
                </div>
            </div>
        }
    </BodyTemplate>
        
    <FooterTemplate>
        <HxSubmit FormId="@FormId" Color="ThemeColor.Success">@(Step?.StepId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" @onclick="async () => await Modal.HideAsync()">Cancel</HxButton>
    </FooterTemplate>
</HxModal>



@code {
    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public IEnumerable<Step>? Steps { get; set; }

    [Parameter]
    public Step? Step { get; set; }

    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public Func<Step, (bool Result, string? ErrorMessage)>? StepValidityCheck { get; set; }

    [Parameter]
    public Action<EntityEntry>? ResetAddedEntities { get; set; }

    [Parameter]
    public Action<EntityEntry>? ResetDeletedEntities { get; set; }

    [Parameter]
    public EtlManagerContext Context { get; set; } = null!;

    [Parameter]
    public string FormId { get; set; } = string.Empty;

    public IEnumerable<Tag>? AllTags { get; set; }

    private Guid PrevStepId { get; set; }

    private List<string> Tags { get; set; } = new();

    private async Task<InputTagsDataProviderResult> GetTagSuggestions(InputTagsDataProviderRequest request)
    {
        AllTags ??= await Context.Tags.ToListAsync();
        return new InputTagsDataProviderResult
        {
            Data = AllTags?
            .Select(t => t.TagName)
            .Where(t => t.ContainsIgnoreCase(request.UserInput))
            .Where(t => !Tags.Any(tag => t == tag))
            .OrderBy(t => t) ?? Enumerable.Empty<string>()
        };
    }

    private HxModal Modal { get; set; } = null!;

    private string StepError { get; set; } = string.Empty;

    private bool ShowDependencies { get; set; } = false;

    protected override void OnParametersSet()
    {
        if (Step is not null && Step.StepId != PrevStepId)
        {
            ResetTags();
            PrevStepId = Step.StepId;
        }
    }

    private void ResetTags() => Tags = Step?.Tags
        .Select(t => t.TagName)
        .OrderBy(t => t)
        .ToList() ?? new();

    public void ResetStepError() => StepError = string.Empty;

    private void OnClosed()
    {
        // If the modal is being simply closed, reset any changes made to entities loaded from the database.
        // If the user saves their changes, SubmitStep() is called first and changes are saved.

        // Reset added entities.
        foreach (var entity in Context.ChangeTracker.Entries().Where(e => e.Entity is not null && e.State == EntityState.Added).ToList())
        {
            if (entity.Entity is Dependency dependency)
            {
                if (Step?.Dependencies.Contains(dependency) == true)
                    Step.Dependencies.Remove(dependency);
            }

            if (ResetAddedEntities is not null)
                ResetAddedEntities(entity);

            entity.State = EntityState.Detached;
        }

        // Reset deleted entities.
        foreach (var entity in Context.ChangeTracker.Entries().Where(e => e.Entity is not null && e.State == EntityState.Deleted).ToList())
        {
            if (entity.Entity is Dependency dependency)
            {
                if (Step?.Dependencies.Contains(dependency) == false)
                    Step.Dependencies.Add(dependency);
            }

            if (ResetDeletedEntities is not null)
                ResetDeletedEntities(entity);

            entity.State = EntityState.Unchanged;
        }

        // Reset changed entities.
        Context.ChangeTracker
            .Entries()
            .Where(e => e.Entity is not null)
            .ToList()
            .ForEach(e => e.State = EntityState.Unchanged);

        ResetTags();
        AllTags = null;
    }

    private async Task SubmitStep()
    {
        StepError = string.Empty;

        if (StepValidityCheck is not null && Step is not null)
        {
            (var result, var message) = StepValidityCheck(Step);
            if (!result)
            {
                StepError = message ?? string.Empty;
                return;
            }
        }

        // Synchronize tags
        foreach (var text in Tags.Where(str => !Step?.Tags.Any(t => t.TagName == str) ?? false))
        {
            // New tags
            var tag = AllTags?.FirstOrDefault(t => t.TagName == text) ?? new Tag(text);
            Step?.Tags.Add(tag);
        }
        foreach (var tag in Step?.Tags.Where(t => !Tags.Contains(t.TagName)).ToList() ?? Enumerable.Empty<Tag>())
        {
            Step?.Tags.Remove(tag);
        }

        // Save changes.
        try
        {
            // Existing step
            if (Step?.StepId != Guid.Empty)
            {
                Context.Attach(Step).State = EntityState.Modified;
            }
            // New step
            else
            {
                Context.Steps.Add(Step);
            }
            await Context.SaveChangesAsync();

            await OnStepSubmit.InvokeAsync(Step);
            await Modal.HideAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            Messenger.AddError("Concurrency error",
                "The step has been modified outside of this session. Reload the page to view the most recent settings.");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error adding/editing step", $"{ex.Message}\n{ex.InnerException?.Message}");
        }
    }

    public async Task ShowAsync(bool showDependencies = false)
    {
        ShowDependencies = showDependencies;
        await Modal.ShowAsync();
    }


}
