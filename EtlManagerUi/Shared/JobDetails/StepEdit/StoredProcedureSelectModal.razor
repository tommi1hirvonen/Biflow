@inject IJSRuntime JS
@inject IWebHostEnvironment WebHostEnvironment
@inject SqlServerHelperService SqlServerHelperService

<BSModal @ref="Modal" Size="Size.Large" IsScrollable="true" IsOpenChanged="ModalOpenChanged">
    <BSModalHeader OnClick="() => Modal.Hide()">Select stored procedure</BSModalHeader>

    <BSModalBody>
        <div class="row">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                Schemas
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Procedures is null)
                        {
                            <tr><td>Loading...</td></tr>
                        }
                        else
                        {
                            foreach (var schema in Procedures.Keys)
                            {
                                <tr style="cursor: pointer;" @onclick="() => OnSchemaChanged(schema)" class="@(schema == SelectedSchema ? "bg-light font-weight-bold" : null)">
                                    <td>@schema</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-lg-6">
                <div class="input-group input-group-sm">
                    <label class="sr-only">Search</label>
                    <div class="input-group-prepend">
                        <div class="input-group-text rounded-left">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/filter.svg")))
                        </div>
                    </div>
                    <input type="text" class="form-control" @bind-value="FilterText" @bind-value:event="oninput"
                           placeholder="Filter by name" autocomplete="off" />
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                Stored procedures
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Procedures is null)
                        {
                            <tr><td>Loading...</td></tr>
                        }
                        else if (SelectedSchema is not null)
                        {
                            foreach (var procedure in Procedures[SelectedSchema].Where(p => p.ContainsIgnoreCase(FilterText)).OrderBy(p => p))
                            {
                                <tr style="cursor: pointer;" @onclick="() => SelectedProcedure = procedure" class="@(procedure == SelectedProcedure ? "bg-light font-weight-bold" : null)">
                                    <td>@procedure</td>
                                </tr>
                            }
                        }
                        else if (Procedures.Count == 0)
                        {
                            <tr><td>No stored procedures</td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BSModalBody>

    <BSModalFooter>
        <BSButton Color="Color.Primary" Class="ml-5" @onclick="SelectProcedure"
                  IsDisabled="SelectedSchema is null || SelectedProcedure is null">
            Select
        </BSButton>
        <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Cancel</BSButton>
    </BSModalFooter>
</BSModal>

@code {

    private BSModal Modal { get; set; } = null!;

    [Parameter]
    public Guid? ConnectionId { get; set; }

    [Parameter]
    public EventCallback<(string Schema, string Procedure)> OnProcedureSelected { get; set; }

    private Dictionary<string, List<string>>? Procedures { get; set; }

    private string FilterText { get; set; } = string.Empty;

    private string? SelectedSchema { get; set; }
    private string? SelectedProcedure { get; set; }

    private async Task ModalOpenChanged(bool isOpen)
    {
        if (isOpen && ConnectionId is not null && ConnectionId != Guid.Empty)
        {
            try
            {
                Procedures = await SqlServerHelperService.GetStoredProcedures((Guid)ConnectionId);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error reading procedures: {ex.Message}");
            }
        }
        else
        {
            Procedures = null;
            SelectedSchema = null;
            SelectedProcedure = null;
            FilterText = string.Empty;
        }
    }

    private void OnSchemaChanged(string schema)
    {
        if (schema != SelectedSchema)
        {
            SelectedProcedure = null;
        }
        SelectedSchema = schema;
    }

    private void SelectProcedure()
    {
        if (SelectedSchema is not null && SelectedProcedure is not null)
        {
            var procedure = (SelectedSchema, SelectedProcedure);
            OnProcedureSelected.InvokeAsync(procedure);
            Modal.Hide();
        }
    }

    public void Show() => Modal.Show();
}
