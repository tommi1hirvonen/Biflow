@inject IConfiguration Configuration
@inject IHxMessengerService Messenger
@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbContextFactory
@inject ITokenService TokenService

<HxModal @ref="Modal" Size="ModalSize.Large" Scrollable="true" OnClosed="OnClosed" Title="Select pipeline">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/folder.svg")))
                                Folders
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Pipelines is null)
                        {
                            <tr><td>Loading...</td></tr>
                        }
                        else if (Pipelines.Count == 0)
                        {
                            <tr><td>No pipelines</td></tr>
                        }
                        else
                        {
                            foreach (var folder in Pipelines.Keys.OrderBy(folder => folder))
                            {
                                <tr style="cursor: pointer;" @onclick="() => OnFolderChanged(folder)" class="@(folder == SelectedFolder ? "bg-light font-weight-bold" : null)">
                                    <td>@folder</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-lg-6">
                <div class="input-group input-group-sm">
                    <label class="visually-hidden">Search</label>
                    <div class="input-group-prepend">
                        <div class="input-group-text rounded-left">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/filter.svg")))
                        </div>
                    </div>
                    <input type="text" class="form-control" @bind-value="FilterText" @bind-value:event="oninput"
                           placeholder="Filter by name" autocomplete="off" />
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <table class="table table-hover table-sm">
                    <thead>
                        <tr>
                            <th>
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/pipeline.svg")))
                                Pipelines
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Pipelines is not null && SelectedFolder is not null)
                        {
                            foreach (var pipeline in Pipelines[SelectedFolder].Where(p => p.ContainsIgnoreCase(FilterText)).OrderBy(p => p))
                            {
                                <tr style="cursor: pointer;" @onclick="() => SelectedPipeline = pipeline" class="@(pipeline == SelectedPipeline ? "bg-light font-weight-bold" : null)">
                                    <td>@pipeline</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>

    <FooterTemplate>
        <HxButton Color="ThemeColor.Primary" CssClass="ms-5" @onclick="SelectPipelineAsync"
                  Enabled="SelectedPipeline is not null">
            Select
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" @onclick="async () => await Modal.HideAsync()">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {

    private HxModal Modal { get; set; } = null!;

    [Parameter]
    public Guid? DataFactoryId { get; set; }

    [Parameter]
    public EventCallback<string> OnPipelineSelected { get; set; }

    private Dictionary<string, List<string>>? Pipelines { get; set; }

    private string FilterText { get; set; } = string.Empty;

    private string? SelectedFolder { get; set; }
    private string? SelectedPipeline { get; set; }

    private void OnFolderChanged(string folder)
    {
        if (folder != SelectedFolder)
        {
            SelectedPipeline = null;
        }
        SelectedFolder = folder;
    }

    private async Task SelectPipelineAsync()
    {
        await OnPipelineSelected.InvokeAsync(SelectedPipeline);
        await Modal.HideAsync();
    }

    private void OnClosed()
    {
        Pipelines = null;
        SelectedFolder = null;
        SelectedPipeline = null;
        FilterText = string.Empty;
    }

    public async Task ShowAsync()
    {
        await Modal.ShowAsync();
        if (DataFactoryId is null || DataFactoryId == Guid.Empty) return;
        try
        {
            Guid dataFactoryId = DataFactoryId ?? throw new ArgumentNullException(nameof(dataFactoryId), "Data Factory id cannot be null");
            using var context = DbContextFactory.CreateDbContext();
            var dataFactory = await context.DataFactories
                .AsNoTrackingWithIdentityResolution()
                .Include(df => df.AppRegistration)
                .FirstAsync(df => df.DataFactoryId == dataFactoryId);
            Pipelines = await dataFactory.GetPipelinesAsync(TokenService);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error reading pipelines", ex.Message);
        }
    }
}
