@inject IWebHostEnvironment WebHostEnvironment

@if (Step is not null)
{
    <p />
    <h5>Parameters</h5>
    <table id="parameters_table" class="table table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Inherit from job</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!Step.StepParameters.Any())
            {
                <tr><td colspan="5">No parameters</td></tr>
            }
            @foreach (var param in Step.StepParameters)
            {
            <tr>
                <td>
                    <BSBasicInput Size="Size.Small" @bind-Value="param.ParameterName" placeholder="Name"></BSBasicInput>
                </td>
                <td class="align-middle">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="inherit_@(param.ParameterId)"
                               checked=@(param.JobParameterId is not null)
                               disabled=@(!JobParameters.Any())
                               @onchange="args => SetJobParameter((bool)args.Value!, param)">
                        <label class="custom-control-label" for="inherit_@(param.ParameterId)"></label>
                    </div>
                </td>
                @if (param.JobParameterId is not null)
                {
                    <td colspan="2">
                        <InputSelect class="form-control form-control-sm" @bind-Value="param.JobParameterId">
                            @foreach (var jobParam in JobParameters)
                                        {
                                <option value="@jobParam.ParameterId">
                                    @jobParam.ParameterName (@jobParam.ParameterType = @jobParam.ParameterValue)
                                </option>
                                        }
                        </InputSelect>
                    </td>
                }
                else
                {
                    <ParameterTypeValueEditComponent Parameter="param" />
                }
                <td>
                    <BSButtonGroup Size="Size.Small" Class="btn-row">
                        <BSButton Color="Color.Light" Size="Size.Small" Class="btn-row" @onclick="() => Step.StepParameters.Remove(param)">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/delete.svg")))
                        </BSButton>
                    </BSButtonGroup>
                </td>
            </tr>
            }
        </tbody>
    </table>
    var type = ParameterType.String;
    <BSButton Color="Color.Light" Size="Size.Small" @onclick="() => Step.StepParameters.Add(new StepParameter { ParameterType = type, ParameterValue = string.Empty })">
        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/plus.svg")))
    </BSButton>
}

@code {
    [Parameter]
    public ParameterizedStep? Step { get; set; }

    [Parameter]
    public ICollection<JobParameter> JobParameters { get; set; } = new List<JobParameter>();

    private void SetJobParameter(bool inheritFromJob, StepParameter param)
    {
        if (inheritFromJob)
        {
            param.JobParameterId = JobParameters.FirstOrDefault()?.ParameterId;
        }
        else
        {
            param.JobParameterId = null;
        }
    }
}
