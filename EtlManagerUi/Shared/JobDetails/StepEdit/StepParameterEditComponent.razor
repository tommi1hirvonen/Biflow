@inject IWebHostEnvironment WebHostEnvironment

@if (Step is not null)
{
    <p />
    <h5>Parameters</h5>
    <table id="parameters_table" class="table table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Inherit from job</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!Step.StepParameters.Any())
            {
                <tr><td colspan="5">No parameters</td></tr>
            }
            @foreach (var param in Step.StepParameters)
            {
            <tr>
                <td>
                    <BSBasicInput Size="Size.Small" @bind-Value="param.ParameterName" placeholder="Name"></BSBasicInput>
                </td>
                <td class="align-middle">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="inherit_@(param.ParameterId)"
                               checked=@(param.JobParameterId is not null)
                               disabled=@(!JobParameters.Any())
                               @onchange="args => SetJobParameter((bool)args.Value, param)">
                        <label class="custom-control-label" for="inherit_@(param.ParameterId)"></label>
                    </div>
                </td>
                @if (param.JobParameterId is not null)
                {
                    <td colspan="2">
                        <InputSelect class="form-control form-control-sm" @bind-Value="param.JobParameterId">
                            @foreach (var jobParam in JobParameters)
                                        {
                                <option value="@jobParam.ParameterId">
                                    @jobParam.ParameterName (@jobParam.ParameterType = @jobParam.ParameterValue)
                                </option>
                                        }
                        </InputSelect>
                    </td>
                }
                else
                {
                    <td>
                        <div class="input-group">
                            <InputSelect class="form-control form-control-sm"
                                         @bind-Value="param.ParameterType">
                                <option>Boolean</option>
                                <option>Byte</option>
                                <option>DateTime</option>
                                <option>Decimal</option>
                                <option>Double</option>
                                <option>Int16</option>
                                <option>Int32</option>
                                <option>Int64</option>
                                <option>SByte</option>
                                <option>Single</option>
                                <option>String</option>
                                <option>UInt32</option>
                                <option>UInt64</option>
                            </InputSelect>
                        </div>
                    </td>
                    <td>
                        @switch (param.ParameterType)
                        {
                            case "Boolean":
                                <div class="input-group">
                                    <InputSelectBoolean class="form-control form-control-sm" @bind-Value="param.ValueBoolean">
                                        <option value="True">True</option>
                                        <option value="False">False</option>
                                    </InputSelectBoolean>
                                </div>
                                break;
                            case "Byte":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueByte" placeholder="Value"></BSBasicInput>
                                break;
                            case "DateTime":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueDateTime" placeholder="Value"></BSBasicInput>
                                break;
                            case "Decimal":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueDecimal" placeholder="Value"></BSBasicInput>
                                break;
                            case "Double":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueDouble" placeholder="Value"></BSBasicInput>
                                break;
                            case "Int16":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueInt16" placeholder="Value"></BSBasicInput>
                                break;
                            case "Int32":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueInt32" placeholder="Value"></BSBasicInput>
                                break;
                            case "Int64":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueInt64" placeholder="Value"></BSBasicInput>
                                break;
                            case "SByte":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueSByte" placeholder="Value"></BSBasicInput>
                                break;
                            case "Single":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueSingle" placeholder="Value"></BSBasicInput>
                                break;
                            case "String":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueString" placeholder="Value"></BSBasicInput>
                                break;
                            case "UInt32":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueUInt32" placeholder="Value"></BSBasicInput>
                                break;
                            case "UInt64":
                                <BSBasicInput Size="Size.Small" @bind-Value="param.ValueUInt64" placeholder="Value"></BSBasicInput>
                                break;
                        }
                    </td>
                }
                <td>
                    <BSButtonGroup Size="Size.Small" Class="btn-row">
                        <BSButton Color="Color.Light" Size="Size.Small" Class="btn-row" @onclick="() => Step.StepParameters.Remove(param)">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/delete.svg")))
                        </BSButton>
                    </BSButtonGroup>
                </td>
            </tr>
            }
        </tbody>
    </table>
    var type = "String";
    <BSButton Color="Color.Light" Size="Size.Small" @onclick="() => Step.StepParameters.Add(new StepParameter { ParameterType = type, ParameterValue = string.Empty })">
        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/plus.svg")))
    </BSButton>
}

@code {
    [Parameter]
    public ParameterizedStep? Step { get; set; }

    [Parameter]
    public ICollection<JobParameter> JobParameters { get; set; } = new List<JobParameter>();

    private void SetJobParameter(bool inheritFromJob, StepParameter param)
    {
        if (inheritFromJob)
        {
            param.JobParameterId = JobParameters.FirstOrDefault()?.ParameterId;
        }
        else
        {
            param.JobParameterId = null;
        }
    }
}
