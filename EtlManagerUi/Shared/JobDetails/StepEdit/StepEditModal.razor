@implements IDisposable

@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS

<BSModal @ref="Modal" Size="Size.Large" IsScrollable="true" IsOpenChanged="IsModalOpenChanged">
    @if (Step is not null && Jobs is not null && Connections is not null && DataFactories is not null && PowerBIServices is not null && Steps is not null)
    {
        <BSModalHeader OnClick="() => Modal.Hide()">@(Step.StepId == Guid.Empty ? "New step" : "Edit " + Step.StepName)</BSModalHeader>
        <BSModalBody>
            <div class="row">
                <div class="col mx-3">

                    <BSForm id="step_edit_form" Model="Step" OnValidSubmit="SubmitStep">
                        <BSButtonGroup Size="Size.Small" Class="mb-3">
                            <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(!ShowDependencies ? "active" : null)"
                                      @onclick="() => ShowDependencies = false">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/settings.svg")))
                                Settings
                            </BSButton>
                            <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(ShowDependencies ? "active" : null)"
                                      @onclick="() => ShowDependencies = true">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/diagram-3-fill.svg")))
                                Dependencies
                            </BSButton>
                        </BSButtonGroup>

                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        @if (!ShowDependencies)
                        {
                            <BSFormRow>
                                <BSFormGroup Class="col">
                                    <BSLabel>Step name</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-3.svg")))
                                            </div>
                                        </div>
                                        <InputText class="form-control" @bind-Value="Step.StepName"></InputText>
                                    </div>
                                </BSFormGroup>
                            </BSFormRow>
                            <BSFormGroup>
                                <BSLabel>Description</BSLabel>
                                <div class="input-group input-group-sm">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/book-open.svg")))
                                        </div>
                                    </div>
                                    <InputTextArea class="form-control" @bind-Value="Step.StepDescription" rows="2"></InputTextArea>
                                </div>
                            </BSFormGroup>
                            <BSFormRow>
                                <div class="col">
                                    <BSFormRow>
                                        <BSFormGroup Class="col">
                                            <BSLabel>Execution phase</BSLabel>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/layers.svg")))
                                                    </div>
                                                </div>
                                                <InputNumber class="form-control" @bind-Value="Step.ExecutionPhase"></InputNumber>
                                            </div>
                                        </BSFormGroup>
                                        <BSFormGroup Class="col">
                                            <BSLabel>Step type</BSLabel>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tool.svg")))
                                                    </div>
                                                </div>
                                                <InputSelect class="form-control" @bind-Value="Step.StepType" @oninput="StepTypeChanged">
                                                    <option>SQL</option>
                                                    <option>SSIS</option>
                                                    <option>PIPELINE</option>
                                                    <option>JOB</option>
                                                    <option>EXE</option>
                                                    <option>DATASET</option>
                                                </InputSelect>
                                            </div>
                                        </BSFormGroup>
                                    </BSFormRow>
                                </div>
                                <div class="col-lg">
                                    <BSFormRow>
                                        <BSFormGroup Class="col">
                                            <BSLabel>Retry attempts</BSLabel>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/repeat.svg")))
                                                    </div>
                                                </div>
                                                <InputNumber class="form-control" @bind-Value="Step.RetryAttempts"></InputNumber>
                                            </div>
                                        </BSFormGroup>
                                        <BSFormGroup Class="col">
                                            <BSLabel>Retry interval (min)</BSLabel>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/clock.svg")))
                                                    </div>
                                                </div>
                                                <InputNumber class="form-control" @bind-Value="Step.RetryIntervalMinutes"></InputNumber>
                                            </div>
                                        </BSFormGroup>
                                    </BSFormRow>
                                </div>
                            </BSFormRow>
                            @if (Step.StepType == "SQL" || Step.StepType == "SSIS" || Step.StepType == "PIPELINE" || Step.StepType == "EXE")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col-lg-6">
                                        <BSLabel>Timeout (min) (0 = indefinite)</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                                                </div>
                                            </div>
                                            <InputNumber class="form-control" @bind-Value="Step.TimeoutMinutes"></InputNumber>
                                        </div>
                                    </BSFormGroup>
                                    @if (Step.StepType == "SQL" || Step.StepType == "SSIS")
                                    {
                                        <BSFormGroup Class="col-lg-6">
                                            <BSLabel>Connection</BSLabel>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/database.svg")))
                                                    </div>
                                                </div>
                                                <InputSelect class="form-control" @bind-Value="Step.ConnectionId">
                                                    @foreach (var connection in Connections)
                                                                    {
                                                        <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                                                                    }
                                                </InputSelect>
                                            </div>
                                        </BSFormGroup>
                                    }
                                </BSFormRow>
                            }
                            @if (Step.StepType == "SQL")
                            {
                                <BSFormGroup>
                                    <BSLabel>SQL statement</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/code.svg")))
                                            </div>
                                        </div>
                                        <InputTextArea class="form-control" @bind-Value="Step.SqlStatement" style="font-family: monospace;" rows="3" @oninput="ResetStepError"></InputTextArea>
                                    </div>
                                </BSFormGroup>
                                <div class="row mb-3">
                                    <div class="col">
                                        <BSButton Size="Size.Small" Color="Color.Light" @onclick="OpenStoredProcedureSelectModal">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                                            Browse stored procedures
                                        </BSButton>
                                    </div>
                                </div>
                                <StoredProcedureSelectModal @ref="StoredProcedureSelectModal" ConnectionId="Step.ConnectionId" OnProcedureSelected="OnStoredProcedureSelected" />
                            }
                            @if (Step.StepType == "SSIS")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Folder name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/folder.svg")))
                                                </div>
                                            </div>
                                            <InputText class="form-control" @bind-Value="Step.PackageFolderName" @onchange="ResetStepError"></InputText>
                                        </div>
                                    </BSFormGroup>
                                    <BSFormGroup Class="col-lg">
                                        <BSLabel>Project name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/briefcase.svg")))
                                                </div>
                                            </div>
                                            <InputText class="form-control" @bind-Value="Step.PackageProjectName" @oninput="ResetStepError"></InputText>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Package name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/package.svg")))
                                                </div>
                                            </div>
                                            <InputText class="form-control" @bind-Value="Step.PackageName" @oninput="ResetStepError"></InputText>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <div class="row mb-3">
                                    <div class="col">
                                        <BSButton Size="Size.Small" Color="Color.Light" @onclick="OpenPackageSelectModal">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                                            Browse catalog
                                        </BSButton>
                                    </div>
                                </div>
                                <PackageSelectModal @ref="PackageSelectModal" ConnectionId="Step.ConnectionId" OnPackageSelected="OnPackageSelected" />
                                <BSFormRow>
                                    <div class="col">
                                        <div class="custom-control custom-checkbox custom-control-inline">
                                            <input type="checkbox" class="custom-control-input" id="new_step_32bit_mode"
                                                   checked=@Step.ExecuteIn32BitMode
                                                   @bind-value="Step.ExecuteIn32BitMode">
                                            <label class="custom-control-label" for="new_step_32bit_mode">Execute in 32 bit mode</label>
                                        </div>
                                    </div>
                                </BSFormRow>
                                <BSFormRow Class="mt-2">
                                    <BSFormGroup Class="col">
                                        <BSLabel>Execute as login (blank = no impersonation)</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/user.svg")))
                                                </div>
                                            </div>
                                            <InputText class="form-control" @bind-Value="Step.ExecuteAsLogin" @oninput="ResetStepError"></InputText>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                            }
                            @if (Step.StepType == "PIPELINE")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Data Factory</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/factory.svg")))
                                                </div>
                                            </div>
                                            <InputSelect class="form-control" @bind-Value="Step.DataFactoryId">
                                                @foreach (var dataFactory in DataFactories)
                                                            {
                                                    <option value="@dataFactory.DataFactoryId">@dataFactory.DataFactoryName</option>
                                                            }
                                            </InputSelect>
                                        </div>
                                    </BSFormGroup>
                                    <BSFormGroup Class="col-lg">
                                        <BSLabel>Pipeline name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/pipeline.svg")))
                                                </div>
                                            </div>
                                            <InputText class="form-control" @bind-Value="Step.PipelineName" @oninput="ResetStepError"></InputText>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <div class="row mb-3">
                                    <div class="col">
                                        <BSButton Size="Size.Small" Color="Color.Light" @onclick="OpenPipelineSelectModal">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                                            Browse pipelines
                                        </BSButton>
                                    </div>
                                </div>
                                <PipelineSelectModal @ref="PipelineSelectModal" DataFactoryId="Step.DataFactoryId" OnPipelineSelected="OnPipelineSelected" />
                            }
                            @if (Step.StepType == "JOB")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col-lg-6">
                                        <BSLabel>Job</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/loader.svg")))
                                                </div>
                                            </div>
                                            <InputSelect class="form-control" @bind-Value="Step.JobToExecuteId">
                                                @foreach (var job in Jobs.Where(job => job.JobId != Step.JobId))
                                                            {
                                                    <option value="@job.JobId">@job.JobName</option>
                                                            }
                                            </InputSelect>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <div class="col">
                                        <div class="custom-control custom-checkbox custom-control-inline">
                                            <input type="checkbox" class="custom-control-input" id="new_step_job_synchronized"
                                                   checked=@Step.JobExecuteSynchronized
                                                   @bind-value="Step.JobExecuteSynchronized">
                                            <label class="custom-control-label" for="new_step_job_synchronized">Synchronized</label>
                                        </div>
                                    </div>
                                </BSFormRow>
                            }
                            @if (Step.StepType == "EXE")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>File path</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/file.svg")))
                                                </div>
                                            </div>
                                            <InputText class="form-control" @bind-Value="Step.ExeFileName" @oninput="ResetStepError"></InputText>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Arguments</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/command.svg")))
                                                </div>
                                            </div>
                                            <InputText class="form-control" @bind-Value="Step.ExeArguments" @oninput="ResetStepError"></InputText>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Working directory</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/folder.svg")))
                                                </div>
                                            </div>
                                            <InputText class="form-control" @bind-Value="Step.ExeWorkingDirectory" @oninput="ResetStepError"></InputText>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Success exit code (blank if not applicable)</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/check-circle.svg")))
                                                </div>
                                            </div>
                                            <InputNumber class="form-control" @bind-Value="Step.ExeSuccessExitCode" @oninput="ResetStepError"></InputNumber>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                            }
                            @if (Step.StepType == "DATASET")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Power BI Service</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/bar-chart-2.svg")))
                                                </div>
                                            </div>
                                            <InputSelect class="form-control" @bind-Value="Step.PowerBIServiceId">
                                                @foreach (var pbi in PowerBIServices)
                                                {
                                                    <option value="@pbi.PowerBIServiceId">@pbi.PowerBIServiceName</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <BSFormGroup Class="col-lg">
                                        <BSLabel>Group id</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/folder.svg")))
                                                </div>
                                            </div>
                                            <InputText class="form-control" @bind-Value="Step.DatasetGroupId" @oninput="ResetStepError"></InputText>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <BSFormGroup Class="col-lg">
                                        <BSLabel>Dataset id</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/file.svg")))
                                                </div>
                                            </div>
                                            <InputText class="form-control" @bind-Value="Step.DatasetId" @oninput="ResetStepError"></InputText>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <div class="row mb-3">
                                    <div class="col">
                                        <BSButton Size="Size.Small" Color="Color.Light" @onclick="OpenDatasetSelectModal">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                                            Browse datasets
                                        </BSButton>
                                    </div>
                                </div>
                                <DatasetSelectModal @ref="DatasetSelectModal" PowerBIServiceId="Step.PowerBIServiceId" OnDatasetSelected="OnDatasetSelected" />
                            }

                            <p class="text-danger">@StepError</p>

                            <ParameterEditComponent Step="Step" />

                        }
                        else
                        {
                            <div class="row mt-2 align-items-center">
                                <div class="input-group input-group-sm col">
                                    <label class="sr-only">Search</label>
                                    <div class="input-group-prepend">
                                        <div class="input-group-text rounded-left">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
                                        </div>
                                    </div>
                                    <input type="text" class="form-control" @bind-value="DependenciesFilterText" @bind-value:event="oninput" placeholder="Search" autocomplete="off" />
                                </div>
                                <div class="custom-control custom-control-inline custom-checkbox col ml-3">
                                    <input type="checkbox" class="custom-control-input" id="only_active"
                                           checked=@ShowOnlyActiveDependencies
                                           @onchange="() => ShowOnlyActiveDependencies = !ShowOnlyActiveDependencies">
                                    <label class="custom-control-label" for="only_active">Show only active</label>
                                </div>
                            </div>

                            <table class="table table-sm table-striped mt-3">
                                <thead>
                                    <tr>
                                        <th>Step name</th>
                                        <th>Dependent on</th>
                                        <th>Strict dependency</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var step in Steps
                            .Where(step => step.StepId != StepId) // Exclude current step => step cannot depend on itself.
                            .Where(step => step.StepName.ContainsIgnoreCase(DependenciesFilterText)) // Filter based on search filter.
                            .Where(step => Step.Dependencies.Any(d => d.DependantOnStepId == step.StepId) || !ShowOnlyActiveDependencies) // Only show active dependencies if checked.
                            .OrderBy(step => step.StepName))
                                    {
                                        <tr>
                                            <td class="align-middle">@step.StepName</td>
                                            <td class="align-middle">
                                                <div class="custom-control custom-control-inline custom-checkbox">
                                                    <input type="checkbox" class="custom-control-input" id="dependency_@step.StepId"
                                                           checked=@(Step.Dependencies.Any(dep => dep.DependantOnStepId == step.StepId))
                                                           @onchange="eventArgs => ToggleDependency(step, eventArgs.Value)">
                                                    <label class="custom-control-label" for="dependency_@step.StepId"></label>
                                                </div>
                                            </td>
                                            <td class="align-middle">
                                                @if (Step.Dependencies.Any(dep => dep.DependantOnStepId == step.StepId))
                                                {
                                                    <div class="custom-control custom-control-inline custom-checkbox">
                                                        <input type="checkbox" class="custom-control-input" id="strict_@step.StepId"
                                                               checked=@(Step.Dependencies.Where(dep => dep.DependantOnStepId == step.StepId).Any(dep => dep.StrictDependency))
                                                               @onchange="eventArgs => ToggleStrictDependency(step, eventArgs.Value)">
                                                        <label class="custom-control-label" for="strict_@step.StepId"></label>
                                                    </div>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </BSForm>
                </div>
            </div>
        </BSModalBody>
        <BSModalFooter>
            <BSButton ButtonType="ButtonType.Submit" form="step_edit_form" Color="Color.Success">@(Step.StepId == Guid.Empty ? "Create" : "Save")</BSButton>
            <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Cancel</BSButton>
        </BSModalFooter>
    }
</BSModal>



@code {
    // Use the same context to read and write to enable change tracking for all step child properties (e.g. parameters and dependencies).
    private EtlManagerContext Context { get; set; } = null!;

    [Parameter]
    public Guid StepId { get; set; } // empty Guid => new step

    private Guid PrevStepId { get; set; }

    [Parameter]
    public Job? Job { get; set; }

    private Step Step { get; set; } = new();

    [Parameter]
    public IList<Job>? Jobs { get; set; }

    [Parameter]
    public IList<Step>? Steps { get; set; }

    private IList<Connection>? Connections { get; set; }

    private IList<DataFactory>? DataFactories { get; set; }

    private IList<PowerBIService>? PowerBIServices { get; set; }

    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }

    private BSModal Modal { get; set; } = null!;

    private string StepError { get; set; } = string.Empty;

    private bool ShowDependencies { get; set; } = false;
    private string DependenciesFilterText { get; set; } = string.Empty;
    private bool ShowOnlyActiveDependencies { get; set; } = false;

    private PackageSelectModal PackageSelectModal { get; set; } = null!;
    private PipelineSelectModal PipelineSelectModal { get; set; } = null!;
    private DatasetSelectModal DatasetSelectModal { get; set; } = null!;
    private StoredProcedureSelectModal StoredProcedureSelectModal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        Connections = await Context.Connections.AsNoTracking().ToListAsync();
        DataFactories = await Context.DataFactories.AsNoTracking().ToListAsync();
        PowerBIServices = await Context.PowerBIServices.AsNoTracking().ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (StepId != Guid.Empty && StepId != PrevStepId)
        {
            Step = await Context.Steps
                .Include(step => step.PackageParameters)
                .Include(step => step.PipelineParameters)
                .Include(step => step.Dependencies)
                .Include(step => step.Tags)
                .FirstOrDefaultAsync(step => step.StepId == StepId);
            PrevStepId = StepId;
        }
        else if (StepId == Guid.Empty && Job is not null)
        {
            Step = new()
            {
                JobId = Job.JobId,
                RetryAttempts = 0,
                RetryIntervalMinutes = 0,
                StepType = "SQL",
                IsEnabled = true,
                ConnectionId = Connections?.FirstOrDefault()?.ConnectionId,
                PackageParameters = new List<PackageParameter>(),
                PipelineParameters = new List<PipelineParameter>(),
                Dependencies = new List<Dependency>(),
                Tags = new List<Tag>()
            };
        }
        StateHasChanged();
    }

    private void StepTypeChanged(ChangeEventArgs args)
    {
        ResetStepError();

        // If the required id property is not set then try to set it to the first one from the available options.
        // The property would otherwise be null even though the corresponding select input shows a valid option.
        var stepType = args.Value?.ToString();
        if ((stepType == "SQL" || stepType == "SSIS") && Step.ConnectionId is null)
        {
            Step.ConnectionId = Connections?.FirstOrDefault()?.ConnectionId;
        }
        else if (stepType == "PIPELINE" && Step.DataFactoryId is null)
        {
            Step.DataFactoryId = DataFactories?.FirstOrDefault()?.DataFactoryId;
        }
        else if (stepType == "JOB" && Step.JobToExecuteId is null)
        {
            Step.JobToExecuteId = Jobs?.Where(job => job.JobId != Job?.JobId).FirstOrDefault()?.JobId;
        }
        else if (stepType == "DATASET" && Step.PowerBIServiceId is null)
        {
            Step.PowerBIServiceId = PowerBIServices?.FirstOrDefault()?.PowerBIServiceId;
        }
    }

    private void ResetStepError()
    {
        StepError = string.Empty;
    }

    private void IsModalOpenChanged(bool isOpen)
    {
        // If the modal is being simply closed, reset any changes made to entities loaded from the database.
        // If the user saves their changes, SubmitStep() is called first and changes are saved.
        if (!isOpen)
        {
            // Reset added entities.
            foreach (var entity in Context.ChangeTracker.Entries().Where(e => e.Entity is not null && e.State == EntityState.Added).ToList())
            {
                if (entity.Entity is Dependency dependency)
                {
                    if (Step.Dependencies.Contains(dependency))
                        Step.Dependencies.Remove(dependency);
                }
                else if (entity.Entity is PackageParameter packageParam)
                {
                    if (Step.PackageParameters.Contains(packageParam))
                        Step.PackageParameters.Remove(packageParam);
                }
                else if (entity.Entity is PipelineParameter pipelineParam)
                {
                    if (Step.PipelineParameters.Contains(pipelineParam))
                        Step.PipelineParameters.Remove(pipelineParam);
                }
                entity.State = EntityState.Detached;
            }

            // Reset deleted entities.
            foreach (var entity in Context.ChangeTracker.Entries().Where(e => e.Entity is not null && e.State == EntityState.Deleted).ToList())
            {
                if (entity.Entity is Dependency dependency)
                {
                    if (!Step.Dependencies.Contains(dependency))
                        Step.Dependencies.Add(dependency);
                }
                else if (entity.Entity is PackageParameter packageParam)
                {
                    if (!Step.PackageParameters.Contains(packageParam))
                        Step.PackageParameters.Add(packageParam);
                }
                else if (entity.Entity is PipelineParameter pipelineParam)
                {
                    if (!Step.PipelineParameters.Contains(pipelineParam))
                        Step.PipelineParameters.Add(pipelineParam);
                }
                entity.State = EntityState.Unchanged;
            }

            // Reset changed entities.
            Context.ChangeTracker
                .Entries()
                .Where(e => e.Entity is not null)
                .ToList()
                .ForEach(e => e.State = EntityState.Unchanged);
        }
    }

    private async Task SubmitStep()
    {
        StepError = string.Empty;

        // Check various requirements based on step type.
        if (Step.StepType == "SQL" && (string.IsNullOrEmpty(Step.SqlStatement) || Step.ConnectionId is null))
        {
            StepError = "SQL statement and connection cannot be empty";
            return;
        }
        else if (Step.StepType == "SSIS" && (string.IsNullOrEmpty(Step.PackageFolderName)
            || string.IsNullOrEmpty(Step.PackageProjectName) || string.IsNullOrEmpty(Step.PackageName)
            || Step.ConnectionId is null))
        {
            StepError = "Connection, folder, project and package names cannot be empty";
            return;
        }
        else if (Step.StepType == "PIPELINE" && (string.IsNullOrEmpty(Step.PipelineName) || Step.DataFactoryId is null))
        {
            StepError = "Pipeline name and Data Factory cannot be empty";
            return;
        }
        else if (Step.StepType == "DATASET" && (string.IsNullOrWhiteSpace(Step.DatasetGroupId) || string.IsNullOrWhiteSpace(Step.DatasetId) || Step.PowerBIServiceId is null))
        {
            StepError = "Power BI Service, group id and dataset id cannot be empty";
            return;
        }
        else if (Step.StepType == "JOB" && Step.JobToExecuteId is null)
        {
            StepError = "Job cannot be empty";
            return;
        }
        else if (Step.StepType == "EXE" && string.IsNullOrWhiteSpace(Step.ExeFileName))
        {
            StepError = "File path cannot be empty";
            return;
        }

        if ((Step.StepType == "SSIS" || Step.StepType == "PIPELINE") && !ParametersCheck())
        {
            return;
        }

        // Process parameters based on step type.
        if (Step.StepType == "SSIS")
        {
            foreach (var param in Step.PackageParameters)
            {
                param.SetParameterValue();
            }
            Step.PipelineParameters.Clear();
        }
        else if (Step.StepType == "PIPELINE")
        {
            foreach (var param in Step.PipelineParameters)
            {
                param.SetParameterValue();
            }
            Step.PackageParameters.Clear();
        }
        else
        {
            Step.PackageParameters.Clear();
            Step.PipelineParameters.Clear();
        }

        // Save changes.
        try
        {
            // Existing step
            if (Step.StepId != Guid.Empty)
            {
                Context.Attach(Step).State = EntityState.Modified;
            }
            // New step
            else
            {
                Context.Steps.Add(Step);
            }
            await Context.SaveChangesAsync();

            await OnStepSubmit.InvokeAsync(Step);
            Modal.Hide();
        }
        catch (DbUpdateConcurrencyException)
        {
            await JS.InvokeVoidAsync("alert", "Concurrency error: the step has been modified outside of this session. Reload the page to view the most recent settings.");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error adding/editing step: {ex.Message}\n{ex.InnerException?.Message}");
        }
    }

    private bool ParametersCheck()
    {
        if (Step.StepType == "SSIS")
        {
            var parameters = Step.PackageParameters.OrderBy(param => param.ParameterName).ThenBy(param => param.ParameterLevel).ToList();
            foreach (var param in parameters)
            {
                if (string.IsNullOrEmpty(param.ParameterName))
                {
                    StepError = "Parameter name cannot be empty";
                    return false;
                }
            }
            for (var i = 0; i < parameters.Count - 1; i++)
            {
                if (parameters[i + 1].ParameterName == parameters[i].ParameterName
                    && parameters[i + 1].ParameterLevel == parameters[i].ParameterLevel)
                {
                    StepError = "Duplicate parameter names";
                    return false;
                }
            }
        }
        else if (Step.StepType == "PIPELINE")
        {
            var parameters = Step.PipelineParameters.OrderBy(param => param.ParameterName).ToList();
            foreach (var param in parameters)
            {
                if (string.IsNullOrEmpty(param.ParameterName))
                {
                    StepError = "Parameter name cannot be empty";
                    return false;
                }
            }
            for (var i = 0; i < parameters.Count - 1; i++)
            {
                if (parameters[i + 1].ParameterName == parameters[i].ParameterName)
                {
                    StepError = "Duplicate parameter names";
                    return false;
                }
            }
        }

        return true;
    }

    private void OpenPackageSelectModal()
    {
        PackageSelectModal.Show();
    }

    private void OnPackageSelected((string Folder, string Project, string Package) package)
    {
        Step.PackageFolderName = package.Folder;
        Step.PackageProjectName = package.Project;
        Step.PackageName = package.Package;
    }

    private void OpenPipelineSelectModal() => PipelineSelectModal.Show();

    private void OnPipelineSelected(string pipelineName) => Step.PipelineName = pipelineName;

    private void OpenDatasetSelectModal() => DatasetSelectModal.Show();

    private void OnDatasetSelected((string GroupId, string DatasetId) dataset)
    {
        Step.DatasetGroupId = dataset.GroupId;
        Step.DatasetId = dataset.DatasetId;
    }

    private void OpenStoredProcedureSelectModal() => StoredProcedureSelectModal.Show();

    private void OnStoredProcedureSelected((string Schema, string Procedure) procedure) => Step.SqlStatement = $"EXEC [{procedure.Schema}].[{procedure.Procedure}]";

    private void ToggleDependency(Step step, object checkedValue)
    {
        var dependent = (bool)checkedValue;
        var dependency = Step.Dependencies.FirstOrDefault(dep => dep.DependantOnStepId == step.StepId);
        if (!dependent && dependency is not null)
        {
            Step.Dependencies.Remove(dependency);
        }
        else if (dependent && dependency is null)
        {
            Step.Dependencies.Add(new() { StepId = Step.StepId, DependantOnStepId = step.StepId });
        }
    }

    private void ToggleStrictDependency(Step step, object checkedValue)
    {
        var strict = (bool)checkedValue;
        var dependency = Step.Dependencies.FirstOrDefault(dep => dep.DependantOnStepId == step.StepId);
        if (dependency is not null)
        {
            dependency.StrictDependency = strict;
        }
    }


    public void Show(bool showDependencies = false)
    {
        ShowDependencies = showDependencies;
        Modal.Show();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}
