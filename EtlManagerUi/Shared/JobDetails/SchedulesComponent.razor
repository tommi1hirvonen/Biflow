@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject SchedulerService SchedulerService
@inject IWebHostEnvironment WebHostEnvironment
@inject IHxMessengerService Messenger

<style>
    .white-space-pre {
        white-space: pre;
    }
</style>

<AuthorizeView Roles="Admin, Editor, Operator">
    <HxButton Color="ThemeColor.Success" @onclick="async () => await CreateModal.ShowAsync()">
        Add schedule
    </HxButton>
</AuthorizeView>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Enabled
                </th>
                <th>
                    Cron expression
                </th>
                <th>
                    Next execution
                </th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Schedules is null)
            {
                <tr><td colspan="10">Loading...</td></tr>
            }
            else if (Schedules.Count == 0)
            {
                <tr><td colspan="10">No schedules</td></tr>
            }
            else
            {
                @foreach (var item in Schedules)
                {
                    <tr class="@(item.IsEnabled ? null : "disabled")">
                        <td class="align-middle">
                            <div class="form-check form-switch">
                                <AuthorizeView Roles="Admin, Editor, Operator">
                                    <input type="checkbox" class="form-check-input" id="@item.ScheduleId" checked=@item.IsEnabled @onchange="args => ToggleEnabled(args, item)">
                                    <label class="form-check-label" for="@item.ScheduleId"></label>
                                </AuthorizeView>
                                <AuthorizeView Roles="Viewer">
                                    <input type="checkbox" class="form-check-input" disabled checked=@item.IsEnabled>
                                    <label class="form-check-label" for="@item.ScheduleId"></label>
                                </AuthorizeView>
                            </div>
                        </td>
                        <td>
                            <div class="d-inline-flex">
                                @item.CronExpression
                                &nbsp;&nbsp;
                                <HxTooltip Placement="TooltipPlacement.Auto"
                                           Text="@item.GetScheduleSummary()"
                                           CssClass="white-space-pre">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
                                </HxTooltip>
                            </div>
                        </td>
                        <td>
                            <div class="d-inline-flex">
                                @item.GetNextFireTime()
                                &nbsp;&nbsp;
                                <HxTooltip Placement="TooltipPlacement.Auto"
                                           Text="@("Next executions:\n" + string.Join("\n", item.GetNextFireTimes(15)))"
                                           CssClass="white-space-pre">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
                                </HxTooltip>
                            </div>
                        </td>
                        <td align="center">
                            <AuthorizeView Roles="Admin, Editor, Operator">
                                <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                    <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" aria-label="delete" CssClass="btn-row" @onclick="() => DeleteSchedule(item)">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/delete.svg")))
                                    </HxButton>
                                </HxButtonGroup>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (NewSchedule is not null)
{
    <AuthorizeView Roles="Admin, Editor, Operator">
        <HxModal @ref="CreateModal" Size="ModalSize.Regular" Title="New schedule">
            <BodyTemplate>
                <EditForm Model="NewSchedule" id="new_schedule_form" OnValidSubmit="AddSchedule" Context="_context">
                    <div class="row">
                        <div class="col">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div>
                                <label class="form-label">Cron expression</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/calendar.svg")))
                                    </div>
                                    <InputText class="form-control" @bind-Value="NewSchedule.CronExpression"></InputText>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </BodyTemplate>
            <FooterTemplate>
                <HxSubmit FormId="new_schedule_form" Color="ThemeColor.Success">Create</HxSubmit>
                <HxButton Color="ThemeColor.Secondary" @onclick="async () => await CreateModal.HideAsync()">Cancel</HxButton>
            </FooterTemplate>
        </HxModal>
    </AuthorizeView>
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    private Guid PrevId { get; set; }

    private List<Schedule>? Schedules { get; set; }

    private Schedule? NewSchedule { get; set; }

    private HxModal CreateModal { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        if (Id != PrevId)
        {
            PrevId = Id;
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        using var context = DbFactory.CreateDbContext();
        Schedules = await context.Schedules
            .AsNoTrackingWithIdentityResolution()
            .Where(schedule => schedule.JobId == Id)
            .OrderBy(schedule => schedule.CronExpression)
            .ToListAsync();
        NewSchedule = new() { JobId = Id, IsEnabled = true };
    }

    private async Task ToggleEnabled(ChangeEventArgs args, Schedule schedule)
    {
        bool value = (bool)args.Value!;
        try
        {
            var success = await SchedulerService.ToggleScheduleEnabledAsync(schedule, value);
            if (success)
            {
                schedule.IsEnabled = !schedule.IsEnabled;
            }
            else
            {
                throw new Exception("Error sending command to the scheduler service");
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling schedule", ex.Message);
        }
    }

    private async Task AddSchedule()
    {
        await CreateModal.HideAsync();
        try
        {
            if (NewSchedule is null) throw new InvalidOperationException("NewSchedule was null");
            // Save the new schedule to the database.
            using var context = DbFactory.CreateDbContext();
            using var transaction = context.Database.BeginTransaction();
            context.Schedules.Add(NewSchedule);
            await context.SaveChangesAsync();
            // Send the schedule to the scheduler service.
            bool success = await SchedulerService.SendCommandAsync(SchedulerCommand.CommandType.Add, NewSchedule);
            // Commit the database transaction if the scheduler received the schedule. Otherwise rollback the transaction.
            if (success)
            {
                transaction.Commit();
            }
            else
            {
                transaction.Rollback();
                throw new Exception("Error sending the new schedule to the scheduler service");
            }

            Schedules?.Add(NewSchedule);
            Schedules = Schedules?.OrderBy(sched => sched.CronExpression).ToList();
            NewSchedule = new() { JobId = Id, IsEnabled = true };
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error adding schedule", ex.Message);
        }
    }

    private async Task DeleteSchedule(Schedule schedule)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            using var transaction = context.Database.BeginTransaction();
            context.Schedules.Remove(schedule);
            await context.SaveChangesAsync();
            bool success = await SchedulerService.SendCommandAsync(SchedulerCommand.CommandType.Delete, schedule);
            if (success)
            {
                transaction.Commit();
            }
            else
            {
                transaction.Rollback();
                throw new Exception("Error removing the schedule from the scheduler service");
            }

            Schedules?.Remove(schedule);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting schedule", ex.Message);
        }
    }

}
