@implements IDisposable

@inject MarkupHelperService MarkupHelper
@inject IDbContextFactory<EtlManagerContext> DbContextFactory
@inject IHxMessengerService Messenger

<HxModal @ref="Modal" Size="ModalSize.Large" OnClosed="OnClosed" Title="Edit job parameters">

    <BodyTemplate>
        @if (Job is not null)
        {
            <EditForm id="job_parameter_form" Model="Job" OnValidSubmit="SubmitParameters">
                <table id="parameters_table" class="table table-sm">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Value</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var param in Job?.JobParameters ?? Enumerable.Empty<JobParameter>())
                        {
                            <tr>
                                <td>
                                    <HxInputText InputSize="InputSize.Small" @bind-Value="param.ParameterName" placeholder="Name"></HxInputText>
                                </td>
                                <ParameterTypeValueEditComponent Parameter="param" />
                                <td>
                                    <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                        <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" CssClass="btn-row" @onclick="() => Job?.JobParameters.Remove(param)">
                                            @MarkupHelper.FromFile("icons/feather/delete.svg")
                                        </HxButton>
                                    </HxButtonGroup>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                @{ var type = ParameterValueType.String; }
                <HxButton Color="ThemeColor.Light" Size="ButtonSize.Small" @onclick="() => Job?.JobParameters.Add(new JobParameter { ParameterValueType = type })">
                    @MarkupHelper.FromFile("icons/feather/plus.svg")
                </HxButton>
                <p class="text-danger">@ErrorMessage</p>
            </EditForm>
        }
    </BodyTemplate>

    <FooterTemplate>
        <HxSubmit form="job_parameter_form" Color="ThemeColor.Success">Save</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" @onclick="async () => await Modal.HideAsync()">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {

    private HxModal Modal { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public Job Job { get; set; } = null!;

    private EtlManagerContext Context { get; set; } = null!;

    private string? ErrorMessage { get; set; }

    protected override void OnInitialized()
    {
        Context = DbContextFactory.CreateDbContext();
    }

    private async Task SubmitParameters()
    {
        var (paramResult, paramMessage) = ParametersCheck();
        if (!paramResult)
        {
            ErrorMessage = paramMessage;
            return;
        }

        foreach (var param in Job?.JobParameters ?? Enumerable.Empty<JobParameter>())
        {
            param.SetParameterValue();
        }

        try
        {
            await Context.SaveChangesAsync();
            await Modal.HideAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            Messenger.AddError("Concurrency error",
                "The job has been modified outside of this session. Reload the page to view the most recent settings.");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error saving parameters", $"{ex.Message}\n{ex.InnerException?.Message}");
        }

    }

    private (bool Result, string? Message) ParametersCheck()
    {
        var parameters = Job?.JobParameters
            .OrderBy(param => param.ParameterName)
            .ToList() ?? Enumerable.Empty<JobParameter>().ToList();
        foreach (var param in parameters)
        {
            if (string.IsNullOrEmpty(param.ParameterName))
            {
                return (false, "Parameter name cannot be empty");
            }
        }
        for (var i = 0; i < parameters.Count - 1; i++)
        {
            if (parameters[i + 1].ParameterName == parameters[i].ParameterName)
            {
                return (false, "Duplicate parameter names");
            }
        }

        return (true, null);
    }

    public void OnClosed()
    {
        // Reset added entities.
        foreach (var entity in Context.ChangeTracker.Entries().Where(e => e.Entity is not null && e.State == EntityState.Added).ToList())
        {
            if (entity.Entity is JobParameter param)
            {
                if (Job?.JobParameters.Contains(param) == true)
                    Job?.JobParameters.Remove(param);
            }

            entity.State = EntityState.Detached;
        }

        // Reset deleted entities.
        foreach (var entity in Context.ChangeTracker.Entries().Where(e => e.Entity is not null && e.State == EntityState.Deleted).ToList())
        {
            if (entity.Entity is JobParameter param)
            {
                if (Job?.JobParameters.Contains(param) == false)
                    Job?.JobParameters.Add(param);
            }

            entity.State = EntityState.Unchanged;
        }

        // Reset changed entities.
        Context.ChangeTracker
            .Entries()
            .Where(e => e.Entity is not null)
            .ToList()
            .ForEach(e => e.State = EntityState.Detached);
    }

    public async Task Show()
    {
        await Modal.ShowAsync();
        Context.Attach(Job);
    }


    public void Dispose() => Context?.Dispose();
}
