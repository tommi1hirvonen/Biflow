@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject NavigationManager NavigationManager

<div class="card shadow-sm pt-2 mb-4">
    <table class="table table-sm table-hover">
        <thead>
            <tr>
                <th>
                    Created
                </th>
                <th>
                    Started
                </th>
                <th>
                    Ended
                </th>
                <th>
                    Duration
                </th>
                <th>
                    Number of steps
                </th>
                <th>
                    Success percent
                </th>
                <th>
                    Status
                </th>
            </tr>
            <tr>
                <th></th>
                <th></th>
                <th></th>
                <th><text>@AverageDurationInSeconds.SecondsToReadableFormat()</text></th>
                <th></th>
                <th style="text-align: right;">@AverageSuccessRate.FormatPercentage(2)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Executions is null)
            {
                <tr><td colspan="7">Loading...</td></tr>
            }
            else if (Executions.Count == 0)
            {
                <tr><td colspan="7">No executions</td></tr>
            }
            else
            {
                @foreach (var item in Executions)
                {
                    <tr style="cursor: pointer;" @onclick="() => OpenJobExecutionModal(item.ExecutionId)">
                        <td>
                            @item.CreatedDateTime
                        </td>
                        <td>
                            @item.StartDateTime
                        </td>
                        <td>
                            @item.EndDateTime
                        </td>
                        <td>
                            <text>@item.GetDurationInReadableFormat()</text>
                        </td>
                        <td style="text-align: right;">
                            @item.NumberOfSteps
                        </td>
                        <td style="text-align: right;">
                            @item.SuccessPercent.FormatPercentage(2)
                        </td>
                        <td>
                            <JobExecutionStatusBadgeComponent ExecutionStatus="@item.ExecutionStatus" />
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <div class="px-3">
        <hr />
        <p class="text-secondary">Showing @MaxExecutions latest executions</p>
    </div>
</div>

<JobExecutionDetailsModal @ref="JobExecutionModal" ExecutionId_="@SelectedJobExecutionId.ToString()" />

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Guid PrevId { get; set; }

    public IList<JobExecution> Executions { get; set; }

    public int MaxExecutions { get; set; } = 50;

    public decimal AverageSuccessRate { get; set; }
    public int AverageDurationInSeconds { get; set; }

    private JobExecutionDetailsModal JobExecutionModal { get; set; }
    private Guid SelectedJobExecutionId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != PrevId)
        {
            PrevId = Id;
            using var context = DbFactory.CreateDbContext();
            Executions = await context.JobExecutions
                    .Where(execution => execution.JobId == Id)
                    .OrderByDescending(execution => execution.CreatedDateTime)
                    .ThenByDescending(Execution => Execution.StartDateTime)
                    .Take(MaxExecutions)
                    .ToListAsync();

            if (Executions.Count > 0)
            {
                AverageSuccessRate = (decimal)Executions.Where(e => e.ExecutionStatus == "SUCCEEDED").Count() / Executions.Count() * 100;
            }
            else
            {
                AverageSuccessRate = 0;
            }

            AverageDurationInSeconds = (int)(Executions.Average(e => e.ExecutionInSeconds) ?? 0);
        }
    }

    private void OpenJobExecutionModal(Guid executionId)
    {
        SelectedJobExecutionId = executionId;
        JobExecutionModal.Show();
    }

}
