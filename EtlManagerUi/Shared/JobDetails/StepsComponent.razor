@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject DbHelperService DbHelperService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IHxMessengerService Messenger

<style>
    .step-row:hover,
    .step-row:focus,
    .step-row.disabled:hover,
    .step-row.disabled:focus {
        background-color: #ececec;
    }

    .step-row.disabled {
        background-color: #f3f3f3;
    }

    .step-row a {
        text-decoration: none;
    }

        .step-row:hover a {
            text-decoration: underline;
        }
</style>

@if (Job is not null)
{
    <JobParametersModal @ref="JobParametersModal"
                        Job="Job" />
}


<div class="sticky-top pt-2 pb-3" style="background-color: rgba(248, 249, 250, 0.9);">
    @*Same as bg-light but with slight transparency*@
    <div class="btn-toolbar">
        <AuthorizeView Roles="Admin, Editor">
            <HxDropdown CssClass="me-3">
                <HxDropdownToggleButton Color="ThemeColor.Success">
                    Add step
                </HxDropdownToggleButton>
                <HxDropdownMenu>
                    <HxDropdownHeader>Step type</HxDropdownHeader>
                    @foreach (var stepType in Enum.GetValues(typeof(StepType)))
                    {
                        var stepTypeEnum = Enum.Parse<StepType>(stepType.ToString()!);
                        <HxDropdownItem @onclick="() => ShowNewStepModal(stepTypeEnum)"
                                        Enabled="!IsStepTypeDisabled(stepTypeEnum)">
                            <StepTypeIconComponent StepType_="stepTypeEnum" />
                            @stepType
                        </HxDropdownItem>
                    }
                </HxDropdownMenu>
            </HxDropdown>
        </AuthorizeView>
        <AuthorizeView Roles="Admin, Editor, Operator">
            <HxButton CssClass="me-3" Color="ThemeColor.Secondary" @onclick="async () => await (JobParametersModal?.Show() ?? Task.CompletedTask)">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/at-sign.svg")))
                Parameters
            </HxButton>
            <HxButton Color="ThemeColor.Primary" @onclick="async () => await ExecuteModal.ShowAsync()">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/play.svg")))
                Execute
            </HxButton>
        </AuthorizeView>
    </div>

    @if (ExecuteSuccess)
    {
        <div class="alert alert-success mt-3 show alert-dismissible col-xl-6" role="alert">
            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/check-circle.svg")))
            Execution started successfully – <a href="javascript:void(0)" class="alert-link" @onclick="OpenJobExecutionModal">monitor execution</a>
            <button type="button" class="btn-close" @onclick="() => ExecuteSuccess = false"></button>
        </div>
    }

    <div class="row mt-3">
        <div class="col">
            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tag.svg")))
            <span class="me-3">Tags</span>
            @if (!Tags.Any())
            {
                <small class="text-secondary me-2">No tags</small>
            }
            @foreach (var tag in Tags)
            {
                <TagComponent Tag="tag"
                              Selected="TagsFilterSet.Contains(tag)"
                              CssClass="mx-1"
                              Style="cursor: pointer;"
                              OnClick="() => { if (TagsFilterSet.Contains(tag)) TagsFilterSet.Remove(tag); else TagsFilterSet.Add(tag); }" />
            }
        </div>
    </div>

    <div class="row mt-3">
        <div class="col d-inline-flex">
            
            <div class="input-group input-group-sm me-3" style="max-width: 20rem;">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/filter.svg")))
                </div>
                <input type="text" class="form-control" @bind-value="StepsFilterText" @bind-value:event="oninput" placeholder="Filter by name" />
            </div>

            <FilterDropdown TItem="StepType"
                            FilterSet="StepTypeFilter"
                            Items="Steps?.Select(s => s.StepType).Distinct().OrderBy(t => t) ?? Enumerable.Empty<StepType>()"
                            OnChange="StateHasChanged">
                <Title>
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tool.svg")))
                    Step type
                </Title>
            </FilterDropdown>

            <HxButton CssClass="ms-3" Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() => { TagsFilterSet.Clear(); StepTypeFilter.Clear(); StepsFilterText = string.Empty; }">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x.svg")))
                Clear
            </HxButton>
        </div>
        
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body">
                @if (Steps is null || Jobs is null || Job is null)
                {
                    <div class="row py-2"><div class="col">Loading...</div></div>
                }
                else if (Steps.Count == 0)
                {
                    <div class="row py-2"><div class="col">No steps</div></div>
                }
                else
                {
                    var index = 0;
                    @foreach (var item in Steps
                      .Where(step => step.StepName.ContainsIgnoreCase(StepsFilterText))
                      .Where(step => TagsFilterSet.All(tag => step.Tags.Any(t => t.TagName == tag.TagName)))
                      .Where(step => !StepTypeFilter.Any() || StepTypeFilter.Contains(step.StepType)))
                    {
                        <div class="row step-row py-2 @(item.IsEnabled ? null : "disabled") @(index == 0 ? null : "border-top")">
                            <div class="col-xl-5 col-md-6 col-10 pl-2 d-flex align-items-center">
                                <AuthorizeView Roles="Admin, Editor">
                                    <a class="text-dark" href="javascript:void(0)" @onclick="() => ShowEditModal(item)">
                                        <StepTypeIconComponent StepType_="@item.StepType" />
                                        &nbsp;
                                        @item.StepName
                                    </a>
                                </AuthorizeView>
                                <AuthorizeView Roles="Operator, Viewer">
                                    <span>
                                        <StepTypeIconComponent StepType_="@item.StepType" />
                                        @item.StepName
                                    </span>
                                </AuthorizeView>
                            </div>
                            <div class="col-xl-1 col-2 d-inline-flex align-items-center justify-content-between">
                                @if (item is ParameterizedStep parameterizedStep && parameterizedStep.StepParameters.Any(p => p.JobParameterId is not null)
                                  || item is SqlStep sql && sql.ResultCaptureJobParameterId is not null)
                                {
                                    <div title="Step uses job parameters">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/at-sign.svg")))
                                    </div>
                                }
                                else
                                {
                                    <div></div>
                                }
                                <div class="justify-content-end" style="@(Job.UseDependencyMode ? "color: #ccc;" : null)">
                                    @item.ExecutionPhase
                                    &nbsp;
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/layers.svg")))
                                </div>
                            </div>
                            <div class="col-xl-3 col-md-4 d-inline-flex align-items-center justify-content-end">
                                <AuthorizeView Roles="Admin, Editor">
                                    <div class="form-check form-switch">
                                        <input type="checkbox" class="form-check-input" id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                        <label class="form-check-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                    </div>
                                </AuthorizeView>
                                <AuthorizeView Roles="Operator, Viewer">
                                    <div class="form-check form-switch">
                                        <input type="checkbox" class="form-check-input" disabled id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)">
                                        <label class="form-check-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                    </div>
                                </AuthorizeView>
                                <div class="btn-group btn-row ms-2">
                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() => ShowStepHistoryOffcanvas(item)">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/activity.svg")))
                                    </HxButton>

                                    <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() => ShowStepDetailsModal(item)">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
                                    </HxButton>

                                    <AuthorizeView Roles="Admin, Editor">
                                        <HxDropdown>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/copy.svg")))
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu CssClass="dropdown-menu-right">
                                                <HxDropdownHeader>Copy to</HxDropdownHeader>
                                                <HxDropdownItem @onclick="() => CopyStep(item, Job)">here</HxDropdownItem>
                                                <HxDropdownDivider></HxDropdownDivider>
                                                @foreach (var job in Jobs.Where(job => job.JobId != Job.JobId))
                                                {
                                                    <HxDropdownItem @onclick="() => CopyStep(item, job)">@job.JobName</HxDropdownItem>
                                                }
                                            </HxDropdownMenu>
                                        </HxDropdown>

                                        <HxDropdown>
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu CssClass="dropdown-menu-right">
                                                <HxDropdownHeader>Delete?</HxDropdownHeader>
                                                <HxDropdownItem @onclick="() => DeleteStep(item)">Confirm</HxDropdownItem>
                                            </HxDropdownMenu>
                                        </HxDropdown>
                                    </AuthorizeView>
                                </div>
                            </div>

                            <div class="col-xl-3 d-flex flex-wrap align-items-center justify-content-end">
                                @foreach (var tag in item.Tags.OrderBy(t => t.TagName))
                                {
                                    <TagComponent Tag="tag" CssClass="m-1" />
                                }
                            </div>
                        </div>

                        index++;
                    }
                }
            </div>
        </div>
    </div>
</div>



<AuthorizeView Roles="Admin, Editor">
    <DatasetStepEditModal @ref="StepEditModals[StepType.Dataset]" Job="Job" Steps="Steps" AppRegistrations="AppRegistrations" StepId="EditModalStepIds[StepType.Dataset]" OnStepSubmit="OnStepSubmit" />
    <ExeStepEditModal @ref="StepEditModals[StepType.Exe]" Job="Job" Steps="Steps" StepId="EditModalStepIds[StepType.Exe]" OnStepSubmit="OnStepSubmit" />
    <JobStepEditModal @ref="StepEditModals[StepType.Job]" Job="Job" Steps="Steps" StepId="EditModalStepIds[StepType.Job]" Jobs="Jobs" OnStepSubmit="OnStepSubmit" />
    <PackageStepEditModal @ref="StepEditModals[StepType.Package]" Job="Job" Steps="Steps" Connections="Connections" StepId="EditModalStepIds[StepType.Package]" OnStepSubmit="OnStepSubmit" />
    <PipelineStepEditModal @ref="StepEditModals[StepType.Pipeline]" Job="Job" Steps="Steps" DataFactories="DataFactories" StepId="EditModalStepIds[StepType.Pipeline]" OnStepSubmit="OnStepSubmit" />
    <SqlStepEditModal @ref="StepEditModals[StepType.Sql]" Job="Job" Steps="Steps" Connections="Connections" StepId="EditModalStepIds[StepType.Sql]" OnStepSubmit="OnStepSubmit" />
    <FunctionStepEditModal @ref="StepEditModals[StepType.Function]" Job="Job" Steps="Steps" StepId="EditModalStepIds[StepType.Function]" FunctionApps="FunctionApps" OnStepSubmit="OnStepSubmit" />
</AuthorizeView>


<StepDetailsModal @ref="StepDetailsModal" Step="DetailsModalStep" />

<StepHistoryOffcanvas @ref="StepHistoryOffcanvas" StepId_="@HistoryModalStep?.StepId.ToString()" />



<AuthorizeView Roles="Admin, Editor, Operator">
    <HxModal @ref="ExecuteModal" Size="ModalSize.ExtraLarge" Scrollable="true" Title="Execute steps"
             OnClosed="() => { StepsToExecute.Clear(); ExecuteFilterText = string.Empty; ExecuteTagsFilterSet.Clear(); }">
        
        <BodyTemplate>
            @if (Steps is not null)
            {
                <div class="row">
                    <span class="col fst-italic text-secondary small">Disabled steps, if selected, will be included in manual executions.</span>
                </div>

                <div class="row mt-3">
                    <div class="col">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tag.svg")))
                        <span class="me-3">Tags</span>
                        @if (!Tags.Any())
                        {
                            <small class="text-secondary me-2">No tags</small>
                        }
                        @foreach (var tag in Tags)
                        {
                            <TagComponent Tag="tag"
                                          Selected="ExecuteTagsFilterSet.Contains(tag)"
                                          CssClass="mx-1"
                                          Style="cursor: pointer;"
                                          OnClick="() => { if (ExecuteTagsFilterSet.Contains(tag)) ExecuteTagsFilterSet.Remove(tag); else ExecuteTagsFilterSet.Add(tag); }" />
                        }
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col">
                        <div class="row">
                            <div class="col input-group input-group-sm">
                                <div class="input-group-text">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/filter.svg")))
                                </div>
                                <input type="text" class="form-control" @bind-value="ExecuteFilterText" @bind-value:event="oninput"
                                       placeholder="Filter by name" autocomplete="off" />
                            </div>

                            <div class="col-auto">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="() => { ExecuteTagsFilterSet.Clear(); ExecuteFilterText = string.Empty; }">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x.svg")))
                                    Clear
                                </HxButton>
                            </div>
                        </div>

                        <table class="table table-hover table-sm mt-2">
                            <thead>
                                <tr>
                                    <th>Available steps</th>
                                    <th></th>
                                    @if (Job?.UseDependencyMode == true)
                                    {
                                        <th></th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var step in StepsAvailableToExecute)
                                {
                                    <tr style="cursor: pointer;" @onclick="() => { if (!StepsToExecute.Any(s => s.StepId == step.StepId)) StepsToExecute.Add(step); }">
                                        <td class="@(step.IsEnabled ? null : "text-secondary") align-middle">
                                            <StepTypeIconComponent StepType_="@step.StepType" />
                                            &nbsp;
                                            @step.StepName
                                        </td>
                                        <td class="text-right"
                                            style="@(Job?.UseDependencyMode == true ? "color: #ccc;" : null)">
                                            @step.ExecutionPhase
                                            &nbsp;
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/layers.svg")))
                                        </td>
                                        @if (Job?.UseDependencyMode == true)
                                        {
                                            <td class="text-right">
                                                @if (step.Dependencies?.Count > 0)
                                                {
                                                    <div title="Include dependencies" @onclick="() => SelectStepAndDependencies(step)">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/diagram-3-fill.svg")))
                                                    </div>
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="col-lg">
                        <HxButtonGroup>
                            @*Add all available AND enabled steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                      @onclick="() => StepsToExecute.AddRange(StepsAvailableToExecute.Where(step => step.IsEnabled))">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/chevron-right.svg")))
                                Select enabled
                            </HxButton>
                            @*Add all available steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary"
                                      @onclick="() => StepsToExecute.AddRange(StepsAvailableToExecute)">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/chevrons-right.svg")))
                                Select all
                            </HxButton>
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="() => StepsToExecute.Clear()">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/chevrons-left.svg")))
                                Deselect all
                            </HxButton>
                        </HxButtonGroup>

                        <table class="table table-hover table-sm mt-2">
                            <thead>
                                <tr>
                                    <th>Selected steps</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    if (Job?.UseDependencyMode == true)
                                    {
                                        var comparer = new TopologicalStepComparer(StepsToExecute);
                                        StepsToExecute.Sort(comparer);
                                    }
                                    else
                                    {
                                        StepsToExecute.Sort();
                                    }
                                }
                                @foreach (var step in StepsToExecute)
                                {
                                    <tr style="cursor: pointer;" @onclick="() => StepsToExecute.Remove(step)">
                                        <td class="@(step.IsEnabled ? null : "text-secondary")">
                                            <StepTypeIconComponent StepType_="@step.StepType" />
                                            &nbsp;
                                            @step.StepName
                                        </td>
                                        <td class="text-right"
                                            style="@(Job?.UseDependencyMode == true ? "color: #ccc;" : null)">
                                            @step.ExecutionPhase
                                            &nbsp;
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/layers.svg")))
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                </div>
            }
        </BodyTemplate>
        
        <FooterTemplate>
            <div class="col mr-auto">
                <div class="form-check form-check-inline">
                    <input type="checkbox" class="form-check-input" id="execute_notify"
                           checked=@ExecuteNotify
                           @bind-value="ExecuteNotify">
                    <label class="form-check-label" for="execute_notify">Notify based on subscriptions</label>
                </div>
            </div>
            <HxButton Color="ThemeColor.Primary" CssClass="ml-5" @onclick="Execute">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/play.svg")))
                Execute
            </HxButton>
            <HxButton Color="ThemeColor.Secondary" @onclick="async () => await ExecuteModal.HideAsync()">Cancel</HxButton>
        </FooterTemplate>
    </HxModal>
</AuthorizeView>


<JobExecutionDetailsModal @ref="JobExecutionModal" ExecutionId_="@SelectedJobExecutionId.ToString()" />

@code {
    [Parameter]
    public Job? Job { get; set; }

    [Parameter]
    public IList<Job>? Jobs { get; set; }

    [Parameter]
    public List<Step>? Steps { get; set; }

    [Parameter]
    public List<Connection>? Connections { get; set; }
    [Parameter]
    public List<DataFactory>? DataFactories { get; set; }
    [Parameter]
    public List<AppRegistration>? AppRegistrations { get; set; }
    [Parameter]
    public List<FunctionApp>? FunctionApps { get; set; }

    private IEnumerable<Tag> Tags => Steps?
    .SelectMany(step => step.Tags)
    .Select(tag => tag with { Steps = null! })
    .Distinct()
    .OrderBy(t => t.TagName) ?? Enumerable.Empty<Tag>();

    private JobParametersModal JobParametersModal { get; set; } = null!;

    private Dictionary<StepType, IStepEditModal> StepEditModals = new();
    // Separate edit modal step ids so that changes to one do not trigger OnParametersSet() for all edit modal components.
    private Dictionary<StepType, Guid> EditModalStepIds { get; set; } = Enum.GetValues<StepType>().ToDictionary(key => key, _ => new Guid());

    private StepDetailsModal StepDetailsModal { get; set; } = null!;
    private Step? DetailsModalStep { get; set; }

    private StepHistoryOffcanvas StepHistoryOffcanvas { get; set; } = null!;
    private Step? HistoryModalStep { get; set; }

    private HxModal ExecuteModal { get; set; } = null!;
    private List<Step> StepsToExecute { get; set; } = new();
    private IEnumerable<Step> StepsAvailableToExecute =>
        Steps?.Where(step => !StepsToExecute.Any(e => e.StepId == step.StepId)) // Not yet added to list of steps to execute
        .Where(step => step.StepName?.ContainsIgnoreCase(ExecuteFilterText) == true) // Step name filter
        .Where(step => ExecuteTagsFilterSet.All(tag => step.Tags.Any(t => t.TagName == tag.TagName))) // Tag filter
        ?? Enumerable.Empty<Step>();
    private bool ExecuteNotify { get; set; } = false;

    private bool ExecuteSuccess { get; set; } = false;

    private string StepsFilterText { get; set; } = string.Empty;
    private HashSet<Tag> TagsFilterSet { get; set; } = new();
    private HashSet<StepType> StepTypeFilter { get; } = new();
    private string ExecuteFilterText { get; set; } = string.Empty;
    private HashSet<Tag> ExecuteTagsFilterSet { get; set; } = new();

    private JobExecutionDetailsModal JobExecutionModal { get; set; } = null!;
    private Guid SelectedJobExecutionId { get; set; }

    private Dictionary<Guid, ElementReference> TagInputs { get; set; } = new();
    private Tag NewTag { get; set; } = new(string.Empty);
    private Guid? TagInputFocusStepId { get; set; } = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (TagInputFocusStepId is not null)
        {
            try
            {
                await TagInputs[(Guid)TagInputFocusStepId].FocusAsync();
            }
            catch (Exception)
            {
            }
            finally
            {
                TagInputFocusStepId = null;
            }
        }
    }

    private bool IsStepTypeDisabled(StepType type)
    {
        switch (type)
        {
            case StepType.Sql:
            case StepType.Package:
                return Connections?.Any() == false;
            case StepType.Pipeline:
                return DataFactories?.Any() == false;
            case StepType.Function:
                return FunctionApps?.Any() == false;
            case StepType.Dataset:
                return AppRegistrations?.Any() == false;
            case StepType.Job:
                return Jobs is null || Jobs.Count == 1;
            default:
                return false;
        }
    }

    private async Task ShowEditModal(Step step)
    {
        EditModalStepIds[step.StepType] = step.StepId;
        await OpenStepEditModal(step.StepType);
    }

    private async Task ShowNewStepModal(StepType stepType)
    {
        EditModalStepIds[stepType] = Guid.Empty;
        await OpenStepEditModal(stepType);
    }

    private async Task OpenStepEditModal(StepType? stepType)
    {
        if (stepType is not null)
            await StepEditModals[(StepType)stepType].ShowAsync();
    }

    private async Task ToggleEnabled(ChangeEventArgs args, Step step)
    {
        bool value = (bool)args.Value!;
        try
        {
            await DbHelperService.ToggleStepEnabledAsync(step, value);
            step.IsEnabled = !step.IsEnabled;
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error toggling step", ex.Message);
        }
    }

    private async Task DeleteStep(Step step)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Steps.Remove(step);
            await context.SaveChangesAsync();
            Steps?.Remove(step);
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error deleting step", ex.Message);
        }
    }

    private async Task CopyStep(Step step, Job job)
    {
        try
        {
            string user = HttpContextAccessor.HttpContext?.User?.Identity?.Name ?? throw new ArgumentNullException(nameof(user), "User was null");
            Guid createdStepId = await DbHelperService.StepCopyAsync(step.StepId, job.JobId, user);
            // If the steps was copied to this job, reload steps.
            if (Job?.JobId == job.JobId)
            {
                using var context = DbFactory.CreateDbContext();
                var createdStep = await context.Steps
                    .AsNoTrackingWithIdentityResolution()
                    .Include(step => step.Dependencies)
                    .Include(step => step.Tags)
                    .Include(step => (step as ParameterizedStep)!.StepParameters)
                    .FirstOrDefaultAsync(step_ => step_.StepId == createdStepId);
                Steps?.Add(createdStep);
                SortSteps();
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error copying step", ex.Message);
        }
    }

    private void OnStepSubmit(Step step)
    {
        var existingStep = Steps?.FirstOrDefault(s => s.StepId == step.StepId);
        if (existingStep is not null)
        {
            Steps?.Remove(existingStep);
        }
        Steps?.Add(step);
        SortSteps();
    }

    private void SortSteps()
    {
        if (Job is null || Steps is null) return;
        try
        {
            if (Job.UseDependencyMode)
            {
                var comparer = new TopologicalStepComparer(Steps);
                Steps.Sort(comparer);
            }
            else
            {
                Steps.Sort();
            }
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error sorting steps", ex.Message);
        }
    }

    private async Task ShowStepDetailsModal(Step step)
    {
        DetailsModalStep = step;
        await StepDetailsModal.Modal.ShowAsync();
    }

    private async Task ShowStepHistoryOffcanvas(Step step)
    {
        // Do not unnecessarily set the component parameter and start its data load.
        if (step != HistoryModalStep)
            HistoryModalStep = step;

        await StepHistoryOffcanvas.ShowAsync();
    }

    private void SelectStepAndDependencies(Step step)
    {
        RecurseDependencies(step, new());
    }

    private void RecurseDependencies(Step step, List<Step> processedSteps)
    {
        // Add the step to the list of steps to execute if it is not there yet.
        if (!StepsToExecute.Any(s => s.StepId == step.StepId))
        {
            StepsToExecute.Add(step);
        }

        // Get dependency ids.
        List<Guid> dependencyStepIds = step.Dependencies.Select(d => d.DependantOnStepId).ToList();

        // If there are no dependencies, return true.
        if (dependencyStepIds.Count == 0)
        {
            return;
        }
        // This step was already handled.
        else if (processedSteps.Any(s => s.StepId == step.StepId))
        {
            return;
        }

        processedSteps.Add(step);

        // Get dependency steps based on ids.
        List<Step> dependencySteps = Steps?.Where(s => dependencyStepIds.Any(id => s.StepId == id))?.ToList() ?? new();

        // Loop through the dependencies and handle them recursively.
        foreach (var depencyStep in dependencySteps)
        {
            RecurseDependencies(depencyStep, processedSteps);
        }

    }

    private async Task Execute()
    {
        ExecuteSuccess = false;

        if (StepsToExecute.Count == 0)
        {
            return;
        }

        string user = HttpContextAccessor.HttpContext?.User?.Identity?.Name ?? throw new ArgumentNullException(nameof(user), "User was null");
        try
        {
            var stepIds = StepsToExecute.Select(step => step.StepId.ToString()).ToList();
            SelectedJobExecutionId = await DbHelperService.StartExecutionAsync(Job ?? throw new ArgumentNullException(nameof(Job), "Job was null"),
                user, stepIds, ExecuteNotify);
            ExecuteSuccess = true;
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error starting execution", ex.Message);
        }

        StepsToExecute.Clear();
        await ExecuteModal.HideAsync();
        ExecuteNotify = false;
        StateHasChanged();
    }

    private async Task OpenJobExecutionModal() => await JobExecutionModal.ShowAsync();

}
