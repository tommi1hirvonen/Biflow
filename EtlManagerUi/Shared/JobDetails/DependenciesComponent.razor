@implements IDisposable 

@inject IJSRuntime JS
@inject IWebHostEnvironment WebHostEnvironment

@*CSS definitions for the dependency graph nodes and paths created in site.js through JSInterop.*@
<style>
    html, body {
        height: 100%;
    }

    .dependency-graph {
        width: 100%;
        height: 80%;
        resize: both;
        overflow: hidden;
    }

        .dependency-graph svg {
            width: 100%;
            height: 100%;
            cursor: move;
        }

        .dependency-graph .node {
            cursor: pointer;
        }

            .dependency-graph .node rect {
                stroke-width: 2px;
                stroke: #666;
                fill: #fff;
            }

        .dependency-graph .name {
            margin-top: 4px;
        }

        .dependency-graph .edgePath path {
            stroke: #888;
            stroke-width: 2px;
            fill: #888;
        }

        .dependency-graph .edgePath.non-strict path {
            stroke-dasharray: 5,5;
        }

        .dependency-graph .edgePath.strict path {
        }
</style>

<div class="form-row">
    <div class="form-group ml-3">
        <div class="input-group">
            <div class="input-group-prepend">
                <div class="input-group-text">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/filter.svg")))
                </div>
            </div>
            <select class="form-control form-control-sm" @onchange="LimitGraph">
                <option selected=@string.IsNullOrEmpty(StepFilter) value="">All</option>
                @foreach (var step in Steps ?? Enumerable.Empty<Step>())
                {
                    <option selected=@(StepFilter == step.StepName) value="@step.StepName">@step.StepName</option>
                }
            </select>
        </div>
    </div>
</div>

<div class="container-fluid h-100 flex-column p-0">
    <div class="row flex-fill dependency-graph border" id="div_dependency_graph">
        <svg id="svg_dependency_graph" viewBox="0 0 2000 1000">
            <g id="g_dependency_graph" />
        </svg>
    </div>
</div>

<AuthorizeView Roles="Admin, Editor">
    <DatasetStepEditModal @ref="StepEditModals[StepType.Dataset]" Job="Job" Steps="Steps" PowerBIServices="PowerBIServices" StepId="EditModalStepId" OnStepSubmit="OnStepSubmit" />
    <ExeStepEditModal @ref="StepEditModals[StepType.Exe]" Job="Job" Steps="Steps" StepId="EditModalStepId" OnStepSubmit="OnStepSubmit" />
    <JobStepEditModal @ref="StepEditModals[StepType.Job]" Job="Job" Steps="Steps" StepId="EditModalStepId" Jobs="Jobs" OnStepSubmit="OnStepSubmit" />
    <PackageStepEditModal @ref="StepEditModals[StepType.Package]" Job="Job" Steps="Steps" Connections="Connections" StepId="EditModalStepId" OnStepSubmit="OnStepSubmit" />
    <PipelineStepEditModal @ref="StepEditModals[StepType.Pipeline]" Job="Job" Steps="Steps" DataFactories="DataFactories" StepId="EditModalStepId" OnStepSubmit="OnStepSubmit" />
    <SqlStepEditModal @ref="StepEditModals[StepType.Sql]" Job="Job" Steps="Steps" Connections="Connections" StepId="EditModalStepId" OnStepSubmit="OnStepSubmit" />
    <FunctionStepEditModal @ref="StepEditModals[StepType.Function]" Job="Job" Steps="Steps" StepId="EditModalStepId" FunctionApps="FunctionApps" OnStepSubmit="OnStepSubmit" />
</AuthorizeView>

@code {
    [Parameter]
    public List<Job> Jobs { get; set; } = null!;

    [Parameter]
    public Job Job { get; set; } = null!;

    private Job? PrevJob { get; set; }

    [Parameter]
    public List<Step> Steps { get; set; } = null!;

    [Parameter]
    public List<Connection>? Connections { get; set; }
    [Parameter]
    public List<DataFactory>? DataFactories { get; set; }
    [Parameter]
    public List<PowerBIService>? PowerBIServices { get; set; }
    [Parameter]
    public List<FunctionApp>? FunctionApps { get; set; }

    private DotNetObjectReference<MethodInvokeHelper> ObjectReference { get; set; } = null!;

    private Dictionary<StepType, IStepEditModal> StepEditModals = new();
    private Guid EditModalStepId { get; set; }

    private bool GrapShouldRender { get; set; }

    private string StepFilter { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        // Create a DotNetObjectReference with a new helper method tied to an instance of this component.
        // This will allow JS to call back to a specific instance of this component.
        // This needs to be done, because multiple users might be using this component concurrently.
        var helper = new MethodInvokeHelper(OpenStepEditModal);
        ObjectReference = DotNetObjectReference.Create(helper);
    }

    protected override void OnParametersSet()
    {
        if (Job != PrevJob)
        {
            PrevJob = Job;
            StepFilter = string.Empty;
            StateHasChanged();
            GrapShouldRender = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (GrapShouldRender)
            await LoadGraph();
    }

    private async Task LoadGraph()
    {
        GrapShouldRender = false;
        string? stepsJson = null;
        string? dependenciesJson = null;

        if (string.IsNullOrEmpty(StepFilter))
        {
            // Create a list of steps and dependencies and send them through JSInterop as JSON objects.
            var steps = Steps.Select(step => new { Id = step.StepId, Name = step.StepName });
            var dependencies = Steps
                .SelectMany(step => step.Dependencies)
                .Select(dep => new { StepId = dep.StepId, DependantOnStepId = dep.DependantOnStepId, StrictDependency = dep.StrictDependency });

            stepsJson = JsonSerializer.Serialize(steps);
            dependenciesJson = JsonSerializer.Serialize(dependencies);
        }
        else
        {
            var startStep = Steps.FirstOrDefault(s => s.StepName == StepFilter);
            if (startStep is not null)
            {
                var steps = RecurseDependenciesBackward(startStep, new());
                steps.Remove(startStep);
                steps = RecurseDependenciesForward(startStep, steps);

                var dependencies = steps
                    .SelectMany(step => step.Dependencies)
                    .Where(d => steps.Any(s => d.DependantOnStepId == s.StepId) && steps.Any(s => d.StepId == s.StepId)) // only include dependencies whose step is included
                    .Select(dep => new { StepId = dep.StepId, DependantOnStepId = dep.DependantOnStepId, StrictDependency = dep.StrictDependency });

                stepsJson = JsonSerializer.Serialize(steps.Select(step => new { Id = step.StepId, Name = step.StepName }));
                dependenciesJson = JsonSerializer.Serialize(dependencies);
            }
        }

        if (stepsJson is not null && dependenciesJson is not null)
            await JS.InvokeVoidAsync("drawDependencyGraph", stepsJson, dependenciesJson, ObjectReference);
    }

    private List<Step> RecurseDependenciesBackward(Step step, List<Step> processedSteps)
    {
        // If the step was already handled, return.
        // This way we do not loop indefinitely in case of circular dependencies.
        if (processedSteps.Any(s => s.StepId == step.StepId))
        {
            return processedSteps;
        }

        processedSteps.Add(step);

        // Get dependency steps.
        List<Step> dependencySteps = Steps.Where(s => step.Dependencies.Any(d => s.StepId == d.DependantOnStepId)).ToList();

        // Loop through the dependencies and handle them recursively.
        foreach (var depencyStep in dependencySteps)
        {
            RecurseDependenciesBackward(depencyStep, processedSteps);
        }

        return processedSteps;
    }

    private List<Step> RecurseDependenciesForward(Step step, List<Step> processedSteps)
    {
        if (processedSteps.Any(s => s.StepId == step.StepId))
        {
            return processedSteps;
        }

        processedSteps.Add(step);

        List<Step> dependencySteps = Steps.Where(s => s.Dependencies.Any(d => d.DependantOnStepId == step.StepId)).ToList();

        foreach (var depencyStep in dependencySteps)
        {
            RecurseDependenciesForward(depencyStep, processedSteps);
        }

        return processedSteps;
    }

    private async Task LimitGraph(ChangeEventArgs args)
    {
        StepFilter = args.Value?.ToString() ?? string.Empty;
        GrapShouldRender = true;
        await LoadGraph();
    }

    // Step edit modals can be opened from JS using JSInterop by calling this method. See site.js => drawDependencyGraph().
    private void OpenStepEditModal(string id)
    {
        EditModalStepId = Guid.Parse(id);
        StateHasChanged();
        var step = Steps.First(s => s.StepId == EditModalStepId);
        if (step.StepType is not null)
            StepEditModals[(StepType)step.StepType].Show();
    }

    private async Task OnStepSubmit(Step step)
    {
        var existingStep = Steps.FirstOrDefault(s => s.StepId == step.StepId);
        if (existingStep is not null)
        {
            Steps.Remove(existingStep);
        }
        Steps.Add(step);
        await SortStepsAsync();
        GrapShouldRender = true;
        await LoadGraph();
        StateHasChanged();
    }

    private async Task SortStepsAsync()
    {
        if (Job is null || Steps is null) return;
        try
        {
            if (Job.UseDependencyMode)
            {
                var comparer = new TopologicalStepComparer(Steps);
                Steps.Sort(comparer);
            }
            else
            {
                Steps.Sort();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error sorting steps: {ex.Message}");
        }
    }

    public void Dispose()
    {
        ObjectReference?.Dispose();
    }

}
