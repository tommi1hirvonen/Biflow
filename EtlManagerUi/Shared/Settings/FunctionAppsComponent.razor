@inject IConfiguration configuration
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment

<HxButton Color="ThemeColor.Success"
          @onclick="() => ShowEditModal(null)"
          Enabled="FunctionApps is not null && AppRegistrations is not null && AppRegistrations.Any()">
    Add Function App
</HxButton>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th>
                    Resource group
                </th>
                <th>
                    Resource
                </th>
            </tr>
        </thead>
        <tbody>
            @if (FunctionApps is null)
            {
                <tr><td colspan="4">Loading...</td></tr>
            }
            else if (FunctionApps.Count == 0)
            {
                <tr><td colspan="4">No Function Apps</td></tr>
            }
            else
            {
                @foreach (var app in FunctionApps)
                {
                    <tr>
                        <td class="align-middle">
                            @app.FunctionAppName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="btn-row">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" aria-label="edit" @onclick="() => ShowEditModal(app)">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-2.svg")))
                                </HxButton>
                                <HxDropdown>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Light" aria-label="delete">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteFunctionApp(app)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdown>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            @app.ResourceGroupName
                        </td>
                        <td class="align-middle">
                            @app.ResourceName
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<FunctionAppEditModal @ref="FunctionAppEditModal" FunctionAppId="EditFunctionAppId" AppRegistrations="AppRegistrations" OnFunctionAppSubmit="OnFunctionAppSubmit" />

@code {
    private List<FunctionApp>? FunctionApps { get; set; }
    private List<AppRegistration>? AppRegistrations { get; set; }

    private Guid EditFunctionAppId { get; set; }
    private FunctionAppEditModal FunctionAppEditModal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<EtlManagerContext>(DbFactory.CreateDbContext);
        FunctionApps = await context.FunctionApps
            .AsNoTracking()
            .OrderBy(f => f.FunctionAppName)
            .ToListAsync();
        AppRegistrations = await context.AppRegistrations
            .AsNoTracking()
            .OrderBy(ar => ar.AppRegistrationName)
            .ToListAsync();
    }

    private async Task DeleteFunctionApp(FunctionApp functionApp)
    {
        using var context = DbFactory.CreateDbContext();
        context.Remove(functionApp);
        await context.SaveChangesAsync();
        FunctionApps?.Remove(functionApp);
    }

    private async void OnFunctionAppSubmit(FunctionApp functionApp)
    {
        using var context = DbFactory.CreateDbContext();
        if (functionApp.FunctionAppId == Guid.Empty)
        {
            context.Add(functionApp);
            FunctionApps?.Add(functionApp);
        }
        else
        {
            FunctionApps?.RemoveAll(f => f.FunctionAppId == functionApp.FunctionAppId);
            FunctionApps?.Add(functionApp);
            context.Attach(functionApp).State = EntityState.Modified;
        }
        await context.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ShowEditModal(FunctionApp? functionApp)
    {
        EditFunctionAppId = functionApp?.FunctionAppId ?? Guid.Empty;
        await FunctionAppEditModal.ShowAsync();
    }
}
