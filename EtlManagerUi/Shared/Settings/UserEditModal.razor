@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject IJSRuntime JS
@inject DbHelperService DbHelperService

<BSModal @ref="Modal">
    <BSModalHeader OnClick="() => Modal.Hide()">@(Username is null ? "New user" : "Edit " + Username)</BSModalHeader>
    @if (User is not null)
    {
        <BSModalBody>
            <BSForm Model="User" id="user_edit_form" OnValidSubmit="SubmitUser">
                <div class="row">
                    <div class="col-md-10 mx-auto">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <BSFormGroup>
                            <BSLabel>Username</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/user.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" disabled=@(Username is not null) @bind-Value="User.Username"></InputText>
                            </div>
                        </BSFormGroup>
                        <BSFormGroup>
                            <BSLabel>Role</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/users.svg")))
                                    </div>
                                </div>
                                <InputSelect class="form-control" @bind-Value="User.Role">
                                    <option>Viewer</option>
                                    <option>Operator</option>
                                    <option>Editor</option>
                                    <option>Admin</option>
                                </InputSelect>
                            </div>
                        </BSFormGroup>
                        <BSFormGroup>
                            <BSLabel>Email</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/at-sign.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" type="email" @bind-Value="User.Email"></InputText>
                            </div>
                        </BSFormGroup>
                        @if (Username is null)
                        {
                            <BSFormGroup>
                                <BSLabel>Password</BSLabel>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/lock.svg")))
                                        </div>
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="Password"></InputText>
                                </div>
                            </BSFormGroup>
                            <BSFormGroup>
                                <BSLabel>Confirm password</BSLabel>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/key.svg")))
                                        </div>
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="ConfirmPassword"></InputText>
                                </div>
                            </BSFormGroup>
                        }
                    </div>
                </div>
            </BSForm>
        </BSModalBody>
    }
    <BSModalFooter>
        <BSButton ButtonType="ButtonType.Submit" form="user_edit_form" Color="Color.Success">@(Username is null ? "Create" : "Save")</BSButton>
        <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Cancel</BSButton>
    </BSModalFooter>
</BSModal>

@code {
    [Parameter]
    public string? Username { get; set; }

    [Parameter]
    public EventCallback<User> OnUserSubmit { get; set; }

    private BSModal Modal { get; set; } = null!;

    private User? User { get; set; }

    private string? Password { get; set; }
    private string? ConfirmPassword { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Username is null)
        {
            User = new() { Role = "Viewer" };
        }
        else
        {
            var context = DbFactory.CreateDbContext();
            User = await context.Users.FirstOrDefaultAsync(user => user.Username == Username);
        }
    }

    private async Task SubmitUser()
    {
        // New user
        if (Username is null)
        {
            Password = Password ?? string.Empty;
            ConfirmPassword = ConfirmPassword ?? string.Empty;

            if (Password.Length < 1 || Password.Length > 250)
            {
                await JS.InvokeVoidAsync("alert", "Password must be between 1 and 250 characters in length");
                return;
            }

            if (!Password.Equals(ConfirmPassword))
            {
                await JS.InvokeVoidAsync("alert", "The two passwords do not match");
                return;
            }

            try
            {
                var result = await DbHelperService.AddUserAsync(User ?? throw new ArgumentNullException(nameof(User), "User was null"), Password);
                if (result)
                {
                    Password = null;
                    ConfirmPassword = null;
                    await OnUserSubmit.InvokeAsync(User);
                    Modal.Hide();
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Error creating user");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", "Error creating user: " + ex.Message);
            }
        }
        // Existing user
        else
        {
            try
            {
                var context = DbFactory.CreateDbContext();
                context.Attach(User).State = EntityState.Modified;
                await context.SaveChangesAsync();
                await OnUserSubmit.InvokeAsync(User);
                Modal.Hide();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", "Error updating user: " + ex.Message);
            }
        }
    }

    public void Show()
    {
        Modal.Show();
    }


}
