@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IConfiguration configuration
@inject IJSRuntime JS

<HxModal @ref="Modal" Size="ModalSize.Large" OnClosed="() => ConnectionTestSuccess = null" Title="@(AppRegistrationId == Guid.Empty ? "New App registration" : "Edit " + AppRegistration?.AppRegistrationName)">
    <BodyTemplate>
        @if (AppRegistration is not null)
        {
        <EditForm Model="AppRegistration" id="pbi_edit_form" OnValidSubmit="SubmitAppRegistration">
            <div class="row">
                <div class="col mx-3">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col">
                            <label class="form-label">App registration name</label>
                            <InputText class="form-control" @bind-Value="AppRegistration.AppRegistrationName"></InputText>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col">
                            <label class="form-label">Tenant id</label>
                            <InputText class="form-control" @bind-Value="AppRegistration.TenantId"></InputText>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col">
                            <label class="form-label">Client id</label>
                            <InputText class="form-control" @bind-Value="AppRegistration.ClientId"></InputText>
                        </div>
                        <div class="col-lg">
                            <label class="form-label">Client secret</label>
                            <InputText class="form-control" @bind-Value="AppRegistration.ClientSecret"></InputText>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col">
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="TestConnection" Enabled="!TestingConnection">
                                Test connection
                            </HxButton>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col">
                            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="TestPowerBIAccess" Enabled="!TestingConnection">
                                Test Power BI access
                            </HxButton>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col">
                            @if (ConnectionTestSuccess == true)
                            {
                                <span class="badge bg-success">Success</span>
                            }
                            else if (ConnectionTestSuccess == false)
                            {
                                <span class="badge bg-danger">Failed</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="pbi_edit_form" Color="ThemeColor.Success">@(AppRegistrationId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" @onclick="async () => await Modal.HideAsync()">Cancel</HxButton>
    </FooterTemplate> 
</HxModal>

@code {
    [Parameter]
    public Guid AppRegistrationId { get; set; } // empty Guid => new Power BI Service

    [Parameter]
    public EventCallback<AppRegistration> OnAppRegistrationSubmit { get; set; }

    private AppRegistration? AppRegistration { get; set; }

    private HxModal Modal { get; set; } = null!;

    private bool? ConnectionTestSuccess { get; set; } = null;
    private bool TestingConnection { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        if (AppRegistrationId != Guid.Empty)
        {
            using var context = DbFactory.CreateDbContext();
            AppRegistration = await context.AppRegistrations
                .AsNoTracking()
                .FirstAsync(r => r.AppRegistrationId == AppRegistrationId);
        }
        else
        {
            AppRegistration = new();
        }
    }

    private async Task SubmitAppRegistration()
    {
        await OnAppRegistrationSubmit.InvokeAsync(AppRegistration);
        await Modal.HideAsync();
    }

    private async Task TestConnection()
    {
        ConnectionTestSuccess = null;
        TestingConnection = true;
        try
        {
            if (AppRegistration?.TenantId is null || AppRegistration.ClientId is null || AppRegistration.ClientSecret is null)
            {
                throw new ArgumentNullException("One or more of the App registration properties needed for connection testing was null");
            }
            await (AppRegistration?.TestConnection() ?? Task.CompletedTask);
            ConnectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            ConnectionTestSuccess = false;
            await JS.InvokeVoidAsync("alert", ex.Message);
        }
        TestingConnection = false;
    }

    private async Task TestPowerBIAccess()
    {
        ConnectionTestSuccess = null;
        TestingConnection = true;
        try
        {
            if (AppRegistration?.TenantId is null || AppRegistration.ClientId is null || AppRegistration.ClientSecret is null)
            {
                throw new ArgumentNullException("One or more of the App registration properties needed for connection testing was null");
            }
            await (AppRegistration?.TestPowerBIConnection() ?? Task.CompletedTask);
            ConnectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            ConnectionTestSuccess = false;
            await JS.InvokeVoidAsync("alert", ex.Message);
        }
        TestingConnection = false;
    }

    public async Task ShowAsync() => await Modal.ShowAsync();
}
