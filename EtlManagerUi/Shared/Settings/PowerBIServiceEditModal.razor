@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IConfiguration configuration
@inject IJSRuntime JS

<BSModal @ref="Modal" Size="Size.Large">
    @if (PowerBIService is not null)
    {
        <BSModalHeader OnClick="() => Modal.Hide()">@(PowerBIServiceId == Guid.Empty ? "New Power BI Service" : "Edit " + PowerBIService.PowerBIServiceName)</BSModalHeader>
        <BSModalBody>
            <BSForm Model="PowerBIService" id="pbi_edit_form" OnValidSubmit="SubmitPowerBIService">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <BSFormGroup>
                            <BSLabel>Power BI Service name</BSLabel>
                            <InputText class="form-control" @bind-Value="PowerBIService.PowerBIServiceName"></InputText>
                        </BSFormGroup>

                        <BSFormRow>
                            <BSFormGroup Class="col-lg">
                                <BSLabel>Tenant id</BSLabel>
                                <InputText class="form-control" @bind-Value="PowerBIService.TenantId"></InputText>
                            </BSFormGroup>
                        </BSFormRow>

                        <BSFormRow>
                            <BSFormGroup Class="col-lg">
                                <BSLabel>Client id</BSLabel>
                                <InputText class="form-control" @bind-Value="PowerBIService.ClientId"></InputText>
                            </BSFormGroup>
                            <BSFormGroup Class="col-lg">
                                <BSLabel>Client secret</BSLabel>
                                <InputText class="form-control" @bind-Value="PowerBIService.ClientSecret" placeholder="@(PowerBIServiceId == Guid.Empty ? null : "Encrypted")"></InputText>
                            </BSFormGroup>
                        </BSFormRow>
                        <div class="row mt-2">
                            <div class="col">
                                <BSButton Size="Size.Small" Color="Color.Secondary" @onclick="TestConnection" IsDisabled="TestingConnection">
                                    Test connection
                                </BSButton>
                                @if (TestingConnection)
                                {
                                    <div class="spinner-border spinner-border-sm text-primary align-middle ml-3" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col">
                                @if (ConnectionTestSuccess == true)
                                {
                                    <span class="badge badge-success">Success</span>
                                }
                                else if (ConnectionTestSuccess == false)
                                {
                                    <span class="badge badge-danger">Failed</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </BSForm>
        </BSModalBody>
    }
    <BSModalFooter>
        <BSButton ButtonType="ButtonType.Submit" form="pbi_edit_form" Color="Color.Success">@(PowerBIServiceId == Guid.Empty ? "Create" : "Save")</BSButton>
        <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Cancel</BSButton>
    </BSModalFooter>
</BSModal>

@code {
    [Parameter]
    public Guid PowerBIServiceId { get; set; } // empty Guid => new Power BI Service

    [Parameter]
    public EventCallback<PowerBIService> OnPowerBIServiceSubmit { get; set; }

    private PowerBIService? PowerBIService { get; set; }

    private BSModal Modal { get; set; } = null!;

    private bool? ConnectionTestSuccess { get; set; } = null;
    private bool TestingConnection { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        if (PowerBIServiceId != Guid.Empty)
        {
            var context = DbFactory.CreateDbContext();
            PowerBIService = await context.PowerBIServices.FindAsync(PowerBIServiceId);
        }
        else
        {
            PowerBIService = new();
        }
    }

    private async Task SubmitPowerBIService()
    {
        await OnPowerBIServiceSubmit.InvokeAsync(PowerBIService);
        Modal.Hide();
    }

    private async Task TestConnection()
    {
        ConnectionTestSuccess = null;
        TestingConnection = true;
        try
        {
            if (PowerBIService?.TenantId is null || PowerBIService.ClientId is null || PowerBIService.ClientSecret is null)
            {
                throw new ArgumentNullException("One or more of the Power BI Service properties needed for connection testingwas null");
            }
            await PowerBIServiceHelper.TestConnection(PowerBIService.TenantId, PowerBIService.ClientId, PowerBIService.ClientSecret);
            ConnectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            ConnectionTestSuccess = false;
            await JS.InvokeVoidAsync("alert", ex.Message);
        }
        TestingConnection = false;
    }

    public void Show() => Modal.Show();
}
