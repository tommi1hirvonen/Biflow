@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IConfiguration configuration
@inject IJSRuntime JS
@inject IWebHostEnvironment WebHostEnvironment
@inject IHttpClientFactory HttpClientFactory
@inject ITokenService TokenService

<HxModal @ref="Modal" Size="ModalSize.Large" OnClosed="() => ConnectionTestSuccess = null" Title="@(FunctionAppId == Guid.Empty ? "New Function App" : "Edit " + FunctionApp?.FunctionAppName)">
    
    <BodyTemplate>
        @if (FunctionApp is not null)
        {
            <EditForm Model="FunctionApp" id="function_app_edit_form" OnValidSubmit="SubmitFunctionApp">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div>
                            <label class="form-label">Function App name</label>
                            <InputText class="form-control" @bind-Value="FunctionApp.FunctionAppName"></InputText>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg-6">
                                <label class="form-label">App registration</label>
                                <InputSelect class="form-select" @bind-Value="FunctionApp.AppRegistrationId" @onchange="args => AppRegistrationChanged(args.Value)">
                                    @foreach (var app in AppRegistrations ?? Enumerable.Empty<AppRegistration>())
                                    {
                                        <option value="@app.AppRegistrationId">@app.AppRegistrationName</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Subscription id</label>
                                <InputText class="form-control" @bind-Value="FunctionApp.SubscriptionId"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Resource group name</label>
                                <InputText class="form-control" @bind-Value="FunctionApp.ResourceGroupName"></InputText>
                            </div>
                            <div class="col-lg">
                                <label class="form-label">Resource name</label>
                                <InputText class="form-control" @bind-Value="FunctionApp.ResourceName"></InputText>
                            </div>
                        </div>

                        <div class="row my-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="TestConnection" Enabled="!TestingConnection">
                                    Test connection
                                </HxButton>
                                @if (ConnectionTestSuccess == true)
                                {
                                    <span class="badge badge-success ms-3">Success</span>
                                }
                                else if (ConnectionTestSuccess == false)
                                {
                                    <span class="badge badge-danger ms-3">Failed</span>
                                }
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg">
                                <label class="form-label">Function App key</label>
                                <InputText class="form-control" @bind-Value="FunctionApp.FunctionAppKey"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" @onclick="OpenKeySelectOffcanvasAsync">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/more-horizontal.svg")))
                                    Browse function app keys
                                </HxButton>
                            </div>
                        </div>

                        <FunctionAppKeySelectOffcanvas @ref="KeySelectOffcanvas" FunctionApp="FunctionApp" OnKeySelected="OnKeySelected" />

                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    
    <FooterTemplate>
        <HxSubmit form="function_app_edit_form" Color="ThemeColor.Success">@(FunctionAppId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" @onclick="async () => await Modal.HideAsync()">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public Guid FunctionAppId { get; set; } // empty Guid => new Function App

    [Parameter]
    public EventCallback<FunctionApp> OnFunctionAppSubmit { get; set; }

    [Parameter]
    public List<AppRegistration>? AppRegistrations { get; set; }

    private FunctionApp? FunctionApp { get; set; }

    private HxModal Modal { get; set; } = null!;

    private bool? ConnectionTestSuccess { get; set; } = null;
    private bool TestingConnection { get; set; } = false;

    private FunctionAppKeySelectOffcanvas KeySelectOffcanvas { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        if (FunctionAppId != Guid.Empty)
        {
            using var context = DbFactory.CreateDbContext();
            FunctionApp = await context.FunctionApps
                .AsNoTrackingWithIdentityResolution()
                .Include(f => f.AppRegistration)
                .FirstAsync(f => f.FunctionAppId == FunctionAppId);
        }
        else
        {
            FunctionApp = new()
            {
                AppRegistrationId = AppRegistrations?.FirstOrDefault()?.AppRegistrationId,
                AppRegistration = AppRegistrations?.FirstOrDefault()!
            };
        }
    }

    private void AppRegistrationChanged(object? value)
    {
        var idString = value?.ToString();
        if (idString is not null)
        {
            var id = Guid.Parse(idString);
            var appRegistration = AppRegistrations?.FirstOrDefault(a => a.AppRegistrationId == id);
            if (appRegistration is not null && FunctionApp is not null)
            {
                FunctionApp.AppRegistration = appRegistration;
            }
        }
    }

    private void OnKeySelected(string key)
    {
        if (FunctionApp is not null)
            FunctionApp.FunctionAppKey = key;
    }

    private async Task OpenKeySelectOffcanvasAsync()
    {
        await KeySelectOffcanvas.ShowAsync();
    }

    private async Task SubmitFunctionApp()
    {
        if (FunctionApp is not null) FunctionApp.AppRegistration = null!;
        await OnFunctionAppSubmit.InvokeAsync(FunctionApp);
        await Modal.HideAsync();
    }

    private async Task TestConnection()
    {
        ConnectionTestSuccess = null;
        TestingConnection = true;
        try
        {
            if (FunctionApp is not null) await FunctionApp.TestConnection(HttpClientFactory.CreateClient());
            ConnectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            ConnectionTestSuccess = false;
            await JS.InvokeVoidAsync("alert", ex.Message);
        }
        TestingConnection = false;
    }

    public async Task ShowAsync() => await Modal.ShowAsync();
}
