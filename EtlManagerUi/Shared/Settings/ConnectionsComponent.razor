@inject IConfiguration Configuration
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment 


<HxButton Color="ThemeColor.Success" @onclick="() => ShowConnectionEditModal(null)" Enabled="Connections is not null">
    Add connection
</HxButton>


<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th></th>
                <th>
                    Connection string
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Connections is null)
            {
                <tr><td colspan="3">Loading...</td></tr>
            }
            else if (Connections.Count == 0)
            {
                <tr><td colspan="3">No connections</td></tr>
            }
            else
            {
                @foreach (var connection in Connections)
                {
                    <tr>
                        <td class="align-middle">
                            @connection.ConnectionName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup CssClass="btn-row">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" aria-label="edit" @onclick="() => ShowConnectionEditModal(connection)">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-2.svg")))
                                </HxButton>
                                <HxDropdown>
                                    <HxDropdownToggle Size="ButtonSize.Small" Color="ThemeColor.Light" aria-label="delete">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                                    </HxDropdownToggle>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteConnection(connection)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdown>
                            </HxButtonGroup>
                        </td>
                        <td>
                            <HxButtonGroup CssClass="btn-row">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light"
                                            @onclick="() => ShowConnectionString[connection.ConnectionId] = !ShowConnectionString[connection.ConnectionId]">
                                    @if (ShowConnectionString[connection.ConnectionId])
                                    {
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/eye-off.svg")))
                                    }
                                    else
                                    {
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/eye.svg")))
                                    }
                                </HxButton>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            @if (ShowConnectionString[connection.ConnectionId])
                            {
                                <pre><code>@connection.ConnectionString</code></pre>
                            }
                            else
                            {
                                <pre><code>************************************************************</code></pre>
                            }
                        </td>
                        
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<ConnectionEditModal @ref="ConnectionEditModal" ConnectionId="EditConnectionId" OnConnectionSubmit="OnConnectionSubmit" />

@code {
    private List<Connection>? Connections { get; set; }
    private Dictionary<Guid, bool> ShowConnectionString { get; set; } = new();

    private Guid EditConnectionId { get; set; }
    private ConnectionEditModal ConnectionEditModal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        using var context = await Task.Run<EtlManagerContext>(DbFactory.CreateDbContext);
        Connections = await context.Connections
            .AsNoTracking()
            .OrderBy(c => c.ConnectionName)
            .ToListAsync();
        ShowConnectionString = Connections.ToDictionary(key => key.ConnectionId, value => false);
    }

    private async Task DeleteConnection(Connection connection)
    {
        using var context = DbFactory.CreateDbContext();
        var conn = await context.Connections.FindAsync(connection.ConnectionId);
        context.Connections.Remove(conn);
        await context.SaveChangesAsync();
        Connections?.RemoveAll(c => c.ConnectionId == connection.ConnectionId);
        ShowConnectionString.Remove(connection.ConnectionId);
    }

    private async void OnConnectionSubmit(Connection connection)
    {
        using var context = DbFactory.CreateDbContext();
        if (connection.ConnectionId == Guid.Empty)
        {
            context.Add(connection);
            Connections?.Add(connection);
            ShowConnectionString[connection.ConnectionId] = false;
        }
        else
        {
            Connections?.RemoveAll(c => c.ConnectionId == connection.ConnectionId);
            Connections?.Add(connection);
            context.Attach(connection).State = EntityState.Modified;
        }
        await context.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ShowConnectionEditModal(Connection? connection)
    {
        EditConnectionId = connection?.ConnectionId ?? Guid.Empty;
        await ConnectionEditModal.ShowAsync();
    }
}
