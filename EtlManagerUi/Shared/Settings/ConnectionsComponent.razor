@inject IConfiguration Configuration
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment 

@if (!IsEncryptionKeySet)
{
    <div class="alert alert-warning show" role="alert">
        Encryption key is not set. Sensitive connections cannot be added and previously created sensitive connections will not work. Set the encryption key and reset connection string for sensitive connections.
    </div>
}

<BSButton Color="Color.Success" @onclick="() => ShowConnectionEditModal(null)">
    Add connection
</BSButton>


<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th></th>
                <th>
                    Connection string
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Connections is null)
            {
                <tr><td colspan="3">Loading...</td></tr>
            }
            else if (Connections.Count == 0)
            {
                <tr><td colspan="3">No connections</td></tr>
            }
            else
            {
                @foreach (var connection in Connections)
                {
                    <tr>
                        <td class="align-middle">
                            @connection.ConnectionName
                        </td>
                        <td class="align-middle">
                            <BSButtonGroup Class="btn-row">
                                <BSButton Size="Size.Small" Color="Color.Light" aria-label="edit" @onclick="() => ShowConnectionEditModal(connection)">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-2.svg")))
                                </BSButton>
                                <BSDropdown>
                                    <BSDropdownToggle Size="Size.Small" Color="Color.Light" aria-label="delete">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                                    </BSDropdownToggle>
                                    <BSDropdownMenu>
                                        <BSDropdownHeader>Delete?</BSDropdownHeader>
                                        <BSDropdownItem @onclick="() => DeleteConnection(connection)">Confirm</BSDropdownItem>
                                    </BSDropdownMenu>
                                </BSDropdown>
                            </BSButtonGroup>
                        </td>
                        <td>
                            @if (connection.IsSensitive)
                            {
                                <BSButtonGroup Class="btn-row">
                                    <BSButton Size="Size.Small" Color="Color.Light"
                                              @onclick="() => ShowSensitiveConnectionString[connection.ConnectionId] = !ShowSensitiveConnectionString[connection.ConnectionId]">
                                        @if (ShowSensitiveConnectionString[connection.ConnectionId])
                                        {
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/eye-off.svg")))
                                        }
                                        else
                                        {
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/eye.svg")))
                                        }
                                    </BSButton>
                                </BSButtonGroup>
                            }
                        </td>
                        <td class="align-middle">
                            @if (!connection.IsSensitive || ShowSensitiveConnectionString[connection.ConnectionId])
                            {
                                <pre><code>@connection.ConnectionString</code></pre>
                            }
                            else
                            {
                                <pre><code>************************************************************</code></pre>
                            }
                        </td>
                        
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<ConnectionEditModal @ref="ConnectionEditModal" EncryptionPassword="@EncryptionPassword" ConnectionId="EditConnectionId" OnConnectionSubmit="OnConnectionSubmit" />

@code {
    [Parameter]
    public string? EncryptionPassword { get; set; }

    private bool IsEncryptionKeySet { get; set; } = true; // Set to true until the exact value is fetched.

    private List<Connection>? Connections { get; set; }
    private Dictionary<Guid, bool> ShowSensitiveConnectionString { get; set; } = new();

    private Guid EditConnectionId { get; set; }
    private ConnectionEditModal ConnectionEditModal { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        IsEncryptionKeySet = EncryptionPassword is not null;
        await LoadData();
    }

    private async Task LoadData()
    {
        var context = DbFactory.CreateDbContext();

        Connections = await context.Connections
            .FromSqlRaw<Connection>("etlmanager.ConnectionGet @EncryptionKey = {0}", new string?[] { EncryptionPassword })
            .ToListAsync();
        ShowSensitiveConnectionString = Connections.ToDictionary(key => key.ConnectionId, value => false);
    }

    private async Task DeleteConnection(Connection connection)
    {
        var context = DbFactory.CreateDbContext();
        var conn = await context.Connections.FindAsync(connection.ConnectionId);
        context.Connections.Remove(conn);
        await context.SaveChangesAsync();
        Connections?.RemoveAll(c => c.ConnectionId == connection.ConnectionId);
    }

    private async void OnConnectionSubmit(Connection connection)
    {
        var context = DbFactory.CreateDbContext();
        var existingConnection = Connections?.FirstOrDefault(conn => conn.ConnectionId == connection.ConnectionId);
        string? encryptionPassword = await CommonUtility.GetEncryptionKeyAsync(Configuration);

        if (existingConnection is not null)
        {
            await context.Database.ExecuteSqlRawAsync("etlmanager.ConnectionUpdate {0}, {1}, {2}, {3}, {4}, {5}", parameters: new string?[]
            {
                connection.ConnectionId.ToString(),
                connection.ConnectionName,
                connection.ConnectionString,
                connection.IsSensitive ? "1" : "0",
                encryptionPassword,
                connection.ExecutePackagesAsLogin
            });
        }
        else
        {
            await context.Database.ExecuteSqlRawAsync("etlmanager.ConnectionAdd {0}, {1}, {2}, {3}, {4}", parameters: new string?[]
            {
                connection.ConnectionName,
                connection.ConnectionString,
                connection.IsSensitive ? "1" : "0",
                encryptionPassword,
                connection.ExecutePackagesAsLogin
            });
        }

        await LoadData();
        StateHasChanged();
    }

    private void ShowConnectionEditModal(Connection? connection)
    {
        EditConnectionId = connection?.ConnectionId ?? Guid.Empty;
        ConnectionEditModal.Show();
    }
}
