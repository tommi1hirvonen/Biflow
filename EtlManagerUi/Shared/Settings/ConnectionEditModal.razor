@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject IConfiguration configuration
@inject IJSRuntime JS

<BSModal @ref="Modal" Size="Size.Large" IsOpenChanged="OnOpenChanged">
    @if (Connection is not null)
    {
        <BSModalHeader OnClick="() => Modal.Hide()">@(ConnectionId == Guid.Empty ? "New connection" : "Edit " + Connection.ConnectionName)</BSModalHeader>
        <BSModalBody>
            <BSForm Model="Connection" id="connection_edit_form" OnValidSubmit="SubmitConnection">
                <div class="row">
                    <div class="col-md-10 mx-auto">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <BSFormGroup>
                            <BSLabel>Connection name</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-2.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" @bind-Value="Connection.ConnectionName"></InputText>
                            </div>
                        </BSFormGroup>
                        <BSFormGroup>
                            <BSLabel>Connection string</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/database.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" @bind-Value="Connection.ConnectionString" style="font-family:monospace;"></InputText>
                            </div>
                        </BSFormGroup>

                        <BSFormGroup Class="mt-2">
                            <BSLabel>Execute SSIS packages as login (blank = no impersonation)</BSLabel>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/user.svg")))
                                    </div>
                                </div>
                                <InputText class="form-control" @bind-Value="Connection.ExecutePackagesAsLogin"></InputText>
                            </div>
                        </BSFormGroup>

                        <div class="row mt-2">
                            <div class="col">
                                <BSButton Size="Size.Small" Color="Color.Secondary" @onclick="TestConnection" IsDisabled="TestingConnection">
                                    Test connection
                                </BSButton>
                                @if (TestingConnection)
                                {
                                    <div class="spinner-border spinner-border-sm text-primary align-middle ml-3" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col">
                                @if (ConnectionTestSuccess == true)
                                {
                                    <span class="badge badge-success">Success</span>
                                }
                                else if (ConnectionTestSuccess == false)
                                {
                                    <span class="badge badge-danger">Failed</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </BSForm>
        </BSModalBody>
    }
    <BSModalFooter>
        <BSButton ButtonType="ButtonType.Submit" form="connection_edit_form" Color="Color.Success">@(ConnectionId == Guid.Empty ? "Create" : "Save")</BSButton>
        <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Cancel</BSButton>
    </BSModalFooter>
</BSModal>

@code {
    [Parameter]
    public Guid ConnectionId { get; set; } // empty Guid => new connection

    [Parameter]
    public EventCallback<Connection> OnConnectionSubmit { get; set; }

    private Connection? Connection { get; set; }

    private BSModal Modal { get; set; } = null!;

    private bool? ConnectionTestSuccess { get; set; } = null;
    private bool TestingConnection { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        if (ConnectionId != Guid.Empty)
        {
            var context = DbFactory.CreateDbContext();
            Connection = await context.Connections.FindAsync(ConnectionId);
        }
        else
        {
            Connection = new(string.Empty, string.Empty);
        }
        ConnectionTestSuccess = null;
        TestingConnection = false;
    }

    private async Task SubmitConnection()
    {
        await OnConnectionSubmit.InvokeAsync(Connection);
        Modal.Hide();
    }

    private async Task TestConnection()
    {
        ConnectionTestSuccess = null;
        TestingConnection = true;
        try
        {
            using var connection = new SqlConnection(Connection?.ConnectionString);
            await connection.OpenAsync();
            ConnectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            ConnectionTestSuccess = false;
            await JS.InvokeVoidAsync("alert", ex.Message);
        }
        TestingConnection = false;
    }

    private void OnOpenChanged(bool isOpen)
    {
        if (!isOpen)
            ConnectionTestSuccess = null;
    }

    public void Show() => Modal.Show();
}
