@inject IConfiguration configuration
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject IJSRuntime JS  

<BSButton Color="Color.Success" @onclick="() => ShowEditModal(null)">
    Add App registration
</BSButton>

<div class="card shadow-sm pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th>
                    Tenant id
                </th>
            </tr>
        </thead>
        <tbody>
            @if (AppRegistrations is null)
            {
                <tr><td colspan="4">Loading...</td></tr>
            }
            else if (AppRegistrations.Count == 0)
            {
                <tr><td colspan="4">No App registrations</td></tr>
            }
            else
            {
                @foreach (var app in AppRegistrations)
                {
                    <tr>
                        <td class="align-middle">
                            @app.AppRegistrationName
                        </td>
                        <td class="align-middle">
                            <BSButtonGroup Class="btn-row">
                                <BSButton Size="Size.Small" Color="Color.Light" aria-label="edit" @onclick="() => ShowEditModal(app)">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-2.svg")))
                                </BSButton>
                                <BSDropdown>
                                    <BSDropdownToggle Size="Size.Small" Color="Color.Light" aria-label="delete">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                                    </BSDropdownToggle>
                                    <BSDropdownMenu>
                                        <BSDropdownHeader>Delete?</BSDropdownHeader>
                                        <BSDropdownItem @onclick="() => DeleteAppRegistration(app)">Confirm</BSDropdownItem>
                                    </BSDropdownMenu>
                                </BSDropdown>
                            </BSButtonGroup>
                        </td>
                        <td class="align-middle">
                            @app.TenantId
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<AppRegistrationEditModal @ref="AppRegistrationEditModal" AppRegistrationId="EditAppRegistrationId" OnAppRegistrationSubmit="OnAppRegistrationSubmit" />

@code {
    private List<AppRegistration>? AppRegistrations { get; set; }

    private Guid EditAppRegistrationId { get; set; }
    private AppRegistrationEditModal AppRegistrationEditModal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var context = DbFactory.CreateDbContext();
        AppRegistrations = await context.AppRegistrations.OrderBy(df => df.AppRegistrationName).ToListAsync();
    }

    private async Task DeleteAppRegistration(AppRegistration appRegistration)
    {
        var context = DbFactory.CreateDbContext();
        context.Remove(appRegistration);
        await context.SaveChangesAsync();
        AppRegistrations?.Remove(appRegistration);
    }

    private async void OnAppRegistrationSubmit(AppRegistration appRegistration)
    {
        var context = DbFactory.CreateDbContext();
        if (appRegistration.AppRegistrationId == Guid.Empty)
        {
            context.Add(appRegistration);
            AppRegistrations?.Add(appRegistration);
        }
        else
        {
            AppRegistrations?.RemoveAll(a => a.AppRegistrationId == appRegistration.AppRegistrationId);
            AppRegistrations?.Add(appRegistration);
            context.Attach(appRegistration).State = EntityState.Modified;
        }
        await context.SaveChangesAsync();
        StateHasChanged();
    }

    private void ShowEditModal(AppRegistration? appRegistration)
    {
        EditAppRegistrationId = appRegistration?.AppRegistrationId ?? Guid.Empty;
        AppRegistrationEditModal.Show();
    }
}
