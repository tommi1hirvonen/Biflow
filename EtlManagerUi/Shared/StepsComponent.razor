@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject IConfiguration configuration
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<div class="row mx-auto" style="max-width: 60rem;">
    <div class="col">
        <AuthorizeView Roles="Admin, Editor">
            <BSButton Color="Color.Success" @onclick="() => ShowEditModal(null)">Add step</BSButton>
        </AuthorizeView>
        <AuthorizeView Roles="Admin, Editor, Operator">
            <BSButton Class="ml-3" @onclick="() => ExecuteModal.Show()" IsDisabled="@ExecuteButtonDisabled">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/play.svg")))
                Execute
            </BSButton>
            <div id="spinner_starting" class="spinner-border text-primary align-middle ml-3" hidden=@(!ExecuteButtonDisabled) role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </AuthorizeView>
    </div>
</div>

<div class="row mx-auto" style="max-width: 60rem;">
    <div class="col">
        <BSAlert Class="mt-3" Color="@(ExecuteSuccess ? Color.Success : Color.Danger)" IsOpen="@ExecuteAlertOpen" OnDismiss="() => ExecuteAlertOpen = false" IsDismissible="true">
            @if (ExecuteSuccess)
            {
                <text>Execution started successfully - <a class="alert-link" href="javascript:void(0)" @onclick="OpenJobExecutionModal">monitor execution</a></text>
            }
            else
            {
                <text>Error starting execution: @ExecuteErrorMessage</text>
            }
        </BSAlert>
    </div>
</div>


<div class="row mt-4 mb-2 mx-auto" style="max-width: 60rem;">
    <div class="col-7 input-group">
        <label class="sr-only">Filter by name</label>
        <div class="input-group-prepend">
            <div class="input-group-text rounded-left">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
            </div>
        </div>
        <input type="text" class="form-control" @bind-value="StepsFilterText" @bind-value:event="oninput" placeholder="Search by name" />
    </div>
    <div class="col-5 input-group">
        <label class="sr-only">Filter by tags</label>
        <div class="input-group-prepend">
            <div class="input-group-text rounded-left">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tag.svg")))
            </div>
        </div>
        <input type="text" class="form-control" @bind-value="TagsFilterText" @bind-value:event="oninput" placeholder="Search by tag" />
    </div>
</div>


<div class="row mx-auto" style="height: calc(100vh - 320px); overflow-y: auto; max-width: 60rem;">
    <div class="col">
        @if (Steps == null || Jobs == null || Job == null)
        {
            <p class="text-secondary"><em>Loading...</em></p>
        }
        else if (Steps.Count == 0)
        {
            <p class="text-secondary"><em>No steps</em></p>
        }
        else
        {
            @foreach (var item in Steps
                .Where(step => step.StepName.ContainsIgnoreCase(StepsFilterText))
                .Where(step => string.IsNullOrEmpty(TagsFilterText) || step.Tags.Any(tag => tag.TagName.ContainsIgnoreCase(TagsFilterText))))
            {
                <div class="card shadow-sm my-3 px-3 py-2 @(item.IsEnabled ? null : "bg-light")">
                    <div class="row">
                        <div class="col-auto">
                            <StepTypeIconComponent StepType="@item.StepType" />
                            &nbsp;
                            <AuthorizeView Roles="Admin, Editor">
                                <a class="text-dark" href="javascript:void(0)" @onclick="() => ShowEditModal(item)">
                                    <strong>@item.StepName</strong>
                                </a>
                            </AuthorizeView>
                            <AuthorizeView Roles="Operator, Viewer">
                                <strong>@item.StepName</strong>
                            </AuthorizeView>
                        </div>

                        <div class="col d-flex justify-content-end align-items-center">
                            <strong>@item.ExecutionPhase</strong>
                            &nbsp;
                            <div class="mr-5">@((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/layers.svg")))</div>

                            <AuthorizeView Roles="Admin, Editor">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                    <label class="custom-control-label" style="cursor: pointer;" for="enabled_@item.StepId" aria-label="enabled"></label>
                                </div>
                            </AuthorizeView>
                            <AuthorizeView Roles="Operator, Viewer">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" disabled id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)">
                                    <label class="custom-control-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                </div>
                            </AuthorizeView>

                            <div class="btn-group btn-row ml-2">
                                <BSButton Size="Size.Small" Color="Color.Light" @onclick="() => ShowStepHistoryModal(item)">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/activity.svg")))
                                </BSButton>

                                <BSButton Size="Size.Small" Color="Color.Light" @onclick="() => ShowStepDetailsModal(item)">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
                                </BSButton>

                                <AuthorizeView Roles="Admin, Editor">
                                    <BSDropdown IsGroup="true">
                                        <BSDropdownToggle Size="Size.Small" Color="Color.Light">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/copy.svg")))
                                        </BSDropdownToggle>
                                        <BSDropdownMenu Class="dropdown-menu-right">
                                            <BSDropdownHeader>Copy to</BSDropdownHeader>
                                            <BSDropdownItem @onclick="() => CopyStep(item, Job)">here</BSDropdownItem>
                                            <BSDropdownItem IsDivider="true"></BSDropdownItem>
                                            @foreach (var job in Jobs.Where(job => job.JobId != Job.JobId))
                                            {
                                                <BSDropdownItem @onclick="() => CopyStep(item, job)">@job.JobName</BSDropdownItem>
                                            }
                                        </BSDropdownMenu>
                                    </BSDropdown>

                                    <BSDropdown IsGroup="true">
                                        <BSDropdownToggle Size="Size.Small" Color="Color.Light">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                                        </BSDropdownToggle>
                                        <BSDropdownMenu Class="dropdown-menu-right">
                                            <BSDropdownHeader>Delete?</BSDropdownHeader>
                                            <BSDropdownItem @onclick="() => DeleteStep(item)">Confirm</BSDropdownItem>
                                        </BSDropdownMenu>
                                    </BSDropdown>
                                </AuthorizeView>
                            </div>
                        </div>

                    </div>
                    <div class="row mt-2">
                        <div class="col-auto">
                            <small><em class="text-secondary">@item.StepDescription</em></small>
                        </div>
                        <div class="col d-flex justify-content-end align-items-center">
                            @if (item.Tags.Count > 0)
                            {
                                @foreach (var tag in item.Tags.OrderBy(t => t.TagName))
                                {
                                    <span class="badge badge-pill badge-light mx-1">
                                        @tag.TagName
                                        <span class="tag-remove" @onclick="() => RemoveTag(item, tag)">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x.svg")))
                                        </span>
                                    </span>
                                }
                            }
                            else
                            {
                                <small class="text-secondary mr-2">No tags</small>
                            }
                            <div class="btn-group btn-group-sm btn-row">
                                <BSDropdown>
                                    <BSDropdownToggle Color="Color.Light" Size="Size.Small" @onclick="() => TagInputFocusStepId = item.StepId">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tag.svg")))
                                    </BSDropdownToggle>
                                    <BSDropdownMenu Class="dropdown-menu-right p-3" style="min-width: 20rem;">
                                        <BSForm Model="NewTag" OnValidSubmit="() => SubmitTag(item)">
                                            <DataAnnotationsValidator />
                                            <ValidationSummary />
                                            <div class="form-group">
                                                <input @ref="TagInputs[item.StepId]" @bind-value="NewTag.TagName" placeholder="Add tags" class="form-control form-control-sm">
                                            </div>
                                        </BSForm>
                                    </BSDropdownMenu>
                                </BSDropdown>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>


<AuthorizeView Roles="Admin, Editor">
    <StepEditModal @ref="StepEditModal" Job="Job" StepId="EditModalStepId" Jobs="Jobs" Steps="Steps" OnStepSubmit="OnStepSubmit" />
</AuthorizeView>


<StepDetailsModal @ref="StepDetailsModal" Step="DetailsModalStep" />

<StepHistoryModal @ref="StepHistoryModal" StepId_="@HistoryModalStep?.StepId.ToString()" />



<AuthorizeView Roles="Admin, Editor, Operator">
    <BSModal @ref="ExecuteModal" Size="Size.ExtraLarge" IsScrollable="true" IsOpenChanged="isOpen => StepsToExecute.Clear()">
        <BSModalHeader OnClick="() => ExecuteModal.Hide()">Execute steps</BSModalHeader>
        @if (Steps != null)
        {
            <BSModalBody>
                <div class="row">
                    <p class="col font-italic text-secondary small">Disabled steps, if selected, will be included in manual executions.</p>
                </div>

                <div class="row">

                    <div class="col">
                        <div class="input-group input-group-sm">
                            <label class="sr-only">Search</label>
                            <div class="input-group-prepend">
                                <div class="input-group-text rounded-left">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
                                </div>
                            </div>
                            <input type="text" class="form-control" @bind-value="ExecuteFilterText" @bind-value:event="oninput" placeholder="Search" autocomplete="off" />
                        </div>

                        <table class="table table-hover table-sm mt-2">
                            <thead>
                                <tr>
                                    <th>Available steps</th>
                                    @if (Job.UseDependencyMode)
                                    {
                                        <th></th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var step in Steps.Where(step => step.StepName.ContainsIgnoreCase(ExecuteFilterText) && !StepsToExecute.Any(e => e.StepId == step.StepId)))
                                {
                                <tr style="cursor: pointer;" @onclick="() => { if (!StepsToExecute.Any(s => s.StepId == step.StepId)) StepsToExecute.Add(step); }">
                                    <td class="@(step.IsEnabled ? null : "text-secondary") align-middle">
                                        @step.StepName
                                    </td>
                                    @if (Job.UseDependencyMode)
                                    {
                                        <td>
                                            <div class="btn-group btn-group-sm btn-row">
                                                @if (step.Dependencies?.Count > 0)
                                                {
                                                <BSButton Size="Size.Small" Color="Color.Light" @onclick="() => SelectStepAndDependencies(step)">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/diagram-3-fill.svg")))
                                                </BSButton>
                                                }
                                            </div>
                                        </td>
                                    }
                                </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="col-lg">
                        <BSButtonGroup>
                            @*Add all available AND enabled steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                            <BSButton Size="Size.Small" Color="Color.Secondary"
                                      @onclick="() => StepsToExecute.AddRange(Steps.Where(step => step.StepName.ContainsIgnoreCase(ExecuteFilterText) && step.IsEnabled && !StepsToExecute.Any(e => e.StepId == step.StepId)))">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/chevron-right.svg")))
                                Select enabled
                            </BSButton>
                            @*Add all available steps that have not yet been added to selected steps. Also filter based on current filter text.*@
                            <BSButton Size="Size.Small" Color="Color.Secondary"
                                      @onclick="() => StepsToExecute.AddRange(Steps.Where(step => step.StepName.ContainsIgnoreCase(ExecuteFilterText) && !StepsToExecute.Any(e => e.StepId == step.StepId)))">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/chevrons-right.svg")))
                                Select all
                            </BSButton>
                            <BSButton Size="Size.Small" Color="Color.Secondary" @onclick="() => StepsToExecute.Clear()">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/chevrons-left.svg")))
                                Deselect all
                            </BSButton>
                        </BSButtonGroup>

                        <table class="table table-hover table-sm mt-2">
                            <thead>
                                <tr>
                                    <th>Selected steps</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var step in StepsToExecute.OrderBy(step => step.ExecutionPhase).ThenBy(step => step.StepName))
                                {
                                    <tr style="cursor: pointer;" @onclick="() => StepsToExecute.Remove(step)">
                                        <td class="@(step.IsEnabled ? null : "text-secondary")">
                                            @step.StepName
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>      

                </div>
            </BSModalBody>
        }
        <BSModalFooter>
            <BSButton Color="Color.Primary" Class="ml-5" @onclick="Execute">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/play.svg")))
                Execute
            </BSButton>
            <BSButton Color="Color.Secondary" @onclick="() => ExecuteModal.Hide()">Cancel</BSButton>
        </BSModalFooter>
    </BSModal>
</AuthorizeView>


<JobExecutionDetailsModal @ref="JobExecutionModal" ExecutionId_="@SelectedJobExecutionId.ToString()" />

@code {
    [Parameter]
    public Job Job { get; set; }

    [Parameter]
    public IList<Job> Jobs { get; set; }

    [Parameter]
    public List<Step> Steps { get; set; }

    private StepEditModal StepEditModal { get; set; }
    private Guid EditModalStepId { get; set; }

    private StepDetailsModal StepDetailsModal { get; set; }
    private Step DetailsModalStep { get; set; }

    private StepHistoryModal StepHistoryModal { get; set; }
    private Step HistoryModalStep { get; set; }

    private BSModal ExecuteModal { get; set; }
    private List<Step> StepsToExecute { get; set; } = new();
    private bool ExecuteButtonDisabled { get; set; } = false;

    private bool ExecuteSuccess { get; set; } = false;
    private bool ExecuteAlertOpen { get; set; } = false;
    private string ExecuteErrorMessage { get; set; } = string.Empty;

    private string StepsFilterText { get; set; } = string.Empty;
    private string TagsFilterText { get; set; } = string.Empty;
    private string ExecuteFilterText { get; set; } = string.Empty;

    private JobExecutionDetailsModal JobExecutionModal { get; set; }
    private Guid SelectedJobExecutionId { get; set; }

    private Dictionary<Guid, ElementReference> TagInputs { get; set; } = new();
    private Tag NewTag { get; set; } = new();
    private Guid? TagInputFocusStepId { get; set; } = null;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (TagInputFocusStepId != null)
        {
            try
            {
                await TagInputs[(Guid)TagInputFocusStepId].FocusAsync();
            }
            catch (Exception)
            {
            }
            finally
            {
                TagInputFocusStepId = null;
            }
        }
    }

    private void ShowEditModal(Step step)
    {
        EditModalStepId = step?.StepId ?? Guid.Empty;
        StepEditModal.Show();
    }

    private async Task ToggleEnabled(ChangeEventArgs args, Step step)
    {
        bool value = (bool)args.Value;
        try
        {
            await Utility.ToggleStepEnabledAsync(configuration, step, value);
            step.IsEnabled = !step.IsEnabled;
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error enabling/disabling step: " + ex.Message);
        }
    }

    private async Task DeleteStep(Step step)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Steps.Remove(step);
            await context.SaveChangesAsync();
            Steps.Remove(step);
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error deleting step: " + ex.Message);
        }
    }

    private async Task CopyStep(Step step, Job job)
    {
        try
        {
            Guid createdStepId = await Utility.StepCopyAsync(configuration, step.StepId, job.JobId, "admin");
            // If the steps was copied to this job, reload steps.
            if (Job.JobId == job.JobId)
            {
                using var context = DbFactory.CreateDbContext();
                var createdStep = await context.Steps.FirstOrDefaultAsync(step_ => step_.StepId == createdStepId);
                Steps.Add(createdStep);
                Steps.Sort();
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error copying step: " + ex.Message);
        }
    }

    private async Task RemoveTag(Step step, Tag tag)
    {
        try
        {
            await Utility.RemoveTagAsync(configuration, step, tag);
            step.Tags.Remove(tag);
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error removing tag: " + ex.Message);
        }
    }

    public async Task SubmitTag(Step step)
    {
        try
        {
            if (!step.Tags.Any(t => t.TagName == NewTag.TagName))
            {
                step.Tags.Add(NewTag);
                await Utility.AddTagAsync(configuration, step, NewTag);
            }
            NewTag = new();
            TagInputFocusStepId = step.StepId;
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error adding tag: " + ex.Message);
        }
    }

    private void OnStepSubmit(Step step)
    {
        var existingStep = Steps.FirstOrDefault(s => s.StepId == step.StepId);
        if (existingStep != null)
        {
            Steps.Remove(existingStep);
        }
        Steps.Add(step);
        Steps.Sort();
    }

    private void ShowStepDetailsModal(Step step)
    {
        DetailsModalStep = step;
        StepDetailsModal.Modal.Show();
    }

    private void ShowStepHistoryModal(Step step)
    {
        // Do not unnecessarily set the component parameter and start its data load.
        if (step != HistoryModalStep)
            HistoryModalStep = step;

        StepHistoryModal.Show();
    }

    private void SelectStepAndDependencies(Step step)
    {
        RecurseDependencies(step, new());
    }

    private void RecurseDependencies(Step step, List<Step> processedSteps)
    {
        // Add the step to the list of steps to execute if it is not there yet.
        if (!StepsToExecute.Any(s => s.StepId == step.StepId))
        {
            StepsToExecute.Add(step);
        }

        // Get dependency ids.
        List<Guid> dependencyStepIds = step.Dependencies.Select(d => d.DependantOnStepId).ToList();

        // If there are no dependencies, return true.
        if (dependencyStepIds.Count == 0)
        {
            return;
        }
        // This step was already handled.
        else if (processedSteps.Any(s => s.StepId == step.StepId))
        {
            return;
        }

        processedSteps.Add(step);

        // Get dependency steps based on ids.
        List<Step> dependencySteps = Steps.Where(s => dependencyStepIds.Any(id => s.StepId == id)).ToList();

        // Loop through the dependencies and handle them recursively.
        foreach (var depencyStep in dependencySteps)
        {
            RecurseDependencies(depencyStep, processedSteps);
        }

    }

    private async Task Execute()
    {
        if (StepsToExecute.Count == 0)
        {
            return;
        }

        ExecuteButtonDisabled = true;
        string user = HttpContextAccessor.HttpContext.User?.Identity?.Name;
        try
        {
            var stepIds = StepsToExecute.Select(step => step.StepId.ToString()).ToList();
            SelectedJobExecutionId = await Utility.StartExecutionAsync(configuration, Job, user, stepIds);
            ExecuteSuccess = true;
        }
        catch (Exception ex)
        {
            ExecuteSuccess = false;
            ExecuteErrorMessage = ex.Message;
        }

        StepsToExecute.Clear();
        ExecuteModal.Hide();
        ExecuteAlertOpen = true;
        ExecuteButtonDisabled = false;
    }

    private void OpenJobExecutionModal()
    {
        JobExecutionModal.Show();
    }

}
