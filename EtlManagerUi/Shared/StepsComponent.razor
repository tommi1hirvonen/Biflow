@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IWebHostEnvironment WebHostEnvironment
@inject IConfiguration configuration
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor


<AuthorizeView Roles="Admin, Editor">
    <BSButton Color="Color.Success" @onclick="() => ShowEditModal(null)">Add step</BSButton>
</AuthorizeView>
<AuthorizeView Roles="Admin, Editor, Operator">
    <BSButton Class="ml-3" @onclick="() => ExecuteModal.Show()" IsDisabled="@ExecuteButtonDisabled">
        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/play.svg")))
        Execute
    </BSButton>
    <div id="spinner_starting" class="spinner-border text-primary align-middle ml-3" hidden=@(!ExecuteButtonDisabled) role="status">
        <span class="sr-only">Loading...</span>
    </div>
</AuthorizeView>

<BSAlert Class="mt-3" Color="@(ExecuteSuccess ? Color.Success : Color.Danger)" IsOpen="@ExecuteAlertOpen" OnDismiss="() => ExecuteAlertOpen = false" IsDismissible="true">
    @if (ExecuteSuccess)
    {
        <text>Execution started successfully - <a class="alert-link" href="javascript:void(0)" @onclick="OpenJobExecutionModal">monitor execution</a></text>
    }
    else
    {
        <text>Error starting execution: @ExecuteErrorMessage</text>
    }
</BSAlert>

<div class="row col-9 col-md-6 col-lg-5 mt-4 mb-4">
    <div class="input-group">
        <label class="sr-only">Search</label>
        <div class="input-group-prepend">
            <div class="input-group-text rounded-left">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
            </div>
        </div>
        <input type="text" class="form-control" @bind-value="StepsFilterText" @bind-value:event="oninput" placeholder="Search" />
    </div>
</div>

<div class="card shadow-sm pt-2 mt-4">
    <table id="steps_table" class="table table-sm table-hover">
        <thead>
            <tr>
                <th>
                    Step name
                </th>
                <th></th>
                <th>
                    Execution phase
                </th>
                <th>
                    Step type
                </th>
                <th>
                    Enabled
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Steps_ == null)
            {
                <tr><td colspan="5">Loading...</td></tr>
            }
            else if (Steps_.Count == 0)
            {
                <tr><td colspan="5">No steps</td></tr>
            }
            else
            {
                @foreach (var item in Steps_.Where(step => step.StepName.ContainsIgnoreCase(StepsFilterText)))
                {
                    <tr>
                        <td class="align-middle">
                            @item.StepName
                        </td>
                        <td align="left">
                            <div class="btn-group btn-row">
                                <BSButton Size="Size.Small" Color="Color.Light" @onclick="() => ShowStepDetailsModal(item)">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
                                </BSButton>

                                <AuthorizeView Roles="Admin, Editor">
                                    <BSButton Size="Size.Small" Color="Color.Light" @onclick="() => ShowEditModal(item)">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-2.svg")))
                                    </BSButton>

                                    <BSDropdown IsGroup="true">
                                        <BSDropdownToggle Size="Size.Small" Color="Color.Light">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/copy.svg")))
                                        </BSDropdownToggle>
                                        <BSDropdownMenu>
                                            <BSDropdownHeader>Copy to</BSDropdownHeader>
                                            <BSDropdownItem @onclick="() => CopyStep(item, Job)">here</BSDropdownItem>
                                            <BSDropdownItem IsDivider="true"></BSDropdownItem>
                                            @foreach (var job in Jobs.Where(job => job.JobId != Job.JobId))
                                            {
                                                <BSDropdownItem @onclick="() => CopyStep(item, job)">@job.JobName</BSDropdownItem>
                                            }
                                        </BSDropdownMenu>
                                    </BSDropdown>

                                    <BSDropdown IsGroup="true">
                                        <BSDropdownToggle Size="Size.Small" Color="Color.Light">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/trash-2.svg")))
                                        </BSDropdownToggle>
                                        <BSDropdownMenu>
                                            <BSDropdownHeader>Delete?</BSDropdownHeader>
                                            <BSDropdownItem @onclick="() => DeleteStep(item)">Confirm</BSDropdownItem>
                                        </BSDropdownMenu>
                                    </BSDropdown>
                                </AuthorizeView>
                            </div>
                        </td>
                        <td class="align-middle">
                            @item.ExecutionPhase
                        </td>
                        <td class="align-middle" title="@item.StepType" aria-label="@item.StepType">
                            <StepTypeIconComponent StepType="@item.StepType" />
                        </td>
                        <td class="align-middle">
                            <AuthorizeView Roles="Admin, Editor">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)" @onchange="args => ToggleEnabled(args, item)">
                                    <label class="custom-control-label" style="cursor: pointer;" for="enabled_@item.StepId" aria-label="enabled"></label>
                                </div>
                            </AuthorizeView>
                            <AuthorizeView Roles="Operator, Viewer">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" disabled id="enabled_@item.StepId" checked="@(item.IsEnabled ? "checked" : null)">
                                    <label class="custom-control-label" for="enabled_@item.StepId" aria-label="enabled"></label>
                                </div>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


<AuthorizeView Roles="Admin, Editor">
    <StepEditModal @ref="StepEditModal" JobId="Job.JobId" StepId="EditModalStepId" Jobs="Jobs" Steps="Steps_" OnStepSubmit="OnStepSubmit" />
</AuthorizeView>


<StepDetailsModal @ref="StepDetailsModal" Step="DetailsModalStep" />

@if (Steps_ != null)
{
    // Execute modal
    <AuthorizeView Roles="Admin, Editor, Operator">
        <BSModal @ref="ExecuteModal" Size="Size.Large" IsScrollable="true">
            <BSModalHeader OnClick="() => ExecuteModal.Hide()">Execute steps</BSModalHeader>
            <BSModalBody>
                <div class="row">
                    <div class="input-group input-group-sm mx-5 mb-2">
                        <label class="sr-only">Search</label>
                        <div class="input-group-prepend">
                            <div class="input-group-text rounded-left">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
                            </div>
                        </div>
                        <input type="text" class="form-control" @bind-value="ExecuteFilterText" @bind-value:event="oninput" placeholder="Search" autocomplete="off" />
                    </div>
                    <table class="table table-sm mx-5">
                        <thead>
                            <tr>
                                <th class="align-top">
                                    <div class="custom-control custom-control-inline custom-checkbox">
                                        <input type="checkbox" class="custom-control-input" id="execute_check_all"
                                               checked=@(Steps_.Count == StepsToExecute.Count)
                                               @onchange="eventArgs => ToggleStepsExecuteAll(eventArgs.Value)">
                                        <label class="custom-control-label" for="execute_check_all">Step name</label>
                                    </div>
                                </th>
                                <th>
                                    Execution phase
                                </th>
                                <th>
                                    Step type
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var step in Steps_.Where(step => step.StepName.ContainsIgnoreCase(ExecuteFilterText)))
                            {
                                <tr>
                                    <td>
                                        <div class="custom-control custom-control-inline custom-checkbox">
                                            <input type="checkbox" class="custom-control-input" name="execute_checkbox" id="execute_@step.StepId"
                                                   checked=@(StepsToExecute.Contains(step.StepId))
                                                   @onchange="eventArgs => ToggleStepExecute(step, eventArgs.Value)">
                                            <label class="custom-control-label" for="execute_@step.StepId">@step.StepName</label>
                                        </div>
                                    </td>
                                    <td>
                                        @step.ExecutionPhase
                                    </td>
                                    <td>
                                        <StepTypeIconComponent StepType="@step.StepType" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </BSModalBody>
            <BSModalFooter>
                <BSButton Color="Color.Primary" @onclick="Execute">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/play.svg")))
                    Execute
                </BSButton>
                <BSButton Color="Color.Secondary" @onclick="() => ExecuteModal.Hide()">Cancel</BSButton>
            </BSModalFooter>
        </BSModal>
    </AuthorizeView>
}

<JobExecutionDetailsModal @ref="JobExecutionModal" ExecutionId="SelectedJobExecutionId" />

@code {
    [Parameter]
    public Job Job { get; set; }

    [Parameter]
    public IList<Job> Jobs { get; set; }

    private List<Step> Steps_ { get; set; }

    private StepEditModal StepEditModal { get; set; }
    private Guid EditModalStepId { get; set; }

    private StepDetailsModal StepDetailsModal { get; set; }
    private Step DetailsModalStep { get; set; }

    private BSModal ExecuteModal { get; set; }
    private List<Guid> StepsToExecute { get; set; } = new();
    private bool ExecuteButtonDisabled { get; set; } = false;

    private bool ExecuteSuccess { get; set; } = false;
    private bool ExecuteAlertOpen { get; set; } = false;
    private string ExecuteErrorMessage { get; set; } = string.Empty;

    private string StepsFilterText { get; set; } = string.Empty;
    private string ExecuteFilterText { get; set; } = string.Empty;

    private JobExecutionDetailsModal JobExecutionModal { get; set; }
    private Guid SelectedJobExecutionId { get; set; }

    private async Task LoadData()
    {
        using var context = DbFactory.CreateDbContext();
        Steps_ = await context.Steps
            .Where(step => step.JobId == Job.JobId)
            .OrderBy(step => step.ExecutionPhase)
            .ThenBy(step => step.StepName)
            .ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private void ShowEditModal(Step step)
    {
        EditModalStepId = step?.StepId ?? Guid.Empty;
        StepEditModal.Show();
    }

    private async Task ToggleEnabled(ChangeEventArgs args, Step step)
    {
        bool value = (bool)args.Value;
        try
        {
            await Utility.ToggleStepEnabled(configuration, step, value);
            step.IsEnabled = !step.IsEnabled;
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error enabling/disabling step");
        }
    }

    private async Task DeleteStep(Step step)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Steps.Remove(step);
            await context.SaveChangesAsync();
            Steps_.Remove(step);
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error deleting step");
        }
    }

    private async Task CopyStep(Step step, Job job)
    {
        try
        {
            await Utility.StepCopy(configuration, step.StepId, job.JobId, "admin");
            // If the steps was copied to this job, reload steps.
            if (Job.JobId == job.JobId)
            {
                await LoadData();
            }
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error copying step");
        }
    }

    private void OnStepSubmit(Step step)
    {
        var existingStep = Steps_.FirstOrDefault(s => s.StepId == step.StepId);
        if (existingStep != null)
        {
            Steps_.Remove(existingStep);
        }
        Steps_.Add(step);
        Steps_ = Steps_.OrderBy(step => step.ExecutionPhase).ThenBy(step => step.StepName).ToList();
    }

    private void ShowStepDetailsModal(Step step)
    {
        DetailsModalStep = step;
        StepDetailsModal.Modal.Show();
    }

    private void ToggleStepExecute(Step step, object checkedValue)
    {
        var execute = (bool)checkedValue;
        if (!execute && StepsToExecute.Contains(step.StepId))
        {
            StepsToExecute.Remove(step.StepId);
        }
        else if (execute && !StepsToExecute.Contains(step.StepId))
        {
            StepsToExecute.Add(step.StepId);
        }
    }

    private void ToggleStepsExecuteAll(object checkedValue)
    {
        var execute = (bool)checkedValue;
        StepsToExecute.Clear();
        if (execute)
        {
            foreach (var step in Steps_)
            {
                StepsToExecute.Add(step.StepId);
            }
        }
    }

    private async Task Execute()
    {
        // Filter the list based on user input (StepsFilterText).
        var stepsFiltered = Steps_.Where(step => step.StepName.ContainsIgnoreCase(ExecuteFilterText)).ToList();
        var stepsToExecuteFiltered = StepsToExecute.Where(id => stepsFiltered.Any(step => step.StepId == id)).ToList();

        if (stepsToExecuteFiltered.Count == 0)
        {
            return;
        }

        ExecuteModal.Hide();

        ExecuteButtonDisabled = true;
        string user = HttpContextAccessor.HttpContext.User?.Identity?.Name;
        try
        {
            SelectedJobExecutionId = await Utility.StartExecution(configuration, Job, user, stepsToExecuteFiltered.Select(id => id.ToString()).ToList());
            ExecuteSuccess = true;
        }
        catch (Exception ex)
        {
            ExecuteSuccess = false;
            ExecuteErrorMessage = ex.Message;
        }

        StepsToExecute.Clear();
        ExecuteAlertOpen = true;
        ExecuteButtonDisabled = false;
    }

    private void OpenJobExecutionModal()
    {
        JobExecutionModal.Show();
    }

}
