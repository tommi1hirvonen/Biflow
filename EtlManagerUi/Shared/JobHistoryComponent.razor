@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject NavigationManager NavigationManager

@if (Executions == null)
{
    <p class="mt-2"><em>Loading...</em></p>
}
else
{
    <div class="card shadow-sm pt-2">
        <table class="table table-sm table-hover">
            <thead>
                <tr>
                    <th>
                        Created
                    </th>
                    <th>
                        Started
                    </th>
                    <th>
                        Ended
                    </th>
                    <th>
                        Duration
                    </th>
                    <th>
                        Number of steps
                    </th>
                    <th>
                        Success percent
                    </th>
                    <th>
                        Status
                    </th>
                </tr>
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th><text>@AverageDurationInSeconds.SecondsToReadableFormat()</text></th>
                    <th></th>
                    <th style="text-align: right;">@AverageSuccessRate</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Executions)
                {
                    <tr style="cursor: pointer;" @onclick="@(() => NavigationManager.NavigateTo("/"))">
                        <td>
                            @item.CreatedDateTime
                        </td>
                        <td>
                            @item.StartDateTime
                        </td>
                        <td>
                            @item.EndDateTime
                        </td>
                        <td>
                            <text>@item.GetDurationInReadableFormat()</text>
                        </td>
                        <td style="text-align: right;">
                            @item.NumberOfSteps
                        </td>
                        <td style="text-align: right;">
                            @item.SuccessPercent
                        </td>
                        <td>
                            <JobExecutionStatusBadgeComponent ExecutionStatus="@item.ExecutionStatus" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="px-3">
            <hr />
            <p class="text-secondary">Showing @MaxExecutions latest executions</p>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    public IList<JobExecution> Executions { get; set; }

    public int MaxExecutions { get; set; } = 50;

    [DisplayFormat(DataFormatString = "{0:N0}%")]
    public decimal AverageSuccessRate { get; set; }
    public int AverageDurationInSeconds { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Executions = await context.JobExecutions
                .Where(execution => execution.JobId == Id)
                .OrderByDescending(execution => execution.CreatedDateTime)
                .ThenByDescending(Execution => Execution.StartDateTime)
                .Take(MaxExecutions)
                .ToListAsync();

        if (Executions.Count > 0)
        {
            AverageSuccessRate = (decimal)Executions.Where(e => e.ExecutionStatus == "COMPLETED").Count() / Executions.Count() * 100;
        }
        else
        {
            AverageSuccessRate = 0;
        }

        AverageDurationInSeconds = (int)(Executions.Average(e => e.ExecutionInSeconds) ?? 0);
    }

}
