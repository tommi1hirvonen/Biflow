@implements IDisposable 

@inject IJSRuntime JS

@*CSS definitions for the dependency graph nodes and paths created in site.js through JSInterop.*@
<style>
    html, body {
        height: 100%;
    }

    .dependency-graph {
        width: 100%;
        height: 80%;
        resize: both;
        overflow: hidden;
    }

        .dependency-graph svg {
            width: 100%;
            height: 100%;
            cursor: move;
        }

        .dependency-graph .node {
            cursor: pointer;
        }

            .dependency-graph .node rect {
                stroke-width: 2px;
                stroke: #666;
                fill: #fff;
            }

        .dependency-graph .name {
            margin-top: 4px;
        }

        .dependency-graph .edgePath path {
            stroke: #888;
            stroke-width: 2px;
            fill: #888;
        }

        .dependency-graph .edgePath.non-strict path {
            stroke-dasharray: 5,5;
        }

        .dependency-graph .edgePath.strict path {
        }
</style>

<div class="container-fluid h-100 flex-column p-0">
    <div class="row flex-fill dependency-graph border" id="div_dependency_graph">
        <svg id="svg_dependency_graph" viewBox="0 0 2000 1000">
            <g id="g_dependency_graph" />
        </svg>
    </div>
</div>

    <AuthorizeView Roles="Admin, Editor">
        <StepEditModal @ref="StepEditModal" Job="Job" StepId="EditModalStepId" Jobs="Jobs" Steps="Steps" OnStepSubmit="OnStepSubmit" />
    </AuthorizeView>

@code {
    [Parameter]
    public List<Job> Jobs { get; set; }

    [Parameter]
    public Job Job { get; set; }

    private Job PrevJob { get; set; }

    [Parameter]
    public List<Step> Steps { get; set; }

    private DotNetObjectReference<MethodInvokeHelper> ObjectReference;

    private StepEditModal StepEditModal { get; set; }
    private Guid EditModalStepId { get; set; }

    private bool GrapShouldRender { get; set; }

    protected override void OnInitialized()
    {
        // Create a DotNetObjectReference with a new helper method tied to an instance of this component.
        // This will allow JS to call back to a specific instance of this component.
        // This needs to be done, because multiple users might be using this component concurrently.
        var helper = new MethodInvokeHelper(OpenStepEditModal);
        ObjectReference = DotNetObjectReference.Create(helper);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Job != PrevJob)
        {
            PrevJob = Job;
            GrapShouldRender = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (GrapShouldRender)
            await LoadGraph();
    }

    private async Task LoadGraph()
    {
        GrapShouldRender = false;
        // Create a list of steps and dependencies and send them through JSInterop as JSON objects.
        var steps = Steps.Select(step => new { Id = step.StepId, Name = step.StepName });
        var stepsJson = JsonSerializer.Serialize(steps);
        var dependencies = Steps
            .SelectMany(step => step.Dependencies)
            .Select(dep => new { StepId = dep.StepId, DependantOnStepId = dep.DependantOnStepId, StrictDependency = dep.StrictDependency });
        var dependenciesJson = JsonSerializer.Serialize(dependencies);

        // Also pass the reference to this component instance using ObjectReference.
        await JS.InvokeVoidAsync("drawDependencyGraph", stepsJson, dependenciesJson, ObjectReference);
    }

    // Step edit modals can be opened from JS using JSInterop by calling this method. See site.js => drawDependencyGraph().
    private void OpenStepEditModal(string id)
    {
        EditModalStepId = Guid.Parse(id);
        StateHasChanged();
        StepEditModal?.Show(showDependencies: true);
    }

    private async Task OnStepSubmit(Step step)
    {
        var existingStep = Steps.FirstOrDefault(s => s.StepId == step.StepId);
        if (existingStep != null)
        {
            Steps.Remove(existingStep);
        }
        Steps.Add(step);
        Steps.Sort();
        GrapShouldRender = true;
        await LoadGraph();
        StateHasChanged();
    }

    public void Dispose()
    {
        ObjectReference?.Dispose();
    }

}
