@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS

<style>
    html, body {
        height: 100%;
    }

    .dependency-graph {
        width: 100%;
        height: 80%;
        resize: both;
        overflow: hidden;
    }

        .dependency-graph svg {
            width: 100%;
            height: 100%;
            cursor: move;
        }

        .dependency-graph .node {
            cursor: pointer;
        }

            .dependency-graph .node rect {
                stroke-width: 2px;
                stroke: #666;
                fill: #fff;
            }

        .dependency-graph .name {
            margin-top: 4px;
        }

        .dependency-graph .edgePath path {
            stroke: #888;
            stroke-width: 2px;
            fill: #888;
        }

        .dependency-graph .edgePath.non-strict path {
            stroke-dasharray: 5,5;
        }

        .dependency-graph .edgePath.strict path {
        }
</style>

<div class="container-fluid h-100 flex-column p-0">
    <div class="row flex-fill dependency-graph border" id="div_dependency_graph">
        <svg id="dependency_graph" viewBox="0 0 2000 1000">
            <g />
        </svg>
    </div>
</div>

@if (Jobs != null && Steps != null)
{
    <AuthorizeView Roles="Admin, Editor">
        <StepEditModal @ref="StepEditModal" JobId="Id" StepId="EditModalStepId" Jobs="Jobs" Steps="Steps" OnStepSubmit="OnStepSubmit" />
    </AuthorizeView>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    public Guid PreviousId { get; set; }

    private List<Job> Jobs { get; set; }
    private List<Step> Steps { get; set; }

    private MethodInvokeHelper helper;

    private StepEditModal StepEditModal { get; set; }
    private Guid EditModalStepId { get; set; }

    private bool GraphShouldRender { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        helper = new MethodInvokeHelper(OpenStepEditModal);
        var context = DbFactory.CreateDbContext();
        Jobs = await context.Jobs.ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == Guid.Empty)
        {
            return;
        }

        using var context = DbFactory.CreateDbContext();
        Steps = await context.Steps
            .Where(step => step.JobId == Id)
            .Include(step => step.Dependencies)
            .AsNoTracking()
            .ToListAsync();

        GraphShouldRender = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (GraphShouldRender) await LoadGraph();
    }

    private async Task LoadGraph()
    {
        GraphShouldRender = false;

        var workers = Steps.Select(step => new { Id = step.StepId, Name = step.StepName });
        var workersJson = JsonSerializer.Serialize(workers);
        var dependencies = Steps
            .SelectMany(step => step.Dependencies)
            .Select(dep => new { StepId = dep.StepId, DependantOnStepId = dep.DependantOnStepId, StrictDependency = dep.StrictDependency });
        var dependenciesJson = JsonSerializer.Serialize(dependencies);

        var dotNetReference = DotNetObjectReference.Create(helper);
        await JS.InvokeVoidAsync("drawDependencyGraph", workersJson, dependenciesJson, dotNetReference);
    }

    private void OpenStepEditModal(string id)
    {
        EditModalStepId = Guid.Parse(id);
        StateHasChanged();
        StepEditModal.Show(showDependencies: true);
    }

    private void OnStepSubmit(Step step)
    {
        var existingStep = Steps.FirstOrDefault(s => s.StepId == step.StepId);
        if (existingStep != null)
        {
            Steps.Remove(existingStep);
        }
        Steps.Add(step);
        GraphShouldRender = true;
        StateHasChanged();
    }

}
