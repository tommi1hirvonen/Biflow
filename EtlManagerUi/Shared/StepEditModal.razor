@implements IDisposable 

@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS 

<BSModal @ref="Modal" Size="Size.Large" IsScrollable="true" IsOpenChanged="IsModalOpenChanged">
    @if (Step != null && Jobs != null && Connections != null && DataFactories != null && Steps != null)
    {
        <BSModalHeader OnClick="() => Modal.Hide()">@(Step.StepId == Guid.Empty ? "New step" : "Edit " + Step.StepName)</BSModalHeader>
        <BSModalBody>
            <BSForm id="step_edit_form" Model="Step" OnValidSubmit="SubmitStep">
                <div class="row">
                    <div class="col mx-3">
                        <BSButtonGroup Size="Size.Small" Class="mb-3">
                            <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(!ShowDependencies ? "active" : null)"
                                      @onclick="() => ShowDependencies = false">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/settings.svg")))
                                Settings
                            </BSButton>
                            <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(ShowDependencies ? "active" : null)"
                                      @onclick="() => ShowDependencies = true">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/diagram-3-fill.svg")))
                                Dependencies
                            </BSButton>
                        </BSButtonGroup>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        @if (!ShowDependencies)
                        {
                            <BSFormGroup>
                                <BSLabel>Step name</BSLabel>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/edit-3.svg")))
                                        </div>
                                    </div>
                                    <BSInput InputType="InputType.Text" @bind-Value="Step.StepName"></BSInput>
                                </div>
                            </BSFormGroup>
                            <BSFormGroup>
                                <BSLabel>Description</BSLabel>
                                <div class="input-group input-group-sm">
                                    <div class="input-group-prepend">
                                        <div class="input-group-text">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/book-open.svg")))
                                        </div>
                                    </div>
                                    <BSInput InputType="InputType.TextArea" @bind-Value="Step.StepDescription" rows="2"></BSInput>
                                </div>
                            </BSFormGroup>
                            <BSFormRow>
                                <BSFormGroup Class="col">
                                    <BSLabel>Execution phase</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/layers.svg")))
                                            </div>
                                        </div>
                                        <BSInput InputType="InputType.Number" @bind-Value="Step.ExecutionPhase"></BSInput>
                                    </div>
                                </BSFormGroup>
                                <BSFormGroup Class="col">
                                    <BSLabel>Step type</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tool.svg")))
                                            </div>
                                        </div>
                                        <BSInput InputType="InputType.Select" @bind-Value="Step.StepType" @oninput="ResetStepError">
                                            <option>SQL</option>
                                            <option>SSIS</option>
                                            <option>PIPELINE</option>
                                            <option>JOB</option>
                                        </BSInput>
                                    </div>
                                </BSFormGroup>
                                <BSFormGroup Class="col">
                                    <BSLabel>Retry attempts</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/repeat.svg")))
                                            </div>
                                        </div>
                                        <BSInput InputType="InputType.Number" @bind-Value="Step.RetryAttempts"></BSInput>
                                    </div>
                                </BSFormGroup>
                                <BSFormGroup Class="col">
                                    <BSLabel>Retry interval (min)</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/clock.svg")))
                                            </div>
                                        </div>
                                        <BSInput InputType="InputType.Number" @bind-Value="Step.RetryIntervalMinutes"></BSInput>
                                    </div>
                                </BSFormGroup>
                            </BSFormRow>
                            @if (Step.StepType == "SQL" || Step.StepType == "SSIS")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col-lg-6">
                                        <BSLabel>Connection</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/database.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Select" @bind-Value="Step.ConnectionId">
                                                @foreach (var connection in Connections)
                                                            {
                                                    <option value="@connection.ConnectionId">@connection.ConnectionName</option>
                                                            }
                                            </BSInput>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                            }
                            @if (Step.StepType == "SQL")
                            {
                                <BSFormGroup>
                                    <BSLabel>SQL statement</BSLabel>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/code.svg")))
                                            </div>
                                        </div>
                                        <BSInput InputType="InputType.TextArea" @bind-Value="Step.SqlStatement" style="font-family: monospace;" rows="3" @oninput="ResetStepError"></BSInput>
                                    </div>
                                </BSFormGroup>
                            }
                            @if (Step.StepType == "SSIS")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Folder name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/folder.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Text" @bind-Value="Step.PackageFolderName" @onchange="ResetStepError"></BSInput>
                                        </div>
                                    </BSFormGroup>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Project name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/briefcase.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Text" @bind-Value="Step.PackageProjectName" @oninput="ResetStepError"></BSInput>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Package name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/package.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Text" @bind-Value="Step.PackageName" @oninput="ResetStepError"></BSInput>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <div class="custom-control custom-checkbox custom-control-inline">
                                        <input type="checkbox" class="custom-control-input" id="new_step_32bit_mode" @bind-value="Step.ExecuteIn32BitMode">
                                        <label class="custom-control-label" for="new_step_32bit_mode">Execute in 32 bit mode</label>
                                    </div>
                                </BSFormRow>
                            }
                            @if (Step.StepType == "PIPELINE")
                            {
                                <BSFormRow>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Data Factory</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/cpu.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Select" @bind-Value="Step.DataFactoryId">
                                                @foreach (var dataFactory in DataFactories)
                                                            {
                                                    <option value="@dataFactory.DataFactoryId">@dataFactory.DataFactoryName</option>
                                                            }
                                            </BSInput>
                                        </div>
                                    </BSFormGroup>
                                    <BSFormGroup Class="col">
                                        <BSLabel>Pipeline name</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/git-commit.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Text" @bind-Value="Step.PipelineName" @oninput="ResetStepError"></BSInput>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                            }
                            @if (Step.StepType == "JOB")
                            {
                                <BSFormRow>
                                    <BSFormGroup>
                                        <BSLabel>Job</BSLabel>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <div class="input-group-text">
                                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/loader.svg")))
                                                </div>
                                            </div>
                                            <BSInput InputType="InputType.Select" @bind-Value="Step.JobToExecuteId">
                                                @foreach (var job in Jobs.Where(job => job.JobId != Step.JobId))
                                                            {
                                                    <option value="@job.JobId">@job.JobName</option>
                                                            }
                                            </BSInput>
                                        </div>
                                    </BSFormGroup>
                                </BSFormRow>
                                <BSFormRow>
                                    <div class="custom-control custom-checkbox custom-control-inline">
                                        <input type="checkbox" class="custom-control-input" id="new_step_job_synchronized" @bind-value="Step.JobExecuteSynchronized">
                                        <label class="custom-control-label" for="new_step_job_synchronized">Synchronized</label>
                                    </div>
                                </BSFormRow>
                            }
                            <p class="text-danger">@StepError</p>

                            @if (Step.StepType == "SSIS")
                            {
                                <p />
                                <h5>Parameters</h5>
                                <table id="parameters_table" class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Value</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var param in Step.Parameters)
                                        {
                                            <tr>
                                                <td>
                                                    <BSBasicInput Size="Size.Small" @bind-Value="param.ParameterName"></BSBasicInput>
                                                </td>
                                                <td>
                                                    <BSBasicInput Size="Size.Small" @bind-Value="param.ParameterValue"></BSBasicInput>
                                                </td>
                                                <td>
                                                    <BSButton Color="Color.Light" Size="Size.Small" @onclick="() => Step.Parameters.Remove(param)">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/delete.svg")))
                                                    </BSButton>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <BSButton Color="Color.Light" Size="Size.Small" @onclick="() => Step.Parameters.Add(new Parameter())">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/plus.svg")))
                                </BSButton>
                            }
                        }
                        else
                        {
                            <div class="row mt-2 align-items-center">
                                <div class="input-group input-group-sm col">
                                    <label class="sr-only">Search</label>
                                    <div class="input-group-prepend">
                                        <div class="input-group-text rounded-left">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
                                        </div>
                                    </div>
                                    <input type="text" class="form-control" @bind-value="DependenciesFilterText" @bind-value:event="oninput" placeholder="Search" autocomplete="off" />
                                </div>
                                <div class="custom-control custom-control-inline custom-checkbox col ml-3">
                                    <input type="checkbox" class="custom-control-input" id="only_active"
                                           checked=@ShowOnlyActiveDependencies
                                           @onchange="() => ShowOnlyActiveDependencies = !ShowOnlyActiveDependencies">
                                    <label class="custom-control-label" for="only_active">Show only active</label>
                                </div>
                            </div>

                            <table class="table table-sm table-striped mt-3">
                                <thead>
                                    <tr>
                                        <th>Step name</th>
                                        <th>Dependent on</th>
                                        <th>Strict dependency</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var step in Steps
                                      .Where(step => step.StepId != StepId) // Exclude current step => step cannot depend on itself.
                                      .Where(step => step.StepName.ContainsIgnoreCase(DependenciesFilterText)) // Filter based on search filter.
                                      .Where(step => Step.Dependencies.Any(d => d.DependantOnStepId == step.StepId) || !ShowOnlyActiveDependencies) // Only show active dependencies if checked.
                                      .OrderBy(step => step.StepName))
                                    {
                                        <tr>
                                            <td class="align-middle">@step.StepName</td>
                                            <td class="align-middle">
                                                <div class="custom-control custom-control-inline custom-checkbox">
                                                    <input type="checkbox" class="custom-control-input" id="dependency_@step.StepId"
                                                           checked=@(Step.Dependencies.Any(dep => dep.DependantOnStepId == step.StepId))
                                                           @onchange="eventArgs => ToggleDependency(step, eventArgs.Value)">
                                                    <label class="custom-control-label" for="dependency_@step.StepId"></label>
                                                </div>
                                            </td>
                                            <td class="align-middle">
                                                @if (Step.Dependencies.Any(dep => dep.DependantOnStepId == step.StepId))
                                                {
                                                    <div class="custom-control custom-control-inline custom-checkbox">
                                                        <input type="checkbox" class="custom-control-input" id="strict_@step.StepId"
                                                               checked=@(Step.Dependencies.Where(dep => dep.DependantOnStepId == step.StepId).Any(dep => dep.StrictDependency))
                                                               @onchange="eventArgs => ToggleStrictDependency(step, eventArgs.Value)">
                                                        <label class="custom-control-label" for="strict_@step.StepId"></label>
                                                    </div>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </BSForm>
        </BSModalBody>
        <BSModalFooter>
            <BSButton ButtonType="ButtonType.Submit" form="step_edit_form" Color="Color.Success">@(Step.StepId == Guid.Empty ? "Create" : "Save")</BSButton>
            <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Cancel</BSButton>
        </BSModalFooter>
    }
</BSModal>



@code {
    // Use the same context to read and write to enable change tracking for all step child properties (e.g. parameters and dependencies).
    private EtlManagerContext Context { get; set; }

    [Parameter]
    public Guid StepId { get; set; } // empty Guid => new step

    [Parameter]
    public Guid JobId { get; set; }

    private Step Step { get; set; }

    [Parameter]
    public IList<Job> Jobs { get; set; }

    [Parameter]
    public IList<Step> Steps { get; set; }

    private IList<Connection> Connections { get; set; }

    private IList<DataFactory> DataFactories { get; set; }

    [Parameter]
    public EventCallback<Step> OnStepSubmit { get; set; }

    private BSModal Modal { get; set; }

    private string StepError { get; set; } = string.Empty;

    private bool ShowDependencies { get; set; } = false;
    private string DependenciesFilterText { get; set; } = string.Empty;
    private bool ShowOnlyActiveDependencies { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        Connections = await Context.Connections.AsNoTracking().ToListAsync();
        DataFactories = await Context.DataFactories.AsNoTracking().ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (StepId != Guid.Empty)
        {
            Step = await Context.Steps
                .Include(step => step.Parameters)
                .Include(step => step.Dependencies)
                .FirstOrDefaultAsync(step => step.StepId == StepId);
        }
        else
        {
            Step = new()
            {
                JobId = JobId,
                RetryAttempts = 0,
                RetryIntervalMinutes = 0,
                StepType = "SQL",
                IsEnabled = true,
                ConnectionId = Connections?.FirstOrDefault()?.ConnectionId,
                DataFactoryId = DataFactories?.FirstOrDefault()?.DataFactoryId,
                Parameters = new List<Parameter>(),
                Dependencies = new List<Dependency>()
            };
        }
        StateHasChanged();
    }

    private void ResetStepError()
    {
        StepError = string.Empty;
    }

    private void IsModalOpenChanged(bool isOpen)
    {
        // If the modal is being simply closed, reset any changes made to entities loaded from the database.
        // If the user saves their changes, SubmitStep() is called first and changes are saved.
        if (!isOpen)
        {
            Context.ChangeTracker.Entries().Where(e => e.Entity != null).ToList().ForEach(e => e.State = EntityState.Detached);
        }
    }

    private async Task SubmitStep()
    {
        StepError = string.Empty;

        if (Step.StepType == "SQL" && (string.IsNullOrEmpty(Step.SqlStatement) || Step.ConnectionId == null))
        {
            StepError = "SQL statement and connection cannot be empty";
            return;
        }
        else if (Step.StepType == "SSIS" && (string.IsNullOrEmpty(Step.PackageFolderName)
            || string.IsNullOrEmpty(Step.PackageProjectName) || string.IsNullOrEmpty(Step.PackageName)
            || Step.ConnectionId == null))
        {
            StepError = "Connection, folder, project and package names cannot be empty";
            return;
        }
        else if (Step.StepType == "PIPELINE" && (string.IsNullOrEmpty(Step.PipelineName) || Step.DataFactoryId == null))
        {
            StepError = "Pipeline name and Data Factory cannot be empty";
            return;
        }
        else if (Step.StepType == "JOB" && Step.JobToExecuteId == null)
        {
            StepError = "Job cannot be empty";
            return;
        }

        if (Step.StepType == "SSIS" && !ParametersCheck())
        {
            return;
        }

        try
        {
            if (Step.StepType != "SSIS")
            {
                Step.Parameters.Clear();
            }

            var existingStep = Context.Steps.AsNoTracking().FirstOrDefault(step_ => step_.StepId == Step.StepId);
            if (existingStep != null)
            {
                Context.Attach(Step).State = EntityState.Modified;
                Context.SaveChanges();
            }
            else
            {
                Context.Steps.Add(Step);
                Context.SaveChanges();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Error adding/editing step:" + ex.Message);
        }

        await OnStepSubmit.InvokeAsync(Step);
        Modal.Hide();
    }

    private bool ParametersCheck()
    {
        var parameters = Step.Parameters.OrderBy(param => param.ParameterName).ToList();

        foreach (var param in parameters)
        {
            if (string.IsNullOrEmpty(param.ParameterName) || string.IsNullOrEmpty(param.ParameterValue))
            {
                StepError = "Parameter name and value cannot be empty";
                return false;
            }
        }

        for (var i = 0; i < parameters.Count - 1; i++)
        {
            if (parameters[i + 1].ParameterName == parameters[i].ParameterName)
            {
                StepError = "Duplicate parameter names";
                return false;
            }
        }

        return true;
    }

    private void ToggleDependency(Step step, object checkedValue)
    {
        var dependent = (bool)checkedValue;
        var dependency = Step.Dependencies.FirstOrDefault(dep => dep.DependantOnStepId == step.StepId);
        if (!dependent && dependency != null)
        {
            Step.Dependencies.Remove(dependency);
        }
        else if (dependent && dependency == null)
        {
            Step.Dependencies.Add(new() { StepId = Step.StepId, DependantOnStepId = step.StepId });
        }
    }

    private void ToggleStrictDependency(Step step, object checkedValue)
    {
        var strict = (bool)checkedValue;
        var dependency = Step.Dependencies.FirstOrDefault(dep => dep.DependantOnStepId == step.StepId);
        if (dependency != null)
        {
            dependency.StrictDependency = strict;
        }
    }

    public void Show(bool showDependencies = false)
    {
        ShowDependencies = showDependencies;
        Modal.Show();
    }

    public void Dispose()
    {
        Context.Dispose();
    }
}
