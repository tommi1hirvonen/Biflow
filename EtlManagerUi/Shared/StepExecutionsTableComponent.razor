@inject IWebHostEnvironment WebHostEnvironment
@inject IHxMessengerService Messenger
@inject IHttpContextAccessor HttpContextAccessor

<table class="table table-sm table-hover">
    <thead>
        <tr>
            @if (ShowDetailed)
            {
                <th>
                    Job
                </th>
            }
            <th>
                Step
            </th>
            <th>
                Execution phase
            </th>
            <th>
                Started
            </th>
            <th>
                Ended
            </th>
            <th>
                Duration
            </th>
            <th>
                Status
            </th>
        </tr>
    </thead>
    <tbody>
        @if (Executions is null)
        {
            <tr><td colspan="@(ShowDetailed ? 7 : 6)">Loading...</td></tr>
        }
        else if (!Executions.Any())
        {
            <tr><td colspan="@(ShowDetailed ? 7 : 6)">No executions</td></tr>
        }
        else
        {
            @foreach (var item in Executions)
            {
                <tr class="@(SelectedStepExecution == item ? "bg-light" : null)" style="cursor: pointer;" @onclick="() => ToggleSelectedStepExecution(item)">
                    @if (ShowDetailed)
                    {
                        <td>
                        @item.StepExecution.Execution.JobName
                    </td>
                    }
                    <td>
                        <StepTypeIconComponent StepType_="item.StepType" />
                        &nbsp;
                        @item.StepExecution.StepName
                    </td>
                    <td style="@(item.StepExecution.Execution.DependencyMode ? "color: #ccc;" : null)">
                        @item.StepExecution.ExecutionPhase
                        &nbsp;
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/layers.svg")))
                    </td>
                    <td>
                        @item.StartDateTime?.LocalDateTime
                    </td>
                    <td>
                        @item.EndDateTime?.LocalDateTime
                    </td>
                    <td>
                        <text>@item.GetDurationInReadableFormat()</text>
                    </td>
                    <td>
                        <StepExecutionStatusBadgeComponent ExecutionStatus="@item.ExecutionStatus" />
                    </td>
                </tr>
                @if (SelectedStepExecution == item)
                {
                    <tr class="table-borderless">
                        <td colspan="7" class="bg-light">
                            <HxButtonToolbar CssClass="mb-3 mt-1 ms-2">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.Light" @onclick="async () => await ShowStepHistoryModalAsync(item.StepId.ToString())">
                                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/activity.svg")))
                                    History
                                </HxButton>
                                <AuthorizeView Roles="Admin, Editor, Operator">
                                    @if (item.ExecutionStatus == StepExecutionStatus.Running)
                                    {
                                        <HxDropdown CssClass="ms-3">
                                            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Danger">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                                                Stop
                                            </HxDropdownToggleButton>
                                            <HxDropdownMenu>
                                                <HxDropdownItem @onclick="async () => await StopStepExecutionAsync(item)">Confirm</HxDropdownItem>
                                            </HxDropdownMenu>
                                        </HxDropdown>
                                    }
                                </AuthorizeView>
                            </HxButtonToolbar>

                            <StepExecutionDetailsComponent StepExecutionAttempt="item" />
                        </td>
                    </tr>
                }
            }
        }
    </tbody>
</table>

<StepHistoryModal @ref="StepHistoryModal" StepId_="@HistoryModalStepId" />

@code {
    [Parameter]
    public IEnumerable<StepExecutionAttempt>? Executions { get; set; }

    [Parameter]
    public bool ShowDetailed { get; set; } = true;

    private StepExecutionAttempt? SelectedStepExecution { get; set; }

    private StepHistoryModal StepHistoryModal { get; set; } = null!;
    private string? HistoryModalStepId { get; set; }

    private void ToggleSelectedStepExecution(StepExecutionAttempt execution)
    {
        // If the selected execution is the same that was previously selected, set to null
        // => hides step execution details component.
        SelectedStepExecution = SelectedStepExecution == execution ? null : execution;
        StateHasChanged();
    }

    private async Task ShowStepHistoryModalAsync(string stepId)
    {
        HistoryModalStepId = stepId;
        await StepHistoryModal.ShowAsync();
    }

    private async Task StopStepExecutionAsync(StepExecutionAttempt stepExecution)
    {
        try
        {
            string username = HttpContextAccessor.HttpContext?.User?.Identity?.Name
                ?? throw new ArgumentNullException(nameof(username), "Error getting username from HttpContext");
            await stepExecution.StopExecutionAsync(username);
        }
        catch (TimeoutException)
        {
            Messenger.AddError("Operation timed out", "The executor process may no longer be running");
        }
        catch (Exception ex)
        {
            Messenger.AddError("Error stopping execution", ex.Message);
        }
    }
}
