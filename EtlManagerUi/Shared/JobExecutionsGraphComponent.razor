<div class="row mx-1 mt-3">
    <div class="col">
        <div class="row" style="height: 40px;">
            <div class="col-xl-3 col-lg-4 col-5 py-1 d-flex align-items-center justify-content-end">
            </div>
            <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center">
                @for (int i = 0; i <= 100; i += 10)
                {
                    @*With screen sizes < xl only show every other line*@
                    <div class="@(i / 10 % 2 != 0 ? "d-none d-xl-flex" : "d-flex") align-items-center"
                         style="height: 100%; border-left: 1px dashed #ccc; position: absolute; left: @($"{i}%");">
                        @if (i < 100)
                        {
                            <small>@GetDateFromPercentage(i)<br />@GetTimeFromPercentage(i)</small>
                        }
                    </div>
                }
            </div>
        </div>
        @foreach (var item in Executions)
        {
            (var offset, var width) = item.GetGanttGraphDimensions(Executions);
            <div class="row border-top">
                <div class="col-xl-3 col-lg-4 col-5 text-right py-1">
                    <small>@item.JobName</small>
                </div>
                <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center">
                    @for (int i = 0; i <= 100; i += 10)
                    {
                        <div class="d-flex align-items-center" style="height: 100%; border-left: 1px dashed #ccc; position: absolute; left: @($"{i}%");" />
                    }
                    <div class="progress"
                         style="position: absolute; width: @($"{width}%"); left: @($"{offset}%");">
                        <div id="@item.ExecutionId"
                             class="progress-bar @item.ExecutionStatus.ToString().ToLower()"
                             style="width: 100%; cursor:pointer;"
                             @onclick="() => OpenJobExecutionModal(item.ExecutionId)" />
                    </div>
                    <BSTooltip Target="@item.ExecutionId.ToString()" Placement="Placement.Top">
                        @item.ExecutionStatus
                        @item.GetDurationInReadableFormat()
                    </BSTooltip>
                </div>
            </div>
        }
    </div>
</div>

<JobExecutionDetailsModal @ref="JobExecutionModal" ExecutionId_="@SelectedJobExecutionId.ToString()" />

@code {
    [Parameter]
    public IEnumerable<Execution> Executions { get; set; } = Enumerable.Empty<Execution>();

    private DateTime MinTime => Executions.Any() ? Executions.Min(e => e.StartDateTime?.LocalDateTime) ?? DateTime.Now : DateTime.Now;
    private DateTime MaxTime => Executions.Any() ? Executions.Max(e => e.EndDateTime?.LocalDateTime ?? DateTime.Now) : DateTime.Now;
    private long MinTicks => MinTime.Ticks;
    private long MaxTicks => MaxTime.Ticks;

    private string GetTimeFromPercentage(int percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("T");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100;
        var time = new DateTime(ticks);
        return time.ToString("T");
    }

    private string GetDateFromPercentage(int percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("d");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100;
        var time = new DateTime(ticks);
        return time.ToString("d");
    }

    private JobExecutionDetailsModal JobExecutionModal { get; set; } = null!;
    private Guid SelectedJobExecutionId { get; set; }

    private void OpenJobExecutionModal(Guid executionId)
    {
        SelectedJobExecutionId = executionId;
        JobExecutionModal.Show();
    }
}
