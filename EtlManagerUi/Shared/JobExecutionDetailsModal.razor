@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS 

<style>
    .vis-item {
        cursor: pointer;
        font-weight: bold;
    }

    .vis-item .vis-item-overflow {
        overflow: visible;
    }

    .running, .running.vis-selected {
        background-color: @GetFillFromStatus("RUNNING");
        border-color: @GetFillFromStatus("RUNNING", true);
        color: @GetFillFromStatus("RUNNING", true);
    }
    .completed, .completed.vis-selected {
        background-color: @GetFillFromStatus("COMPLETED");
        border-color: @GetFillFromStatus("COMPLETED", true);
        color: @GetFillFromStatus("COMPLETED", true);
    }
    .failed, .failed.vis-selected {
        background-color: @GetFillFromStatus("FAILED");
        border-color: @GetFillFromStatus("FAILED", true);
        color: @GetFillFromStatus("FAILED", true);
    }
    .skipped, .skipped.vis-selected {
        background-color: @GetFillFromStatus("SKIPPED");
        border-color: @GetFillFromStatus("SKIPPED", true);
        color: @GetFillFromStatus("SKIPPED", true);
    }
    .stopped, .stopped.vis-selected {
        background-color: @GetFillFromStatus("STOPPED");
        border-color: @GetFillFromStatus("STOPPED", true);
        color: @GetFillFromStatus("STOPPED", true);
    }
    .duplicate, .duplicate.vis-selected {
        background-color: @GetFillFromStatus("DUPLICATE");
        border-color: @GetFillFromStatus("DUPLICATE", true);
        color: @GetFillFromStatus("DUPLICATE", true);
    }
    .await-retry, .await-retry.vis-selected {
        background-color: @GetFillFromStatus("AWAIT RETRY");
        border-color: @GetFillFromStatus("AWAIT RETRY", true);
        color: @GetFillFromStatus("AWAIT RETRY", true);
    }
</style>

<BSModal @ref="Modal" Size="Size.ExtraLarge" IsScrollable="true">
    <BSModalHeader @onclick="() => Modal.Hide()">@(JobExecution != null ? JobExecution.JobName : null)</BSModalHeader>
    <BSModalBody>

        <BSButtonGroup IsToolbar="true">
            <BSButton Size="Size.Small" Color="Color.Primary" @onclick="LoadData" IsDisabled="Loading">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/refresh-cw.svg")))
                Refresh
            </BSButton>

            <BSButton Size="Size.Small" Color="Color.Secondary" Class="ml-3" @onclick="ToggleJobExecutionDetails">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
                Job details
            </BSButton>

            <BSButtonGroup Class="ml-3">
                <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(ShowGraph ? "active" : null)"
                          @onclick="() => ShowGraph = true">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/bar-chart-steps.svg")))
                    Graph
                </BSButton>
                <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(!ShowGraph ? "active" : null)"
                          @onclick="() => ShowGraph = false">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/table.svg")))
                    Table
                </BSButton>
            </BSButtonGroup>

            @if (Loading)
            {
                <div class="spinner-border text-primary align-middle ml-3" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
        </BSButtonGroup>

        <div class="row my-1">
            <p></p>
        </div>

        @if (JobExecution != null)
        {
            <BSCollapse IsOpen="JobExecutionDetailsOpen">
                <BSCard CardType="CardType.Card">
                    <BSCard CardType="CardType.Body">
                        <dl class="row">
                            <dt class="col-sm-3">
                                Execution id
                            </dt>
                            <dd class="col-sm-9">
                                @JobExecution.ExecutionId
                            </dd>
                            <dt class="col-sm-3">
                                Dependency model
                            </dt>
                            <dd class="col-sm-9">
                                @JobExecution.DependencyMode
                            </dd>
                            <dt class="col-sm-3">
                                Created by
                            </dt>
                            <dd class="col-sm-9">
                                @JobExecution.CreatedBy
                            </dd>
                            <dt class="col-sm-3">
                                Created
                            </dt>
                            <dd class="col-sm-9">
                                @JobExecution.CreatedDateTime
                            </dd>
                            <dt class="col-sm-3">
                                Started
                            </dt>
                            <dd class="col-sm-9">
                                @JobExecution.StartDateTime
                            </dd>
                            <dt class="col-sm-3">
                                Ended
                            </dt>
                            <dd class="col-sm-9">
                                @JobExecution.EndDateTime
                            </dd>
                            <dt class="col-sm-3">
                                Number of steps
                            </dt>
                            <dd class="col-sm-9">
                                @JobExecution.NumberOfSteps
                            </dd>
                            <dt class="col-sm-3">
                                Success percent
                            </dt>
                            <dd class="col-sm-9">
                                @JobExecution.SuccessPercent.FormatPercentage(0)
                            </dd>
                            <dt class="col-sm-3">
                                Duration
                            </dt>
                            <dd class="col-sm-9">
                                <text>@JobExecution.GetDurationInReadableFormat()</text>
                            </dd>
                            <dt class="col-sm-3">
                                Status
                            </dt>
                            <dd class="col-sm-9">
                                <JobExecutionStatusBadgeComponent ExecutionStatus="@JobExecution.ExecutionStatus" />
                            </dd>
                        </dl>
                    </BSCard>
                </BSCard>
            </BSCollapse>
        }

        @if (Executions == null)
        {
            <p><em>Loading...</em></p>
        }
        else if (!ShowGraph)
        {
            <table class="table table-sm table-hover">
                <thead>
                    <tr>
                        <th>
                            Step
                        </th>
                        <th>
                            Step type
                        </th>
                        <th>
                            Started
                        </th>
                        <th>
                            Ended
                        </th>
                        <th>
                            Duration
                        </th>
                        <th>
                            Status
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Executions)
                    {
                        <tr class="@(SelectedStepExecution == item ? "bg-light" : null)" style="cursor: pointer;" @onclick="() => ToggleSelectedStepExecution(item)">
                            <td>
                                @item.StepName
                            </td>
                            <td>
                                <StepTypeIconComponent StepType="@item.StepType" />
                            </td>
                            <td>
                                @item.StartDateTime
                            </td>
                            <td>
                                @item.EndDateTime
                            </td>
                            <td>
                                <text>@item.GetDurationInReadableFormat()</text>
                            </td>
                            <td>
                                <StepExecutionStatusBadgeComponent ExecutionStatus="@item.ExecutionStatus" />
                            </td>
                        </tr>
                        @if (SelectedStepExecution == item)
                        {
                            <tr class="table-borderless">
                                <td colspan="6" class="bg-light">
                                    <StepExecutionDetailsComponent StepExecution="item" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
        
        <div id="steps_graph" hidden=@(!ShowGraph)>
        </div>

    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Close</BSButton>
    </BSModalFooter>
</BSModal>

@code {
    [Parameter]
    public Guid ExecutionId { get; set; }

    private BSModal Modal { get; set; }

    private JobExecution JobExecution { get; set; }

    private List<StepExecution> Executions { get; set; }

    private bool ShowGraph { get; set; } = false;

    private bool Loading { get; set; } = false;

    private bool JobExecutionDetailsOpen { get; set; } = false;

    private StepExecution SelectedStepExecution { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        JobExecution = null;
        Executions = null;
        await LoadData();
    }

    private async Task LoadData()
    {
        if (ExecutionId != Guid.Empty)
        {
            Loading = true;
            var context = DbFactory.CreateDbContext();
            JobExecution = await context.JobExecutions.FirstOrDefaultAsync(e => e.ExecutionId == ExecutionId);
            Executions = await context.Executions
                .Where(e => e.ExecutionId == ExecutionId)
                .OrderBy(e => e.CreatedDateTime)
                .ThenBy(e => e.StartDateTime)
                .ToListAsync();
            StateHasChanged();
            Loading = false;

            var dataset = Executions.Where(e => e.StartDateTime != null).Select(e =>
            new
            {
                id = e.StepExecutionId,
                content = e.StepName,
                title = e.ExecutionStatus + ", " + e.GetDurationInReadableFormat(),
                className = e.ExecutionStatus.ToLower().Replace(' ', '-'),
                start = e.StartDateTime?.ToString("yyyy-MM-dd HH':'mm':'ss"),
                end = (e.EndDateTime ?? DateTime.Now).ToString("yyyy-MM-dd HH':'mm':'ss")
            }
            );
            var datasetJson = JsonSerializer.Serialize(dataset);
            await JS.InvokeVoidAsync("drawStepsTimeline", datasetJson);
        }
    }

    private void ToggleJobExecutionDetails()
    {
        JobExecutionDetailsOpen = !JobExecutionDetailsOpen;
        StateHasChanged();
    }

    private void ToggleSelectedStepExecution(StepExecution execution)
    {
        SelectedStepExecution = SelectedStepExecution == execution ? null : execution;
        StateHasChanged();
    }

    public void Show() => Modal.Show();


    private string colorRed = "#FEDEE5";
    private string colorRedDark = "#823040";
    private string colorGreen = "#CEF5EA";
    private string colorGreenDark = "#056C4F";
    private string colorOrange = "#FFF2CC";
    private string colorOrangeDark = "#856200";
    private string colorBlue = "#E3E5FD";
    private string colorBlueDark = "#3B40A7";

    public string GetFillFromStatus(string status, bool dark = false)
    {
        switch (status)
        {
            case "COMPLETED":
                return dark ? colorGreenDark : colorGreen;
            case "FAILED":
                return dark ? colorRedDark : colorRed;
            case "SKIPPED":
            case "STOPPED":
            case "DUPLICATE":
            case "AWAIT RETRY":
                return dark ? colorOrangeDark : colorOrange;
            case "RUNNING":
            default:
                return dark ? colorBlueDark : colorBlue;
        }
    }

}
