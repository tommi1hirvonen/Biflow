@implements IDisposable

@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS 
@inject IConfiguration configuration
@inject IHttpContextAccessor HttpContextAccessor

<style>
    .vis-item {
        cursor: pointer;
        font-weight: bold;
    }
        .vis-item .vis-item-overflow {
            overflow: visible;
        }
        .vis-labelset .vis-label .vis-inner,
        .vis-item .vis-item-content {
            font-size: 12px;
            padding: 0 5px;
        }
</style>

<BSModal @ref="Modal" Size="Size.ExtraLarge" IsScrollable="true">
    <BSModalHeader @onclick="() => Modal.Hide()">@(Execution is not null ? Execution.JobName : null)</BSModalHeader>
    <BSModalBody>

        <BSButtonGroup IsToolbar="true">
            <BSButton Size="Size.Small" Color="Color.Primary" @onclick="LoadData" IsDisabled="Loading">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/refresh-cw.svg")))
                Refresh
            </BSButton>

            <BSButton Size="Size.Small" Color="Color.Secondary" Class="ml-3" @onclick="() => JobExecutionDetailsOpen = !JobExecutionDetailsOpen">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
                Job details
            </BSButton>

            <BSButtonGroup Class="ml-3">
                <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(ShowGraph ? "active" : null)"
                          @onclick="() => ShowGraph = true">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/bar-chart-steps.svg")))
                    Graph
                </BSButton>
                <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(!ShowGraph ? "active" : null)"
                          @onclick="() => ShowGraph = false">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/table.svg")))
                    Table
                </BSButton>
            </BSButtonGroup>

            @if (Loading)
            {
                <div class="spinner-border text-primary align-middle ml-3" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
        </BSButtonGroup>

        <AuthorizeView Roles="Admin, Editor, Operator">
            @if (Execution is not null && Execution.ExecutionStatus == ExecutionStatus.Running)
            {
                <BSButtonGroup IsToolbar="true" Class="mt-3">
                    <BSDropdown>
                        <BSDropdownToggle Size="Size.Small" Color="Color.Danger" Class="@(Stopping ? "disabled" : null)">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                            Stop
                        </BSDropdownToggle>
                        <BSDropdownMenu>
                            <BSDropdownItem @onclick="StopJobExecutionAsync" IsDisabled="Stopping">Confirm</BSDropdownItem>
                        </BSDropdownMenu>
                    </BSDropdown>
                </BSButtonGroup>
            }
        </AuthorizeView>

        <div class="row my-1">
            <p></p>
        </div>

        @if (Execution is not null && JobExecutionDetailsOpen)
        {
            <dl class="row">
                <dt class="col-sm-3">
                    Execution id
                </dt>
                <dd class="col-sm-9">
                    @Execution.ExecutionId
                </dd>
                <dt class="col-sm-3">
                    Dependency model
                </dt>
                <dd class="col-sm-9">
                    @Execution.DependencyMode
                </dd>
                <dt class="col-sm-3">
                    Created by
                </dt>
                <dd class="col-sm-9">
                    @Execution.CreatedBy
                </dd>
                <dt class="col-sm-3">
                    Created
                </dt>
                <dd class="col-sm-9">
                    @Execution.CreatedDateTime.LocalDateTime
                </dd>
                <dt class="col-sm-3">
                    Started
                </dt>
                <dd class="col-sm-9">
                    @Execution.StartDateTime?.LocalDateTime
                </dd>
                <dt class="col-sm-3">
                    Ended
                </dt>
                <dd class="col-sm-9">
                    @Execution.EndDateTime?.LocalDateTime
                </dd>
                <dt class="col-sm-3">
                    Number of steps
                </dt>
                <dd class="col-sm-9">
                    @Execution.StepExecutions.Count
                </dd>
                <dt class="col-sm-3">
                    Success percent
                </dt>
                <dd class="col-sm-9">
                    @Execution.GetSuccessPercent().FormatPercentage(0)
                </dd>
                <dt class="col-sm-3">
                    Duration
                </dt>
                <dd class="col-sm-9">
                    <text>@Execution.GetDurationInReadableFormat()</text>
                </dd>
                <dt class="col-sm-3">
                    Status
                </dt>
                <dd class="col-sm-9">
                    <JobExecutionStatusBadgeComponent ExecutionStatus_="@Execution.ExecutionStatus" />
                </dd>
            </dl>
        }

        @if (!ShowGraph)
        {
            <div class="form-inline">
                <div class="form-group">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text">
                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/alert-circle.svg")))
                            </div>
                        </div>
                        <select class="form-control form-control-sm" @bind="StatusFilter">
                            <option value="" selected=@(StatusFilter is null)>All</option>
                            @if (StepExecutionAttempts is not null)
                            {
                                @foreach (var status in StepExecutionAttempts.Select(e => e.ExecutionStatus).Distinct().OrderBy(status => status))
                                {
                                    <option value="@status"
                                            selected=@(status == StatusFilter)>
                                        @status
                                    </option>
                                }
                            }
                        </select>
                    </div>
                </div>
            </div>
            <table class="table table-sm table-hover mt-2">
                <thead>
                    <tr>
                        @{ string? Decorate(SortOption sortOption) => sortOption == SortOption_ ? "text-decoration: underline;" : null; }
                        <th>
                            <a style="@Decorate(SortOption.Name)" href="javascript:void(0)" @onclick="() => SortOption_ = SortOption.Name">
                                Step
                            </a>
                        </th>
                        <th>
                            Step type
                        </th>
                        <th>
                            <a style="@Decorate(SortOption.StartTime)" href="javascript:void(0)" @onclick="() => SortOption_ = SortOption.StartTime">
                                Started
                            </a>
                        </th>
                        <th>
                            <a style="@Decorate(SortOption.EndTime)" href="javascript:void(0)" @onclick="() => SortOption_ = SortOption.EndTime">
                                Ended
                            </a>
                        </th>
                        <th>
                            <a style="@Decorate(SortOption.Duration)" href="javascript:void(0)" @onclick="() => SortOption_ = SortOption.Duration">
                                Duration
                            </a>
                        </th>
                        <th>
                            <a style="@Decorate(SortOption.Status)" href="javascript:void(0)" @onclick="() => SortOption_ = SortOption.Status">
                                Status
                            </a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (StepExecutionAttempts is null)
                    {
                        <tr><td colspan="6">Loading...</td></tr>
                    }
                    else if (StepExecutionAttempts.Count == 0)
                    {
                        <tr><td colspan="6">No executions</td></tr>
                    }
                    else
                    {
                        @foreach (var item in StepExecutionAttempts.Where(e => StatusFilter is null || e.ExecutionStatus == StatusFilter))
                        {
                            <tr class="@(SelectedStepExecution == item ? "bg-light" : null)" style="cursor: pointer;" @onclick="() => ToggleSelectedStepExecution(item)">
                                <td>
                                    @item.StepExecution.StepName
                                </td>
                                <td>
                                    <StepTypeIconComponent StepType_="@item.StepType" />
                                </td>
                                <td>
                                    @item.StartDateTime?.LocalDateTime
                                </td>
                                <td>
                                    @item.EndDateTime?.LocalDateTime
                                </td>
                                <td>
                                    <text>@item.GetDurationInReadableFormat()</text>
                                </td>
                                <td>
                                    <StepExecutionStatusBadgeComponent ExecutionStatus="@item.ExecutionStatus" />
                                </td>
                            </tr>
                            @if (SelectedStepExecution == item)
                            {
                                <tr class="table-borderless">
                                    <td colspan="6" class="bg-light">
                                        <BSButtonGroup Size="Size.Small" IsToolbar="true" Class="mb-3 mt-1 ml-2">
                                            <BSButton Size="Size.Small" Color="Color.Light" @onclick="() => ShowStepHistoryModal(item.StepId.ToString())">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/activity.svg")))
                                                History
                                            </BSButton>
                                            <AuthorizeView Roles="Admin, Editor, Operator">
                                                @if (item.ExecutionStatus == StepExecutionStatus.Running || item.ExecutionStatus == StepExecutionStatus.AwaitRetry // Step is running or it is awaiting retry...
                                                 && !StepExecutionAttempts.Any(e => e.StepId == item.StepId && e.RetryAttemptIndex > item.RetryAttemptIndex)) // ...and is the latest attempt.
                                                {
                                                    <BSDropdown Class="ml-3">
                                                        <BSDropdownToggle Size="Size.Small" Color="Color.Danger">
                                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                                                            Stop
                                                        </BSDropdownToggle>
                                                        <BSDropdownMenu>
                                                            <BSDropdownItem @onclick="() => StopStepExecutionAsync(item)">Confirm</BSDropdownItem>
                                                        </BSDropdownMenu>
                                                    </BSDropdown>
                                                }
                                            </AuthorizeView>
                                        </BSButtonGroup>

                                        <StepExecutionDetailsComponent StepExecutionAttempt="item" />
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        }

        <div class="steps-graph" id="steps_graph" hidden=@(!ShowGraph)>
        </div>

        <StepExecutionDetailsModal @ref="StepExecutionDetailsModal" StepExecutionAttempt="SelectedStepExecutionModal" />

        <StepHistoryModal @ref="StepHistoryModal" StepId_="@HistoryModalStepId" />

    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Close</BSButton>
    </BSModalFooter>
</BSModal>



@code {
    [Parameter]
    public string? ExecutionId_ { get; set; }

    private Guid ExecutionId => ExecutionId_ switch { not null => Guid.Parse(ExecutionId_), _ => Guid.Empty };

    private BSModal Modal { get; set; } = null!;

    private Execution? Execution { get; set; }

    private IList<StepExecutionAttempt>? StepExecutionAttempts { get; set; }

    private bool ShowGraph { get; set; } = false;

    private bool Loading { get; set; } = false;

    private bool JobExecutionDetailsOpen { get; set; } = false;

    private StepExecutionStatus? StatusFilter { get; set; } = null;

    private StepExecutionAttempt? SelectedStepExecution { get; set; }

    private bool Stopping => StoppingExecutions.Any(id => id == ExecutionId);

    private StepHistoryModal StepHistoryModal { get; set; } = null!;
    private string? HistoryModalStepId { get; set; }

    private SortOption _SortOption = SortOption.StartTime;
    private bool SortAscending = true;
    private SortOption SortOption_
    {
        get { return _SortOption; }
        set
        {
            if (value == _SortOption)
            {
                SortAscending = !SortAscending;
                StepExecutionAttempts?.Reverse();
            }
            else
            {
                SortAscending = true;
                _SortOption = value;
                SortExecutions();
            }
        }
    }

    // Maintain a list executions that are being stopped.
    // This same component instance can be used to switch between different job executions.
    // This list allows for stopping multiple executions concurrently
    // and to modify the view based on which job execution is being shown.
    private List<Guid> StoppingExecutions { get; set; } = new();

    private StepExecutionDetailsModal StepExecutionDetailsModal { get; set; } = null!;
    private StepExecutionAttempt SelectedStepExecutionModal { get; set; } = null!;
    private DotNetObjectReference<MethodInvokeHelper> ObjectReference { get; set; } = null!;

    protected override void OnInitialized()
    {
        // Create a DotNetObjectReference with a new helper method tied to an instance of this component.
        // This will allow JS to call back to a specific instance of this component.
        // This needs to be done, because multiple users might be using this component concurrently.
        var helper = new MethodInvokeHelper(ShowStepExecutionModal);
        ObjectReference = DotNetObjectReference.Create(helper);
    }

    protected override async Task OnParametersSetAsync()
    {
        Execution = null;
        StepExecutionAttempts = null;
        await LoadData();
    }

    private async Task LoadData()
    {
        if (ExecutionId != Guid.Empty)
        {
            Loading = true;
            var context = DbFactory.CreateDbContext();

            Execution = await context.Executions
                .Include(e => e.StepExecutions)
                .FirstOrDefaultAsync(e => e.ExecutionId == ExecutionId);
            StepExecutionAttempts = await context.StepExecutionAttempts
                .Include(attempt => attempt.StepExecution)
                .ThenInclude(e => (e as ParameterizedStepExecution)!.StepExecutionParameters)
                .Where(e => e.ExecutionId == ExecutionId)
                .ToListAsync();
            SortExecutions();
            StateHasChanged();
            Loading = false;

            // Create a JSON dataset that is passed to the JS method used to draw the steps graph via JSInterop.
            var dataset = StepExecutionAttempts.Where(e => e.StartDateTime is not null).Select(e =>
            new
            {
                id = e.UniqueId,
                content = e.StepExecution.StepName,
                title = e.ExecutionStatus + ", " + e.GetDurationInReadableFormat(),
                className = e.ExecutionStatus.ToString().ToLower(),
                start = e.StartDateTime?.LocalDateTime.ToString("yyyy-MM-dd HH':'mm':'ss"),
                end = (e.EndDateTime ?? DateTimeOffset.Now).LocalDateTime.ToString("yyyy-MM-dd HH':'mm':'ss")
            }
            );
            var datasetJson = JsonSerializer.Serialize(dataset);
            await JS.InvokeVoidAsync("drawStepsTimeline", datasetJson, ObjectReference);
        }
    }

    private void SortExecutions()
    {
        if (SortAscending)
        {
            switch (SortOption_)
            {
                case SortOption.Duration:
                    StepExecutionAttempts = StepExecutionAttempts?.OrderBy(e => e.ExecutionInSeconds).ThenBy(e => e.StepExecution.StepName).ToList();
                    break;
                case SortOption.StartTime:
                    // false sorts before true => not started steps are placed last
                    StepExecutionAttempts = StepExecutionAttempts?
                        .OrderBy(e => e.StartDateTime is null)
                        .ThenBy(e => e.StartDateTime)
                        .ThenBy(e => e.EndDateTime is null)
                        .ThenBy(e => e.EndDateTime)
                        .ThenBy(e => e.StepExecution.ExecutionPhase)
                        .ThenBy(e => e.StepExecution.StepName)
                        .ToList();
                    break;
                case SortOption.EndTime:
                    StepExecutionAttempts = StepExecutionAttempts?.OrderBy(e => e.EndDateTime).ThenBy(e => e.StepExecution.StepName).ToList();
                    break;
                case SortOption.Name:
                    StepExecutionAttempts = StepExecutionAttempts?.OrderBy(e => e.StepExecution.StepName).ToList();
                    break;
                case SortOption.Status:
                    StepExecutionAttempts = StepExecutionAttempts?.OrderBy(e => e.ExecutionStatus).ThenBy(e => e.StartDateTime).ThenBy(e => e.StepExecution.StepName).ToList();
                    break;
            }
        }
        else
        {
            switch (SortOption_)
            {
                case SortOption.Duration:
                    StepExecutionAttempts = StepExecutionAttempts?.OrderByDescending(e => e.ExecutionInSeconds).ToList();
                    break;
                case SortOption.StartTime:
                    StepExecutionAttempts = StepExecutionAttempts?.OrderByDescending(e => e.StartDateTime).ThenByDescending(e => e.EndDateTime).ToList();
                    break;
                case SortOption.EndTime:
                    StepExecutionAttempts = StepExecutionAttempts?.OrderByDescending(e => e.EndDateTime).ThenByDescending(e => e.StartDateTime).ToList();
                    break;
                case SortOption.Name:
                    StepExecutionAttempts = StepExecutionAttempts?.OrderByDescending(e => e.StepExecution.StepName).ToList();
                    break;
                case SortOption.Status:
                    StepExecutionAttempts = StepExecutionAttempts?.OrderByDescending(e => e.ExecutionStatus).ToList();
                    break;
            }
        }
    }

    private void ToggleSelectedStepExecution(StepExecutionAttempt execution)
    {
        SelectedStepExecution = SelectedStepExecution == execution ? null : execution;
        StateHasChanged();
    }

    private async Task StopJobExecutionAsync()
    {
        if (Stopping)
        {
            await JS.InvokeVoidAsync("alert", "Execution is already stopping");
            return;
        }

        StoppingExecutions.Add(ExecutionId);
        try
        {
            string username = HttpContextAccessor.HttpContext?.User?.Identity?.Name
                ?? throw new ArgumentNullException(nameof(username), "Username cannot be null");
            await (Execution?.StopExecutionAsync(username) ?? Task.CompletedTask);
        }
        catch (TimeoutException)
        {
            await JS.InvokeVoidAsync("alert", "Operation timed out. The executor process may no longer be running.");
            StoppingExecutions.RemoveAll(id => id == ExecutionId);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Error stopping execution:" + ex.Message);
            StoppingExecutions.RemoveAll(id => id == ExecutionId);
        }
    }

    private async Task StopStepExecutionAsync(StepExecutionAttempt stepExecution)
    {
        try
        {
            string username = HttpContextAccessor.HttpContext?.User?.Identity?.Name
                ?? throw new ArgumentNullException(nameof(username), "Username cannot be null");
            await stepExecution.StopExecutionAsync(username);
        }
        catch (TimeoutException)
        {
            await JS.InvokeVoidAsync("alert", "Operation timed out. The executor process may no longer be running.");
            StoppingExecutions.RemoveAll(id => id == ExecutionId);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Error stopping execution:" + ex.Message);
            StoppingExecutions.RemoveAll(id => id == ExecutionId);
        }
    }

    private void ShowStepExecutionModal(string text)
    {
        var execution = StepExecutionAttempts?.FirstOrDefault(e => e.UniqueId == text);
        if (execution is not null)
        {
            SelectedStepExecutionModal = execution;
            StateHasChanged();
            StepExecutionDetailsModal.Show();
        }
    }

    private void ShowStepHistoryModal(string stepId)
    {
        HistoryModalStepId = stepId;
        StepHistoryModal.Show();
    }

    public void Show() => Modal.Show();

    public void Dispose()
    {
        ObjectReference?.Dispose();
    }

    private enum SortOption
    {
        StartTime,
        EndTime,
        Duration,
        Name,
        Status
    }

}
