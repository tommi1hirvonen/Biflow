@inject IWebHostEnvironment WebHostEnvironment
@inject IDbContextFactory<EtlManagerContext> DbFactory
@inject IJSRuntime JS 
@inject IConfiguration configuration
@inject IHttpContextAccessor HttpContextAccessor

<BSModal @ref="Modal" IsFullScreen="true" IsScrollable="true">
    <BSModalHeader @onclick="() => Modal.Hide()">@(Execution is not null ? Execution.JobName : null)</BSModalHeader>
    <BSModalBody>

        <BSButtonGroup IsToolbar="true">
            <BSButton Size="Size.Small" Color="Color.Primary" @onclick="LoadData" IsDisabled="Loading">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/refresh-cw.svg")))
                Refresh
            </BSButton>

            <BSButton Size="Size.Small" Color="Color.Secondary" Class="ml-3" @onclick="() => JobExecutionDetailsOpen = !JobExecutionDetailsOpen">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
                Job details
            </BSButton>

            <BSButtonGroup Class="ml-3">
                <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(ShowGraph ? "active" : null)"
                          @onclick="() => ShowGraph = true">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/bar-chart-steps.svg")))
                    Graph
                </BSButton>
                <BSButton Size="Size.Small" Color="Color.Secondary" Class="@(!ShowGraph ? "active" : null)"
                          @onclick="() => ShowGraph = false">
                    @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/table.svg")))
                    Table
                </BSButton>
            </BSButtonGroup>

            @if (Loading)
            {
                <div class="spinner-border text-primary align-middle ml-3" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
        </BSButtonGroup>

        <AuthorizeView Roles="Admin, Editor, Operator">
            @if (Execution is not null && Execution.ExecutionStatus == ExecutionStatus.Running)
            {
                <BSButtonGroup IsToolbar="true" Class="mt-3">
                    <BSDropdown>
                        <BSDropdownToggle Size="Size.Small" Color="Color.Danger" Class="@(Stopping ? "disabled" : null)">
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                            Stop
                        </BSDropdownToggle>
                        <BSDropdownMenu>
                            <BSDropdownItem @onclick="StopJobExecutionAsync" IsDisabled="Stopping">Confirm</BSDropdownItem>
                        </BSDropdownMenu>
                    </BSDropdown>
                </BSButtonGroup>
            }
        </AuthorizeView>

        <div class="row my-1">
            <p></p>
        </div>

        @if (Execution is not null && JobExecutionDetailsOpen)
        {
            <dl class="row">
                <dt class="col-sm-3">
                    Execution id
                </dt>
                <dd class="col-sm-9">
                    @Execution.ExecutionId
                </dd>
                <dt class="col-sm-3">
                    Dependency model
                </dt>
                <dd class="col-sm-9">
                    @Execution.DependencyMode
                </dd>
                <dt class="col-sm-3">
                    Created by
                </dt>
                <dd class="col-sm-9">
                    @Execution.CreatedBy
                </dd>
                <dt class="col-sm-3">
                    Created
                </dt>
                <dd class="col-sm-9">
                    @Execution.CreatedDateTime.LocalDateTime
                </dd>
                <dt class="col-sm-3">
                    Started
                </dt>
                <dd class="col-sm-9">
                    @Execution.StartDateTime?.LocalDateTime
                </dd>
                <dt class="col-sm-3">
                    Ended
                </dt>
                <dd class="col-sm-9">
                    @Execution.EndDateTime?.LocalDateTime
                </dd>
                <dt class="col-sm-3">
                    Number of steps
                </dt>
                <dd class="col-sm-9">
                    @Execution.StepExecutions.Count
                </dd>
                <dt class="col-sm-3">
                    Success percent
                </dt>
                <dd class="col-sm-9">
                    @Execution.GetSuccessPercent().FormatPercentage(0)
                </dd>
                <dt class="col-sm-3">
                    Duration
                </dt>
                <dd class="col-sm-9">
                    <text>@Execution.GetDurationInReadableFormat()</text>
                </dd>
                <dt class="col-sm-3">
                    Status
                </dt>
                <dd class="col-sm-9">
                    <JobExecutionStatusBadgeComponent ExecutionStatus_="@Execution.ExecutionStatus" />
                </dd>
            </dl>
        }

        <div class="row">
            <div class="col">
                <small>Progress:</small>
                <div class="progress">
                    <div class="progress-bar @Execution?.ExecutionStatus.ToString().ToLower()" style="width: @($"{Execution?.GetProgressPercent() ?? 0}%");" />
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col d-inline">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/filter.svg")))
                <span class="mr-3">Filter</span>

                <BSButtonGroup Size="Size.Small">
                    <FilterDropdown TItem="string"
                                    FilterSet="StepFilter"
                                    Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible steps based on tag filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                    StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible steps based on step status filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible steps based on step type filter
                                .Select(s => s.StepName)
                                .Distinct()
                                .OrderBy(j => j) ?? Enumerable.Empty<string>()"
                                    OnChange="StateHasChanged"
                                    IsSearchable="true">
                        <Title>
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/list.svg")))
                            Step
                        </Title>
                    </FilterDropdown>
                    <FilterDropdown TItem="StepType"
                                    FilterSet="StepTypeFilter"
                                    Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step types based on tag filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                    StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible step types based on step status filter
                                .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step types based on step filter
                                .Select(s => s.StepType)
                                .Distinct()
                                .OrderBy(j => j) ?? Enumerable.Empty<StepType>()"
                                    OnChange="StateHasChanged">
                        <Title>
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tool.svg")))
                            Step type
                        </Title>
                    </FilterDropdown>
                    <FilterDropdown TItem="StepExecutionStatus"
                                    FilterSet="StepStatusFilter"
                                    Items="Execution?.StepExecutions
                                .Where(s => !TagFilter.Any() || s.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true) // Limit visible step statuses based on tag filter
                                .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible step statuses based on step filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible step statuses based on step type filter
                                .SelectMany(s => s.StepExecutionAttempts)
                                .Select(e => e.ExecutionStatus)
                                .Distinct()
                                .OrderBy(s => s) ?? Enumerable.Empty<StepExecutionStatus>()"
                                    OnChange="StateHasChanged">
                        <Title>
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/alert-circle.svg")))
                            Status
                        </Title>
                    </FilterDropdown>
                    <FilterDropdown TItem="string"
                                    FilterSet="TagFilter"
                                    Items="Execution?.StepExecutions
                                .Where(s => !StepFilter.Any() || StepFilter.Contains(s.StepName)) // Limit visible tags based on step filter
                                .Where(s => !StepTypeFilter.Any() || StepTypeFilter.Contains(s.StepType)) // Limit visible tags based on step type filter
                                .Where(s => !StepStatusFilter.Any() || s.StepExecutionAttempts.Any(att =>
                                            StepStatusFilter.Contains(att.ExecutionStatus))) // Limit visible tags based on step status filter
                                .SelectMany(e => e.Step?.Tags.Select(t => t.TagName) ?? Enumerable.Empty<string>())
                                .Distinct()
                                .OrderBy(s => s) ?? Enumerable.Empty<string>()"
                                    OnChange="StateHasChanged">
                        <Title>
                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/tag.svg")))
                            Tag
                        </Title>
                    </FilterDropdown>
                    <BSButton Size="Size.Small" Color="Color.Light"
                              @onclick="() => { StepStatusFilter.Clear(); StepFilter.Clear(); StepTypeFilter.Clear(); TagFilter.Clear(); }">
                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x.svg")))
                        Reset
                    </BSButton>
                </BSButtonGroup>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col d-inline">
                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/list.svg")))
                <span class="mr-3">Sort</span>
                <div class="custom-control custom-radio custom-control-inline">
                    <input type="radio" class="custom-control-input" id="radio_started"
                           checked=@(SortMode_ == SortMode.Started)
                           @onchange="() => SortMode_ = SortMode.Started">
                    <label class="custom-control-label" for="radio_started">Started</label>
                </div>
                <div class="custom-control custom-radio custom-control-inline">
                    <input type="radio" class="custom-control-input" id="radio_duration"
                           checked=@(SortMode_ == SortMode.Duration)
                           @onchange="() => SortMode_ = SortMode.Duration">
                    <label class="custom-control-label" for="radio_duration">Duration</label>
                </div>
            </div>
        </div>


        @if (!ShowGraph)
        {
            <table class="table table-sm table-hover mt-2">
                <thead>
                    <tr>
                        <th>Step</th>
                        <th>Step type</th>
                        <th>Started</th>
                        <th>Ended</th>
                        <th>Duration</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Execution is null)
                    {
                        <tr><td colspan="6">Loading...</td></tr>
                    }
                    else if (!Executions.Any())
                    {
                        <tr><td colspan="6">No executions</td></tr>
                    }
                    else
                    {
                        @foreach (var item in Executions
                          .Where(e => !TagFilter.Any() || e.StepExecution.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true)
                          .Where(e => !StepStatusFilter.Any() || StepStatusFilter.Contains(e.ExecutionStatus))
                          .Where(e => !StepFilter.Any() || StepFilter.Contains(e.StepExecution.StepName))
                          .Where(e => !StepTypeFilter.Any() || StepTypeFilter.Contains(e.StepExecution.StepType))
                          .OrderByDescending(e => SortMode_ == SortMode.Duration ? e.ExecutionInSeconds : null)
                          .ThenBy(e => e.StartDateTime is null)
                          .ThenBy(e => e.StartDateTime)
                          .ThenBy(e => e.EndDateTime is null)
                          .ThenBy(e => e.EndDateTime)
                          .ThenBy(e => e.StepExecution.ExecutionPhase)
                          .ThenBy(e => e.StepExecution.StepName))
                        {
                            <tr class="@(SelectedStepExecution == item ? "bg-light" : null)" style="cursor: pointer;" @onclick="() => ToggleSelectedStepExecution(item)">
                                <td>
                                    @item.StepExecution.StepName
                                </td>
                                <td>
                                    <StepTypeIconComponent StepType_="@item.StepType" />
                                </td>
                                <td>
                                    @item.StartDateTime?.LocalDateTime
                                </td>
                                <td>
                                    @item.EndDateTime?.LocalDateTime
                                </td>
                                <td>
                                    <text>@item.GetDurationInReadableFormat()</text>
                                </td>
                                <td>
                                    <StepExecutionStatusBadgeComponent ExecutionStatus="@item.ExecutionStatus" />
                                </td>
                            </tr>
                            if (SelectedStepExecution == item)
                            {
                                <tr class="table-borderless">
                                    <td colspan="6" class="bg-light">
                                        <BSButtonGroup Size="Size.Small" IsToolbar="true" Class="mb-3 mt-1 ml-2">
                                            <BSButton Size="Size.Small" Color="Color.Light" @onclick="() => ShowStepHistoryModal(item.StepId.ToString())">
                                                @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/activity.svg")))
                                                History
                                            </BSButton>
                                            <AuthorizeView Roles="Admin, Editor, Operator">
                                                @if (item.ExecutionStatus == StepExecutionStatus.Running || item.ExecutionStatus == StepExecutionStatus.AwaitRetry // Step is running or it is awaiting retry...
                                             && !Executions.Any(e => e.StepId == item.StepId && e.RetryAttemptIndex > item.RetryAttemptIndex)) // ...and is the latest attempt.
                                                {
                                                    <BSDropdown Class="ml-3">
                                                        <BSDropdownToggle Size="Size.Small" Color="Color.Danger">
                                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                                                            Stop
                                                        </BSDropdownToggle>
                                                        <BSDropdownMenu>
                                                            <BSDropdownItem @onclick="() => StopStepExecutionAsync(item)">Confirm</BSDropdownItem>
                                                        </BSDropdownMenu>
                                                    </BSDropdown>
                                                }
                                            </AuthorizeView>
                                        </BSButtonGroup>

                                        <StepExecutionDetailsComponent StepExecutionAttempt="item" />
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="row mx-1 mt-3">
                <div class="col">
                    <div class="row">
                        <div class="col-xl-3 col-lg-4 col-5 py-1 d-flex align-items-center justify-content-end">
                            <small>@GetDateFromPercentage(0)</small>
                        </div>
                        <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center">
                            @for (int i = 0; i <= 100; i += 10)
                            {
                                <div class="d-flex align-items-center" style="height: 100%; border-left: 1px dashed #ccc; position: absolute; left: @($"{i}%");">
                                    @if (i < 100)
                                    {
                                        <small class="@(i % 20 == 0 ? "d-none d-xl-block" : null)">@GetTimeFromPercentage(i)</small>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    @foreach (var item in Executions
                      .Where(e => !TagFilter.Any() || e.StepExecution.Step?.Tags.Any(t => TagFilter.Contains(t.TagName)) == true)
                      .Where(e => !StepStatusFilter.Any() || StepStatusFilter.Contains(e.ExecutionStatus))
                      .Where(e => !StepFilter.Any() || StepFilter.Contains(e.StepExecution.StepName))
                      .Where(e => !StepTypeFilter.Any() || StepTypeFilter.Contains(e.StepExecution.StepType))
                      .Where(e => e.StartDateTime != null)
                      .OrderByDescending(e => SortMode_ == SortMode.Duration ? e.ExecutionInSeconds : null)
                      .ThenBy(e => e.StartDateTime)
                      .ThenBy(e => e.StepExecution.StepName))
                    {
                        (var offset, var width) = item.GetGanttGraphDimensions();
                        <div class="row border-top">
                            <div class="col-xl-3 col-lg-4 col-5 text-right py-1">
                                <small>@item.StepExecution.StepName</small>
                            </div>
                            <div class="col-xl-9 col-lg-8 col-7 d-flex align-items-center">
                                @for (int i = 0; i <= 100; i += 10)
                                {
                                    <div class="d-flex align-items-center" style="height: 100%; border-left: 1px dashed #ccc; position: absolute; left: @($"{i}%");" />
                                }
                                <div class="progress"
                                     style="position: absolute; width: @($"{width}%"); left: @($"{offset}%");">
                                    <div id="@item.UniqueId"
                                         class="progress-bar @item.ExecutionStatus.ToString().ToLower()"
                                         style="width: 100%; cursor:pointer;"
                                         @onclick="() => ToggleSelectedStepExecution(item)" />
                                </div>
                                <BSTooltip Target="@item.UniqueId" Placement="Placement.Top">
                                    @item.ExecutionStatus
                                    @item.GetDurationInReadableFormat()
                                </BSTooltip>
                            </div>
                        </div>
                        if (SelectedStepExecution == item)
                        {
                            <div class="row bg-light">
                                <div class="col">
                                    <BSButtonGroup Size="Size.Small" IsToolbar="true" Class="mb-3 mt-1 ml-2">
                                        <BSButton Size="Size.Small" Color="Color.Light" @onclick="() => ShowStepHistoryModal(item.StepId.ToString())">
                                            @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/activity.svg")))
                                            History
                                        </BSButton>
                                        <AuthorizeView Roles="Admin, Editor, Operator">
                                            @if (item.ExecutionStatus == StepExecutionStatus.Running || item.ExecutionStatus == StepExecutionStatus.AwaitRetry // Step is running or it is awaiting retry...
                                        && !Executions.Any(e => e.StepId == item.StepId && e.RetryAttemptIndex > item.RetryAttemptIndex)) // ...and is the latest attempt.
                                            {
                                                <BSDropdown Class="ml-3">
                                                    <BSDropdownToggle Size="Size.Small" Color="Color.Danger">
                                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                                                        Stop
                                                    </BSDropdownToggle>
                                                    <BSDropdownMenu>
                                                        <BSDropdownItem @onclick="() => StopStepExecutionAsync(item)">Confirm</BSDropdownItem>
                                                    </BSDropdownMenu>
                                                </BSDropdown>
                                            }
                                        </AuthorizeView>
                                    </BSButtonGroup>
                                    <StepExecutionDetailsComponent StepExecutionAttempt="item" ShowExtraDetails />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }

        <StepHistoryModal @ref="StepHistoryModal" StepId_="@HistoryModalStepId" />

    </BSModalBody>
    <BSModalFooter>
        <BSButton Color="Color.Secondary" @onclick="() => Modal.Hide()">Close</BSButton>
    </BSModalFooter>
</BSModal>



@code {
    [Parameter]
    public string? ExecutionId_ { get; set; }

    private Guid ExecutionId => ExecutionId_ switch { not null => Guid.Parse(ExecutionId_), _ => Guid.Empty };

    private BSModal Modal { get; set; } = null!;

    private Execution? Execution { get; set; }
    private IEnumerable<StepExecutionAttempt> Executions =>
        Execution?.StepExecutions
        .SelectMany(e => e.StepExecutionAttempts)
        ?? Enumerable.Empty<StepExecutionAttempt>();

    private bool ShowGraph { get; set; } = false;

    private bool Loading { get; set; } = false;

    private bool JobExecutionDetailsOpen { get; set; } = false;

    private StepExecutionAttempt? SelectedStepExecution { get; set; }

    private bool Stopping => StoppingExecutions.Any(id => id == ExecutionId);

    private StepHistoryModal StepHistoryModal { get; set; } = null!;
    private string? HistoryModalStepId { get; set; }

    // Maintain a list executions that are being stopped.
    // This same component instance can be used to switch between different job executions.
    // This list allows for stopping multiple executions concurrently
    // and to modify the view based on which job execution is being shown.
    private List<Guid> StoppingExecutions { get; set; } = new();

    private StepExecutionAttempt SelectedStepExecutionModal { get; set; } = null!;

    private HashSet<StepExecutionStatus> StepStatusFilter { get; } = new();
    private HashSet<string> StepFilter { get; } = new();
    private HashSet<StepType> StepTypeFilter { get; } = new();
    private HashSet<string> TagFilter { get; } = new();
    private SortMode SortMode_ { get; set; } = SortMode.Started;
    private enum SortMode { Started, Duration }

    protected override async Task OnParametersSetAsync()
    {
        Execution = null;
        await LoadData();
    }

    private async Task LoadData()
    {
        if (ExecutionId != Guid.Empty)
        {
            Loading = true;
            var context = DbFactory.CreateDbContext();

            Execution = await context.Executions
                .Include(e => e.StepExecutions)
                .ThenInclude(e => e.StepExecutionAttempts)
                .Include(e => e.StepExecutions)
                .ThenInclude(e => (e as ParameterizedStepExecution)!.StepExecutionParameters)
                .Include(e => e.StepExecutions)
                .ThenInclude(e => e.Step)
                .ThenInclude(s => s!.Tags)
                .FirstOrDefaultAsync(e => e.ExecutionId == ExecutionId);
            StateHasChanged();
            Loading = false;
        }
    }

    private void ToggleSelectedStepExecution(StepExecutionAttempt execution)
    {
        SelectedStepExecution = SelectedStepExecution == execution ? null : execution;
        StateHasChanged();
    }

    private async Task StopJobExecutionAsync()
    {
        if (Stopping)
        {
            await JS.InvokeVoidAsync("alert", "Execution is already stopping");
            return;
        }

        StoppingExecutions.Add(ExecutionId);
        try
        {
            string username = HttpContextAccessor.HttpContext?.User?.Identity?.Name
                ?? throw new ArgumentNullException(nameof(username), "Username cannot be null");
            await (Execution?.StopExecutionAsync(username) ?? Task.CompletedTask);
        }
        catch (TimeoutException)
        {
            await JS.InvokeVoidAsync("alert", "Operation timed out. The executor process may no longer be running.");
            StoppingExecutions.RemoveAll(id => id == ExecutionId);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Error stopping execution:" + ex.Message);
            StoppingExecutions.RemoveAll(id => id == ExecutionId);
        }
    }

    private async Task StopStepExecutionAsync(StepExecutionAttempt stepExecution)
    {
        try
        {
            string username = HttpContextAccessor.HttpContext?.User?.Identity?.Name
                ?? throw new ArgumentNullException(nameof(username), "Username cannot be null");
            await stepExecution.StopExecutionAsync(username);
        }
        catch (TimeoutException)
        {
            await JS.InvokeVoidAsync("alert", "Operation timed out. The executor process may no longer be running.");
            StoppingExecutions.RemoveAll(id => id == ExecutionId);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "Error stopping execution:" + ex.Message);
            StoppingExecutions.RemoveAll(id => id == ExecutionId);
        }
    }

    private void ShowStepHistoryModal(string stepId)
    {
        HistoryModalStepId = stepId;
        StepHistoryModal.Show();
    }

    public void Show() => Modal.Show();

    private DateTime MinTime => Executions.Any() ? Executions.Min(e => e.StartDateTime?.LocalDateTime) ?? DateTime.Now : DateTime.Now;
    private DateTime MaxTime => Executions.Any() ? Executions.Max(e => e.EndDateTime?.LocalDateTime ?? DateTime.Now) : DateTime.Now;
    private long MinTicks => MinTime.Ticks;
    private long MaxTicks => MaxTime.Ticks;

    private string GetTimeFromPercentage(int percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("HH:mm:ss");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100;
        var time = new DateTime(ticks);
        return time.ToString("HH:mm:ss");
    }

    private string GetDateFromPercentage(int percentage)
    {
        if (MinTicks == MaxTicks)
            return DateTime.Now.ToString("d");

        var ticks = MinTicks + (MaxTicks - MinTicks) * percentage / 100;
        var time = new DateTime(ticks);
        return time.ToString("d");
    }

}
