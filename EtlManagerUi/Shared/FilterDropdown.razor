@typeparam TItem

@inject IWebHostEnvironment WebHostEnvironment

<BSDropdown>
    <BSDropdownToggle Size="Size.Small" Color="Color.Light" Class="@(FilterSet.Any() ? "font-weight-bold" : null)">
        @Title
    </BSDropdownToggle>
    <BSDropdownMenu Class="p-3" style="min-width: 15rem; max-height: 380px; overflow-y: auto;">
        <div class="row">
            <div class="col">
                <div class="row mb-2">
                    <div class="col">
                        <a href="javascript:void(0)"
                           @onclick="SelectAll">Select all</a>
                    </div>
                    <div class="col d-flex justify-content-end">
                        <a href="javascript:void(0)"
                           @onclick="Reset">Reset</a>
                    </div>
                </div>
                @if (IsSearchable)
                {
                    <div class="row mb-2">
                        <div class="col">
                            <div class="input-group input-group-sm">
                                <div class="input-group-prepend">
                                    <div class="input-group-text rounded-left">
                                        @((MarkupString)System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/search.svg")))
                                    </div>
                                </div>
                                <input type="text" class="form-control" @bind-value="SearchText" @bind-value:event="oninput" placeholder="Search" />
                            </div>
                        </div>
                    </div>
                }
                @foreach (var item in FilteredItems)
                {
                    <div class="row">
                        <div class="col">
                            <div class="custom-control custom-checkbox custom-control-inline">
                                <input type="checkbox" class="custom-control-input" id="@($"{ComponentInstanceId}_{item}")"
                                       checked=@FilterSet.Contains(item)
                                       @onchange="args => Toggle((bool)args.Value!, item)">
                                <label class="custom-control-label" for="@($"{ComponentInstanceId}_{item}")">
                                    @item.ToString()
                                </label>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </BSDropdownMenu>
</BSDropdown>

@code {
    [Parameter]
    public RenderFragment Title { get; set; } = @<p></p>;

    [Parameter]
    public ISet<TItem> FilterSet { get; set; } = new HashSet<TItem>();

    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = new List<TItem>();

    private IEnumerable<TItem> FilteredItems => Items
        .Where(i => string.IsNullOrEmpty(SearchText) || i?.ToString()?.ContainsIgnoreCase(SearchText) == true);

    [Parameter]
    public EventCallback OnChange { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; } = false;

    private Guid ComponentInstanceId { get; } = Guid.NewGuid();

    private string SearchText { get; set; } = "";

    private void Toggle(bool selected, TItem item)
    {
        if (selected)
        {
            FilterSet.Add(item);
        }
        else
        {
            FilterSet.Remove(item);
        }
        OnChange.InvokeAsync();
    }

    private void Reset()
    {
        FilterSet.Clear();
        OnChange.InvokeAsync();
    }

    private void SelectAll()
    {
        FilterSet.Clear();
        foreach (var item in FilteredItems)
        {
            FilterSet.Add(item);
        }
        OnChange.InvokeAsync();
    }

}
