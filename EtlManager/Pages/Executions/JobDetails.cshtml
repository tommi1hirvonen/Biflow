@page
@model EtlManager.Pages.Executions.JobDetailsModel
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment WebHostEnvironment
@{
    ViewData["Title"] = "Execution details";
}

<style>
    .vis-item {
        cursor: pointer;
        font-weight: bold;
    }

    .vis-item .vis-item-overflow {
        overflow: visible;
    }

    .running, .running.vis-selected {
        background-color: @GetFillFromStatus("RUNNING");
        border-color: @GetFillFromStatus("RUNNING", true);
        color: @GetFillFromStatus("RUNNING", true);
    }
    .completed, .completed.vis-selected {
        background-color: @GetFillFromStatus("COMPLETED");
        border-color: @GetFillFromStatus("COMPLETED", true);
        color: @GetFillFromStatus("COMPLETED", true);
    }
    .failed, .failed.vis-selected {
        background-color: @GetFillFromStatus("FAILED");
        border-color: @GetFillFromStatus("FAILED", true);
        color: @GetFillFromStatus("FAILED", true);
    }
    .skipped, .skipped.vis-selected {
        background-color: @GetFillFromStatus("SKIPPED");
        border-color: @GetFillFromStatus("SKIPPED", true);
        color: @GetFillFromStatus("SKIPPED", true);
    }
    .stopped, .stopped.vis-selected {
        background-color: @GetFillFromStatus("STOPPED");
        border-color: @GetFillFromStatus("STOPPED", true);
        color: @GetFillFromStatus("STOPPED", true);
    }
    .duplicate, .duplicate.vis-selected {
        background-color: @GetFillFromStatus("DUPLICATE");
        border-color: @GetFillFromStatus("DUPLICATE", true);
        color: @GetFillFromStatus("DUPLICATE", true);
    }
    .await-retry, .await-retry.vis-selected {
        background-color: @GetFillFromStatus("AWAIT RETRY");
        border-color: @GetFillFromStatus("AWAIT RETRY", true);
        color: @GetFillFromStatus("AWAIT RETRY", true);
    }
</style>

<h4>@Model.JobExecution.JobName</h4>

<div class="btn-toolbar mt-3" role="toolbar">
    <div class="btn-group btn-group-sm mr-2" role="group">
        <a id="button_refresh" class="btn btn-primary btn-sm" asp-page="./JobDetails" asp-route-id="@Model.JobExecution.ExecutionId" asp-route-graph="@Model.Graph">
            @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/refresh-cw.svg")))
            Refresh
        </a>
    </div>
    <div class="btn-group btn-group-sm mr-2" role="group">
        <button class="btn btn-light btn-sm" type="button" data-toggle="collapse" data-target="#jobDetails" aria-expanded="false" aria-controls="jobDetails">
            @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/info.svg")))
            Job details
        </button>
    </div>
    <div class="btn-group btn-group-sm mr-2" role="group">
        <button id="button_toggle_graph" class="btn btn-light @(Model.Graph ? "active" : "")" onclick="toggleGraph()">
            @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/bar-chart-steps.svg")))
            Graph
        </button>
        <button id="button_toggle_table" class="btn btn-light @(Model.Graph ? "" : "active")" onclick="toggleTable()">
            @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/bootstrap/table.svg")))
            Table
        </button>
    </div>
</div>

@if (Model.JobExecution.ExecutionStatus == "RUNNING" && Model.IsOperator)
{
    <div class="btn-toolbar mt-3" role="toolbar">
        <div class="btn-group">
            <button id="button_stop_execution" type="button" class="btn btn-danger btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @Html.Raw(System.IO.File.ReadAllText(System.IO.Path.Combine(WebHostEnvironment.WebRootPath, "icons/feather/x-octagon.svg")))
                Stop execution
            </button>
            <div class="dropdown-menu">
                <button class="dropdown-item" onclick="stopExecution()">Confirm</button>
            </div>
        </div>
        <div id="spinner_stopping" class="spinner-border text-primary align-middle ml-3" hidden role="status">
            <span class="sr-only">Stopping...</span>
        </div>
    </div>
}

<div class="row my-1">
    <p></p>
</div>

<div class="collapse shadow-sm" id="jobDetails">
    <div class="card card-body">
        <dl class="row">
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.JobExecution.ExecutionId)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.JobExecution.ExecutionId)
            </dd>
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.JobExecution.JobId)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.JobExecution.JobId)
            </dd>
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.JobExecution.DependencyMode)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.JobExecution.DependencyMode)
            </dd>
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.JobExecution.CreatedBy)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.JobExecution.CreatedBy)
            </dd>
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.JobExecution.CreatedDateTime)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.JobExecution.CreatedDateTime)
            </dd>
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.JobExecution.StartDateTime)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.JobExecution.StartDateTime)
            </dd>
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.JobExecution.EndDateTime)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.JobExecution.EndDateTime)
            </dd>
            <dt class="col-sm-3">
                Number of steps
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.JobExecution.NumberOfSteps)
            </dd>
            <dt class="col-sm-3">
                Success percent
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.JobExecution.SuccessPercent)
            </dd>
            <dt class="col-sm-3">
                Duration
            </dt>
            <dd class="col-sm-9">
                <text>@Model.JobExecution.GetDurationInReadableFormat()</text>
            </dd>
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.JobExecution.ExecutionStatus)
            </dt>
            <dd class="col-sm-9">
                <partial name="_JobExecutionStatusBadgePartial" model="Model.JobExecution" />
            </dd>
        </dl>
    </div>
</div>

<div class="row my-1">
    <p></p>
</div>

<div class="card shadow-sm pt-2" id="steps_table_div" style="@(Model.Graph ? "display: none;" : "")">
    <table class="table table-sm table-hover">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Executions[0].StepName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Executions[0].StepType)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Executions[0].StartDateTime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Executions[0].EndDateTime)
                </th>
                <th>
                    Duration
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Executions[0].ExecutionStatus)
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Executions)
            {
                <tr style="cursor: pointer;" data-toggle="modal" data-target="#modal_@item.StepExecutionId">
                    <td>
                        @Html.DisplayFor(modelItem => item.StepName)
                    </td>
                    <td>
                        <partial name="_StepTypeIconPartial" model="@(new EtlManager.Pages.Shared._StepTypeIconPartialModel { StepType = item.StepType })" />
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.StartDateTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EndDateTime)
                    </td>
                    <td>
                        <text>@item.GetDurationInReadableFormat()</text>
                    </td>
                    <td>
                        <partial name="_StepExecutionStatusBadgePartial" model="item" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="card shadow-sm p-4" id="steps_graph_div" style="@(Model.Graph ? "" : "display: none;")">
    <div id="steps_graph">
    </div>
</div>



@functions {
    string colorRed = "#FEDEE5";
    string colorRedDark = "#823040";
    string colorGreen = "#CEF5EA";
    string colorGreenDark = "#056C4F";
    string colorOrange = "#FFF2CC";
    string colorOrangeDark = "#856200";
    string colorBlue = "#E3E5FD";
    string colorBlueDark = "#3B40A7";

    public string GetFillFromStatus(string status, bool dark = false)
    {
        switch (status)
        {
            case "COMPLETED":
                return dark ? colorGreenDark : colorGreen;
            case "FAILED":
                return dark ? colorRedDark : colorRed;
            case "SKIPPED":
            case "STOPPED":
            case "DUPLICATE":
            case "AWAIT RETRY":
                return dark ? colorOrangeDark : colorOrange;
            case "RUNNING":
            default:
                return dark ? colorBlueDark : colorBlue;
        }
    }
}

@section Scripts {
    <script src="~/lib/vis-timeline/standalone/umd/vis-timeline-graph2d.min.js"></script>
    <script type="text/javascript">
        var executionId = "@Model.JobExecution.ExecutionId";
        var graph = @(Model.Graph ? "true" : "false");

        var items = new vis.DataSet([
                @Html.Raw(string.Join(',', Model.Executions.Where(e => e.StartDateTime != null).Select(e =>
                @"{ id: '" + e.StepExecutionId +
                @"', content: '" + e.StepName +
                @"', title: '" + e.ExecutionStatus + ", " + e.GetDurationInReadableFormat() +
                @"', className: '" + e.ExecutionStatus.ToLower().Replace(' ', '-') +
                @"', start: '" + e.StartDateTime?.ToString("yyyy-MM-dd HH':'mm':'ss") +
                @"', end: '" + (e.EndDateTime ?? DateTime.Now).ToString("yyyy-MM-dd HH':'mm':'ss") +
                "' }")))
            ]);

        function updateRefreshLink() {
            $('#button_refresh').attr('href', "/Executions/JobDetails?id=" + executionId + "&graph=" + graph);
        }

        function toggleTable() {
            $('#steps_graph_div').hide();
            $('#steps_table_div').show();
            $('#button_toggle_graph').removeClass('active');
            $('#button_toggle_table').addClass('active');
            $('#button_group_graph').hide();
            graph = false;
            updateRefreshLink();
        }

        function toggleGraph() {
            $('#steps_table_div').hide();
            $('#steps_graph_div').show();
            $('#button_toggle_table').removeClass('active');
            $('#button_toggle_graph').addClass('active');
            $('#button_group_graph').show();
            graph = true;
            updateRefreshLink();
        }


        $(function () {
            var container = document.getElementById('steps_graph');

            var options = {
                order: function (a, b) {
                    return b.start - a.start;
                },
                editable: false
            };

            var timeline = new vis.Timeline(container, items, options);

            timeline.on('select', function (properties) {
                var item = items.get(properties.items[0]);
                var id = 'modal_' + item.id;
                $('#' + id).modal();
            });
        });


        function stopExecution() {
            var executionId = "@Model.JobExecution.ExecutionId";
            $('#button_stop_execution').attr("disabled", "true");
            $('#spinner_stopping').removeAttr("hidden");

            $.ajax({
                url: "./JobDetails?handler=StopJobExecution",
                method: "POST",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: {
                    id: executionId
                },
                success: function (response) {
                    if (response.success) {
                        $('#spinner_stopping').attr("hidden", "hidden");
                        alert('Execution stopped successfully');
                    } else {
                        $('#button_stop_execution').removeAttr("disabled");
                        $('#spinner_stopping').attr("hidden", "hidden");
                        alert(response.responseText);
                    }
                },
                error: function (response) {
                    $('#button_stop_execution').removeAttr("disabled");
                    $('#spinner_stopping').attr("hidden", "hidden");
                    alert('Error stopping execution: AJAX error, try logging in again');
                }
            });
        }

    </script>
}




@*Generate modal popup windows to display step execution details*@
@foreach (var item in Model.Executions)
{
    <div class="modal fade" id="modal_@item.StepExecutionId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@item.StepName</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <partial name="_StepExecutionDetailsPartial" model="item" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
