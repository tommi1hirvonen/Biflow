// <auto-generated />
using System;
using Biflow.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biflow.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240320163818_ExecutionForeignKeyChanges")]
    partial class ExecutionForeignKeyChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Biflow.Core.Entities.AccessToken", b =>
                {
                    b.Property<Guid>("AppRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResourceUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTimeOffset>("ExpiresOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppRegistrationId", "ResourceUrl");

                    b.ToTable("AccessToken", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("ApiKey", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.AppRegistration", b =>
                {
                    b.Property<Guid>("AppRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppRegistrationName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.HasKey("AppRegistrationId");

                    b.ToTable("AppRegistration", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.BlobStorageClient", b =>
                {
                    b.Property<Guid>("BlobStorageClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobStorageClientName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConnectionMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("StorageAccountUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("BlobStorageClientId");

                    b.ToTable("BlobStorageClient", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ConnectionInfoBase", b =>
                {
                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ConnectionId");

                    b.ToTable("Connection", "app");

                    b.HasDiscriminator<string>("ConnectionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Biflow.Core.Entities.Credential", b =>
                {
                    b.Property<Guid>("CredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Domain")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CredentialId");

                    b.ToTable("Credential", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.DataObject", b =>
                {
                    b.Property<Guid>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxConcurrentWrites")
                        .HasColumnType("int");

                    b.Property<string>("ObjectUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ObjectId");

                    b.HasIndex(new[] { "ObjectUri" }, "UQ_DataObject")
                        .IsUnique();

                    b.ToTable("DataObject", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Dependency", b =>
                {
                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DependantOnStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DependencyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("StepId", "DependantOnStepId");

                    b.ToTable("Dependency", "app", t =>
                        {
                            t.HasCheckConstraint("CK_Dependency", "[StepId]<>[DependantOnStepId]");
                        });
                });

            modelBuilder.Entity("Biflow.Core.Entities.EnvironmentVersion", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VersionId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Snapshot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VersionId");

                    b.ToTable("EnvironmentVersion", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Execution", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CronExpression")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTimeOffset?>("EndedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExecutionMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ExecutionStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ExecutorProcessId")
                        .HasColumnType("int");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MaxParallelSteps")
                        .HasColumnType("int");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<string>("NotifyCaller")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("NotifyCallerOvertime")
                        .HasColumnType("bit");

                    b.Property<double>("OvertimeNotificationLimitMinutes")
                        .HasColumnType("float");

                    b.Property<string>("ParentExecution")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScheduleName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset?>("StartedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("StopOnFirstError")
                        .HasColumnType("bit");

                    b.HasKey("ExecutionId");

                    b.HasIndex(new[] { "CreatedOn", "EndedOn" }, "IX_Execution_CreatedOn_EndedOn");

                    b.HasIndex(new[] { "ExecutionStatus" }, "IX_Execution_ExecutionStatus");

                    b.HasIndex(new[] { "JobId", "CreatedOn" }, "IX_Execution_JobId_CreatedOn");

                    b.ToTable("Execution", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionConcurrency", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StepType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MaxParallelSteps")
                        .HasColumnType("int");

                    b.HasKey("ExecutionId", "StepType");

                    b.ToTable("ExecutionConcurrency", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionConditionParameter", b =>
                {
                    b.Property<Guid>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<object>("ParameterValue")
                        .HasColumnType("sql_variant");

                    b.Property<string>("ParameterValueType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParameterId");

                    b.HasIndex(new[] { "StepId", "ParameterName" }, "UQ_StepConditionParameter")
                        .IsUnique();

                    b.ToTable("StepConditionParameter", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionDataObject", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxConcurrentWrites")
                        .HasColumnType("int");

                    b.Property<string>("ObjectUri")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ExecutionId", "ObjectId");

                    b.ToTable("ExecutionDataObject", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionDependency", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DependantOnStepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DependantOnStepId");

                    b.Property<string>("DependencyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ExecutionId", "StepId", "DependantOnStepId");

                    b.ToTable("ExecutionDependency", "app", t =>
                        {
                            t.HasCheckConstraint("CK_ExecutionDependency", "[StepId]<>[DependantOnStepId]");
                        });
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionParameter", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<object>("DefaultValue")
                        .HasColumnType("sql_variant");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<object>("ParameterValue")
                        .HasColumnType("sql_variant");

                    b.Property<string>("ParameterValueType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("UseExpression")
                        .HasColumnType("bit");

                    b.HasKey("ExecutionId", "ParameterId");

                    b.ToTable("ExecutionParameter", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionApp", b =>
                {
                    b.Property<Guid>("FunctionAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FunctionAppKey")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FunctionAppName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ResourceGroupName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("FunctionAppId");

                    b.ToTable("FunctionApp", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExecutionMode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MaxParallelSteps")
                        .HasColumnType("int");

                    b.Property<double>("OvertimeNotificationLimitMinutes")
                        .HasColumnType("float");

                    b.Property<bool>("StopOnFirstError")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("JobId");

                    b.ToTable("Job", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobConcurrency", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StepType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MaxParallelSteps")
                        .HasColumnType("int");

                    b.HasKey("JobId", "StepType");

                    b.ToTable("JobConcurrency", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobParameter", b =>
                {
                    b.Property<Guid>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobId");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<object>("ParameterValue")
                        .HasColumnType("sql_variant");

                    b.Property<string>("ParameterValueType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("UseExpression")
                        .HasColumnType("bit");

                    b.HasKey("ParameterId");

                    b.HasIndex(new[] { "JobId", "ParameterName" }, "UQ_JobParameter")
                        .IsUnique();

                    b.ToTable("JobParameter", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.MasterDataTable", b =>
                {
                    b.Property<Guid>("DataTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowImport")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowInsert")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowUpdate")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DataTableCategoryId");

                    b.Property<string>("ColumnOrder")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<Guid>("ConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataTableDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTableName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HiddenColumns")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("LockedColumns")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<bool>("LockedColumnsExcludeMode")
                        .HasColumnType("bit");

                    b.Property<string>("TargetSchemaName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TargetTableName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("DataTableId");

                    b.ToTable("DataTable", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.MasterDataTableCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DataTableCategoryId");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("DataTableCategoryName");

                    b.HasKey("CategoryId");

                    b.HasIndex(new[] { "CategoryName" }, "UQ_DataTableCategory")
                        .IsUnique();

                    b.ToTable("DataTableCategory", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.MasterDataTableLookup", b =>
                {
                    b.Property<Guid>("LookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LookupDescriptionColumn")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LookupDisplayType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("LookupTableId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LookupDataTableId");

                    b.Property<string>("LookupValueColumn")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DataTableId");

                    b.HasKey("LookupId");

                    b.HasIndex(new[] { "TableId", "ColumnName" }, "UQ_DataTableLookup")
                        .IsUnique();

                    b.ToTable("DataTableLookup", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineClient", b =>
                {
                    b.Property<Guid>("PipelineClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppRegistrationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PipelineClientName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PipelineClientType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PipelineClientId");

                    b.ToTable("PipelineClient", "app");

                    b.HasDiscriminator<string>("PipelineClientType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Biflow.Core.Entities.QlikCloudClient", b =>
                {
                    b.Property<Guid>("QlikCloudClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiToken")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("EnvironmentUrl")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("QlikCloudClientName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("QlikCloudClientId");

                    b.ToTable("QlikCloudClient", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("DisallowConcurrentExecution")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScheduleName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ScheduleId");

                    b.HasIndex(new[] { "JobId", "CronExpression" }, "UQ_Schedule")
                        .IsUnique();

                    b.ToTable("Schedule", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Step", b =>
                {
                    b.Property<Guid>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DuplicateExecutionBehaviour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ExecutionPhase")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RetryAttempts")
                        .HasColumnType("int");

                    b.Property<double>("RetryIntervalMinutes")
                        .HasColumnType("float");

                    b.Property<string>("StepDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StepId");

                    b.ToTable("Step", "app");

                    b.HasDiscriminator<string>("StepType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepDataObject", b =>
                {
                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DataAttributes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("StepId", "ObjectId", "ReferenceType");

                    b.ToTable("StepDataObject", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecution", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DuplicateExecutionBehaviour")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ExecutionPhase")
                        .HasColumnType("int");

                    b.Property<int>("RetryAttempts")
                        .HasColumnType("int");

                    b.Property<double>("RetryIntervalMinutes")
                        .HasColumnType("float");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ExecutionId", "StepId");

                    b.ToTable("ExecutionStep", "app");

                    b.HasDiscriminator<string>("StepType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionAttempt", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RetryAttemptIndex")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("EndedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExecutionStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("StartedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StoppedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("_errorMessages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ErrorMessages");

                    b.Property<string>("_infoMessages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("InfoMessages");

                    b.Property<string>("_warningMessages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WarningMessages");

                    b.HasKey("ExecutionId", "StepId", "RetryAttemptIndex");

                    b.ToTable("ExecutionStepAttempt", "app");

                    b.HasDiscriminator<string>("StepType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionConditionParameter", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExecutionId");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExecutionParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<object>("ExecutionParameterValue")
                        .HasColumnType("sql_variant");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<object>("ParameterValue")
                        .HasColumnType("sql_variant");

                    b.Property<string>("ParameterValueType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StepId");

                    b.HasKey("ExecutionId", "ParameterId");

                    b.ToTable("ExecutionStepConditionParameter", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionDataObject", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataAttributes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ExecutionId", "StepId", "ObjectId");

                    b.ToTable("ExecutionStepDataObject", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionParameterBase", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<object>("ExecutionParameterValue")
                        .HasColumnType("sql_variant");

                    b.Property<Guid?>("InheritFromExecutionParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<object>("ParameterValue")
                        .HasColumnType("sql_variant");

                    b.Property<string>("ParameterValueType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("UseExpression")
                        .HasColumnType("bit");

                    b.HasKey("ExecutionId", "ParameterId");

                    b.ToTable("ExecutionStepParameter", "app");

                    b.HasDiscriminator<string>("ParameterType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionParameterExpressionParameter", b =>
                {
                    b.Property<Guid>("ExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InheritFromExecutionParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("StepParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExecutionId", "ParameterId");

                    b.HasIndex(new[] { "ExecutionId", "StepParameterId", "ParameterName" }, "UQ_ExecutionStepParameterExpressionParameter")
                        .IsUnique();

                    b.ToTable("ExecutionStepParameterExpressionParameter", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepParameterBase", b =>
                {
                    b.Property<Guid>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InheritFromJobParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<object>("ParameterValue")
                        .HasColumnType("sql_variant");

                    b.Property<string>("ParameterValueType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StepId");

                    b.Property<bool>("UseExpression")
                        .HasColumnType("bit");

                    b.HasKey("ParameterId");

                    b.ToTable("StepParameter", "app");

                    b.HasDiscriminator<string>("ParameterType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepParameterExpressionParameter", b =>
                {
                    b.Property<Guid>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InheritFromJobParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("StepParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParameterId");

                    b.HasIndex(new[] { "StepParameterId", "ParameterName" }, "UQ_StepParameterExpressionParameter")
                        .IsUnique();

                    b.ToTable("StepParameterExpressionParameter", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscription", "app");

                    b.HasDiscriminator<string>("SubscriptionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Biflow.Core.Entities.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TagId");

                    b.HasIndex(new[] { "TagName" }, "UQ_TagName")
                        .IsUnique();

                    b.ToTable("Tag", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AuthorizeAllDataTables")
                        .HasColumnType("bit");

                    b.Property<bool>("AuthorizeAllJobs")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .IsUnicode(false)
                        .HasColumnType("varchar(254)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("_roles")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Roles");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Username" }, "UQ_User")
                        .IsUnique();

                    b.ToTable("User", "app");
                });

            modelBuilder.Entity("DataTableAuthorization", b =>
                {
                    b.Property<Guid>("DataTableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DataTableId", "UserId");

                    b.ToTable("DataTableAuthorization", "app");
                });

            modelBuilder.Entity("JobAuthorization", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobId", "UserId");

                    b.ToTable("JobAuthorization", "app");
                });

            modelBuilder.Entity("JobStepTagFilter", b =>
                {
                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StepId", "TagId");

                    b.ToTable("JobStepTagFilter", "app");
                });

            modelBuilder.Entity("ScheduleTag", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleId", "TagId");

                    b.ToTable("ScheduleTag", "app");
                });

            modelBuilder.Entity("StepTag", b =>
                {
                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StepId", "TagId");

                    b.ToTable("StepTag", "app");
                });

            modelBuilder.Entity("Biflow.Core.Entities.AnalysisServicesConnectionInfo", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.ConnectionInfoBase");

                    b.HasDiscriminator().HasValue("AnalysisServices");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlConnectionInfo", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.ConnectionInfoBase");

                    b.Property<string>("ExecutePackagesAsLogin")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasDiscriminator().HasValue("Sql");
                });

            modelBuilder.Entity("Biflow.Core.Entities.DataFactory", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.PipelineClient");

                    b.Property<string>("ResourceGroupName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ResourceGroupName");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("ResourceName");

                    b.Property<string>("SubscriptionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("SubscriptionId");

                    b.HasDiscriminator().HasValue("DataFactory");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SynapseWorkspace", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.PipelineClient");

                    b.Property<string>("SynapseWorkspaceUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasDiscriminator().HasValue("Synapse");
                });

            modelBuilder.Entity("Biflow.Core.Entities.AgentJobStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<string>("AgentJobName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConnectionId");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("AgentJob");
                });

            modelBuilder.Entity("Biflow.Core.Entities.DatasetStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<Guid>("AppRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DatasetGroupId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("DatasetId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasDiscriminator().HasValue("Dataset");
                });

            modelBuilder.Entity("Biflow.Core.Entities.EmailStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailBody");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailRecipients");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailSubject");

                    b.HasDiscriminator().HasValue("Email");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExeStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<string>("ExeArguments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExeFileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ExeSuccessExitCode")
                        .HasColumnType("int");

                    b.Property<string>("ExeWorkingDirectory")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("RunAsCredentialId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExeRunAsCredentialId");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Exe");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<Guid>("FunctionAppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FunctionInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FunctionIsDurable")
                        .HasColumnType("bit");

                    b.Property<string>("FunctionKey")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FunctionUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Function");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<bool>("JobExecuteSynchronized")
                        .HasColumnType("bit");

                    b.Property<Guid?>("JobToExecuteId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PackageStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConnectionId");

                    b.Property<string>("ExecuteAsLogin")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("ExecuteIn32BitMode")
                        .HasColumnType("bit");

                    b.Property<string>("PackageFolderName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<string>("PackageProjectName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Package");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<Guid>("PipelineClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PipelineName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Pipeline");
                });

            modelBuilder.Entity("Biflow.Core.Entities.QlikStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<Guid>("QlikCloudClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Qlik");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConnectionId");

                    b.Property<Guid?>("ResultCaptureJobParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SqlStatement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Sql");
                });

            modelBuilder.Entity("Biflow.Core.Entities.TabularStep", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Step");

                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConnectionId");

                    b.Property<string>("TabularModelName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TabularPartitionName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TabularTableName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Tabular");
                });

            modelBuilder.Entity("Biflow.Core.Entities.AgentJobStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<string>("AgentJobName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConnectionId");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("AgentJob");
                });

            modelBuilder.Entity("Biflow.Core.Entities.DatasetStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<Guid>("AppRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DatasetGroupId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("DatasetId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasDiscriminator().HasValue("Dataset");
                });

            modelBuilder.Entity("Biflow.Core.Entities.EmailStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailBody");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailRecipients");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailSubject");

                    b.HasDiscriminator().HasValue("Email");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExeStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<string>("ExeArguments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExeFileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ExeSuccessExitCode")
                        .HasColumnType("int");

                    b.Property<string>("ExeWorkingDirectory")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("RunAsCredentialId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExeRunAsCredentialId");

                    b.Property<string>("RunAsUsername")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("ExeRunAsUsername");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Exe");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<Guid>("FunctionAppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FunctionInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FunctionIsDurable")
                        .HasColumnType("bit");

                    b.Property<string>("FunctionUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Function");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<bool>("JobExecuteSynchronized")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobToExecuteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_tagFilters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TagFilters");

                    b.HasDiscriminator().HasValue("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PackageStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConnectionId");

                    b.Property<string>("ExecuteAsLogin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ExecuteIn32BitMode")
                        .HasColumnType("bit");

                    b.Property<string>("PackageFolderName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<string>("PackageProjectName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Package");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<Guid>("PipelineClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PipelineName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Pipeline");
                });

            modelBuilder.Entity("Biflow.Core.Entities.QlikStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<Guid>("QlikCloudClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Qlik");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConnectionId");

                    b.Property<Guid?>("ResultCaptureJobParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<object>("ResultCaptureJobParameterValue")
                        .HasColumnType("sql_variant");

                    b.Property<string>("SqlStatement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Sql");
                });

            modelBuilder.Entity("Biflow.Core.Entities.TabularStepExecution", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecution");

                    b.Property<Guid>("ConnectionId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ConnectionId");

                    b.Property<string>("TabularModelName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TabularPartitionName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TabularTableName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("TimeoutMinutes")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("TimeoutMinutes");

                    b.HasDiscriminator().HasValue("Tabular");
                });

            modelBuilder.Entity("Biflow.Core.Entities.AgentJobStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.HasDiscriminator().HasValue("AgentJob");
                });

            modelBuilder.Entity("Biflow.Core.Entities.DatasetStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.HasDiscriminator().HasValue("Dataset");
                });

            modelBuilder.Entity("Biflow.Core.Entities.EmailStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.HasDiscriminator().HasValue("Email");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExeStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.Property<int?>("ExeProcessId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Exe");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.Property<string>("FunctionInstanceId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasDiscriminator().HasValue("Function");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.Property<Guid?>("ChildJobExecutionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PackageStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.Property<long?>("PackageOperationId")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Package");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.Property<string>("PipelineRunId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasDiscriminator().HasValue("Pipeline");
                });

            modelBuilder.Entity("Biflow.Core.Entities.QlikStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.Property<string>("ReloadId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Qlik");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.HasDiscriminator().HasValue("Sql");
                });

            modelBuilder.Entity("Biflow.Core.Entities.TabularStepExecutionAttempt", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionAttempt");

                    b.HasDiscriminator().HasValue("Tabular");
                });

            modelBuilder.Entity("Biflow.Core.Entities.EmailStepExecutionParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionParameterBase");

                    b.HasDiscriminator().HasValue("Email");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExeStepExecutionParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionParameterBase");

                    b.HasDiscriminator().HasValue("Exe");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionStepExecutionParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionParameterBase");

                    b.HasDiscriminator().HasValue("Function");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobStepExecutionParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionParameterBase");

                    b.Property<Guid>("AssignToJobParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PackageStepExecutionParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionParameterBase");

                    b.Property<string>("ParameterLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasDiscriminator().HasValue("Package");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineStepExecutionParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionParameterBase");

                    b.HasDiscriminator().HasValue("Pipeline");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStepExecutionParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepExecutionParameterBase");

                    b.HasDiscriminator().HasValue("Sql");
                });

            modelBuilder.Entity("Biflow.Core.Entities.EmailStepParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepParameterBase");

                    b.HasDiscriminator().HasValue("Email");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExeStepParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepParameterBase");

                    b.HasDiscriminator().HasValue("Exe");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionStepParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepParameterBase");

                    b.HasDiscriminator().HasValue("Function");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobStepParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepParameterBase");

                    b.Property<Guid>("AssignToJobParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PackageStepParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepParameterBase");

                    b.Property<string>("ParameterLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasIndex(new[] { "StepId", "ParameterLevel", "ParameterName" }, "UQ_StepParameter")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Package");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineStepParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepParameterBase");

                    b.HasDiscriminator().HasValue("Pipeline");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStepParameter", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.StepParameterBase");

                    b.HasDiscriminator().HasValue("Sql");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobSubscription", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Subscription");

                    b.Property<string>("AlertType")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AlertType");

                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobId");

                    b.Property<bool>("NotifyOnOvertime")
                        .HasColumnType("bit");

                    b.HasIndex(new[] { "UserId", "JobId" }, "IX_UQ_Subscription_JobSubscription")
                        .IsUnique()
                        .HasFilter("[SubscriptionType] = 'Job'");

                    b.HasDiscriminator().HasValue("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobTagSubscription", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Subscription");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AlertType");

                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobId");

                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TagId");

                    b.HasIndex(new[] { "UserId", "JobId", "TagId" }, "IX_UQ_Subscription_JobTagSubscription")
                        .IsUnique()
                        .HasFilter("[SubscriptionType] = 'JobTag'");

                    b.HasDiscriminator().HasValue("JobTag");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepSubscription", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Subscription");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AlertType");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StepId");

                    b.HasIndex(new[] { "UserId", "StepId" }, "IX_UQ_Subscription_StepSubscription")
                        .IsUnique()
                        .HasFilter("[SubscriptionType] = 'Step'");

                    b.HasDiscriminator().HasValue("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.TagSubscription", b =>
                {
                    b.HasBaseType("Biflow.Core.Entities.Subscription");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AlertType");

                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TagId");

                    b.HasIndex(new[] { "UserId", "TagId" }, "IX_UQ_Subscription_TagSubscription")
                        .IsUnique()
                        .HasFilter("[SubscriptionType] = 'Tag'");

                    b.HasDiscriminator().HasValue("Tag");
                });

            modelBuilder.Entity("Biflow.Core.Entities.AccessToken", b =>
                {
                    b.HasOne("Biflow.Core.Entities.AppRegistration", "AppRegistration")
                        .WithMany("AccessTokens")
                        .HasForeignKey("AppRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRegistration");
                });

            modelBuilder.Entity("Biflow.Core.Entities.BlobStorageClient", b =>
                {
                    b.HasOne("Biflow.Core.Entities.AppRegistration", "AppRegistration")
                        .WithMany("BlobStorageClients")
                        .HasForeignKey("AppRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppRegistration");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Dependency", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Step", "DependantOnStep")
                        .WithMany("Depending")
                        .HasForeignKey("DependantOnStepId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.Step", "Step")
                        .WithMany("Dependencies")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("DependantOnStep");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionConcurrency", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Execution", "Execution")
                        .WithMany("ExecutionConcurrencies")
                        .HasForeignKey("ExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Execution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionConditionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.JobParameter", "JobParameter")
                        .WithMany("ExecutionConditionParameters")
                        .HasForeignKey("JobParameterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Biflow.Core.Entities.Step", "Step")
                        .WithMany("ExecutionConditionParameters")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobParameter");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionDataObject", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Execution", "Execution")
                        .WithMany("DataObjects")
                        .HasForeignKey("ExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Execution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionDependency", b =>
                {
                    b.HasOne("Biflow.Core.Entities.StepExecution", "StepExecution")
                        .WithMany("ExecutionDependencies")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Execution", "Execution")
                        .WithMany("ExecutionParameters")
                        .HasForeignKey("ExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Biflow.Core.Entities.EvaluationExpression", "Expression", b1 =>
                        {
                            b1.Property<Guid>("ExecutionParameterExecutionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ExecutionParameterParameterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Expression")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Expression");

                            b1.HasKey("ExecutionParameterExecutionId", "ExecutionParameterParameterId");

                            b1.ToTable("ExecutionParameter", "app");

                            b1.WithOwner()
                                .HasForeignKey("ExecutionParameterExecutionId", "ExecutionParameterParameterId");
                        });

                    b.Navigation("Execution");

                    b.Navigation("Expression")
                        .IsRequired();
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionApp", b =>
                {
                    b.HasOne("Biflow.Core.Entities.AppRegistration", "AppRegistration")
                        .WithMany("FunctionApps")
                        .HasForeignKey("AppRegistrationId")
                        .IsRequired();

                    b.Navigation("AppRegistration");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobConcurrency", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Job", "Job")
                        .WithMany("JobConcurrencies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Job", "Job")
                        .WithMany("JobParameters")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsOne("Biflow.Core.Entities.EvaluationExpression", "Expression", b1 =>
                        {
                            b1.Property<Guid>("JobParameterParameterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Expression")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Expression");

                            b1.HasKey("JobParameterParameterId");

                            b1.ToTable("JobParameter", "app");

                            b1.WithOwner()
                                .HasForeignKey("JobParameterParameterId");
                        });

                    b.Navigation("Expression")
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.MasterDataTable", b =>
                {
                    b.HasOne("Biflow.Core.Entities.MasterDataTableCategory", "Category")
                        .WithMany("Tables")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Biflow.Core.Entities.SqlConnectionInfo", "Connection")
                        .WithMany("DataTables")
                        .HasForeignKey("ConnectionId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Biflow.Core.Entities.MasterDataTableLookup", b =>
                {
                    b.HasOne("Biflow.Core.Entities.MasterDataTable", "LookupTable")
                        .WithMany("DependentLookups")
                        .HasForeignKey("LookupTableId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.MasterDataTable", "Table")
                        .WithMany("Lookups")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("LookupTable");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineClient", b =>
                {
                    b.HasOne("Biflow.Core.Entities.AppRegistration", "AppRegistration")
                        .WithMany("PipelineClients")
                        .HasForeignKey("AppRegistrationId")
                        .IsRequired();

                    b.Navigation("AppRegistration");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Schedule", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Job", "Job")
                        .WithMany("Schedules")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Step", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Job", "Job")
                        .WithMany("Steps")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsOne("Biflow.Core.Entities.EvaluationExpression", "ExecutionConditionExpression", b1 =>
                        {
                            b1.Property<Guid>("StepId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Expression")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ExecutionConditionExpression");

                            b1.HasKey("StepId");

                            b1.ToTable("Step", "app");

                            b1.WithOwner()
                                .HasForeignKey("StepId");
                        });

                    b.Navigation("ExecutionConditionExpression")
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepDataObject", b =>
                {
                    b.HasOne("Biflow.Core.Entities.DataObject", "DataObject")
                        .WithMany("Steps")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.Step", "Step")
                        .WithMany("DataObjects")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataObject");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecution", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Execution", "Execution")
                        .WithMany("StepExecutions")
                        .HasForeignKey("ExecutionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsOne("Biflow.Core.Entities.EvaluationExpression", "ExecutionConditionExpression", b1 =>
                        {
                            b1.Property<Guid>("StepExecutionExecutionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("StepExecutionStepId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Expression")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ExecutionConditionExpression");

                            b1.HasKey("StepExecutionExecutionId", "StepExecutionStepId");

                            b1.ToTable("ExecutionStep", "app");

                            b1.WithOwner()
                                .HasForeignKey("StepExecutionExecutionId", "StepExecutionStepId");
                        });

                    b.Navigation("Execution");

                    b.Navigation("ExecutionConditionExpression")
                        .IsRequired();
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionAttempt", b =>
                {
                    b.HasOne("Biflow.Core.Entities.StepExecution", "StepExecution")
                        .WithMany("StepExecutionAttempts")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionConditionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.ExecutionParameter", "ExecutionParameter")
                        .WithMany("ExecutionConditionParameters")
                        .HasForeignKey("ExecutionId", "ExecutionParameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biflow.Core.Entities.StepExecution", "StepExecution")
                        .WithMany("ExecutionConditionParameters")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionParameter");

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionDataObject", b =>
                {
                    b.HasOne("Biflow.Core.Entities.ExecutionDataObject", "DataObject")
                        .WithMany("StepExecutions")
                        .HasForeignKey("ExecutionId", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.StepExecution", "StepExecution")
                        .WithMany("DataObjects")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataObject");

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionParameterBase", b =>
                {
                    b.HasOne("Biflow.Core.Entities.ExecutionParameter", "InheritFromExecutionParameter")
                        .WithMany("StepExecutionParameters")
                        .HasForeignKey("ExecutionId", "InheritFromExecutionParameterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Biflow.Core.Entities.EvaluationExpression", "Expression", b1 =>
                        {
                            b1.Property<Guid>("StepExecutionParameterBaseExecutionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("StepExecutionParameterBaseParameterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Expression")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Expression");

                            b1.HasKey("StepExecutionParameterBaseExecutionId", "StepExecutionParameterBaseParameterId");

                            b1.ToTable("ExecutionStepParameter", "app");

                            b1.WithOwner()
                                .HasForeignKey("StepExecutionParameterBaseExecutionId", "StepExecutionParameterBaseParameterId");
                        });

                    b.Navigation("Expression")
                        .IsRequired();

                    b.Navigation("InheritFromExecutionParameter");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionParameterExpressionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.ExecutionParameter", "InheritFromExecutionParameter")
                        .WithMany("StepExecutionParameterExpressionParameters")
                        .HasForeignKey("ExecutionId", "InheritFromExecutionParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.StepExecutionParameterBase", "StepParameter")
                        .WithMany("ExpressionParameters")
                        .HasForeignKey("ExecutionId", "StepParameterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("InheritFromExecutionParameter");

                    b.Navigation("StepParameter");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepParameterBase", b =>
                {
                    b.HasOne("Biflow.Core.Entities.JobParameter", "InheritFromJobParameter")
                        .WithMany("InheritingStepParameters")
                        .HasForeignKey("InheritFromJobParameterId");

                    b.OwnsOne("Biflow.Core.Entities.EvaluationExpression", "Expression", b1 =>
                        {
                            b1.Property<Guid>("StepParameterBaseParameterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Expression")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Expression");

                            b1.HasKey("StepParameterBaseParameterId");

                            b1.ToTable("StepParameter", "app");

                            b1.WithOwner()
                                .HasForeignKey("StepParameterBaseParameterId");
                        });

                    b.Navigation("Expression")
                        .IsRequired();

                    b.Navigation("InheritFromJobParameter");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepParameterExpressionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.JobParameter", "InheritFromJobParameter")
                        .WithMany("InheritingStepParameterExpressionParameters")
                        .HasForeignKey("InheritFromJobParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.StepParameterBase", "StepParameter")
                        .WithMany("ExpressionParameters")
                        .HasForeignKey("StepParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InheritFromJobParameter");

                    b.Navigation("StepParameter");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Subscription", b =>
                {
                    b.HasOne("Biflow.Core.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataTableAuthorization", b =>
                {
                    b.HasOne("Biflow.Core.Entities.MasterDataTable", null)
                        .WithMany()
                        .HasForeignKey("DataTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobAuthorization", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Job", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobStepTagFilter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.JobStep", null)
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleTag", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Schedule", null)
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StepTag", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Step", null)
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Biflow.Core.Entities.AgentJobStep", b =>
                {
                    b.HasOne("Biflow.Core.Entities.SqlConnectionInfo", "Connection")
                        .WithMany("AgentJobSteps")
                        .HasForeignKey("ConnectionId")
                        .IsRequired();

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Biflow.Core.Entities.DatasetStep", b =>
                {
                    b.HasOne("Biflow.Core.Entities.AppRegistration", "AppRegistration")
                        .WithMany("Steps")
                        .HasForeignKey("AppRegistrationId")
                        .IsRequired();

                    b.Navigation("AppRegistration");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExeStep", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Credential", "RunAsCredential")
                        .WithMany()
                        .HasForeignKey("RunAsCredentialId");

                    b.Navigation("RunAsCredential");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionStep", b =>
                {
                    b.HasOne("Biflow.Core.Entities.FunctionApp", "FunctionApp")
                        .WithMany("Steps")
                        .HasForeignKey("FunctionAppId")
                        .IsRequired();

                    b.Navigation("FunctionApp");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobStep", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Job", "JobToExecute")
                        .WithMany("JobSteps")
                        .HasForeignKey("JobToExecuteId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("JobToExecute");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PackageStep", b =>
                {
                    b.HasOne("Biflow.Core.Entities.SqlConnectionInfo", "Connection")
                        .WithMany("PackageSteps")
                        .HasForeignKey("ConnectionId")
                        .IsRequired();

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineStep", b =>
                {
                    b.HasOne("Biflow.Core.Entities.PipelineClient", "PipelineClient")
                        .WithMany("Steps")
                        .HasForeignKey("PipelineClientId")
                        .IsRequired();

                    b.Navigation("PipelineClient");
                });

            modelBuilder.Entity("Biflow.Core.Entities.QlikStep", b =>
                {
                    b.HasOne("Biflow.Core.Entities.QlikCloudClient", "QlikCloudClient")
                        .WithMany("Steps")
                        .HasForeignKey("QlikCloudClientId")
                        .IsRequired();

                    b.Navigation("QlikCloudClient");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStep", b =>
                {
                    b.HasOne("Biflow.Core.Entities.SqlConnectionInfo", "Connection")
                        .WithMany("SqlSteps")
                        .HasForeignKey("ConnectionId")
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.JobParameter", "ResultCaptureJobParameter")
                        .WithMany("CapturingSteps")
                        .HasForeignKey("ResultCaptureJobParameterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Connection");

                    b.Navigation("ResultCaptureJobParameter");
                });

            modelBuilder.Entity("Biflow.Core.Entities.TabularStep", b =>
                {
                    b.HasOne("Biflow.Core.Entities.AnalysisServicesConnectionInfo", "Connection")
                        .WithMany("TabularSteps")
                        .HasForeignKey("ConnectionId")
                        .IsRequired();

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStepExecution", b =>
                {
                    b.HasOne("Biflow.Core.Entities.ExecutionParameter", "ResultCaptureJobParameter")
                        .WithMany("CapturingStepExecutions")
                        .HasForeignKey("ExecutionId", "ResultCaptureJobParameterId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("ResultCaptureJobParameter");
                });

            modelBuilder.Entity("Biflow.Core.Entities.EmailStepExecutionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.EmailStepExecution", "StepExecution")
                        .WithMany("StepExecutionParameters")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExeStepExecutionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.ExeStepExecution", "StepExecution")
                        .WithMany("StepExecutionParameters")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionStepExecutionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.FunctionStepExecution", "StepExecution")
                        .WithMany("StepExecutionParameters")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobStepExecutionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.JobStepExecution", "StepExecution")
                        .WithMany("StepExecutionParameters")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PackageStepExecutionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.PackageStepExecution", "StepExecution")
                        .WithMany("StepExecutionParameters")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineStepExecutionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.PipelineStepExecution", "StepExecution")
                        .WithMany("StepExecutionParameters")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStepExecutionParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.SqlStepExecution", "StepExecution")
                        .WithMany("StepExecutionParameters")
                        .HasForeignKey("ExecutionId", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepExecution");
                });

            modelBuilder.Entity("Biflow.Core.Entities.EmailStepParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.EmailStep", "Step")
                        .WithMany("StepParameters")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExeStepParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.ExeStep", "Step")
                        .WithMany("StepParameters")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionStepParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.FunctionStep", "Step")
                        .WithMany("StepParameters")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobStepParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.JobParameter", "AssignToJobParameter")
                        .WithMany("AssigningStepParameters")
                        .HasForeignKey("AssignToJobParameterId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.JobStep", "Step")
                        .WithMany("StepParameters")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AssignToJobParameter");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PackageStepParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.PackageStep", "Step")
                        .WithMany("StepParameters")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineStepParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.PipelineStep", "Step")
                        .WithMany("StepParameters")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStepParameter", b =>
                {
                    b.HasOne("Biflow.Core.Entities.SqlStep", "Step")
                        .WithMany("StepParameters")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobSubscription", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Job", "Job")
                        .WithMany("JobSubscriptions")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobTagSubscription", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Job", "Job")
                        .WithMany("JobTagSubscriptions")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biflow.Core.Entities.Tag", "Tag")
                        .WithMany("JobTagSubscriptions")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepSubscription", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Step", "Step")
                        .WithMany("StepSubscriptions")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Biflow.Core.Entities.TagSubscription", b =>
                {
                    b.HasOne("Biflow.Core.Entities.Tag", "Tag")
                        .WithMany("TagSubscriptions")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Biflow.Core.Entities.AppRegistration", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("BlobStorageClients");

                    b.Navigation("FunctionApps");

                    b.Navigation("PipelineClients");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Biflow.Core.Entities.DataObject", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Execution", b =>
                {
                    b.Navigation("DataObjects");

                    b.Navigation("ExecutionConcurrencies");

                    b.Navigation("ExecutionParameters");

                    b.Navigation("StepExecutions");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionDataObject", b =>
                {
                    b.Navigation("StepExecutions");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExecutionParameter", b =>
                {
                    b.Navigation("CapturingStepExecutions");

                    b.Navigation("ExecutionConditionParameters");

                    b.Navigation("StepExecutionParameterExpressionParameters");

                    b.Navigation("StepExecutionParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionApp", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Job", b =>
                {
                    b.Navigation("JobConcurrencies");

                    b.Navigation("JobParameters");

                    b.Navigation("JobSteps");

                    b.Navigation("JobSubscriptions");

                    b.Navigation("JobTagSubscriptions");

                    b.Navigation("Schedules");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobParameter", b =>
                {
                    b.Navigation("AssigningStepParameters");

                    b.Navigation("CapturingSteps");

                    b.Navigation("ExecutionConditionParameters");

                    b.Navigation("InheritingStepParameterExpressionParameters");

                    b.Navigation("InheritingStepParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.MasterDataTable", b =>
                {
                    b.Navigation("DependentLookups");

                    b.Navigation("Lookups");
                });

            modelBuilder.Entity("Biflow.Core.Entities.MasterDataTableCategory", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineClient", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Biflow.Core.Entities.QlikCloudClient", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Step", b =>
                {
                    b.Navigation("DataObjects");

                    b.Navigation("Dependencies");

                    b.Navigation("Depending");

                    b.Navigation("ExecutionConditionParameters");

                    b.Navigation("StepSubscriptions");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecution", b =>
                {
                    b.Navigation("DataObjects");

                    b.Navigation("ExecutionConditionParameters");

                    b.Navigation("ExecutionDependencies");

                    b.Navigation("StepExecutionAttempts");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepExecutionParameterBase", b =>
                {
                    b.Navigation("ExpressionParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.StepParameterBase", b =>
                {
                    b.Navigation("ExpressionParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.Tag", b =>
                {
                    b.Navigation("JobTagSubscriptions");

                    b.Navigation("TagSubscriptions");
                });

            modelBuilder.Entity("Biflow.Core.Entities.User", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Biflow.Core.Entities.AnalysisServicesConnectionInfo", b =>
                {
                    b.Navigation("TabularSteps");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlConnectionInfo", b =>
                {
                    b.Navigation("AgentJobSteps");

                    b.Navigation("DataTables");

                    b.Navigation("PackageSteps");

                    b.Navigation("SqlSteps");
                });

            modelBuilder.Entity("Biflow.Core.Entities.EmailStep", b =>
                {
                    b.Navigation("StepParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExeStep", b =>
                {
                    b.Navigation("StepParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionStep", b =>
                {
                    b.Navigation("StepParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobStep", b =>
                {
                    b.Navigation("StepParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PackageStep", b =>
                {
                    b.Navigation("StepParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineStep", b =>
                {
                    b.Navigation("StepParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStep", b =>
                {
                    b.Navigation("StepParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.EmailStepExecution", b =>
                {
                    b.Navigation("StepExecutionParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.ExeStepExecution", b =>
                {
                    b.Navigation("StepExecutionParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.FunctionStepExecution", b =>
                {
                    b.Navigation("StepExecutionParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.JobStepExecution", b =>
                {
                    b.Navigation("StepExecutionParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PackageStepExecution", b =>
                {
                    b.Navigation("StepExecutionParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.PipelineStepExecution", b =>
                {
                    b.Navigation("StepExecutionParameters");
                });

            modelBuilder.Entity("Biflow.Core.Entities.SqlStepExecution", b =>
                {
                    b.Navigation("StepExecutionParameters");
                });
#pragma warning restore 612, 618
        }
    }
}
