@namespace Biflow.Ui.Components

@typeparam TItem

@implements IAsyncDisposable

@inject IJSRuntime Js
@inject ContextMenuService ContextMenu

<div @attributes="AdditionalAttributes" class="border" style="resize: both; overflow: hidden;">
    <div class="p-1 @CssClass">
        <svg id="@_svgId" viewBox="0 0 2000 1000">
            <g @ref="_graphContainer" id="g_dependency_graph" />
        </svg>
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public Func<string, TItem?>? ItemFromNodeIdSelector { get; set; }

    [Parameter] public RenderFragment<TItem>? ContextMenuTemplate { get; set; }

    [Parameter] public EventCallback AfterRender { get; set; }

    [Parameter] public string? CssClass { get; set; }

    private ElementReference _graphContainer;
    private string _svgId = $"svg-{Guid.NewGuid().ToString()}";
    private DotNetObjectReference<DependencyGraph<TItem>>? _dotNetObject;
    private IJSObjectReference? _jsObject;

    protected override void OnInitialized()
    {
        _dotNetObject = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsObject = await Js.InvokeAsync<IJSObjectReference>("import", "./_content/Biflow.Ui.Components/DependencyGraph.js");
            await AfterRender.InvokeAsync();
        }
    }

    public async Task DrawAsync(
        IEnumerable<DependencyGraphNode> nodes,
        IEnumerable<DependencyGraphEdge> edges,
        DependencyGraphDirection direction = default)
    {
        // The JS object might be null if it has been disposed, and in this case we just want to return.
        // This can happen if the user navigates away from the page
        // while a reference to this component is being held in .NET and DrawAsync() is called
        // after the JS object has already been disposed. This in turn can happen if loading data for drawing
        // the dependency graph takes a considerable amount of time.
        if (_jsObject is null) return;
        ArgumentNullException.ThrowIfNull(_dotNetObject);
        var nodesJson = JsonSerializer.Serialize(nodes);
        var edgesJson = JsonSerializer.Serialize(edges);
        var rankdir = direction switch
        {
            DependencyGraphDirection.LeftToRight => "LR",
            DependencyGraphDirection.RightToLeft => "RL",
            DependencyGraphDirection.TopToBottom => "TB",
            DependencyGraphDirection.BottomToTop => "BT",
            _ => "LR"
        };
        await _jsObject.InvokeVoidAsync("drawDependencyGraph", _dotNetObject, _graphContainer, _svgId, nodesJson, edgesJson, rankdir);
    }

    [JSInvokable]
    public void OnNodeClick(string nodeId, int clientX, int clientY)
    {
        if (ContextMenuTemplate is null || ItemFromNodeIdSelector is null)
        {
            return;
        }
        var mouseEvent = new MouseEventArgs { ClientX = clientX, ClientY = clientY };
        var item = ItemFromNodeIdSelector(nodeId);
        if (item is null)
        {
            return;
        }
        var template = ContextMenuTemplate(item);
        _ = ContextMenu.ShowContextMenuAsync(mouseEvent, template);
    }

    public async ValueTask DisposeAsync()
    {
        if (_jsObject is not null)
        {
            try
            {
                await _jsObject.DisposeAsync();
                _jsObject = null;
            }
            catch (JSDisconnectedException) { }
        }
        _dotNetObject?.Dispose();
    }
}