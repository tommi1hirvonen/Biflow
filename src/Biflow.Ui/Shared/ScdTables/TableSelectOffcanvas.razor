@inject ToasterService Toaster

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Large" Backdrop="OffcanvasBackdrop.False" ScrollingEnabled="true" Title="Search database tables & views">
    <BodyTemplate>
        <div class="row mt-3">
            <div class="col-sm-2">
                <label class="form-label">Search</label>
            </div>
            <div class="col-sm-8">
                <div class="input-group input-group-sm">
                    <div class="input-group-text">
                        <SvgIcon Icon="LucideIcon.Search" />
                    </div>
                    <DebounceTextInput @bind-Value="_schemaSearchTerm" @bind-Value:after="RunQueryAsync" class="form-control form-control-sm" type="search" placeholder="Schema" />
                    <DebounceTextInput @bind-Value="_nameSearchTerm" @bind-Value:after="RunQueryAsync" class="form-control form-control-sm" type="search" placeholder="Name" />
                </div>
            </div>
            <div class="col-sm-2">
                @if (Loading)
                {
                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                }
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <table class="table table-sm table-hover small">
                    <thead>
                    <tr>
                        <th>Schema</th>
                        <th>Name</th>
                        <th>Type</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (_databaseObjects is null)
                    {
                        <tr>
                            <td colspan="3" class="text-center">
                                Input search terms to query objects from the database
                            </td>
                        </tr>
                    }
                    else if (!_databaseObjects.Any())
                    {
                        <tr>
                            <td colspan="3" class="text-center">
                                No matching results
                            </td>
                        </tr>
                    }
                    @foreach (var dbObject in _databaseObjects ?? [])
                    {
                        <tr class="cursor-pointer" @onclick="() => SelectAsync(dbObject)">
                            <td class="align-middle"><HighlightableText Text="@dbObject.Schema" PartToHighlight="@_schemaSearchTerm" /></td>
                            <td class="align-middle"><HighlightableText Text="@dbObject.Object" PartToHighlight="@_nameSearchTerm" /></td>
                            <td class="align-middle">@dbObject.Type</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" OnClick="CloseAsync">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public EventCallback<DbObject> OnTableSelected { get; set; }
    
    private readonly SemaphoreSlim _semaphore = new(1, 1);

    private HxOffcanvas? _offcanvas;
    private SqlConnectionBase? _connection;
    private IEnumerable<DbObject>? _databaseObjects;
    private string _schemaSearchTerm = string.Empty;
    private string _nameSearchTerm = string.Empty;
    private CancellationTokenSource _cts = new();
    private Task<IEnumerable<DbObject>>? _queryTask;
    
    private bool Loading => _queryTask is not null;

    private async Task RunQueryAsync()
    {
        if (_schemaSearchTerm.Length < 2 && _nameSearchTerm.Length < 2)
        {
            return;
        }

        // If another query task is already running, cancel it, wait for its completion and continue with a new query.
        if (_queryTask is not null && !_cts.IsCancellationRequested)
        {
            await _cts.CancelAsync();
        }

        try
        {
            await _semaphore.WaitAsync();
            ArgumentNullException.ThrowIfNull(_connection);
            _queryTask = _connection switch
            {
                MsSqlConnection ms => ms.GetDatabaseObjectsAsync(_schemaSearchTerm, _nameSearchTerm, 50, _cts.Token),
                SnowflakeConnection sf => sf.GetDatabaseObjectsAsync(_schemaSearchTerm, _nameSearchTerm, 50, _cts.Token),
                _ => throw new ArgumentException($"Unsupported connection type {_connection.GetType().Name}")
            };
            StateHasChanged();
            _databaseObjects = await _queryTask;
        }
        catch (OperationCanceledException)
        {
            _cts.Dispose();
            _cts = new();
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error querying database objects", ex.Message);
        }
        finally
        {
            _queryTask = null;
            _semaphore.Release();
        }
    }

    private async Task SelectAsync(DbObject dbObject)
    {
        await OnTableSelected.InvokeAsync(dbObject);
        await CloseAsync();
    }

    private async Task CloseAsync()
    {
        if (_queryTask is not null && !_cts.IsCancellationRequested)
        {
            await _cts.CancelAsync();
            _cts = new();
        }
        await _offcanvas.LetAsync(x => x.HideAsync());
    }
    
    public Task ShowAsync(SqlConnectionBase connection)
    {
        if (connection == _connection)
        {
            return _offcanvas.LetAsync(x => x.ShowAsync());
        }
        _databaseObjects = null;
        _schemaSearchTerm = "";
        _nameSearchTerm = "";
        _connection = connection;
        return _offcanvas.LetAsync(x => x.ShowAsync());
    }
}