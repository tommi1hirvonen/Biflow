@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster

<div class="row my-3">
    <div class="col-auto">
        <a class="btn btn-sm btn-auto" href="versions">
            <SvgIcon Icon="LucideIcon.MoveLeft" />
            Back
        </a>
    </div>
    <div class="col-10 d-flex justify-content-center">
        <div class="card d-flex justify-content-center w-100" style="max-width: 60rem;">
            <div class="card-body mx-auto py-4" style="max-width: 50rem;">
                <div class="row">
                    <div class="col">
                        <h5>Revert from JSON</h5>
                        <hr />
                        <VersionRevertInfo />
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col">
                        <HxAlert Color="ThemeColor.Secondary">
                            <div class="row g-2">
                                <div class="col-auto">
                                    <SvgIcon Icon="LucideIcon.CircleAlert" />
                                </div>
                                <div class="col">
                                    <p class="small">
                                        The uploaded JSON file must include object reference metadata (<span class="font-monospace">$id</span>, <span class="font-monospace">$ref</span> and <span class="font-monospace">$values</span> properties). Please ensure the correct file which includes these JSON attributes (exported as <span class="font-monospace">snapshot_with_references.json</span>) is uploaded.
                                    </p>
                                    <a class="alert-link small" href="versions/help">Read more</a>
                                </div>
                            </div>
                        </HxAlert>
                    </div>
                </div>
                <div class="row mt-2 align-items-end">
                    <div class="col" style="max-width: 40rem;">
                        <div>
                            <label for="json_file" class="form-label">Select snapshot JSON file to load</label>
                            <InputFile id="json_file" class="form-control form-control-sm" disabled=@(_revertTask is not null) OnChange="LoadFileAsync" />
                        </div>
                    </div>
                    <div class="col-auto">
                        @if (_loadingFile)
                        {
                            <HxSpinner Color="ThemeColor.Secondary" />
                        }
                    </div>
                </div>
                @if (_revertTask is null)
                {
                    <div class="row mt-3">
                        <div class="col-auto">
                            <HxDropdownButtonGroup>
                                <HxDropdownToggleButton Color="ThemeColor.None" CssClass="btn-auto text-danger me-3" Spinner="false">
                                    <SvgIcon Icon="LucideIcon.CircleAlert"/>
                                    Revert...
                                </HxDropdownToggleButton>
                                <HxDropdownMenu>
                                    <HxDropdownItem OnClick="() => RevertAsync()">
                                        Start
                                    </HxDropdownItem>
                                </HxDropdownMenu>
                            </HxDropdownButtonGroup>
                        </div>
                        <div class="col">
                            <div class="row">
                                <div class="col align-self-center form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="check_retain_schedules"
                                           @bind-value="_retainSchedules"
                                           checked=@_retainSchedules>
                                    <label class="form-check-label" for="check_retain_schedules">
                                        Retain schedules
                                        &nbsp;
                                        <HxPopover Trigger="PopoverTrigger.Hover" Placement="PopoverPlacement.Top"
                                                   Content="Whether to retain previous schedules">
                                            <SvgIcon Icon="LucideIcon.Info" />
                                        </HxPopover>
                                    </label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col align-self-center form-check form-check-inline">
                                    <input type="checkbox" class="form-check-input" id="check_retain_integration_props"
                                           @bind-value="_retainIntegrationProperties"
                                           checked=@_retainIntegrationProperties>
                                    <label class="form-check-label" for="check_retain_integration_props">
                                        Retain integration properties
                                        &nbsp;
                                        <HxPopover Trigger="PopoverTrigger.Hover" Placement="PopoverPlacement.Top"
                                                   Content="Whether to retain previous integration properties. This should normally be set to true if transferring snapshots between environments (e. g. from test to prod) where integration property values for the same entity may be different (e. g. connection strings or resource names).">
                                            <SvgIcon Icon="LucideIcon.Info"/>
                                        </HxPopover>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row mt-4">
                        <div class="col">
                            <HxAlert Color="ThemeColor.Info">
                                <p>
                                    <HxSpinner Size="SpinnerSize.Small" Color="ThemeColor.None" />
                                    <strong class="ms-1">
                                        Version revert in progress
                                    </strong>
                                </p>
                                <p>Please do not close or leave this page.</p>
                                <span class="alert-link text-decoration-underline cursor-pointer" @onclick="CancelRevertTask">
                                    Cancel
                                </span>
                            </HxAlert>
                        </div>
                    </div>
                }
                @if (_result is not null)
                {
                    <div class="row mt-4">
                        <div class="col">
                            <HxAlert Color="_result.Color">
                                @if (_result.Title is not null)
                                {
                                    <p><strong>@_result.Title</strong></p>
                                }
                                <span>@_result.Message</span>
                                @if (_result.NewIntegrations is { Count: > 0 })
                                {
                                    <p class="mt-3">
                                        <small><strong>New integration entities</strong></small>
                                        &nbsp;
                                        <HxPopover Trigger="PopoverTrigger.Hover" Placement="PopoverPlacement.Top"
                                                   Content="Integrations that were added as part of the revert process. The property values of these integration entities should be checked after the revert as they may need to be filled in or corrected.">
                                            <SvgIcon Icon="LucideIcon.Info"/>
                                        </HxPopover>
                                    </p>
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Type</th>
                                                <th>Name</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var integration in _result.NewIntegrations
                                                          .OrderBy(x => x.Type.Name).ThenBy(x => x.Name))
                                            {
                                                <tr>
                                                    <td>
                                                        @integration.Type.Name 
                                                    </td>
                                                    <td>
                                                        @integration.Name
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            </HxAlert>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-1">

    </div>
</div>

@code {
    private EnvironmentSnapshot? _snapshot;
    private CancellationTokenSource _cts = new();
    private Task<RevertVersionResponse>? _revertTask;
    private RevertResult? _result;
    private bool _loadingFile = false;
    private bool _retainIntegrationProperties = false;
    private bool _retainSchedules = false;

    private async Task LoadFileAsync(InputFileChangeEventArgs e)
    {
        _loadingFile = true;

        string json;
        try
        {
            await using var stream = e.File.OpenReadStream();
            using var reader = new StreamReader(stream);
            json = await reader.ReadToEndAsync(_cts.Token);
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error reading snapshot file", ex.Message);
            _loadingFile = false;
            return;
        }

        try
        {
            // Assume referencesPreserved = true, because only then is reverting of the snapshot supported.
            _snapshot = EnvironmentSnapshot.FromJson(json, referencesPreserved: true);
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error deserializing snapshot JSON", ex.Message);
        }
        finally
        {
            _loadingFile = false;
        }
    }

    private async Task RevertAsync()
    {
        if (_revertTask is not null)
        {
            return;
        }

        ArgumentNullException.ThrowIfNull(_snapshot);

        try
        {
            _result = null;
            var command = new RevertVersionCommand(_snapshot, _retainSchedules, _retainIntegrationProperties);
            _revertTask = Mediator.SendAsync(command, _cts.Token);
            StateHasChanged();
            var response = await _revertTask;
            _result = new(ThemeColor.Success, null, "Version reverted successfully", response.NewIntegrations);
        }
        catch (OperationCanceledException)
        {
            _cts.Dispose();
            _cts = new();
            _result = new(ThemeColor.Warning, null, "Revert was canceled", null);
        }
        catch (Exception ex)
        {
            var message = ex switch
            {
                { InnerException: not null } when ex.Message.ContainsIgnoreCase("see the inner exception") => ex.InnerException.Message,
                _ => ex.Message
            };
            _result = new(ThemeColor.Danger, "Error reverting version", message, null);
        }
        finally
        {
            _revertTask = null;
        }
    }

    private void CancelRevertTask()
    {
        if (_revertTask is not null && !_cts.IsCancellationRequested)
        {
            _cts.Cancel();
        }
    }

    public void Dispose()
    {
        if (!_cts.IsCancellationRequested)
        {
            _cts.Cancel();
        }
        _cts.Dispose();
    }

    private record RevertResult(
        ThemeColor Color,
        string? Title,
        string? Message,
        IReadOnlyList<(Type Type, string Name)>? NewIntegrations);
}
