@using System.IO.Compression

@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject IMediator Mediator
@inject ToasterService Toaster
@inject IJSRuntime Js
@inject ThemeService ThemeService

<div class="row justify-content-between">
    <div class="col d-flex align-items-start">
        <HxButton Color="ThemeColor.Success" OnClick="() => _createModal.LetAsync(x => x.ShowAsync())">
            Create version
        </HxButton>
        <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.VersionManager}")">
            <a role="button" class="btn btn-auto btn-sm ms-auto" href="versions/revertjson">
                Revert from JSON
            </a>
        </AuthorizeView>
    </div>
    
</div>

<Paginator @ref="_paginator"
           Items="Versions"
           Context="pageItems"
           InitialPageSize="UserState.Versions.PageSize"
           InitialPage="UserState.Versions.CurrentPage"
           OnPageChanged="page => UserState.Versions.CurrentPage = page"
           OnPageSizeChanged="size => UserState.Versions.PageSize = size">

    <div class="row justify-content-end justify-content-xxl-between align-items-end mt-3">
        <div class="col-auto" style="max-width: 33rem;">
            <HxAlert Color="ThemeService.CurrentTheme == Theme.Light ? ThemeColor.Light : ThemeColor.Dark" CssClass="small py-2 mb-0">
                <div class="row g-3">
                    <div class="col-auto">
                        <SvgIcon Icon="LucideIcon.Info" />
                    </div>
                    <div class="col">
                        Environment versions are point-in-time snapshots of the environment configuration stored as a single JSON object. <a class="alert-link" href="versions/help">Read more</a>
                    </div>
                </div>
            </HxAlert>
        </div>
        <div class="col-xxl mt-3 mt-xxl-0 d-flex justify-content-end">
            <PaginationControls Paginator="_paginator" />
        </div>
    </div>

    <div class="row mb-4 mt-3">
        <div class="col">
            <div class="card">
                <div class="card-body px-0">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Description</th>
                                <th>Created on</th>
                                <th>Created by</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Versions is null)
                            {
                                <tr>
                                    <td colspan="5" class="text-center">
                                        <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                                    </td>
                                </tr>
                            }
                            else if (Versions.Count == 0)
                            {
                                <tr>
                                    <td colspan="5">
                                        No versions
                                    </td>
                                </tr>
                            }
                            else
                            {
                                foreach (var version in pageItems ?? [])
                                {
                                    // Show the description in full length as an HTML title if the description
                                    // was truncated.
                                    var (versionDescription, versionTitle) = version.Description?.Length > 100
                                        ? ($"{version.Description[..100]}...", version.Description)
                                        : (version.Description, "");
                                    <ContextMenuToggle ContainerHtmlTag="tr">
                                        <ChildContent Context="menu">
                                            <td class="align-middle">
                                                <span class="cursor-pointer text-decoration-underline" @onclick="() => OpenDetailsAsync(version.VersionId)">
                                                    @version.VersionId
                                                </span>
                                            </td>
                                            <td class="align-middle small" title="@versionTitle">
                                                @versionDescription
                                            </td>
                                            <td class="align-middle">
                                                @version.CreatedOn.LocalDateTime
                                            </td>
                                            <td class="align-middle small">
                                                @version.CreatedBy
                                            </td>
                                            <td>
                                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" Spinner="false" CssClass="btn-auto" @onclick="e => menu.ShowContextMenuAsync(e)">
                                                    <SvgIcon Icon="LucideIcon.Ellipsis" />
                                                </HxButton>
                                            </td>
                                        </ChildContent>
                                        <MenuContent>
                                            <DropdownMenuHeader>Version id: @version.VersionId</DropdownMenuHeader>
                                            <DropdownMenuItem @onclick="() => OpenDetailsAsync(version.VersionId)">
                                                <SvgIcon Icon="LucideIcon.Braces" />
                                                Show JSON
                                            </DropdownMenuItem>
                                            <DropdownMenuItem @onclick="() => DownloadAsync(version.VersionId)">
                                                <SvgIcon Icon="LucideIcon.Download" />
                                                Download JSON
                                            </DropdownMenuItem>
                                            <DropdownMenuLink href="@($"versions/compare/{version.VersionId}")">
                                                <SvgIcon Icon="LucideIcon.GitCompareArrows" />
                                                Compare to current
                                            </DropdownMenuLink>
                                            <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.VersionManager}")">
                                                <DropdownMenuLink href="@($"versions/revert/{version.VersionId}")">
                                                    <SvgIcon Icon="LucideIcon.History" />
                                                    Revert...
                                                </DropdownMenuLink>
                                            </AuthorizeView>
                                        </MenuContent>
                                    </ContextMenuToggle>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

</Paginator>

<HxOffcanvas @ref="_detailsOffcanvas"
             Size="OffcanvasSize.Large"
             Title="@($"Version {_detailsVersion?.VersionId}")">
    <BodyTemplate>
        <div class="row justify-content-between">
            <div class="col-auto">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="simplified_json"
                           checked=@_simplifiedJson
                           @onchange="args => _simplifiedJson = (bool)args.Value!">
                    <label class="form-check-label" for="simplified_json">Simplified JSON</label>
                    <HxPopover Trigger="PopoverTrigger.Hover" WrapperCssClass="ms-2" Content="Simplified JSON is easier for humans to read and is recommended for diff comparisons. JSON with object references preserved (non-simplified) includes additional metadata properties that add complexity and reduce readability but are required when deserializing and reverting snapshots.">
                        <SvgIcon Icon="LucideIcon.Info" />
                    </HxPopover>
                </div>
            </div>
            <div class="col-auto">
                <span class="text-secondary small text-decoration-underline cursor-pointer" @onclick="CopyToClipboard">
                    <SvgIcon Icon="LucideIcon.ClipboardCopy" />
                    Copy to clipboard
                </span>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col small font-monospace">
                <pre style="max-height: calc(100vh - 160px);">
                    @(_simplifiedJson ? _detailsVersion?.Snapshot : _detailsVersion?.SnapshotWithReferencesPreserved)
                </pre>
            </div>
        </div>
    </BodyTemplate>
</HxOffcanvas>

<HxModal @ref="_createModal"
         Title="Create new version snapshot"
         Size="ModalSize.Large"
         Scrollable="true"
         OnShown="() => _textInput.FocusAsync()">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <textarea @ref="_textInput" class="form-control form-control-sm" @bind="_description" rows="5" placeholder="Version description"></textarea>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" OnClick="CreateVersionAsync">
            Save
        </HxButton>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" OnClick="() => _createModal.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [CascadingParameter] public UserState UserState { get; set; } = new();

    [Parameter] public IList<VersionProjection>? Versions { get; set; }

    private ElementReference _textInput;
    private Paginator<VersionProjection>? _paginator;
    private HxOffcanvas? _detailsOffcanvas;
    private EnvironmentVersion? _detailsVersion;
    private HxModal? _createModal;
    private string? _description;
    private bool _simplifiedJson = true; // inverse of whether to show JSON with references preserved

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += OnThemeChanged;
    }

    private void OnThemeChanged(Theme theme, bool isAuto) => StateHasChanged();

    private async Task CreateVersionAsync()
    {
        try
        {
            var command = new CreateVersionCommand(_description);
            var version = await Mediator.SendAsync(command);
            await _createModal.LetAsync(x => x.HideAsync());
            _description = null;
            Versions?.Insert(0, version);
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error creating version", ex.Message);
        }
    }

    private async Task OpenDetailsAsync(int versionId)
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _detailsVersion = await context.EnvironmentVersions.FirstOrDefaultAsync(v => v.VersionId == versionId);
        await _detailsOffcanvas.LetAsync(x => x.ShowAsync());
    }

    private async Task DownloadAsync(int versionId)
    {
        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            var version = await context.EnvironmentVersions.FirstOrDefaultAsync(v => v.VersionId == versionId);
            ArgumentNullException.ThrowIfNull(version);

            IEnumerable<(string Name, string Content)> files =
            [
                ("snapshot.json", version.Snapshot),
            ("snapshot_with_references.json", version.SnapshotWithReferencesPreserved)
            ];

            using var zipArchiveStream = new MemoryStream();
            // The ZipArchive object is written to the Stream when it is disposed.
            using (var zipArchive = new ZipArchive(zipArchiveStream, ZipArchiveMode.Create, leaveOpen: true))
            {

                foreach (var (name, content) in files)
                {
                    await using var entryStream = zipArchive.CreateEntry(name).Open();
                    await using var entryStreamWriter = new StreamWriter(entryStream);
                    await entryStreamWriter.WriteAsync(content);
                }
            }
            zipArchiveStream.Position = 0; // reset the stream position

            var filename = $"version_{version.VersionId}.zip";
            var bytes = zipArchiveStream.ToArray();
            using var stream = new MemoryStream(bytes);
            using var streamRef = new DotNetStreamReference(stream: stream);
            await Js.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error exporting version", ex.Message);
        }
    }

    private async Task CopyToClipboard()
    {
        try
        {
            var text = _simplifiedJson ? _detailsVersion?.Snapshot : _detailsVersion?.SnapshotWithReferencesPreserved;
            await Js.InvokeVoidAsync("navigator.clipboard.writeText", text);
            Toaster.AddInformation("Value copied to clipboard");
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error copying to clipboard", ex.Message);
        }
    }

    public void Dispose() => ThemeService.OnThemeChanged -= OnThemeChanged;
}
