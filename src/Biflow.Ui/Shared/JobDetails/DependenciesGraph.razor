
@*CSS definitions for the dependency graph nodes and paths created in site.js through JSInterop.*@
<style>
    html, body {
    height: 100%;
    }
</style>

<PageTitle>@Job?.JobName | Dependencies | Biflow</PageTitle>

@if (Job?.ExecutionMode == ExecutionMode.ExecutionPhase)
{
    <HxAlert Color="ThemeColor.Warning">
        Job is in execution phase mode. Dependencies will not be used during execution.
    </HxAlert>
}

<div class="row align-items-end mb-3">
    <div class="col" style="max-width: 40rem;">
        <HxAutosuggest TValue="Guid?"
                       TItem="StepProjection"
                       @bind-Value="_stepFilter"
                       @bind-Value:after="LoadGraphAsync"
                       DataProvider="ProvideSuggestions"
                       ItemFromValueResolver="v => Task.FromResult(_stepSlims?.FirstOrDefault(s => s.StepId == v)!)"
                       ValueSelector="item => item.StepId"
                       TextSelector="@(item => item.StepName ?? "")"
                       MinimumLength="0"
                       Delay="1"
                       InputSize="InputSize.Small"
                       Placeholder="Filter step"
                       autocomplete="off">
            <ItemTemplate Context="item">
                <StepTypeIcon StepType="item.StepType" />
                @item.StepName
            </ItemTemplate>
            <EmptyTemplate>
                <span class="p-2">No matching steps</span>
            </EmptyTemplate>
        </HxAutosuggest>
    </div>
    <div class="col-xxl-auto mt-xxl-0 mt-3 d-flex flex-row align-items-end">
        <div class="form-group">
            <label class="form-label">Depth backwards</label>
            <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@("<p>The depth of traversal backwards when drawing the dependency graph starting from the filtered step.</p><p>Available only when the graph has been filtered.</p><p>0 = no limit</p>")">
                <ChildContent>
                    <span class="cursor-pointer">
                        <SvgIcon Icon="LucideIcon.Info" />
                    </span>
                </ChildContent>
            </HxPopover>
            <input class="form-control form-control-sm" type="number" @bind-value="FilterDepthBackwards" disabled=@(_stepFilter is null) style="max-width: 9rem;" />
        </div>
        <div class="form-group ms-3">
            <label class="form-label">Depth forwards</label>
            <HxPopover Trigger="PopoverTrigger.Hover" Html Content="@("<p>The depth of traversal forwards when drawing the dependency graph starting from the filtered step.</p><p>Available only when the graph has been filtered.</p><p>0 = no limit</p>")">
                <ChildContent>
                    <span class="cursor-pointer">
                        <SvgIcon Icon="LucideIcon.Info" />
                    </span>
                </ChildContent>
            </HxPopover>
            <input class="form-control form-control-sm" type="number" @bind-value="FilterDepthForwards" disabled=@(_stepFilter is null) style="max-width: 9rem;" />
        </div>
        <HxButtonGroup Size="ButtonGroupSize.Small" CssClass="mx-3">
            <HxButton CssClass="btn-auto" Size="ButtonSize.Small" Color="ThemeColor.None" OnClick="LoadGraphAsync">
                Apply depth filters
            </HxButton>
            <HxDropdownButtonGroup AutoClose="DropdownAutoClose.Outside">
                <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto">
                    Direction
                </HxDropdownToggleButton>
                <HxDropdownContent CssClass="p-3">
                    <div class="row mt-2" style="min-width: 12rem;">
                        <div class="col">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" id="direction_radio_admin"
                                       checked=@(_direction == DependencyGraphDirection.LeftToRight)
                                       @onchange="@(_ => SetDirectionAsync(DependencyGraphDirection.LeftToRight))">
                                <label class="form-check-label fw-normal" for="direction_radio_admin">
                                    <SvgIcon Icon="LucideIcon.MoveRight"/>
                                    Left to right
                                </label>
                            </div>
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="radio" id="direction_radio_editor"
                                       checked=@(_direction == DependencyGraphDirection.RightToLeft)
                                       @onchange="@(_ => SetDirectionAsync(DependencyGraphDirection.RightToLeft))">
                                <label class="form-check-label fw-normal" for="direction_radio_editor">
                                    <SvgIcon Icon="LucideIcon.MoveLeft"/>
                                    Right to left
                                </label>
                            </div>
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="radio" id="direction_radio_operator"
                                       checked=@(_direction == DependencyGraphDirection.TopToBottom)
                                       @onchange="@(_ => SetDirectionAsync(DependencyGraphDirection.TopToBottom))">
                                <label class="form-check-label fw-normal" for="direction_radio_operator">
                                    <SvgIcon Icon="LucideIcon.MoveDown"/>
                                    Top to bottom
                                </label>
                            </div>
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="radio" id="direction_radio_viewer"
                                       checked=@(_direction == DependencyGraphDirection.BottomToTop)
                                       @onchange="@(_ => SetDirectionAsync(DependencyGraphDirection.BottomToTop))">
                                <label class="form-check-label fw-normal" for="direction_radio_viewer">
                                    <SvgIcon Icon="LucideIcon.MoveUp"/>
                                    Bottom to top
                                </label>
                            </div>
                        </div>
                    </div>
                </HxDropdownContent>
            </HxDropdownButtonGroup>
        </HxButtonGroup>
        <FilterDropdown TItem="StepTag"
                        FilterSet="_tagsFilterSet"
                        Items="Tags"
                        IdSelector="tag => tag.TagId.ToString()"
                        TextSelector="tag => tag.TagName"
                        IsSearchable
                        @bind-Mode="_tagsFilterMode"
                        OnChange="LoadGraphAsync"
                        ShowPill="_stepFilter is null"
                        Enabled="_stepFilter is null">
            <TitleTemplate>
                <SvgIcon Icon="LucideIcon.Tag" />
                Tags
            </TitleTemplate>
            <ItemTemplate Context="item">
                <TagBadge Tag="item" />
            </ItemTemplate>
        </FilterDropdown>
    </div>

</div>

@if (Job is not null)
{
    <DependencyGraph @ref="_dependencyGraph"
    TItem="StepProjection"
    ItemFromNodeIdSelector="nodeId => _stepSlims?.FirstOrDefault(s => s.StepId.ToString() == nodeId)"
    AfterRender="LoadGraphAsync"
    CssClass="dependency-graph">
        <ContextMenuTemplate Context="step">
            <li>
                <h6 class="dropdown-header">
                    <StepTypeIcon StepType="step.StepType" />
                    @step.StepName
                </h6>
            </li>
            <li>
                <span class="dropdown-item" role="button" @onclick="async () => { _stepFilter = step.StepId; await LoadGraphAsync();}">
                    <SvgIcon Icon="LucideIcon.Filter" />
                    Limit graph to this
                </span>
            </li>
            @if (step.JobId == Job?.JobId)
            {
                <AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
                    <li>
                        <span class="dropdown-item" role="button" @onclick="() => OpenStepEditModalAsync(step)">
                            <SvgIcon Icon="LucideIcon.Pen" />
                            Edit
                        </span>
                    </li>
                    <li>
                        @if (step.IsEnabled)
                        {
                            <span class="dropdown-item" role="button" @onclick="() => ToggleEnabled(step, false)">
                                <SvgIcon Icon="LucideIcon.ToggleLeft" />
                                Disable
                            </span>
                        }
                        else
                        {
                            <span class="dropdown-item" role="button" @onclick="() => ToggleEnabled(step, true)">
                                <SvgIcon Icon="LucideIcon.ToggleRight" />
                                Enable
                            </span>
                        }
                    </li>
                    <li>
                        <span class="dropdown-item" role="button" @onclick="() => DeleteStep(step)">
                            <SvgIcon Icon="LucideIcon.Trash2" />
                            Delete...
                        </span>
                    </li>
                </AuthorizeView>
            }
            else
            {
                <li>
                    <a class="dropdown-item" role="button" href="@($"jobs/{step.JobId}/steps")">
                        <SvgIcon Icon="LucideIcon.MoveRight" />
                        Go to job
                    </a>
                </li>
            }
            <li>
                <span class="dropdown-item" role="button" @onclick="() => _stepHistoryOffcanvas.LetAsync(x => x.ShowAsync(step.StepId))">
                    <SvgIcon Icon="LucideIcon.Activity" />
                    History
                </span>
            </li>
        </ContextMenuTemplate>
    </DependencyGraph>
}

<StepHistoryOffcanvas @ref="_stepHistoryOffcanvas" />

<AuthorizeView Roles="@($"{Roles.Admin}, {Roles.Editor}")">
    <SqlStepEditModal @ref="_stepEditModals[StepType.Sql]" OnStepSubmit="OnStepSubmit" />
    <TabularStepEditModal @ref="_stepEditModals[StepType.Tabular]" OnStepSubmit="OnStepSubmit" />
    <DatasetStepEditModal @ref="_stepEditModals[StepType.Dataset]" OnStepSubmit="OnStepSubmit" />
    <DataflowStepEditModal @ref="_stepEditModals[StepType.Dataflow]" OnStepSubmit="OnStepSubmit" />
    <FabricStepEditModal @ref="_stepEditModals[StepType.Fabric]" OnStepSubmit="OnStepSubmit" />
    <ExeStepEditModal @ref="_stepEditModals[StepType.Exe]" OnStepSubmit="OnStepSubmit" />
    <JobStepEditModal @ref="_stepEditModals[StepType.Job]" OnStepSubmit="OnStepSubmit" />
    <PackageStepEditModal @ref="_stepEditModals[StepType.Package]" OnStepSubmit="OnStepSubmit" />
    <PipelineStepEditModal @ref="_stepEditModals[StepType.Pipeline]" OnStepSubmit="OnStepSubmit" />
    <FunctionStepEditModal @ref="_stepEditModals[StepType.Function]" OnStepSubmit="OnStepSubmit" />
    <AgentJobStepEditModal @ref="_stepEditModals[StepType.AgentJob]" OnStepSubmit="OnStepSubmit" />
    <EmailStepEditModal @ref="_stepEditModals[StepType.Email]" OnStepSubmit="OnStepSubmit" />
    <QlikStepEditModal @ref="_stepEditModals[StepType.Qlik]" OnStepSubmit="OnStepSubmit" />
    <DatabricksStepEditModal @ref="_stepEditModals[StepType.Databricks]" OnStepSubmit="OnStepSubmit" />
    <DbtStepEditModal @ref="_stepEditModals[StepType.Dbt]" OnStepSubmit="OnStepSubmit" />
    <ScdStepEditModal @ref="_stepEditModals[StepType.Scd]" OnStepSubmit="OnStepSubmit" />
</AuthorizeView>
