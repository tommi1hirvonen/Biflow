@inject StepsDuplicatorFactory DuplicatorFactory
@inject ToasterService Toaster

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Small" Title="Copy steps" Backdrop="OffcanvasBackdrop.False">
    <BodyTemplate>
        @if (_currentJob is not null)
        {
            <div class="row">
                <div class="col">
                    <label class="form-label">Target job</label>
                    <select class="form-select" @bind="_targetJobId">
                        @foreach (var job in Jobs.OrderBy(j => j.JobName))
                        {
                            var jobName = job.JobId == _currentJob?.JobId ? $"{job.JobName} (this)" : job.JobName;
                            <option value="@job.JobId">
                                @jobName
                            </option>
                        }
                    </select>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <table class="table table-sm">
                        <thead>
                            <tr><th>Steps</th></tr>
                        </thead>
                        <tbody>
                            @foreach (var step in _steps.OrderBy(s => s.StepName))
                            {
                                <tr>
                                    <td>
                                        <StepTypeIcon StepType="step.StepType" />
                                        &nbsp;
                                        @step.StepName
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Success" Enabled="_steps.Any()" OnClick="CopyAsync">
            Copy
        </HxButton>
        <HxButton CssClass="ms-3" Color="ThemeColor.Secondary" OnClick="() => _offcanvas.LetAsync(x => x.HideAsync())">
            Cancel
        </HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    [Parameter] public EventCallback<IEnumerable<Step>> OnStepsCopied { get; set; }

    [Parameter] public IEnumerable<Job> Jobs { get; set; } = [];

    private HxOffcanvas? _offcanvas;
    private Job? _currentJob;
    private Guid _targetJobId;
    private IEnumerable<Step> _steps = [];

    public async Task ShowAsync(Job currentJob, IEnumerable<Step> steps)
    {
        _currentJob = currentJob;
        _targetJobId = currentJob.JobId;
        _steps = steps;
        await _offcanvas.LetAsync(x => x.ShowAsync());
    }

    private async Task CopyAsync()
    {
        try
        {
            var stepIds = _steps.Select(s => s.StepId).ToArray();
            using var duplicator = await DuplicatorFactory.CreateAsync(stepIds, _targetJobId);
            if (_targetJobId == _currentJob?.JobId)
            {
                foreach (var step in duplicator.Steps)
                {
                    step.StepName = $"{step.StepName} – Copy";
                }
            }
            var copies = await duplicator.SaveStepsAsync();
            Toaster.AddSuccess("Step(s) copied successfully");
            await OnStepsCopied.InvokeAsync(copies);
            await _offcanvas.LetAsync(x => x.HideAsync());
        }
        catch (Exception ex)
        {
            Toaster.AddError("Error copying steps", ex.Message);
        }
    }
}
