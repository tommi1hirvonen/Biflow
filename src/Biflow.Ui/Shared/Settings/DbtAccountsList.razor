@using CreateDbtAccountCommand = Biflow.Ui.Core.CreateDbtAccountCommand
@using UpdateDbtAccountCommand = Biflow.Ui.Core.UpdateDbtAccountCommand
@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbFactory
@inject ToasterService Toaster
@inject IMediator Mediator
@inject ThemeService ThemeService

<style>
    tr a {
        text-decoration: none;
    }

    tr:hover a {
        text-decoration: underline;
    }
</style>

<PageTitle>dbt accounts | Biflow</PageTitle>

<div class="row flex-row-reverse justify-content-between align-items-end g-3">
    <div class="col-auto">
        <HxAlert Color="ThemeService.CurrentTheme == Theme.Light ? ThemeColor.Light : ThemeColor.Dark"
                 CssClass="small py-2 mb-0"
                 style="max-width: 50rem;">
            <div class="row g-3">
                <div class="col-auto">
                    <SvgIcon Icon="LucideIcon.Info" />
                </div>
                <div class="col">
                    Add dbt Cloud&trade; accounts to create dbt steps to run dbt Cloud jobs on your account. 
                </div>
            </div>
        </HxAlert>
    </div>
    <div class="col-auto">
        <HxButton Color="ThemeColor.Success"
                  @onclick="() => ShowEditModalAsync(null)"
                  Enabled="_accounts is not null">
            Add account
        </HxButton>
    </div>
</div>

<div class="card pt-2 my-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    Name
                </th>
                <th></th>
                <th>
                    Base url
                </th>
                <th>Account id</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (_accounts is null)
            {
                <tr><td colspan="6" class="text-center"><HxSpinner Color="ThemeColor.Secondary" /></td></tr>
            }
            else if (_accounts.Count == 0)
            {
                <tr><td colspan="6">No dbt Cloud accounts</td></tr>
            }
            else
            {
                @foreach (var account in _accounts.OrderBy(a => a.DbtAccountName))
                {
                    var jobs = account.Steps.Select(s => s.Job).Distinct().Count();
                    var steps = account.Steps.Count();
                    <tr>
                        <td class="align-middle">
                            @account.DbtAccountName
                        </td>
                        <td class="align-middle">
                            <HxButtonGroup Size="ButtonGroupSize.Small">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="edit" @onclick="() => ShowEditModalAsync(account)">
                                    <SvgIcon Icon="LucideIcon.Pen" />
                                </HxButton>
                                <HxDropdownButtonGroup>
                                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" aria-label="delete">
                                        <SvgIcon Icon="LucideIcon.Trash2" />
                                    </HxDropdownToggleButton>
                                    <HxDropdownMenu>
                                        <HxDropdownHeader>Delete?</HxDropdownHeader>
                                        <HxDropdownItem @onclick="() => DeleteAccountAsync(account)">Confirm</HxDropdownItem>
                                    </HxDropdownMenu>
                                </HxDropdownButtonGroup>
                            </HxButtonGroup>
                        </td>
                        <td class="align-middle">
                            @account.ApiBaseUrl
                        </td>
                        <td class="align-middle">
                            @account.AccountId
                        </td>
                        <td class="align-middle">
                            @(jobs > 0 ? $"{jobs} job(s)" : null)
                        </td>
                        <td class="align-middle">
                            <a class="text-body" href="javascript:void(0)"
                               @onclick="async () =>
                                {
                                _stepsAccount = account;
                                await _stepsModal.LetAsync(x => x.ShowAsync());
                                }">
                                @(steps > 0 ? $"{steps} step(s)" : null)
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<DbtAccountEditModal @ref="_editModal" OnAccountSubmit="OnAccountSubmitAsync" />

<HxModal @ref="_stepsModal" Size="ModalSize.Large" Scrollable="true" Title="@($"Steps using {_stepsAccount?.DbtAccountName}")">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm table-hover">
                    <thead>
                        <tr>
                            <th>Job</th>
                            <th>Step</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var step in _stepsAccount?.Steps
                        .OrderBy(s => s.Job.JobName)
                        .ThenBy(s => s.StepName) ?? Enumerable.Empty<Step>())
                        {
                            <tr>
                                <td>
                                    @step.Job.JobName
                                </td>
                                <td>
                                    <StepTypeIcon StepType="step.StepType" />
                                    &nbsp;
                                    @step.StepName
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="async () => await _stepsModal.LetAsync(x => x.HideAsync())">Close</button>
    </FooterTemplate>
</HxModal>

@code {
    private List<DbtAccount>? _accounts;
    private DbtAccountEditModal? _editModal;
    private DbtAccount? _stepsAccount;
    private HxModal? _stepsModal;
    
    protected override void OnInitialized() => ThemeService.OnThemeChanged += OnThemeChanged;
    
    public void Dispose() => ThemeService.OnThemeChanged -= OnThemeChanged;

    private void OnThemeChanged(Theme theme, bool isAuto) => StateHasChanged();

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _accounts = await context.DbtAccounts
            .AsNoTrackingWithIdentityResolution()
            .Include(f => f.Steps)
            .ThenInclude(step => step.Job)
            .OrderBy(f => f.DbtAccountName)
            .ToListAsync();
    }

    private async Task DeleteAccountAsync(DbtAccount account)
    {
        try
        {
            await Mediator.SendAsync(new DeleteDbtAccountCommand(account.DbtAccountId));
            _accounts?.Remove(account);
        }
        catch (Exception ex)
        {
            var message = ex.InnerException?.Message ?? ex.Message;
            Toaster.AddError("Error deleting account", message);
        }
    }

    private async Task OnAccountSubmitAsync(DbtAccount account)
    {
        if (account.DbtAccountId == Guid.Empty)
        {
            var command = new CreateDbtAccountCommand(
                account.DbtAccountName, account.ApiBaseUrl, account.AccountId, account.ApiToken);
            var response = await Mediator.SendAsync(command);
            _accounts?.Add(response);
        }
        else
        {
            var command = new UpdateDbtAccountCommand(
                account.DbtAccountId, account.DbtAccountName, account.ApiBaseUrl, account.AccountId, account.ApiToken);
            _ = await Mediator.SendAsync(command);
            _accounts?.RemoveAll(a => a.DbtAccountId == account.DbtAccountId);
            _accounts?.Add(account);
        }
        StateHasChanged();
    }

    private async Task ShowEditModalAsync(DbtAccount? account) =>
        await _editModal.LetAsync(x => x.ShowAsync(account?.DbtAccountId ?? Guid.Empty));
}
