@inject IDbContextFactory<AppDbContext> DbFactory
@inject ToasterService Toaster
@inject IJSRuntime Js

<HxModal @ref="_modal"
         Size="ModalSize.Large"
         OnClosed="() => _connectionTestSuccess = null"
         OnShown="() => _nameInput?.Element?.FocusAsync()"
         Title="@(_synapseWorkspace?.PipelineClientId == Guid.Empty ? "New Synapse workspace" : "Edit " + _synapseWorkspace?.PipelineClientName)">
    <BodyTemplate>
        @if (_synapseWorkspace is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="_synapseWorkspace" id="df_edit_form" OnValidSubmit="SubmitSynapseAsync">
                <div class="row">
                    <div class="col mx-3">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col">
                                <label class="form-label">Synapse workspace name</label>
                                <InputText @ref="_nameInput" class="form-control" @bind-Value="_synapseWorkspace.PipelineClientName"></InputText>
                            </div>
                        </div>

                        <div class=" row mt-3">
                            <div class="col-lg-6">
                                <label class="form-label">Azure credential</label>
                                <InputSelect class="form-select" @bind-Value="_synapseWorkspace.AzureCredentialId">
                                    @foreach (var app in AzureCredentials ?? Enumerable.Empty<AzureCredential>())
                                        {
                                        <option value="@app.AzureCredentialId">@app.AzureCredentialName</option>
                                        }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-lg">
                                <label class="form-label">Synapse workspace URL</label>
                                <InputText class="form-control" @bind-Value="_synapseWorkspace.SynapseWorkspaceUrl"></InputText>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <HxButton Size="ButtonSize.Small" Color="ThemeColor.None" CssClass="btn-auto" @onclick="TestConnection" Enabled="!_testingConnection">
                                    Test connection
                                </HxButton>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                @if (_connectionTestSuccess == true)
                                {
                                    <span class="badge bg-success">Success</span>
                                }
                                else if (_connectionTestSuccess == false)
                                {
                                    <span class="badge bg-danger">Failed</span>
                                }
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">Max concurrent pipeline step executions</label>
                                <InputNumber class="form-control" style="max-width: 10rem;" @bind-Value="_synapseWorkspace.MaxConcurrentPipelineSteps"></InputNumber>
                                <div class="form-text">
                                    Limit the number of concurrently executing pipeline steps across all executions for this Synapse Workspace.
                                    <br />
                                    0 = no limit
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    <FooterTemplate>
        <HxSubmit form="df_edit_form" Color="ThemeColor.Success">@(_synapseWorkspace?.PipelineClientId == Guid.Empty ? "Create" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>

@code {
    [Parameter]
    public EventCallback<SynapseWorkspace> OnSynapseWorkspaceSubmit { get; set; }

    [Parameter]
    public List<AzureCredential>? AzureCredentials { get; set; }

    private InputText? _nameInput;
    private SynapseWorkspace? _synapseWorkspace;
    private HxModal? _modal;
    private bool? _connectionTestSuccess = null;
    private bool _testingConnection = false;

    private async Task SubmitSynapseAsync()
    {
        await OnSynapseWorkspaceSubmit.InvokeAsync(_synapseWorkspace);
        await _modal.LetAsync(x => x.HideAsync());
    }

    private async Task TestConnection()
    {
        _connectionTestSuccess = null;
        _testingConnection = true;
        try
        {
            var azureCredential = AzureCredentials?.First(ar => ar.AzureCredentialId == _synapseWorkspace?.AzureCredentialId)
                ?? throw new ArgumentException("Azure credential cannot be null");
            await (_synapseWorkspace?.TestConnection(azureCredential) ?? Task.CompletedTask);
            _connectionTestSuccess = true;
        }
        catch (Exception ex)
        {
            _connectionTestSuccess = false;
            Toaster.AddError("Connection test failed", ex.Message);
        }
        _testingConnection = false;
    }

    public async Task ShowAsync(Guid pipelineClientId)
    {
        ArgumentNullException.ThrowIfNull(AzureCredentials);
        _synapseWorkspace = null;
        await _modal.LetAsync(x => x.ShowAsync());
        if (pipelineClientId != Guid.Empty)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            _synapseWorkspace = await context.SynapseWorkspaces
                .AsNoTrackingWithIdentityResolution()
                .Include(s => s.Steps)
                .ThenInclude(step => step.Job)
                .FirstAsync(s => s.PipelineClientId == pipelineClientId);
        }
        else
        {
            _synapseWorkspace = new()
            {
                AzureCredentialId = AzureCredentials.First().AzureCredentialId,
            };
        }
        _connectionTestSuccess = null;
        _testingConnection = false;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", "Discard unsaved changes?");
        if (!confirmed)
        {
            context.PreventNavigation();
        }
    }
}
