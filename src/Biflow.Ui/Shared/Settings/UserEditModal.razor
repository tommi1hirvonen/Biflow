
<HxModal @ref="_modal"
         Title="@(IsNewUser ? "New user" : $"Edit {_currentUsername}")" Scrollable="true"
         Size="ModalSize.Large"
         OnClosed="OnClosed"
         OnShown="() => _nameInput?.Element?.FocusAsync()">
    <BodyTemplate>
        @if (_model is not null)
        {
            <NavigationLock ConfirmExternalNavigation OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
            <EditForm Model="_model" id="user_edit_form" OnValidSubmit="SubmitUser">
                <div class="row">
                    <div class="col-md-10 mx-auto">
                        <ObjectGraphDataAnnotationsValidator />
                        <ValidationSummary />
                        <FluentValidationValidator Validator="_validator" />
                        <div>
                            <label class="form-label">Username</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <SvgIcon Icon="LucideIcon.User" />
                                </div>
                                <InputText @ref="_nameInput" class="form-control" @bind-Value="_model.Username"></InputText>
                            </div>
                        </div>
                        <div class="mt-3">
                            <label class="form-label">Roles</label>
                        </div>
                        <div class="row mt-2">
                            <div class="col">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" id="role_radio_admin"
                                           checked=@(_model.Role == UserRole.Admin)
                                           @onchange="@(_ => _model.Role = UserRole.Admin)">
                                    <label class="form-check-label fw-normal" for="role_radio_admin">
                                        Admin
                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Admins have full edit and execute rights to all jobs, access to global settings including users and they can fully manage environment version snapshot, including reverting to previous snapshots.">
                                            <SvgIcon Icon="LucideIcon.Info" />
                                        </HxPopover>
                                    </label>
                                </div>
                                <div class="form-check mt-1">
                                    <input class="form-check-input" type="radio" id="role_radio_editor"
                                           checked=@(_model.Role == UserRole.Editor)
                                           @onchange="@(_ => _model.Role = UserRole.Editor)">
                                    <label class="form-check-label fw-normal" for="role_radio_editor">
                                        Editor
                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Editors have full edit and execute rights to all jobs. Editors can also create environment version snapshots but not revert them.">
                                            <SvgIcon Icon="LucideIcon.Info" />
                                        </HxPopover>
                                    </label>
                                </div>
                                <div class="form-check mt-1">
                                    <input class="form-check-input" type="radio" id="role_radio_operator"
                                           checked=@(_model.Role == UserRole.Operator)
                                           @onchange="@(_ => _model.Role = UserRole.Operator)">
                                    <label class="form-check-label fw-normal" for="role_radio_operator">
                                        Operator
                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Operators have execute access to jobs the user has been authorized to execute and view.">
                                            <SvgIcon Icon="LucideIcon.Info" />
                                        </HxPopover>
                                    </label>
                                </div>
                                <div class="form-check mt-1">
                                    <input class="form-check-input" type="radio" id="role_radio_viewer"
                                           checked=@(_model.Role == UserRole.Viewer)
                                           @onchange="@(_ => _model.Role = UserRole.Viewer)">
                                    <label class="form-check-label fw-normal" for="role_radio_viewer">
                                        Viewer
                                        <HxPopover Trigger="PopoverTrigger.Hover" Content="Viewers can view executions and details related to jobs they have been authorized to view.">
                                            <SvgIcon Icon="LucideIcon.Info" />
                                        </HxPopover>
                                    </label>
                                </div>
                            </div>
                            <div class="col">
                                @if (_model.Role != UserRole.Admin)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="role_radio_version_manager"
                                               checked=@_model.IsVersionManager
                                               @onchange="@(e => _model.IsVersionManager = (bool)e.Value!)">
                                        <label class="form-check-label fw-normal" for="role_radio_version_manager">
                                            Version Manager
                                            <HxPopover Trigger="PopoverTrigger.Hover" Content="Version managers can fully manage environment version snapshots, including reverting them.">
                                                <SvgIcon Icon="LucideIcon.Info" />
                                            </HxPopover>
                                        </label>
                                    </div>
                                    <div class="form-check mt-1">
                                        <input class="form-check-input" type="checkbox" id="role_radio_settings_editor"
                                               checked=@_model.IsSettingsEditor
                                               @onchange="@(e => _model.IsSettingsEditor = (bool)e.Value!)">
                                        <label class="form-check-label fw-normal" for="role_radio_settings_editor">
                                            Settings Editor
                                            <HxPopover Trigger="PopoverTrigger.Hover" Content="Settings editors can manage (create, edit, delete) connections, Azure credentials, pipeline clients, function apps and Qlik environments">
                                                <SvgIcon Icon="LucideIcon.Info" />
                                            </HxPopover>
                                        </label>
                                    </div>
                                    <div class="form-check mt-1">
                                        <input class="form-check-input" type="checkbox" id="role_radio_datatable_maintainer"
                                               checked=@_model.IsDataTableMaintainer
                                               @onchange="@(e => _model.IsDataTableMaintainer = (bool)e.Value!)">
                                        <label class="form-check-label fw-normal" for="role_radio_datatable_maintainer">
                                            Data Table Maintainer
                                            <HxPopover Trigger="PopoverTrigger.Hover" Content="Data table maintainers can manage (create, edit delete) data tables and edit their content.">
                                                <SvgIcon Icon="LucideIcon.Info" />
                                            </HxPopover>
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="mt-3">
                            <label class="form-label">Email</label>
                            <div class="input-group">
                                <div class="input-group-text">
                                    <SvgIcon Icon="LucideIcon.AtSign" />
                                </div>
                                <InputText class="form-control" type="email" @bind-Value="_model.Email"></InputText>
                            </div>
                        </div>
                        @if (IsNewUser && _authenticationResolver.AuthenticationMethod == AuthenticationMethod.BuiltIn)
                        {
                            ArgumentNullException.ThrowIfNull(_model.PasswordModel);
                            <div class="mt-3">
                                <label class="form-label">Password</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="LucideIcon.Lock" />
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="_model.PasswordModel.Password"></InputText>
                                </div>
                            </div>
                            <div class="mt-3">
                                <label class="form-label">Confirm password</label>
                                <div class="input-group">
                                    <div class="input-group-text">
                                        <SvgIcon Icon="LucideIcon.Key" />
                                    </div>
                                    <InputText class="form-control" type="password" @bind-Value="_model.PasswordModel.ConfirmPassword"></InputText>
                                </div>
                            </div>
                        }
                        @if (_model.Role != UserRole.Admin)
                        {
                            <div class="mt-4">
                                <strong>Authorization</strong>
                            </div>
                            <ul class="nav nav-underline mt-3">
                                <li class="nav-item">
                                    <a class="nav-link @(_currentPane == AuthorizationPane.Jobs ? "active" : null)"
                                       href="javascript:void(0)"
                                       @onclick="() => _currentPane = AuthorizationPane.Jobs">
                                        Jobs
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link @(_currentPane == AuthorizationPane.DataTables ? "active" : null)"
                                       href="javascript:void(0)"
                                       @onclick="() => _currentPane = AuthorizationPane.DataTables">
                                        Data tables
                                    </a>
                                </li>
                            </ul>
                            @switch (_currentPane)
                            {
                                case AuthorizationPane.Jobs when _model.Role == UserRole.Editor:
                                    <div class="row mt-3">
                                        <div class="col">
                                            <span class="text-muted fst-italic mt-3">
                                                User has @Roles.Editor role and is implicitly authorized to edit all jobs.
                                            </span>
                                        </div>
                                    </div>
                                    break;
                                case AuthorizationPane.Jobs:
                                {
                                    <div class="mt-3">
                                        <div class="form-check form-check-inline">
                                            <input type="checkbox" class="form-check-input" id="authorize_all_jobs"
                                                   checked=@_model.AuthorizeAllJobs
                                                   @bind-value="_model.AuthorizeAllJobs">
                                            <label class="form-check-label" for="authorize_all_jobs">Authorize all jobs</label>
                                        </div>
                                    </div>
                                    if (!_model.AuthorizeAllJobs)
                                    {
                                        <div class="list-group mt-3">
                                            @if (_jobs is null)
                                            {
                                                <div class="list-group-item text-center"><HxSpinner Color="ThemeColor.Secondary" /></div>
                                            }
                                            else {if (!_jobs.Any())
                                                {
                                                    <div class="list-group-item">No jobs</div>
                                                }
                                                else
                                                {
                                                    foreach (var job in _jobs.OrderBy(j => j.JobName))
                                                    {
                                                        <div class="list-group-item">
                                                            <div class="row">
                                                                <div class="col">
                                                                    @job.JobName
                                                                </div>
                                                                <div class="col-auto">
                                                                    <div class="form-check form-check-inline">
                                                                        <input type="checkbox" class="form-check-input" id="authorize_@(job.JobId)"
                                                                               checked=@_model.AuthorizedJobIds.Contains(job.JobId)
                                                                               @onchange="args => ToggleJobAuthorization(args, job)">
                                                                        <label class="form-check-label" for="authorize_@(job.JobId)"></label>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                            }
                                        </div>
                                    }

                                    break;
                                }
                                case AuthorizationPane.DataTables when _model.IsDataTableMaintainer:
                                    <div class="row mt-3">
                                        <div class="col">
                                            <span class="text-muted fst-italic mt-3">
                                                User has @Roles.DataTableMaintainer role and is implicitly authorized to edit all data tables.
                                            </span>
                                        </div>
                                    </div>
                                    break;
                                case AuthorizationPane.DataTables:
                                {
                                    <div class="mt-3">
                                        <div class="form-check form-check-inline">
                                            <input type="checkbox" class="form-check-input" id="authorize_all_datatables"
                                                   checked=@_model.AuthorizeAllDataTables
                                                   @bind-value="_model.AuthorizeAllDataTables">
                                            <label class="form-check-label" for="authorize_all_datatables">Authorize all data tables</label>
                                        </div>
                                    </div>
                                    if (!_model.AuthorizeAllDataTables)
                                    {
                                        <div class="list-group mt-3">
                                            @if (_dataTables is null)
                                            {
                                                <div class="list-group-item text-center"><HxSpinner Color="ThemeColor.Secondary" /></div>
                                            }
                                            else {if (!_dataTables.Any())
                                                {
                                                    <div class="list-group-item">No data tables</div>
                                                }
                                                else
                                                {
                                                    foreach (var category in _dataTables
                                                                 .GroupBy(t => t.Category?.CategoryName ?? "No category")
                                                                 .OrderBy(g => g.Key.Equals("No category"))
                                                                 .ThenBy(g => g.Key))
                                                    {
                                                        <div class="list-group-item fw-bold list-group-header">
                                                            @category.Key
                                                        </div>
                                                        foreach (var table in category.OrderBy(t => t.DataTableName))
                                                        {
                                                            <div class="list-group-item">
                                                                <div class="row">
                                                                    <div class="col">
                                                                        @table.DataTableName
                                                                    </div>
                                                                    <div class="col-auto">
                                                                        <div class="form-check form-check-inline">
                                                                            <input type="checkbox" class="form-check-input" id="authorize_@(table.DataTableId)"
                                                                                   checked=@_model.AuthorizedDataTableIds.Contains(table.DataTableId)
                                                                                   @onchange="args => ToggleDataTableAuthorization(args, table)">
                                                                            <label class="form-check-label" for="authorize_@(table.DataTableId)"></label>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                }
                                            }
                                        </div>
                                    }

                                    break;
                                }
                            }
                        }
                    </div>
                </div>
            </EditForm>
        }
    </BodyTemplate>
    
    <FooterTemplate>
        <HxSubmit form="user_edit_form" Color="ThemeColor.Success">@(IsNewUser ? "Add" : "Save")</HxSubmit>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _modal.LetAsync(x => x.HideAsync())">Cancel</HxButton>
    </FooterTemplate>
</HxModal>
