
<div class="row mt-4">
    <div class="col">
        @if (User is not null && string.IsNullOrWhiteSpace(User.Email))
        {
            <HxAlert Color="ThemeColor.Warning" CssClass="mb-3">
                @if (MissingEmailAlertTemplate is not null)
                {
                    @MissingEmailAlertTemplate(User)    
                }
                else
                {
                    <span>
                        Email address for account <strong>@User.Username</strong> was not set. Go to the <a class="alert-link" href="account">Account page</a> to enter a valid email address.
                    </span>
                }
            </HxAlert>
        }
        @{
            var (jobSubs, jobStepTagSubs, stepTagSubs, stepSubs) = (
                User?.Subscriptions.OfType<JobSubscription>().Count(),
                User?.Subscriptions.OfType<JobStepTagSubscription>().Count(),
                User?.Subscriptions.OfType<StepTagSubscription>().Count(),
                User?.Subscriptions.OfType<StepSubscription>().Count());
            string SubCountClass(int? count) => count > 0 ? "bg-primary" : "bg-secondary";
        }
        <div class="row">
            <div class="col">
                <ul class="nav nav-underline mb-3">
                    <li class="nav-item">
                        <span class="nav-link @(_showType == SubscriptionType.Job ? "active" : null)"
                        @onclick="() => _showType = SubscriptionType.Job">
                            Job subscriptions
                            <span class="badge rounded-pill ms-3 @SubCountClass(jobSubs)">
                                @jobSubs
                            </span>
                        </span>
                    </li>
                    <li class="nav-item">
                        <span class="nav-link @(_showType == SubscriptionType.JobStepTag ? "active" : null)"
                        @onclick="() => _showType = SubscriptionType.JobStepTag">
                            Job-step tag subscriptions
                            <span class="badge rounded-pill ms-3 @SubCountClass(jobStepTagSubs)">
                                @jobStepTagSubs
                            </span>
                        </span>
                    </li>
                    <li class="nav-item">
                        <span class="nav-link @(_showType == SubscriptionType.StepTag ? "active" : null)"
                        @onclick="() => _showType = SubscriptionType.StepTag">
                            Step tag subscriptions
                            <span class="badge rounded-pill ms-3 @SubCountClass(stepTagSubs)">
                                @stepTagSubs
                            </span>
                        </span>
                    </li>
                    <li class="nav-item">
                        <span class="nav-link @(_showType == SubscriptionType.Step ? "active" : null)"
                        @onclick="() => _showType = SubscriptionType.Step">
                            Step subscriptions
                            <span class="badge rounded-pill ms-3 @SubCountClass(stepSubs)">
                                @stepSubs
                            </span>
                        </span>
                    </li>
                </ul>
            </div>
        </div>
        @switch (_showType)
        {
            case SubscriptionType.Job:
                <JobSubscriptions User="User"
                                  Jobs="Jobs"
                                  OnSubscriptionCountChanged="OnSubscriptionCountChangedAsync"/>
                break;
            case SubscriptionType.JobStepTag:
                <JobStepTagSubscriptions User="User"
                                         Jobs="Jobs"
                                         Steps="Steps"
                                         StepTags="StepTags"
                                         OnSubscriptionCountChanged="OnSubscriptionCountChangedAsync"/>
                break;
            case SubscriptionType.StepTag:
                <StepTagSubscriptions User="User"
                                      StepTags="StepTags"
                                      OnSubscriptionCountChanged="OnSubscriptionCountChangedAsync"/>
                break;
            case SubscriptionType.Step:
                <StepSubscriptions User="User"
                                   Jobs="Jobs"
                                   Steps="Steps"
                                   OnSubscriptionCountChanged="OnSubscriptionCountChangedAsync"/>
                break;
        }
    </div>
</div>

@code {
    [Parameter]
    public User? User { get; set; }

    [Parameter]
    public IEnumerable<JobProjection>? Jobs { get; set; }

    [Parameter]
    public IEnumerable<StepTag>? StepTags { get; set; }

    [Parameter]
    public IEnumerable<StepProjection>? Steps { get; set; }

    [Parameter]
    public RenderFragment<User>? MissingEmailAlertTemplate { get; set; }
    
    [Parameter]
    public EventCallback OnSubscriptionCountChanged { get; set; }

    private SubscriptionType _showType = SubscriptionType.Job;

    private Task OnSubscriptionCountChangedAsync()
    {
        StateHasChanged();
        return OnSubscriptionCountChanged.InvokeAsync();
    }
}
