@using ST = Biflow.Core.Entities.StepType

@switch (StepType)
{
    case ST.Sql:
        <SvgIcon Icon="LucideIcon.Code" />
        break;
    case ST.Package:
        <SvgIcon Icon="LucideIcon.Package" />
        break;
    case ST.Pipeline:
        <SvgIcon Icon="LucideIcon.Pipeline" />
        break;
    case ST.Job:
        <SvgIcon Icon="LucideIcon.ClipboardList" />
        break;
    case ST.Exe:
        <SvgIcon Icon="LucideIcon.Terminal" />
        break;
    case ST.Dataset:
        <SvgIcon Icon="LucideIcon.FileBarChart2" />
        break;
    case ST.Dataflow:
        <SvgIcon Icon="LucideIcon.Workflow" />
        break;
    case ST.Fabric:
        <SvgIcon Icon="FabricIcon.Fabric16Regular" />
        break;
    case ST.Function:
        <SvgIcon Icon="LucideIcon.Zap" />
        break;
    case ST.AgentJob:
        <SvgIcon Icon="LucideIcon.Server" />
        break;
    case ST.Tabular:
        <SvgIcon Icon="LucideIcon.Box" />
        break;
    case ST.Email:
        <SvgIcon Icon="LucideIcon.Mail" />
        break;
    case ST.Qlik:
        <SvgIcon Icon="LucideIcon.FileChartPie" />
        break;
    case ST.Databricks:
        <SvgIcon Icon="LucideIcon.Layers" />
        break;
    case ST.Dbt:
        <SvgIcon Icon="LucideIcon.Blocks" />
        break;
    case ST.Scd:
        <SvgIcon Icon="LucideIcon.Replace" />
        break;
    case ST.Http:
        <SvgIcon Icon="LucideIcon.Globe" />
        break;
    default:
        <SvgIcon Icon="LucideIcon.CircleX" />
        break;
}

@code {
    [Parameter]
    public ST? StepType { get; set; }
}
