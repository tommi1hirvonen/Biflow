@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager

@{
    var presetText = _preset.GetPresetText();
}

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Large" Title="@JobName" OnClosed="OnClosed">
    <BodyTemplate>
        <div class="row">
            <div class="col-auto">
                <HxDropdownButtonGroup>
                    <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Secondary">
                        <SvgIcon Icon="LucideIcon.Bookmark" />
                        @if (!string.IsNullOrEmpty(presetText))
                        {
                            <span class="ms-1">Presets:</span>
                            <span class="fw-normal">@presetText</span>
                        }
                        else
                        {
                            <span class="ms-1">Presets</span>
                        }
                    </HxDropdownToggleButton>
                    <HxDropdownMenu>
                        <HxDropdownItem CssClass="@(_preset == PeriodPreset.Week ? "active" : null)"
                                        @onclick="() => ApplyPresetAsync(PeriodPreset.Week)">
                            Last 7 days
                        </HxDropdownItem>
                        <HxDropdownItem CssClass="@(_preset == PeriodPreset.Month ? "active" : null)"
                                        @onclick="() => ApplyPresetAsync(PeriodPreset.Month)">
                            Last 30 days
                        </HxDropdownItem>
                        <HxDropdownItem CssClass="@(_preset == PeriodPreset.ThreeMonths ? "active" : null)"
                                        @onclick="() => ApplyPresetAsync(PeriodPreset.ThreeMonths)">
                            Last 3 months
                        </HxDropdownItem>
                        <HxDropdownItem CssClass="@(_preset == PeriodPreset.SixMonths ? "active" : null)"
                                        @onclick="() => ApplyPresetAsync(PeriodPreset.SixMonths)">
                            Last 6 months
                        </HxDropdownItem>
                        <HxDropdownItem CssClass="@(_preset == PeriodPreset.TwelveMonths ? "active" : null)"
                                        @onclick="() => ApplyPresetAsync(PeriodPreset.TwelveMonths)">
                            Last 12 months
                        </HxDropdownItem>
                    </HxDropdownMenu>
                </HxDropdownButtonGroup>
            </div>
            <div class="col-auto">
                <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="ReloadAsync">
                    <SvgIcon Icon="LucideIcon.RefreshCw"/>
                    Refresh
                </HxButton>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col">
                <form class="d-inline-flex align-items-center"
                      id="executions_form"
                      @onsubmit="ReloadAsync"
                      style="flex-direction: unset !important;">
                    <label class="me-1">From</label>
                    <div class="input-group">
                        <div class="input-group-text">
                            <SvgIcon Icon="LucideIcon.Calendar" />
                        </div>
                        <input @bind="_fromDateTime"
                               @bind:format="yyyy-MM-ddTHH:mm:ss"
                               class="form-control form-control-sm"
                               type="datetime-local">
                    </div>
                    <label class="ms-2 me-1">To</label>
                    <div class="input-group">
                        <div class="input-group-text">
                            <SvgIcon Icon="LucideIcon.Calendar" />
                        </div>
                        <input @bind="_toDateTime"
                               @bind:format="yyyy-MM-ddTHH:mm:ss"
                               class="form-control form-control-sm"
                               type="datetime-local">
                    </div>
                </form>
            </div>
        </div>
        <div class="row mt-1">
            <div class="col">
                <small class="text-muted">No of executions: @_executions?.Count()</small>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <LineChart Dataset="_lineChartDataset" />
            </div>
        </div>

        <div class="row mt-3">
            <div class="col">
                <table class="table table-sm table-hover small">
                    <thead>
                        <tr>
                            <th class="small">Created/started</th>
                            <th class="small">Ended</th>
                            <th class="small">Duration</th>
                            <th class="small">Steps</th>
                            <th class="small">Status</th>
                            <th class="small">Created by</th>
                        </tr>
                        <tr>
                            <th></th>
                            <th></th>
                            <th></th>
                            <th class="small">@AverageDurationInSeconds.SecondsToReadableFormat()</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_executions is null)
                        {
                            <tr><td colspan="6" class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td></tr>
                        }
                        else if (!_executions.Any())
                        {
                            <tr><td colspan="6">No executions</td></tr>
                        }
                        else
                        {
                            @foreach (var execution in _executions)
                            {
                                var createdBy = execution switch
                                {
                                    { ScheduleName: { Length: > 0 } scheduleName } => scheduleName,
                                    { CreatedBy: { Length: > 0 } username } => username,
                                    _ => ""
                                };
                                <tr>
                                    <td class="align-middle small">
                                        <a class="text-body" href="@($"executions/{execution.ExecutionId}/list")">
                                            @(execution.StartedOn?.LocalDateTime ?? execution.CreatedOn.LocalDateTime)
                                        </a>
                                    </td>
                                    <td class="align-middle small">@execution.EndedOn?.LocalDateTime</td>
                                    <td class="align-middle small">@execution.ExecutionInSeconds?.SecondsToReadableFormat()</td>
                                    <td class="align-middle small">@execution.StepExecutionCount</td>
                                    <td><JobExecutionStatusBadge ExecutionStatus="execution.ExecutionStatus" /></td>
                                    <td class="align-middle small">@createdBy</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Close</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    private CancellationTokenSource _cts = new();
    private HxOffcanvas? _offcanvas;
    private LineChartDataset? _lineChartDataset;
    private IEnumerable<ExecutionProjection>? _executions;
    private Guid _jobId;
    private DateTime _fromDateTime = DateTime.Today.AddDays(-30);
    private DateTime _toDateTime = DateTime.Today.AddDays(1);
    private PeriodPreset _preset = PeriodPreset.Month;

    private string JobName => _executions?.FirstOrDefault()?.JobName ?? "";

    private double AverageDurationInSeconds =>
        (int)(_executions
            ?.Where(e => e.ExecutionStatus == ExecutionStatus.Succeeded)
            .Average(e => e.ExecutionInSeconds)
            ?? 0);

    public async Task ShowAsync(Guid jobId)
    {
        _jobId = jobId;
        _executions = null;
        await _offcanvas.LetAsync(x => x.ShowAsync());
        await ApplyPresetAsync(PeriodPreset.Month);
        StateHasChanged();
    }

    private async Task ReloadAsync()
    {
        var context = await DbFactory.CreateDbContextAsync();
        try
        {
            _executions = await context.Executions
                .AsNoTracking()
                .IgnoreQueryFilters()
                .Where(e => e.JobId == _jobId && e.CreatedOn >= _fromDateTime && e.CreatedOn <= _toDateTime)
                .OrderByDescending(e => e.CreatedOn)
                .Select(e => new ExecutionProjection(
                    e.ExecutionId,
                    e.JobId,
                    e.JobName,
                    e.ScheduleId,
                    e.ScheduleName,
                    e.CreatedBy,
                    e.CreatedOn,
                    e.StartedOn,
                    e.EndedOn,
                    e.ExecutionStatus,
                    e.StepExecutions.Count(),
                    Array.Empty<TagProjection>()
                ))
                .ToArrayAsync(_cts.Token);
        }
        catch (OperationCanceledException)
        {
            return;
        }

        var chartSeries = _executions
            .Where(e => e.StartedOn is not null)
            .Select(e => new
            {
                Schedule = e.ScheduleName ?? "Manual executions",
                e.ExecutionInSeconds,
                Date = DateOnly.FromDateTime(e.CreatedOn.LocalDateTime)
            })
            .GroupBy(e => e.Schedule)
            .Select((scheduleGrouping, index) =>
            {
                var dataPoints = scheduleGrouping
                    .GroupBy(e => e.Date)
                    .Select(dateGrouping => new TimeSeriesDataPoint(
                        dateGrouping.Key,
                        dateGrouping.Average(total => (decimal)(total.ExecutionInSeconds ?? 0) / 60)))
                    .ToArray();
                var colorIndex = index % ChartColors.AsReadOnlyList().Count;
                var color = ChartColors.AsReadOnlyList()[colorIndex];
                return new LineChartSeries(scheduleGrouping.Key, dataPoints, color);
            })
            .ToArray();
        
        _lineChartDataset = new LineChartDataset(
            Title: "Avg. duration",
            Series: chartSeries,
            YAxisTitle: "min",
            YMin: 0);
    }

    private void OnClosed()
    {
        _cts.Cancel();
        _cts.Dispose();
        _cts = new();
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
    
    private async Task ApplyPresetAsync(PeriodPreset preset)
    {
        (_fromDateTime, _toDateTime) = preset.GetPresetRange();
        _preset = preset;
        await ReloadAsync();
    }
}
