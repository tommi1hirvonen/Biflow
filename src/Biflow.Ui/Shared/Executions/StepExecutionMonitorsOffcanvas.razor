@inject IDbContextFactory<AppDbContext> DbContextFactory
@inject NavigationManager NavigationManager

<HxOffcanvas @ref="_offcanvas" Size="OffcanvasSize.Large" Title="@_stepExecution?.StepName">
    <BodyTemplate>
        <div class="row">
            <div class="col">
                <table class="table table-sm small">
                    <thead>
                        <tr>
                            <th>Step</th>
                            <th>Monitoring reason</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_monitors is null)
                        {
                            <tr>
                                <td colspan="3" class="text-center">
                                    <HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" />
                                </td>
                            </tr>
                        }
                        else if (_monitors.Length == 0)
                        {
                            <tr>
                                <td colspan="3">
                                    No monitors
                                </td>
                            </tr>
                        }
                        else
                        {
                            foreach (var monitor in _monitors)
                            {
                                <tr>
                                    <td class="align-middle">
                                        <div class="row">
                                            <div class="col">
                                                <StepTypeIcon StepType="monitor.MonitoredStepExecution.StepType" />
                                                <span class="ms-1">@monitor.MonitoredStepExecution.StepName</span>
                                            </div>
                                        </div>
                                        
                                        @if (monitor.MonitoredExecutionId != monitor.ExecutionId)
                                        {
                                            <div class="row">
                                                <div class="col">
                                                    <a class="text-body" href="@($"executions/{monitor.MonitoredExecutionId}/list")">
                                                        @monitor.MonitoredStepExecution.Execution.JobName
                                                    </a>
                                                </div>
                                            </div>
                                        }
                                    </td>
                                    <td class="align-middle">
                                        @monitor.MonitoringReason
                                    </td>
                                    <td class="align-middle">
                                        <StepExecutionStatusBadge ExecutionStatus="monitor.MonitoredStepExecution.ExecutionStatus" />
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <HxButton Color="ThemeColor.Secondary" Spinner="false" @onclick="async () => await _offcanvas.LetAsync(x => x.HideAsync())">Close</HxButton>
    </FooterTemplate>
</HxOffcanvas>

@code {
    private StepExecutionProjection? _stepExecution;
    private StepExecutionMonitor[]? _monitors;
    private HxOffcanvas? _offcanvas;

    public async Task ShowAsync(StepExecutionProjection step)
    {
        _monitors = null;
        _stepExecution = step;
        StateHasChanged();
        await _offcanvas.LetAsync(x => x.ShowAsync());
        await using var context = await DbContextFactory.CreateDbContextAsync();
        _monitors = await context.StepExecutionMonitors
            .AsNoTrackingWithIdentityResolution()
            .IgnoreQueryFilters()
            .Where(m => m.ExecutionId == step.ExecutionId && m.StepId == step.StepId)
            .Include(m => m.MonitoredStepExecution).ThenInclude(e => e.StepExecutionAttempts)
            .Include(m => m.MonitoredStepExecution).ThenInclude(e => e.Execution)
            .ToArrayAsync();
        StateHasChanged();
    }
}
