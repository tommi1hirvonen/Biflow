@implements IDisposable

@inject IDbContextFactory<AppDbContext> DbFactory

@if (!string.IsNullOrEmpty(JobName))
{
    <PageTitle>@JobName | History | Biflow</PageTitle>
}

@{
    var presetText = _preset.GetPresetText();
}

<div class="row">
    <div class="col-auto">
        <HxDropdownButtonGroup>
            <HxDropdownToggleButton Size="ButtonSize.Small" Color="ThemeColor.Secondary">
                <SvgIcon Icon="LucideIcon.Bookmark" />
                @if (!string.IsNullOrEmpty(presetText))
                {
                    <span class="ms-1">Presets:</span>
                    <span class="fw-normal">@presetText</span>
                }
                else
                {
                    <span class="ms-1">Presets</span>
                }
            </HxDropdownToggleButton>
            <HxDropdownMenu>
                <HxDropdownItem CssClass="@(_preset == PeriodPreset.Week ? "active" : null)"
                                @onclick="() => ApplyPresetAsync(PeriodPreset.Week)">
                    Last week
                </HxDropdownItem>
                <HxDropdownItem CssClass="@(_preset == PeriodPreset.Month ? "active" : null)"
                                @onclick="() => ApplyPresetAsync(PeriodPreset.Month)">
                    Last month
                </HxDropdownItem>
                <HxDropdownItem CssClass="@(_preset == PeriodPreset.ThreeMonths ? "active" : null)"
                                @onclick="() => ApplyPresetAsync(PeriodPreset.ThreeMonths)">
                    Last 3 months
                </HxDropdownItem>
                <HxDropdownItem CssClass="@(_preset == PeriodPreset.SixMonths ? "active" : null)"
                                @onclick="() => ApplyPresetAsync(PeriodPreset.SixMonths)">
                    Last 6 months
                </HxDropdownItem>
                <HxDropdownItem CssClass="@(_preset == PeriodPreset.TwelveMonths ? "active" : null)"
                                @onclick="() => ApplyPresetAsync(PeriodPreset.TwelveMonths)">
                    Last 12 months
                </HxDropdownItem>
            </HxDropdownMenu>
        </HxDropdownButtonGroup>
    </div>
    <div class="col-auto">
        <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Small" OnClick="ReloadAsync">
            <SvgIcon Icon="LucideIcon.RefreshCw" />
            Refresh
        </HxButton>
    </div>
    <div class="col-auto">
        <HxButtonGroup Size="ButtonGroupSize.Small">
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(_showChart ? null : "active")" OnClick="() => _showChart = false">
                <SvgIcon Icon="LucideIcon.List" />
                List
            </HxButton>
            <HxButton Size="ButtonSize.Small" Color="ThemeColor.Secondary" CssClass="@(_showChart ? "active" : null)" OnClick="() => _showChart = true">
                <SvgIcon Icon="LucideIcon.LineChart" />
                Chart
            </HxButton>
        </HxButtonGroup>
    </div>
</div>

<div class="row mt-3">
    <div class="col">
        <form class="d-inline-flex align-items-center"
              id="executions_form"
              @onsubmit="ReloadAsync"
              style="flex-direction: unset !important;">
            <label class="me-1">From</label>
            <div class="input-group">
                <div class="input-group-text">
                    <SvgIcon Icon="LucideIcon.Calendar" />
                </div>
                <input @bind="_fromDateTime"
                       @bind:format="yyyy-MM-ddTHH:mm:ss"
                       class="form-control form-control-sm"
                       type="datetime-local">
            </div>
            <label class="ms-2 me-1">To</label>
            <div class="input-group">
                <div class="input-group-text">
                    <SvgIcon Icon="LucideIcon.Calendar" />
                </div>
                <input @bind="_toDateTime"
                       @bind:format="yyyy-MM-ddTHH:mm:ss"
                       class="form-control form-control-sm"
                       type="datetime-local">
            </div>
        </form>
    </div>
</div>

<div class="row mt-1">
    <div class="col">
        <small class="text-muted">No of executions: @_executions?.Count()</small>
    </div>
</div>

<div class="card pt-2 mb-4 mt-3 table-responsive">
    @if (!_showChart)
    {
        <table class="table table-sm table-hover">
            <thead>
                <tr>
                    <th>
                        Created/started
                    </th>
                    <th>
                        Ended
                    </th>
                    <th>
                        Duration
                    </th>
                    <th>
                        Number of steps
                    </th>
                    <th>
                        Status
                    </th>
                    <th>
                        Created by
                    </th>
                </tr>
                <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th><text>@AverageDurationInSeconds.SecondsToReadableFormat()</text></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (_executions is null)
                {
                    <tr><td colspan="6" class="text-center"><HxSpinner Color="ThemeColor.Secondary" Size="SpinnerSize.Small" /></td></tr>
                }
                else if (!_executions.Any())
                {
                    <tr>
                        <td colspan="6">
                            No executions
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var item in _executions)
                    {
                        var createdBy = item switch
                        {
                            { ScheduleName: { Length: > 0 } scheduleName } => scheduleName,
                            { CreatedBy: { Length: > 0 } username } => username,
                            _ => ""
                        };
                        <tr>
                            <td class="align-middle">
                                <a class="text-body" href="@($"executions/{item.ExecutionId}/list")">
                                    @(item.StartedOn?.LocalDateTime ?? item.CreatedOn.LocalDateTime)
                                </a>
                            </td>
                            <td class="align-middle">
                                @item.EndedOn?.LocalDateTime
                            </td>
                            <td class="align-middle">
                                <text>@item.ExecutionInSeconds?.SecondsToReadableFormat()</text>
                            </td>
                            <td class="align-middle">
                                @item.StepExecutionCount
                            </td>
                            <td class="align-middle">
                                <JobExecutionStatusBadge ExecutionStatus="@item.ExecutionStatus" />
                            </td>
                            <td class="align-middle small">
                                @createdBy
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="mx-3 mb-3">
            <LineChart Dataset="_dataset" />
        </div>
    }
    
</div>

@code {
    [Parameter] public Guid JobId { get; set; }

    [Parameter] public string? JobName { get; set; }
    
    private readonly CancellationTokenSource _cts = new();

    private IEnumerable<ExecutionProjection>? _executions;
    private bool _showChart;
    private LineChartDataset? _dataset;
    private DateTime _fromDateTime = DateTime.Today.AddDays(-30);
    private DateTime _toDateTime = DateTime.Today.AddDays(1);
    private PeriodPreset _preset = PeriodPreset.Month;

    private double AverageDurationInSeconds =>
        (int)(_executions
            ?.Where(e => e.ExecutionStatus == ExecutionStatus.Succeeded)
            .Average(e => e.ExecutionInSeconds)
              ?? 0);

    protected override async Task OnParametersSetAsync()
    {
        if (_executions is null && JobId != Guid.Empty)
        {
            await ReloadAsync();
        }
    }

    private async Task ReloadAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        _executions = await context.Executions
            .AsNoTracking()
            .AsSingleQuery()
            .Where(e => e.JobId == JobId && e.CreatedOn >= _fromDateTime && e.CreatedOn <= _toDateTime)
            .OrderByDescending(e => e.CreatedOn)
            .Select(e => new ExecutionProjection(
                e.ExecutionId,
                e.JobId,
                e.JobName,
                e.ScheduleId,
                e.ScheduleName,
                e.CreatedBy,
                e.CreatedOn,
                e.StartedOn,
                e.EndedOn,
                e.ExecutionStatus,
                e.StepExecutions.Count(),
                Array.Empty<TagProjection>()))
            .ToArrayAsync(_cts.Token);
        
        var chartSeries = _executions
            .Where(e => e.StartedOn is not null)
            .Select(e => new
            {
                Schedule = e.ScheduleName ?? "Manual executions",
                e.ExecutionInSeconds,
                Date = DateOnly.FromDateTime(e.CreatedOn.LocalDateTime)
            })
            .GroupBy(e => e.Schedule)
            .Select((scheduleGrouping, index) =>
            {
                var dataPoints = scheduleGrouping
                    .GroupBy(e => e.Date)
                    .Select(dateGrouping => new TimeSeriesDataPoint(
                        dateGrouping.Key,
                        dateGrouping.Average(total => (decimal)(total.ExecutionInSeconds ?? 0) / 60)))
                    .ToArray();
                var colorIndex = index % ChartColors.AsReadOnlyList().Count;
                var color = ChartColors.AsReadOnlyList()[colorIndex];
                return new LineChartSeries(scheduleGrouping.Key, dataPoints, color);
            })
            .ToArray();
        
        _dataset = new LineChartDataset(
            Title: "Avg. duration",
            Series: chartSeries,
            YAxisTitle: "min",
            YMin: 0);
        
        StateHasChanged();
    }
    
    private async Task ApplyPresetAsync(PeriodPreset preset)
    {
        (_fromDateTime, _toDateTime) = preset.GetPresetRange();
        _preset = preset;
        await ReloadAsync();
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
}
