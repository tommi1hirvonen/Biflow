@implements IAsyncDisposable

@typeparam TTag

@inject IJSRuntime Js

<div @attributes="@InputAttributes" class="@CssClass taginput-wrapper position-relative">
    @if (Label is not null)
    {
        <label for="@($"{_id}_input")" class="form-label mb-0">@Label</label>
    }

    <div class="taginput form-control p-1 d-flex flex-wrap border @(IsDisabled ? "disabled" : null)">
        @foreach (var item in SelectedItems)
        {
            var text = TagTextSelector?.Invoke(item) ?? "";
            var color = TagColorSelector?.Invoke(item) ?? TagColor.DarkGray;
            <Badge CssClass="m-1"
                   Text="@text"
                   Color="color"
                   IsRemovable="!IsDisabled"
                   OnRemoveClick="async () => await RemoveItemAsync(item)"
                   style="height: 1.4rem;" />
        }

        @if (!IsDisabled)
        {
            <div class="d-flex flex-grow-1" style="max-width: 100%;">
                <input class="d-flex flex-grow-1 border-0 small"
                       @ref="_inputElement"
                       type="text"
                       id="@($"{_id}_input")"
                       placeholder="@Placeholder"
                       spellcheck="false"
                       autocomplete="off"
                       value="@_inputValue"
                       @onfocusin="ShowSuggestionsAsync"
                       @oninput="SearchValueChangedAsync"
                       @onkeydown="OnKeyDownAsync"
                       @onkeypress="OnKeyPressAsync"
                       @onkeypress:preventDefault>
            </div>

            <span class="m-1 @(_inputValue.Length > 0 ? null : "d-none")" @onclick="ClearInputValue" style="cursor: pointer;">
                <SvgIcon Icon="LucideIcon.X" />
            </span>

            <span class="m-1" @onclick="ToggleSuggestionsAsync" style="cursor: pointer;">
                <SvgIcon Icon="LucideIcon.Search" />
            </span>
        }

    </div>

    <div @ref="_dropdownElement"
         class="dropdown-menu position-absolute overflow-auto shadow-sm
                @(_suggestionsVisible ? "show" : null)
                @(_showUp ? "up" : null)"
         style="max-height: 20rem; scrollbar-width: thin;">
        @{
            var index = -1;
        }
        @if (!FilteredItems.Any() && EmptyTemplate is not null)
        {
            <div class="dropdown-item disabled">
                @EmptyTemplate
            </div>
        }
        @foreach (var item in FilteredItems)
        {
            index++;
            var text = TagTextSelector?.Invoke(item) ?? "";
            var color = TagColorSelector?.Invoke(item) ?? TagColor.DarkGray;
            <div tabindex="-1" role="button" class="dropdown-item @(index == _focusIndex ? "focus" : null)" @onclick="async () => await SelectItemAsync(item)">
                <Badge Text="@text" Color="color" />
            </div>
        }
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> InputAttributes { get; set; } = new();

    [Parameter] public string? CssClass { get; set; }

    [Parameter] public string? Label { get; set; }

    [Parameter] public string? Placeholder { get; set; }

    [Parameter] public IEnumerable<TTag>? Items { get; set; }

    [Parameter] public RenderFragment? EmptyTemplate { get; set; }

    [Parameter] public ICollection<TTag> SelectedItems { get; set; } = new List<TTag>();

    [Parameter] public EventCallback OnSelectedItemsChanged { get; set; }

    [Parameter] public EventCallback OnSuggestionsShown { get; set; }

    [Parameter] public bool IsDisabled { get; set; }

    [Parameter] public Func<TTag, string>? TagTextSelector { get; set; }

    [Parameter] public Func<TTag, TagColor>? TagColorSelector { get; set; }

    [Parameter] public Func<string, TTag>? NewItemFromText { get; set; }

    [Parameter] public bool AllowCustomValues { get; set; } = true;

    private IEnumerable<TTag> FilteredItems => Items?
        .Where(i =>
        {
            var text = TagTextSelector?.Invoke(i);
            var containsInputValue = text?.Contains(_inputValue, StringComparison.InvariantCultureIgnoreCase) ?? false;
            var alreadySelected = SelectedItems.Any(s => TagTextSelector?.Invoke(s) == text);
            return containsInputValue && !alreadySelected;
        }) ?? [];

    private readonly string _id = Guid.NewGuid().ToString();
    private ElementReference _inputElement;
    private ElementReference _dropdownElement;

    private string _inputValue = "";
    private int? _focusIndex = null;

    private bool _suggestionsVisible;
    private bool _showUp;

    private DotNetObjectReference<GenericTagInput<TTag>>? _dotNetObject;
    private IJSObjectReference? _jSObject;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetObject = DotNetObjectReference.Create(this);
            _jSObject = await Js.InvokeAsync<IJSObjectReference>("import", "./_content/Biflow.Ui.Components/TagInput.js");
            if (_dotNetObject is not null)
                await _jSObject.InvokeVoidAsync("create", _inputElement, _dotNetObject);
        }
    }

    [JSInvokable("TagInput_Hide")]
    public void Hide()
    {
        HideSuggestions();
        StateHasChanged();
    }

    private Task SearchValueChangedAsync(ChangeEventArgs args)
    {
        _inputValue = args.Value?.ToString() ?? "";
        return ShowSuggestionsAsync();
    }

    private async Task RemoveItemAsync(TTag item)
    {
        SelectedItems.Remove(item);
        await OnSelectedItemsChanged.InvokeAsync();
    }

    private async Task SelectItemAsync(TTag item)
    {
        if (SelectedItems.Contains(item))
        {
            return;
        }
        _inputValue = "";
        SelectedItems.Add(item);
        await OnSelectedItemsChanged.InvokeAsync();
        await ShowSuggestionsAsync();
    }

    private async Task ToggleSuggestionsAsync()
    {
        if (_suggestionsVisible)
        {
            HideSuggestions();
        }
        else
        {
            await ShowSuggestionsAsync();
        }
    }

    private async Task ShowSuggestionsAsync()
    {
        _suggestionsVisible = FilteredItems.Any() || EmptyTemplate is not null;
        if (!_suggestionsVisible)
        {
            return;
        }
        _showUp = await (_jSObject?.InvokeAsync<bool>("calculateShowUp", _dropdownElement) ?? ValueTask.FromResult(false));
        await _inputElement.FocusAsync();
        await OnSuggestionsShown.InvokeAsync();
    }

    private void HideSuggestions()
    {
        _showUp = false;
        _suggestionsVisible = false;
    }

    private async Task ClearInputValue()
    {
        _inputValue = "";
        await _inputElement.FocusAsync();
    }

    private async Task OnKeyDownAsync(KeyboardEventArgs args)
    {
        var filteredItems = FilteredItems.ToArray();
        switch (args.Key)
        {
            case "Escape":
                _focusIndex = null;
                HideSuggestions();
                break;
            case "ArrowDown" when _focusIndex < filteredItems.Length - 1:
                _focusIndex++;
                break;
            case "ArrowDown":
                _focusIndex = 0;
                break;
            case "ArrowUp" when _focusIndex > 0:
                _focusIndex--;
                break;
            case "ArrowUp":
                _focusIndex = filteredItems.Length - 1;
                break;
            case "PageDown" when _focusIndex is null:
                _focusIndex = 0;
                break;
            case "PageDown" when _focusIndex < filteredItems.Length - 10:
                _focusIndex += 10;
                break;
            case "PageDown":
            case "PageUp" when _focusIndex is null:
                _focusIndex = filteredItems.Length - 1;
                break;
            case "PageUp" when _focusIndex > 10:
                _focusIndex -= 10;
                break;
            case "PageUp":
            case "Home":
                _focusIndex = 0;
                break;
            case "End":
                _focusIndex = filteredItems.Length - 1;
                break;
            case "Enter" when filteredItems.Any() && _focusIndex >= 0 && _focusIndex < filteredItems.Length:
                var item = filteredItems[(int)_focusIndex];
                if (_focusIndex == filteredItems.Length - 1)
                {
                    _focusIndex--;
                }
                await SelectItemAsync(item);
                break;
            case "Backspace" when !_inputValue.Any():
                var lastItem = SelectedItems.LastOrDefault();
                if (lastItem is not null)
                {
                    SelectedItems.Remove(lastItem);
                }
                break;
            case "Backspace":
                _inputValue = _inputValue[..^1];
                break;
            case " ":
                await AddNewItemAsync();
                break;
        }
    }

    private async Task OnKeyPressAsync(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" || args.Key == " " && AllowCustomValues)
        {
            return;
        }
        var key = args.Key;
        _inputValue += key;
        await ShowSuggestionsAsync();
    }

    private async Task AddNewItemAsync()
    {
        if (!_inputValue.Any() || !AllowCustomValues || NewItemFromText is null || TagTextSelector is null)
        {
            return;
        }

        var existingTags =
            from item in Items?.Concat(SelectedItems) ?? []
            select TagTextSelector.Invoke(item);
        if (existingTags.Any(text => text == _inputValue))
        {
            return;
        }

        var newItem = NewItemFromText(_inputValue);
        await SelectItemAsync(newItem);
    }

    public async ValueTask DisposeAsync()
    {
        if (_jSObject is not null)
        {
            try
            {
                await _jSObject.InvokeVoidAsync("dispose", _inputElement);
                await _jSObject.DisposeAsync();
            }
            catch (JSDisconnectedException) { }
        }
        _dotNetObject?.Dispose();
        _dotNetObject = null;
    }
}