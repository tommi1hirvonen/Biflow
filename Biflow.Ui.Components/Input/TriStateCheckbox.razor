@namespace Biflow.Ui.Components

@implements IAsyncDisposable

@inject IJSRuntime JsRuntime

<div class="form-check form-check-inline @CssClass">
    <input @ref="_inputElement"
           type="checkbox"
           class="form-check-input @InputCssClass"
           id="@_elementId"
           checked=@Checked
           @onchange="OnChange">
    <label class="form-check-label" for="@_elementId">@Label</label>
</div>

@code {
    [Parameter] public string? Label { get; set; }

    [Parameter] public bool? Indeterminate { get; set; }

    [Parameter] public bool Checked { get; set; }

    [Parameter] public string? CssClass { get; set; }

    [Parameter] public string? InputCssClass { get; set; }

    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

    private ElementReference _inputElement;
    private Guid _elementId = Guid.NewGuid();
    private IJSObjectReference? jsObject;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsObject = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Biflow.Ui.Components/TriStateCheckbox.js");
        }
        if (Indeterminate.HasValue && jsObject is not null)
        {
            try
            {
                await jsObject.InvokeVoidAsync("setPropByElement", _inputElement, "indeterminate", Indeterminate.Value);
            }
            catch (JSDisconnectedException) { }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnChange(ChangeEventArgs e)
    {
        Checked = (bool)e.Value!;
        await CheckedChanged.InvokeAsync(Checked);
    }

    public async ValueTask DisposeAsync()
    {
        if (jsObject is not null)
        {
            try
            {
                await jsObject.DisposeAsync();
            }
            catch (JSDisconnectedException) { }
        }
    }
}