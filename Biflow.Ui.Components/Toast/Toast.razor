@using Microsoft.AspNetCore.Components.Web

@namespace Biflow.Ui.Components

<div @attributes=@InputAttributes class="toast show @BgColor @BorderColor @CssClass @(hiding ? "fade-out" : null) @(Title is null ? "d-flex" : null)"
     role="alert" aria-live="assertive" aria-atomic="true">
    @if (Title is not null)
    {
        <div class="toast-header rounded-top @TextColor @BgColor @BorderColor">
            <span class="me-2">
                <CxIcon Icon="Icon" />
            </span>
            <strong class="me-auto">
                @Title
            </strong>
            @if (AutoHideDelay is null)
            {
                <button type="button" class="btn-close" aria-label="Close" @onclick="HideAsync"></button>
            }
        </div>    
    }
    <div class="toast-body rounded @TextColor @BgColor">
        @ChildContent
    </div>
    @if (Title is null && AutoHideDelay is null)
    {
        <button type="button" class="btn-close me-2 m-auto" aria-label="Close" @onclick="HideAsync"></button>
    }
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> InputAttributes { get; set; } = new();

    [Parameter] public string? CssClass { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public string? Title { get; set; }

    [Parameter] public ComponentColor Color { get; set; }

    [Parameter] public int? AutoHideDelay { get; set; }

    [Parameter] public EventCallback OnToastHidden { get; set; }

    private bool hiding;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoHideDelay is not null)
        {
            await Task.Delay((int)AutoHideDelay);
            await HideAsync();
        }
    }

    private async Task HideAsync()
    {
        hiding = true;
        StateHasChanged();
        await Task.Delay(300);
        await OnToastHidden.InvokeAsync();
    }

    private string TextColor => Color switch
    {
        ComponentColor.Success => "text-success-emphasis",
        ComponentColor.Warning => "text-warning-emphasis",
        ComponentColor.Danger => "text-danger-emphasis",
        _ => "text-primary-emphasis"
    };

    private string BgColor => Color switch
    {
        ComponentColor.Success => "bg-success-subtle",
        ComponentColor.Warning => "bg-warning-subtle",
        ComponentColor.Danger => "bg-danger-subtle",
        _ => "bg-primary-subtle"
    };

    private string BorderColor => Color switch
    {
        ComponentColor.Success => "border-success-subtle",
        ComponentColor.Warning => "border-warning-subtle",
        ComponentColor.Danger => "border-danger-subtle",
        _ => "border-primary-subtle"
    };

    private IconBase Icon => Color switch
    {
        ComponentColor.Success => FeatherIcon.CheckCircle,
        ComponentColor.Warning => FeatherIcon.AlertTriangle,
        ComponentColor.Danger => FeatherIcon.AlertOctagon,
        _ => FeatherIcon.Info
    };
}