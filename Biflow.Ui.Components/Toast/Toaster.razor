@namespace Biflow.Ui.Components

@implements IDisposable

@inject ToasterService ToasterService

<div @attributes=@InputAttributes class="toast-container position-fixed bottom-0 end-0 mb-4 me-3 @CssClass">
	@foreach (var message in messages)
	{
		<Toast @key="message.Key"
			OnToastHidden="() => HandleToastHidden(message)"
			Color="message.Color"
			Title="@message.Title"
			AutoHideDelay="message.AutohideDelay">
			@if (message.Text is not null)
			{
				<div class="row">
					<div class="col">
						@message.Text
					</div>
				</div>
			}
			@if (message is ToastActionMessage action)
			{
				var btnColor = action.ButtonColor switch
				{
					ButtonColor.Primary => "btn-primary",
					ButtonColor.Secondary => "btn-secondary",
					ButtonColor.Success => "btn-success",
					ButtonColor.Info => "btn-info",
					ButtonColor.Warning => "btn-warning",
					ButtonColor.Danger => "btn-danger",
					ButtonColor.Light => "btn-light",
					ButtonColor.Dark => "btn-dark",
					ButtonColor.Link => "btn-link",
					_ => "",
				};
				<div class="row">
					<div class="col">
						<button type="button" class="btn @btnColor btn-sm" @onclick="action.ButtonAction">@action.ButtonText</button>
					</div>
				</div>
			}
			else if (message is ToastTemplateMessage template)
			{
				@template.RenderFragment
			}
		</Toast>
	}
</div>

@code {
	[Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> InputAttributes { get; set; } = new();

    [Parameter] public string? CssClass { get; set; }

	private List<ToastMessage> messages = new();

    protected override void OnInitialized()
    {
        ToasterService.OnMessage += HandleMessage;
		ToasterService.OnClear += HandleClear;
	}

    private void HandleMessage(ToastMessage message)
	{
		InvokeAsync(() =>
		{
			messages.Add(message);

			StateHasChanged();
		});
	}

	private void HandleClear()
	{
		InvokeAsync(() =>
		{
			messages.Clear();

			StateHasChanged();
		});
	}

	private void HandleToastHidden(ToastMessage message)
	{
		messages.Remove(message);
	}

	public void Dispose()
	{
		ToasterService.OnMessage -= HandleMessage;
		ToasterService.OnClear -= HandleClear;
	}
}