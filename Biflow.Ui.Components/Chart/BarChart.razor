@using Microsoft.JSInterop
@using System.Text.Json;

@namespace Biflow.Ui.Components

@implements IAsyncDisposable

@inject IJSRuntime Js
@inject ThemeService Theme

<canvas class="w-100" id="@canvasId" width="900" height="400"></canvas>

@code {
    [Parameter] public EventCallback AfterFirstRender { get; set; }

    [Parameter] public BarChartDataset? Dataset { get; set; }

    private BarChartDataset? prevDataset;

    private readonly string canvasId = $"chart_{Guid.NewGuid().ToString()}";
    private readonly JsonSerializerOptions serializationOptions = new()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase
    };
    
    private IJSObjectReference? jsObject;
    private bool shouldRender;

    protected override void OnParametersSet()
    {
        if (Dataset is null || Dataset == prevDataset)
        {
            return;
        }
        prevDataset = Dataset;
        shouldRender = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsObject = await Js.InvokeAsync<IJSObjectReference>("import", "./_content/Biflow.Ui.Components/BarChart.js");
            await AfterFirstRender.InvokeAsync();
        }
        if (jsObject is not null && shouldRender)
        {
            shouldRender = false;
            await DrawAsync();
        }
    }

    public async Task DrawAsync()
    {
        ArgumentNullException.ThrowIfNull(jsObject);
        if (Dataset is null)
        {
            return;
        }

        var series = Dataset.DataPoints.Select(s => new
        {
            label = s.Label,
            data = s.Value,
            color = s.Color
        });
        var seriesJson = JsonSerializer.Serialize(series, serializationOptions);
        var isDarkTheme = Theme.CurrentTheme == Components.Theme.Dark;
        await jsObject.InvokeVoidAsync("draw", canvasId, seriesJson, Dataset.Min, Dataset.Max, Dataset.StepSize, Dataset.TickSuffix, Dataset.Horizontal, isDarkTheme);
    }

    public async ValueTask DisposeAsync()
    {
        if (jsObject is not null)
        {
            try
            {
                await jsObject.DisposeAsync();
            }
            catch (JSDisconnectedException) { }
        }
    }
}