@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop

@namespace Biflow.Ui.Components

@implements IAsyncDisposable

@inject IJSRuntime Js
@inject ContextMenuService ContextMenuService

<div class="dropdown position-absolute">
    <ul @ref="_dropdown" class="dropdown-menu context-menu">
        @_menuContent
    </ul>
</div>

@code {
    private IJSObjectReference? _jsObject;
    private ElementReference _dropdown;
    private DotNetObjectReference<ContextMenu>? _dotNetObject;
    private RenderFragment? _menuContent;
    private MouseEventArgs? _eventArgs;
    private TaskCompletionSource _tcs = new();

    protected override void OnInitialized()
    {
        _dotNetObject = DotNetObjectReference.Create(this);
        ContextMenuService.OnShowContextMenu += HandleContextMenu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsObject = await Js.InvokeAsync<IJSObjectReference>("import", "./_content/Biflow.Ui.Components/ContextMenu.js");
            await _jsObject.InvokeVoidAsync("attachWindowListeners", _dropdown, _dotNetObject);
        }
        if (_eventArgs is not null && _jsObject is not null && _dotNetObject is not null)
        {
            var e = _eventArgs;
            _eventArgs = null; // Reset event arguments before showing menu (could take a while).
            await _jsObject.InvokeVoidAsync("showContextMenu", _dropdown, e.ClientX, e.ClientY, _dotNetObject);
        }
    }

    private async Task HandleContextMenu(MouseEventArgs e, RenderFragment? renderFragment)
    {
        if (renderFragment is null)
        {
            return;
        }
        await InvokeAsync(() =>
        {
            _menuContent = renderFragment;
            _eventArgs = e; // Store event arguments...
            StateHasChanged(); // ...and request rerender.
            return Task.CompletedTask;
        });
        _tcs.SetResult();
        _tcs = new();
        await _tcs.Task;
    }

    [JSInvokable]
    public void OnMenuHidden()
    {
        _tcs.SetResult();
        _tcs = new();
        if (_eventArgs is not null)
        {
            // The menu is waiting for render while it is being requested to be hidden => do nothing.
            return;
        }
        _menuContent = null;
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        ContextMenuService.OnShowContextMenu -= HandleContextMenu;
        if (_jsObject is not null)
        {
            try
            {
                await _jsObject.InvokeVoidAsync("detachWindowListeners");
                await _jsObject.DisposeAsync();
            } catch (JSDisconnectedException) {}
        }
        _dotNetObject?.Dispose();
    }
}