@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop

@namespace Biflow.Ui.Components

@implements IAsyncDisposable

@inject IJSRuntime js
@inject ContextMenuService contextMenuService

<div class="dropdown position-absolute">
    <ul @ref="dropdown" class="dropdown-menu context-menu">
        @menuContent
    </ul>
</div>

@code {
    private IJSObjectReference? jsObject;
    private ElementReference dropdown;
    private DotNetObjectReference<ContextMenu>? dotNetObject;
    private RenderFragment? menuContent;
    private MouseEventArgs? eventArgs;
    private TaskCompletionSource tcs = new();

    protected override void OnInitialized()
    {
        dotNetObject = DotNetObjectReference.Create(this);
        contextMenuService.OnShowContextMenu += HandleContextMenu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsObject = await js.InvokeAsync<IJSObjectReference>("import", "./_content/Biflow.Ui.Components/ContextMenu.js");
            await jsObject.InvokeVoidAsync("attachWindowListeners", dropdown, dotNetObject);
        }
        if (eventArgs is not null && jsObject is not null && dotNetObject is not null)
        {
            var e = eventArgs;
            eventArgs = null; // Reset event arguments before showing menu (could take a while).
            await jsObject.InvokeVoidAsync("showContextMenu", dropdown, e.ClientX, e.ClientY, dotNetObject);
        }
    }

    private async Task HandleContextMenu(MouseEventArgs e, RenderFragment? renderFragment)
    {
        if (renderFragment is null)
        {
            return;
        }
        await InvokeAsync(() =>
        {
            menuContent = renderFragment;
            eventArgs = e; // Store event arguments...
            StateHasChanged(); // ...and request rerender.
            return Task.CompletedTask;
        });
        tcs.SetResult();
        tcs = new();
        await tcs.Task;
    }

    [JSInvokable]
    public void OnMenuHidden()
    {
        tcs.SetResult();
        tcs = new();
        if (eventArgs is not null)
        {
            // The menu is waiting for render while it is being requested to be hidden => do nothing.
            return;
        }
        menuContent = null;
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        contextMenuService.OnShowContextMenu -= HandleContextMenu;
        if (jsObject is not null)
        {
            try
            {
                await jsObject.InvokeVoidAsync("detachWindowListeners");
            } catch (JSDisconnectedException) {}
            await jsObject.DisposeAsync();
        }
        dotNetObject?.Dispose();
    }
}